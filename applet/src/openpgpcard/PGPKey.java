  package openpgpcard ;   import  javacard . framework .  * ;  import  javacard . security .  * ;   public class PGPKey  implements  ISO7816  {   public static final  short  KEY_SIZE = 2048 ;   public static final  short  KEY_SIZE_BYTES =  KEY_SIZE / 8 ;   public static final  short  COMPONENT_BYTES =  KEY_SIZE_BYTES / 2 ;   public static final  short  EXPONENT_SIZE = 17 ;   public static final  short  EXPONENT_SIZE_BYTES = 3 ;   public static final  short  FP_SIZE = 20 ;   private KeyPair  key ;   private   byte  [ ]  fp ;   private   byte  [ ]  time =  { 0x00 , 0x00 , 0x00 , 0x00 } ;   private   byte  [ ]  attributes =  { 0x01 , 0x00 , 0x00 , 0x00 , 0x00 , 0x03 } ;   private static   byte  [ ]  tmpBuf ;   public PGPKey  ( )  {   key =  new KeyPair  (  KeyPair . ALG_RSA_CRT , KEY_SIZE ) ;   fp =  new  byte  [ FP_SIZE ] ;   Util . arrayFillNonAtomic  ( fp ,  (  short ) 0 ,  (  short )  fp . length ,  (  byte ) 0 ) ;   Util . setShort  ( attributes ,  (  short ) 1 , KEY_SIZE ) ;   Util . setShort  ( attributes ,  (  short ) 3 , EXPONENT_SIZE ) ;  if  (  tmpBuf == null )  {   tmpBuf =  JCSystem . makeTransientByteArray  (  (  short )  (  KEY_SIZE_BYTES / 2 ) ,  JCSystem . CLEAR_ON_DESELECT ) ; } }   public void genKeyPair  ( )  {   key . genKeyPair  ( ) ; }   public void setFingerprint  (    byte  [ ] data ,   short offset )  {  if  (   (  short )  (  offset +  fp . length ) >  data . length )   ISOException . throwIt  ( SW_UNKNOWN ) ;   Util . arrayCopyNonAtomic  ( data , offset , fp ,  (  short ) 0 ,  (  short )  fp . length ) ; }   public void setTime  (    byte  [ ] data ,   short offset )  {  if  (   (  short )  (  offset +  time . length ) >  data . length )   ISOException . throwIt  ( SW_UNKNOWN ) ;   Util . arrayCopyNonAtomic  ( data , offset , time ,  (  short ) 0 ,  (  short ) 4 ) ; }   public  short getFingerprint  (    byte  [ ] data ,   short offset )  {   Util . arrayCopyNonAtomic  ( fp ,  (  short ) 0 , data , offset ,  (  short )  fp . length ) ;  return  (  short )  (  offset +  fp . length ) ; }   public  short getTime  (    byte  [ ] data ,   short offset )  {   Util . arrayCopyNonAtomic  ( time ,  (  short ) 0 , data , offset ,  (  short )  time . length ) ;  return  (  short )  (  offset +  time . length ) ; }   public  short getAttributes  (    byte  [ ] data ,   short offset )  {   Util . arrayCopyNonAtomic  ( attributes ,  (  short ) 0 , data , offset ,  (  short )  attributes . length ) ;  return  (  short )  (  offset +  attributes . length ) ; }   public RSAPublicKey getPublic  ( )  {  return  ( RSAPublicKey )  key . getPublic  ( ) ; }   public RSAPrivateCrtKey getPrivate  ( )  {  return  ( RSAPrivateCrtKey )  key . getPrivate  ( ) ; }   public  short getExponentLength  ( )  {  return EXPONENT_SIZE_BYTES ; }   public  short getModulusLength  ( )  {  return KEY_SIZE_BYTES ; }   public void setDP1  (    byte  [ ] buffer ,   short offset ,   short length )  {   Util . arrayFillNonAtomic  ( tmpBuf ,  (  short ) 0 ,  (  short )  tmpBuf . length ,  (  byte ) 0 ) ;   Util . arrayCopyNonAtomic  ( buffer , offset , tmpBuf ,  (  short )  (  COMPONENT_BYTES - length ) , length ) ;    (  ( RSAPrivateCrtKey )  key . getPrivate  ( ) ) . setDP1  ( tmpBuf ,  (  short ) 0 , COMPONENT_BYTES ) ; }   public void setDQ1  (    byte  [ ] buffer ,   short offset ,   short length )  {   Util . arrayFillNonAtomic  ( tmpBuf ,  (  short ) 0 ,  (  short )  tmpBuf . length ,  (  byte ) 0 ) ;   Util . arrayCopyNonAtomic  ( buffer , offset , tmpBuf ,  (  short )  (  COMPONENT_BYTES - length ) , length ) ;    (  ( RSAPrivateCrtKey )  key . getPrivate  ( ) ) . setDQ1  ( tmpBuf ,  (  short ) 0 , COMPONENT_BYTES ) ; }   public void setP  (    byte  [ ] buffer ,   short offset ,   short length )  {    (  ( RSAPrivateCrtKey )  key . getPrivate  ( ) ) . setP  ( buffer , offset , length ) ; }   public void setPQ  (    byte  [ ] buffer ,   short offset ,   short length )  {   Util . arrayFillNonAtomic  ( tmpBuf ,  (  short ) 0 ,  (  short )  tmpBuf . length ,  (  byte ) 0 ) ;   Util . arrayCopyNonAtomic  ( buffer , offset , tmpBuf ,  (  short )  (  COMPONENT_BYTES - length ) , length ) ;    (  ( RSAPrivateCrtKey )  key . getPrivate  ( ) ) . setPQ  ( tmpBuf ,  (  short ) 0 , COMPONENT_BYTES ) ; }   public void setQ  (    byte  [ ] buffer ,   short offset ,   short length )  {    (  ( RSAPrivateCrtKey )  key . getPrivate  ( ) ) . setQ  ( buffer , offset , length ) ; }   public void setExponent  (    byte  [ ] buffer ,   short offset ,   short length )  {    (  ( RSAPublicKey )  key . getPublic  ( ) ) . setExponent  ( buffer , offset , length ) ; }   public void setModulus  (    byte  [ ] buffer ,   short offset ,   short length )  {    (  ( RSAPublicKey )  key . getPublic  ( ) ) . setModulus  ( buffer , offset , length ) ; } }