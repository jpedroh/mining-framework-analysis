  package       com . premiumminds . billy . spain . services . builders . impl ;   import      com . premiumminds . billy . core . exceptions . BillyValidationException ;  import      com . premiumminds . billy . core . exceptions . DuplicateCreditNoteException ;  import      com . premiumminds . billy . core . services . UID ;  import         com . premiumminds . billy . core . services . entities . documents . GenericInvoice . CreditOrDebit ;  import      com . premiumminds . billy . core . util . BillyValidator ;  import      com . premiumminds . billy . core . util . Localizer ;  import      com . premiumminds . billy . core . util . NotOnUpdate ;  import       com . premiumminds . billy . spain . persistence . dao . DAOESCreditReceiptEntry ;  import       com . premiumminds . billy . spain . persistence . dao . DAOESProduct ;  import       com . premiumminds . billy . spain . persistence . dao . DAOESReceipt ;  import       com . premiumminds . billy . spain . persistence . dao . DAOESRegionContext ;  import       com . premiumminds . billy . spain . persistence . dao . DAOESTax ;  import       com . premiumminds . billy . spain . persistence . entities . ESCreditReceiptEntryEntity ;  import       com . premiumminds . billy . spain . persistence . entities . ESReceiptEntity ;  import       com . premiumminds . billy . spain . services . builders . ESCreditReceiptEntryBuilder ;  import       com . premiumminds . billy . spain . services . entities . ESCreditReceiptEntry ;   public class ESCreditReceiptEntryBuilderImpl  <  TBuilder  extends  ESCreditReceiptEntryBuilderImpl  < TBuilder , TEntry > ,  TEntry  extends ESCreditReceiptEntry >  extends  ESGenericInvoiceEntryBuilderImpl  < TBuilder , TEntry , DAOESCreditReceiptEntry , DAOESReceipt >  implements   ESCreditReceiptEntryBuilder  < TBuilder , TEntry >  {   protected static final Localizer  LOCALIZER =  new Localizer  ( "com/premiumminds/billy/core/i18n/FieldNames" ) ;   public ESCreditReceiptEntryBuilderImpl  (  DAOESCreditReceiptEntry daoESCreditReceiptEntry ,  DAOESReceipt daoESReceipt ,  DAOESTax daoESTax ,  DAOESProduct daoESProduct ,  DAOESRegionContext daoESRegionContext )  {  super  ( daoESCreditReceiptEntry , daoESReceipt , daoESTax , daoESProduct , daoESRegionContext ) ; }    @ NotOnUpdate public  @ Override TBuilder setReferenceUID  (  UID referenceUID )  {   BillyValidator . notNull  ( referenceUID ,   ESCreditReceiptEntryBuilderImpl . LOCALIZER . getString  ( "field.invoice_reference" ) ) ;  ESReceiptEntity  i =   this . daoInvoice . get  ( referenceUID ) ;   BillyValidator . found  ( i ,   ESGenericInvoiceBuilderImpl . LOCALIZER . getString  ( "field.invoice_reference" ) ) ;    this . getTypeInstance  ( ) . setReference  ( i ) ;  return  this . getBuilder  ( ) ; }    @ NotOnUpdate public  @ Override TBuilder setReason  (  String reason )  {   BillyValidator . notBlank  ( reason ,   ESCreditReceiptEntryBuilderImpl . LOCALIZER . getString  ( "field.reason" ) ) ;    this . getTypeInstance  ( ) . setReason  ( reason ) ;  return  this . getBuilder  ( ) ; }    @ Override protected void validateInstance  ( )  throws BillyValidationException  {    this . getTypeInstance  ( ) . setCreditOrDebit  (  CreditOrDebit . DEBIT ) ;   super . validateInstance  ( ) ;  ESCreditReceiptEntryEntity  cn =  this . getTypeInstance  ( ) ;   BillyValidator . mandatory  (  cn . getReference  ( ) ,   ESCreditReceiptEntryBuilderImpl . LOCALIZER . getString  ( "field.invoice_reference" ) ) ;   BillyValidator . mandatory  (  cn . getReason  ( ) ,   ESCreditReceiptEntryBuilderImpl . LOCALIZER . getString  ( "field.reason" ) ) ;   this . ValidateESCreditReceiptEntry  ( cn ) ; }   private void ValidateESCreditReceiptEntry  (  ESCreditReceiptEntryEntity cn )  {  if  (   daoEntry . checkCreditReceipt  (  cn . getReference  ( ) ) != null )  {  throw  new DuplicateCreditNoteException  ( ) ; } }    @ Override protected ESCreditReceiptEntryEntity getTypeInstance  ( )  {  return  ( ESCreditReceiptEntryEntity )  super . getTypeInstance  ( ) ; } }