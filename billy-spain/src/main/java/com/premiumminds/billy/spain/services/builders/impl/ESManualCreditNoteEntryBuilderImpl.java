  package       com . premiumminds . billy . spain . services . builders . impl ;   import      com . premiumminds . billy . core . exceptions . BillyValidationException ;  import      com . premiumminds . billy . core . exceptions . DuplicateCreditNoteException ;  import      com . premiumminds . billy . core . services . UID ;  import         com . premiumminds . billy . core . services . entities . documents . GenericInvoice . CreditOrDebit ;  import      com . premiumminds . billy . core . util . BillyValidator ;  import      com . premiumminds . billy . core . util . NotOnUpdate ;  import       com . premiumminds . billy . spain . persistence . dao . DAOESCreditNoteEntry ;  import       com . premiumminds . billy . spain . persistence . dao . DAOESInvoice ;  import       com . premiumminds . billy . spain . persistence . dao . DAOESProduct ;  import       com . premiumminds . billy . spain . persistence . dao . DAOESRegionContext ;  import       com . premiumminds . billy . spain . persistence . dao . DAOESTax ;  import       com . premiumminds . billy . spain . persistence . entities . ESCreditNoteEntryEntity ;  import       com . premiumminds . billy . spain . persistence . entities . ESInvoiceEntity ;  import       com . premiumminds . billy . spain . services . builders . ESManualCreditNoteEntryBuilder ;  import       com . premiumminds . billy . spain . services . entities . ESCreditNoteEntry ;   public class ESManualCreditNoteEntryBuilderImpl  <  TBuilder  extends  ESManualCreditNoteEntryBuilderImpl  < TBuilder , TEntry > ,  TEntry  extends ESCreditNoteEntry >  extends  ESManualEntryBuilderImpl  < TBuilder , TEntry , DAOESCreditNoteEntry , DAOESInvoice >  implements   ESManualCreditNoteEntryBuilder  < TBuilder , TEntry >  {   public ESManualCreditNoteEntryBuilderImpl  (  DAOESCreditNoteEntry daoESCreditNoteEntry ,  DAOESInvoice daoESInvoice ,  DAOESTax daoESTax ,  DAOESProduct daoESProduct ,  DAOESRegionContext daoESRegionContext )  {  super  ( daoESCreditNoteEntry , daoESInvoice , daoESTax , daoESProduct , daoESRegionContext ) ; }    @ NotOnUpdate public  @ Override TBuilder setReferenceUID  (  UID referenceUID )  {   BillyValidator . notNull  ( referenceUID ,   ESCreditNoteEntryBuilderImpl . LOCALIZER . getString  ( "field.invoice_reference" ) ) ;  ESInvoiceEntity  i =   this . daoInvoice . get  ( referenceUID ) ;   BillyValidator . found  ( i ,   ESGenericInvoiceBuilderImpl . LOCALIZER . getString  ( "field.invoice_reference" ) ) ;    this . getTypeInstance  ( ) . setReference  ( i ) ;  return  this . getBuilder  ( ) ; }    @ NotOnUpdate public  @ Override TBuilder setReason  (  String reason )  {   BillyValidator . notBlank  ( reason ,   ESCreditNoteEntryBuilderImpl . LOCALIZER . getString  ( "field.reason" ) ) ;    this . getTypeInstance  ( ) . setReason  ( reason ) ;  return  this . getBuilder  ( ) ; }    @ Override protected ESCreditNoteEntryEntity getTypeInstance  ( )  {  return  ( ESCreditNoteEntryEntity )  super . getTypeInstance  ( ) ; }    @ Override protected void validateInstance  ( )  throws BillyValidationException  {    this . getTypeInstance  ( ) . setCreditOrDebit  (  CreditOrDebit . DEBIT ) ;   super . validateInstance  ( ) ;  ESCreditNoteEntryEntity  cn =  this . getTypeInstance  ( ) ;   BillyValidator . mandatory  (  cn . getQuantity  ( ) ,   ESGenericInvoiceEntryBuilderImpl . LOCALIZER . getString  ( "field.quantity" ) ) ;   BillyValidator . mandatory  (  cn . getUnitOfMeasure  ( ) ,   ESGenericInvoiceEntryBuilderImpl . LOCALIZER . getString  ( "field.unit" ) ) ;   BillyValidator . mandatory  (  cn . getProduct  ( ) ,   ESGenericInvoiceEntryBuilderImpl . LOCALIZER . getString  ( "field.product" ) ) ;   BillyValidator . notEmpty  (  cn . getTaxes  ( ) ,   ESGenericInvoiceEntryBuilderImpl . LOCALIZER . getString  ( "field.tax" ) ) ;   BillyValidator . mandatory  (  cn . getTaxAmount  ( ) ,   ESGenericInvoiceEntryBuilderImpl . LOCALIZER . getString  ( "field.tax" ) ) ;   BillyValidator . mandatory  (  cn . getTaxPointDate  ( ) ,   ESGenericInvoiceEntryBuilderImpl . LOCALIZER . getString  ( "field.tax_point_date" ) ) ;   BillyValidator . mandatory  (  cn . getReference  ( ) ,   ESCreditNoteEntryBuilderImpl . LOCALIZER . getString  ( "field.invoice_reference" ) ) ;   BillyValidator . mandatory  (  cn . getReason  ( ) ,   ESCreditNoteEntryBuilderImpl . LOCALIZER . getString  ( "field.reason" ) ) ;   this . ValidateESCreditNoteEntry  ( cn ) ; }   private void ValidateESCreditNoteEntry  (  ESCreditNoteEntryEntity cn )  {  if  (    this . daoEntry . checkCreditNote  (  cn . getReference  ( ) ) != null )  {  throw  new DuplicateCreditNoteException  ( ) ; } } }