  package    io . tracee . contextlogger . watchdog ;   import   io . tracee . Tracee ;  import   io . tracee . TraceeBackend ;  import    io . tracee . contextlogger . TraceeContextLogger ;  import     io . tracee . contextlogger . api . ImplicitContext ;  import      io . tracee . contextlogger . contextprovider . aspectj . WatchdogDataWrapper ;  import      io . tracee . contextlogger . watchdog . util . WatchdogUtils ;  import    org . aspectj . lang . ProceedingJoinPoint ;  import     org . aspectj . lang . annotation . Around ;  import     org . aspectj . lang . annotation . Aspect ;  import     org . aspectj . lang . annotation . Pointcut ;    @ Aspect public class WatchdogAspect  {   private final boolean  active ;   public WatchdogAspect  ( )  {  this  (  Boolean . valueOf  (  System . getProperty  (  Constants . SYSTEM_PROPERTY_IS_ACTIVE , "true" ) ) ) ; }  WatchdogAspect  (  boolean active )  {    this . active = active ; }    @ SuppressWarnings  ( "unused" )  @ Pointcut  ( "(execution(* *(..)) && @annotation(io.tracee.contextlogger.watchdog.Watchdog))" ) void withinWatchdogAnnotatedMethods  ( )  { }    @ SuppressWarnings  ( "unused" )  @ Pointcut  ( "within(@io.tracee.contextlogger.watchdog.Watchdog *)" ) void withinClassWithWatchdogAnnotation  ( )  { }    @ SuppressWarnings  ( "unused" )  @ Pointcut  ( "execution(public * *(..))" ) void publicMethods  ( )  { }    @ SuppressWarnings  ( "unused" )  @ Around  ( "withinWatchdogAnnotatedMethods() || (publicMethods() && withinClassWithWatchdogAnnotation()) " ) public Object guard  (   final ProceedingJoinPoint proceedingJoinPoint )  throws Throwable  {  try  {  return  proceedingJoinPoint . proceed  ( ) ; }  catch (   final  Throwable e )  {  if  ( active )  {   final TraceeBackend  traceeBackend =  Tracee . getBackend  ( ) ;  try  {  Watchdog  watchdog =  WatchdogUtils . getWatchdogAnnotation  ( proceedingJoinPoint ) ;  if  (  WatchdogUtils . checkProcessWatchdog  ( watchdog , proceedingJoinPoint , e ) )  {  String  annotatedId =    watchdog . id  ( ) . isEmpty  ( ) ? null :  watchdog . id  ( ) ;   sendErrorReportToConnectors  ( traceeBackend , proceedingJoinPoint , annotatedId , e ) ;   writeMethodCallToMdc  ( traceeBackend , proceedingJoinPoint , annotatedId ) ; } }  catch (   Throwable error )  {     traceeBackend . getLoggerFactory  ( ) . getLogger  (  WatchdogAspect . class ) . error  ( "error" , error ) ; } }  throw e ; } }  void writeMethodCallToMdc  (  TraceeBackend traceeBackend ,  ProceedingJoinPoint proceedingJoinPoint ,  String annotatedId )  {  String  json =   TraceeContextLogger . createDefault  ( ) . createJson  (  WatchdogDataWrapper . wrap  ( annotatedId , proceedingJoinPoint ) ) ;  String  existingContent =  traceeBackend . get  (  Constants . TRACEE_ATTRIBUTE_NAME ) ;   traceeBackend . put  (  Constants . TRACEE_ATTRIBUTE_NAME ,   existingContent != null ?   existingContent +  Constants . SEPARATOR + json : json ) ; }  void sendErrorReportToConnectors  (  TraceeBackend traceeBackend ,  ProceedingJoinPoint proceedingJoinPoint ,  String annotatedId ,  Throwable e )  {    TraceeContextLogger . createDefault  ( ) . logJsonWithPrefixedMessage  ( "TRACEE WATCHDOG ERROR CONTEXT LISTENER :" ,  ImplicitContext . COMMON ,  ImplicitContext . TRACEE ,  WatchdogDataWrapper . wrap  ( annotatedId , proceedingJoinPoint ) , e ) ; } }