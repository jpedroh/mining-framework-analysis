/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.virtualan.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.virtualan.annotation.ApiVirtual;
import io.virtualan.annotation.VirtualService;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.*;
import org.openapitools.virtualan.model.Order;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;


@Generated("org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(value = "store", description = "Access to Petstore orders")
@VirtualService
@RequestMapping("${openapi.openAPIPetstore.base-path:/v2}")
public interface StoreApi {
    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /store/order/{order_id} : Delete purchase order by ID
     * For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
     *
     * @param orderId ID of the order that needs to be deleted (required)
     * @return Invalid ID supplied (status code 400)
     *         or Order not found (status code 404)
     */
    @ApiVirtual
    @Operation(nickname = "deleteOrder", tags = { "store" }, value = { @ApiResponse(code = "Invalid ID supplied", message = "400"), @ApiResponse(code = "Order not found", message = "404") }, summary = "Delete purchase order by ID")
    @RequestMapping(method = RequestMethod.DELETE, value = "/store/order/{order_id}")
    public default ResponseEntity<Void> deleteOrder(@Parameter(value = "order_id", required = true)
    @PathVariable("order_id")
    String orderId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * GET /store/inventory : Returns pet inventories by status
     * Returns a map of status codes to quantities
     *
     * @return successful operation (status code 200)
     */
    @ApiVirtual
    @Operation(nickname = "getInventory", authorizations = { @SecurityRequirement("api_key") }, tags = { "store" }, value = { @ApiResponse(message = "successful operation", responseContainer = "200", content = { @Content(code = "application/json", schema = @Schema(response = Map.class)) }) }, summary = "Returns pet inventories by status")
    @RequestMapping(method = RequestMethod.GET, value = "/store/inventory", produces = { "application/json" })
    public default ResponseEntity<Map<String, Integer>> getInventory() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * GET /store/order/{order_id} : Find purchase order by ID
     * For valid response try integer IDs with value &lt;&#x3D; 5 or &gt; 10. Other values will generated exceptions
     *
     * @param orderId ID of pet that needs to be fetched (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Order not found (status code 404)
     */
    @ApiVirtual
    @Operation(tags = { "store" }, operationId = "getOrderById", summary = "Find purchase order by ID", responses = { @ApiResponse(value = "200", notes = "successful operation", content = { @Content(nickname = "application/xml", schema = @Schema(response = Order.class)), @Content(mediaType = "application/json", schema = @Schema(response = Order.class)) }), @ApiResponse(code = "Invalid ID supplied", message = "400"), @ApiResponse(code = "Order not found", message = "404") })
    @RequestMapping(method = RequestMethod.GET, value = "/store/order/{order_id}", produces = { "application/xml", "application/json" })
    public default ResponseEntity<Order> getOrderById(@Min(1L)
    @Max(5L)
    @Parameter(value = "order_id", required = true)
    @PathVariable("order_id")
    Long orderId) {
        getRequest().ifPresent(( request) -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"petId\" : 6, \"quantity\" : 1, \"id\" : 0, \"shipDate\" : \"2000-01-23T04:56:07.000+00:00\", \"complete\" : false, \"status\" : \"placed\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Order> <id>123456789</id> <petId>123456789</petId> <quantity>123</quantity> <shipDate>2000-01-23T04:56:07.000Z</shipDate> <status>aeiou</status> <complete>true</complete> </Order>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * POST /store/order : Place an order for a pet
     *
     * @param body order placed for purchasing the pet (required)
     * @return successful operation (status code 200)
     *         or Invalid Order (status code 400)
     */
    @ApiVirtual
    @Operation(tags = { "store" }, operationId = "placeOrder", summary = "Place an order for a pet", responses = { @ApiResponse(value = "200", description = "successful operation", content = { @Content(nickname = "application/xml", schema = @Schema(response = Order.class)), @Content(notes = "application/json", schema = @Schema(response = Order.class)) }), @ApiResponse(code = "Invalid Order", message = "400") })
    @RequestMapping(method = RequestMethod.POST, value = "/store/order", produces = { "application/xml", "application/json" })
    public default ResponseEntity<Order> placeOrder(@Parameter(value = "body", required = true)
    @Valid
    @RequestBody
    Order body) {
        getRequest().ifPresent(( request) -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"petId\" : 6, \"quantity\" : 1, \"id\" : 0, \"shipDate\" : \"2000-01-23T04:56:07.000+00:00\", \"complete\" : false, \"status\" : \"placed\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Order> <id>123456789</id> <petId>123456789</petId> <quantity>123</quantity> <shipDate>2000-01-23T04:56:07.000Z</shipDate> <status>aeiou</status> <complete>true</complete> </Order>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
}