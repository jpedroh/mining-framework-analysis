/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.virtualan.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.virtualan.annotation.ApiVirtual;
import io.virtualan.annotation.VirtualService;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.*;
import org.openapitools.virtualan.model.Client;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;


@Generated("org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(value = "fake_classname_test", description = "the fake_classname_test API")
@VirtualService
@RequestMapping("${openapi.openAPIPetstore.base-path:/v2}")
public interface FakeClassnameTestApi {
    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PATCH /fake_classname_test : To test class name in snake case
     * To test class name in snake case
     *
     * @param body client model (required)
     * @return successful operation (status code 200)
     */
    @ApiVirtual
    @Operation(nickname = "testClassname", authorizations = { @SecurityRequirement("api_key_query") }, tags = { "fake_classname_tags 123#$%^" }, value = { @ApiResponse(message = "successful operation", responseCode = "200", content = { @Content(code = "application/json", schema = @Schema(response = Client.class)) }) }, summary = "To test class name in snake case")
    @RequestMapping(method = RequestMethod.PATCH, value = "/fake_classname_test", produces = { "application/json" }, consumes = { "application/json" })
    public default ResponseEntity<Client> testClassname(@Parameter(value = "body", required = true)
    @Valid
    @RequestBody
    Client body) {
        getRequest().ifPresent(( request) -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"client\" : \"client\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
}