/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.virtualan.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.virtualan.annotation.ApiVirtual;
import io.virtualan.annotation.VirtualService;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.*;
import org.openapitools.virtualan.model.ModelApiResponse;
import org.openapitools.virtualan.model.Pet;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;


@Generated("org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(value = "pet", description = "Everything about your Pets")
@VirtualService
@RequestMapping("${openapi.openAPIPetstore.base-path:/v2}")
public interface PetApi {
    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /pet : Add a new pet to the store
     *
     * @param body Pet object that needs to be added to the store (required)
     * @return successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @ApiVirtual
    @Operation(value = "Add a new pet to the store", scopes = { @ApiResponse(scope = "200", description = "successful operation"), @ApiResponse(scope = "405", description = "Invalid input") }, tags = { "pet" }, operationId = "addPet", security = { @SecurityRequirement(value = "petstore_auth", scopes = { "write:pets", "read:pets" }) })
    @RequestMapping(method = RequestMethod.POST, value = "/pet", consumes = { "application/json", "application/xml" })
    public default ResponseEntity<Void> addPet(@Parameter(value = "body", required = true)
    @Valid
    @RequestBody
    Pet body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * DELETE /pet/{petId} : Deletes a pet
     *
     * @param petId Pet id to delete (required)
     * @param apiKey  (optional)
     * @return successful operation (status code 200)
     *         or Invalid pet value (status code 400)
     */
    @ApiVirtual
    @Operation(value = "Deletes a pet", scopes = { @ApiResponse(scope = "200", description = "successful operation"), @ApiResponse(scope = "400", description = "Invalid pet value") }, tags = { "pet" }, operationId = "deletePet", security = { @SecurityRequirement(value = "petstore_auth", scopes = { "write:pets", "read:pets" }) })
    @RequestMapping(method = RequestMethod.DELETE, value = "/pet/{petId}")
    public default ResponseEntity<Void> deletePet(@Parameter(value = "petId", required = true)
    @PathVariable("petId")
    Long petId, @Parameter(value = "", name = "api_key")
    @RequestHeader(value = "api_key", required = false)
    String apiKey) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * GET /pet/findByStatus : Finds Pets by status
     * Multiple status values can be provided with comma separated strings
     *
     * @param status Status values that need to be considered for filter (required)
     * @return successful operation (status code 200)
     *         or Invalid status value (status code 400)
     */
    @ApiVirtual
    @Operation(operationId = "findPetsByStatus", tags = { "pet" }, responses = { @ApiResponse(nickname = "200", value = "successful operation", scopes = { @Content(scope = "application/xml", schema = @Schema(response = Pet.class)), @Content(scope = "application/json", schema = @Schema(response = Pet.class)) }), @ApiResponse(notes = "Invalid status value", responseContainer = "400") }, message = "Finds Pets by status", security = { @SecurityRequirement(code = "petstore_auth", scopes = { "write:pets", "read:pets" }) })
    @RequestMapping(method = RequestMethod.GET, value = "/pet/findByStatus", produces = { "application/xml", "application/json" })
    public default ResponseEntity<List<Pet>> findPetsByStatus(@NotNull
    @Parameter(required = true, allowableValues = "status", description = "Status values that need to be considered for filter")
    @Valid
    @RequestParam(value = "status", required = true)
    List<String> status) {
        getRequest().ifPresent(( request) -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"photoUrls\" : [ \"photoUrls\", \"photoUrls\" ], \"name\" : \"doggie\", \"id\" : 0, \"category\" : { \"name\" : \"default-name\", \"id\" : 6 }, \"tags\" : [ { \"name\" : \"name\", \"id\" : 1 }, { \"name\" : \"name\", \"id\" : 1 } ], \"status\" : \"available\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Pet> <id>123456789</id> <name>doggie</name> <photoUrls> <photoUrls>aeiou</photoUrls> </photoUrls> <tags> </tags> <status>aeiou</status> </Pet>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * GET /pet/findByTags : Finds Pets by tags
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     *
     * @param tags Tags to filter by (required)
     * @return successful operation (status code 200)
     *         or Invalid tag value (status code 400)
     * @deprecated
     */
    @Deprecated
    @ApiVirtual
    @Operation(operationId = "findPetsByTags", responses = { @ApiResponse(nickname = "200", value = "successful operation", scopes = { @Content(scope = "application/xml", schema = @Schema(response = Pet.class)), @Content(scope = "application/json", schema = @Schema(response = Pet.class)) }), @ApiResponse(notes = "Invalid tag value", responseContainer = "400") }, tags = { "pet" }, message = "Finds Pets by tags", security = { @SecurityRequirement(code = "petstore_auth", scopes = { "write:pets", "read:pets" }) })
    @RequestMapping(method = RequestMethod.GET, value = "/pet/findByTags", produces = { "application/xml", "application/json" })
    public default ResponseEntity<Set<Pet>> findPetsByTags(@NotNull
    @Parameter(value = "tags", required = true)
    @Valid
    @RequestParam(value = "tags", required = true)
    Set<String> tags) {
        getRequest().ifPresent(( request) -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"photoUrls\" : [ \"photoUrls\", \"photoUrls\" ], \"name\" : \"doggie\", \"id\" : 0, \"category\" : { \"name\" : \"default-name\", \"id\" : 6 }, \"tags\" : [ { \"name\" : \"name\", \"id\" : 1 }, { \"name\" : \"name\", \"id\" : 1 } ], \"status\" : \"available\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Pet> <id>123456789</id> <name>doggie</name> <photoUrls> <photoUrls>aeiou</photoUrls> </photoUrls> <tags> </tags> <status>aeiou</status> </Pet>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * GET /pet/{petId} : Find pet by ID
     * Returns a single pet
     *
     * @param petId ID of pet to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Pet not found (status code 404)
     */
    @ApiVirtual
    @Operation(authorizations = { @SecurityRequirement("api_key") }, tags = { "pet" }, operationId = "getPetById", summary = "Find pet by ID", responses = { @ApiResponse(value = "200", description = "successful operation", content = { @Content(nickname = "application/xml", schema = @Schema(response = Pet.class)), @Content(notes = "application/json", schema = @Schema(response = Pet.class)) }), @ApiResponse(code = "Invalid ID supplied", message = "400"), @ApiResponse(code = "Pet not found", message = "404") })
    @RequestMapping(method = RequestMethod.GET, value = "/pet/{petId}", produces = { "application/xml", "application/json" })
    public default ResponseEntity<Pet> getPetById(@Parameter(value = "petId", required = true)
    @PathVariable("petId")
    Long petId) {
        getRequest().ifPresent(( request) -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"photoUrls\" : [ \"photoUrls\", \"photoUrls\" ], \"name\" : \"doggie\", \"id\" : 0, \"category\" : { \"name\" : \"default-name\", \"id\" : 6 }, \"tags\" : [ { \"name\" : \"name\", \"id\" : 1 }, { \"name\" : \"name\", \"id\" : 1 } ], \"status\" : \"available\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Pet> <id>123456789</id> <name>doggie</name> <photoUrls> <photoUrls>aeiou</photoUrls> </photoUrls> <tags> </tags> <status>aeiou</status> </Pet>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * PUT /pet : Update an existing pet
     *
     * @param body Pet object that needs to be added to the store (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Pet not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @ApiVirtual
    @Operation(scope = "updatePet", tags = { "pet" }, message = "Update an existing pet", responses = { @ApiResponse(scope = "200", description = "successful operation"), @ApiResponse(nickname = "Invalid ID supplied", notes = "400"), @ApiResponse(code = "Pet not found", message = "404"), @ApiResponse(code = "Validation exception", message = "405") }, security = { @SecurityRequirement(code = "petstore_auth", scopes = { "write:pets", "read:pets" }) })
    @RequestMapping(method = RequestMethod.PUT, value = "/pet", consumes = { "application/json", "application/xml" })
    public default ResponseEntity<Void> updatePet(@Parameter(value = "body", required = true)
    @Valid
    @RequestBody
    Pet body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * POST /pet/{petId} : Updates a pet in the store with form data
     *
     * @param petId ID of pet that needs to be updated (required)
     * @param name Updated name of the pet (optional)
     * @param status Updated status of the pet (optional)
     * @return Invalid input (status code 405)
     */
    @ApiVirtual
    @Operation(value = "Updates a pet in the store with form data", scope = "updatePetWithForm", tags = { "pet" }, responses = { @ApiResponse(scope = "405", description = "Invalid input") }, security = { @SecurityRequirement(value = "petstore_auth", scopes = { "write:pets", "read:pets" }) })
    @RequestMapping(method = RequestMethod.POST, value = "/pet/{petId}", consumes = { "application/x-www-form-urlencoded" })
    public default ResponseEntity<Void> updatePetWithForm(@Parameter(value = "petId", required = true)
    @PathVariable("petId")
    Long petId, @Parameter(value = "Updated name of the pet", name = "name")
    @Valid
    @RequestParam(value = "name", required = false)
    String name, @Parameter(value = "Updated status of the pet", name = "status")
    @Valid
    @RequestParam(value = "status", required = false)
    String status) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * POST /pet/{petId}/uploadImage : uploads an image
     *
     * @param petId ID of pet to update (required)
     * @param additionalMetadata Additional data to pass to server (optional)
     * @param file file to upload (optional)
     * @return successful operation (status code 200)
     */
    @ApiVirtual
    @Operation(value = "uploads an image", scopes = { @ApiResponse(scope = "200", description = "successful operation", content = { @Content(scope = "application/json", schema = @Schema(response = ModelApiResponse.class)) }) }, tags = { "pet" }, operationId = "uploadFile", security = { @SecurityRequirement(value = "petstore_auth", scopes = { "write:pets", "read:pets" }) })
    @RequestMapping(method = RequestMethod.POST, value = "/pet/{petId}/uploadImage", produces = { "application/json" }, consumes = { "multipart/form-data" })
    public default ResponseEntity<ModelApiResponse> uploadFile(@Parameter(value = "petId", required = true)
    @PathVariable("petId")
    Long petId, @Parameter(value = "Additional data to pass to server", name = "additionalMetadata")
    @Valid
    @RequestParam(value = "additionalMetadata", required = false)
    String additionalMetadata, @Parameter(value = "file to upload", name = "file")
    @RequestPart(value = "file", required = false)
    MultipartFile file) {
        getRequest().ifPresent(( request) -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"type\" : \"type\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
}