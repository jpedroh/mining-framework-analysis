  package   org . openapitools . api ;   import    org . openapitools . model . ModelApiResponse ;  import    org . openapitools . model . Pet ;  import   io . swagger . annotations .  * ;  import    org . springframework . http . HttpStatus ;  import    org . springframework . http . MediaType ;  import    org . springframework . http . ResponseEntity ;  import     org . springframework . validation . annotation . Validated ;  import     org . springframework . web . bind . annotation .  * ;  import      org . springframework . web . context . request . NativeWebRequest ;  import     org . springframework . web . multipart . MultipartFile ;  import   javax . validation . Valid ;  import   javax . validation . constraints .  * ;  import   java . util . List ;  import   java . util . Map ;  import   java . util . Optional ;  import   javax . annotation . Generated ;    @ Validated  @ Api  (  value = "pet" ,  description = "Everything about your Pets" ) public  @ Generated  (  value = "org.openapitools.codegen.languages.SpringCodegen" )  @ RequestMapping  ( "${openapi.openAPIPetstore.base-path:/v2}" ) interface PetApi  {   default  Optional  < NativeWebRequest > getRequest  ( )  {  return  Optional . empty  ( ) ; }    @ ApiOperation  (  tags =  { "pet" } ,  value = "Add a new pet to the store" ,  nickname = "addPet" ,  notes = "" ,  authorizations =  {  @ Authorization  (  value = "petstore_auth" ,  scopes =  {  @ AuthorizationScope  (  scope = "write:pets" ,  description = "modify pets in your account" ) ,  @ AuthorizationScope  (  scope = "read:pets" ,  description = "read your pets" ) } ) } )  @ ApiResponses  (  {  @ ApiResponse  (  code = 405 ,  message = "Invalid input" ) } )  @ RequestMapping  (  method =  RequestMethod . POST ,  value = "/pet" ,  consumes = "application/json" ) default  ResponseEntity  < Void > addPet  (    @ ApiParam  (  value = "Pet object that needs to be added to the store" ,  required = true )  @ Valid  @ RequestBody Pet body )  {  return  new  ResponseEntity  < >  (  HttpStatus . NOT_IMPLEMENTED ) ; }    @ ApiOperation  (  tags =  { "pet" } ,  value = "Deletes a pet" ,  nickname = "deletePet" ,  notes = "" ,  authorizations =  {  @ Authorization  (  value = "petstore_auth" ,  scopes =  {  @ AuthorizationScope  (  scope = "write:pets" ,  description = "modify pets in your account" ) ,  @ AuthorizationScope  (  scope = "read:pets" ,  description = "read your pets" ) } ) } )  @ ApiResponses  (  {  @ ApiResponse  (  code = 400 ,  message = "Invalid pet value" ) } )  @ RequestMapping  (  method =  RequestMethod . DELETE ,  value = "/pet/{petId}" ) default  ResponseEntity  < Void > deletePet  (    @ ApiParam  (  value = "Pet id to delete" ,  required = true )  @ PathVariable  ( "petId" ) Long petId ,    @ ApiParam  (  value = "" )  @ RequestHeader  (  value = "api_key" ,  required = false ) String apiKey )  {  return  new  ResponseEntity  < >  (  HttpStatus . NOT_IMPLEMENTED ) ; }    @ ApiOperation  (  tags =  { "pet" } ,  value = "Finds Pets by status" ,  nickname = "findPetsByStatus" ,  notes = "Multiple status values can be provided with comma separated strings" ,  response =  Pet . class ,  responseContainer = "List" ,  authorizations =  {  @ Authorization  (  value = "petstore_auth" ,  scopes =  {  @ AuthorizationScope  (  scope = "write:pets" ,  description = "modify pets in your account" ) ,  @ AuthorizationScope  (  scope = "read:pets" ,  description = "read your pets" ) } ) } )  @ ApiResponses  (  {  @ ApiResponse  (  code = 200 ,  message = "successful operation" ,  response =  Pet . class ,  responseContainer = "List" ) ,  @ ApiResponse  (  code = 400 ,  message = "Invalid status value" ) } )  @ RequestMapping  (  method =  RequestMethod . GET ,  value = "/pet/findByStatus" ,  produces = "application/json" ) default  ResponseEntity  <  List  < Pet > > findPetsByStatus  (    @ NotNull  @ ApiParam  (  value = "Status values that need to be considered for filter" ,  required = true ,  allowableValues = "available, pending, sold" )  @ Valid  @ RequestParam  (  value = "status" ,  required = true )  List  < String > status )  {    getRequest  ( ) . ifPresent  (  request ->  {  for ( MediaType mediaType :  MediaType . parseMediaTypes  (  request . getHeader  ( "Accept" ) ) )  {  if  (  mediaType . isCompatibleWith  (  MediaType . valueOf  ( "application/json" ) ) )  {  String  exampleString = "{ \"photoUrls\" : [ \"photoUrls\", \"photoUrls\" ], \"name\" : \"doggie\", \"id\" : 0, \"category\" : { \"name\" : \"name\", \"id\" : 6 }, \"tags\" : [ { \"name\" : \"name\", \"id\" : 1 }, { \"name\" : \"name\", \"id\" : 1 } ], \"status\" : \"available\" }" ;   ApiUtil . setExampleResponse  ( request , "application/json" , exampleString ) ;  break ; }  if  (  mediaType . isCompatibleWith  (  MediaType . valueOf  ( "application/xml" ) ) )  {  String  exampleString = "<Pet> <id>123456789</id> <name>doggie</name> <photoUrls> <photoUrls>aeiou</photoUrls> </photoUrls> <tags> </tags> <status>aeiou</status> </Pet>" ;   ApiUtil . setExampleResponse  ( request , "application/xml" , exampleString ) ;  break ; } } } ) ;  return  new  ResponseEntity  < >  (  HttpStatus . NOT_IMPLEMENTED ) ; }    @ ApiOperation  (  tags =  { "pet" } ,  value = "Finds Pets by tags" ,  nickname = "findPetsByTags" ,  notes = "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing." ,  response =  Pet . class ,  responseContainer = "List" ,  authorizations =  {  @ Authorization  (  value = "petstore_auth" ,  scopes =  {  @ AuthorizationScope  (  scope = "write:pets" ,  description = "modify pets in your account" ) ,  @ AuthorizationScope  (  scope = "read:pets" ,  description = "read your pets" ) } ) } )  @ ApiResponses  (  {  @ ApiResponse  (  code = 200 ,  message = "successful operation" ,  response =  Pet . class ,  responseContainer = "List" ) ,  @ ApiResponse  (  code = 400 ,  message = "Invalid tag value" ) } )  @ RequestMapping  (  method =  RequestMethod . GET ,  value = "/pet/findByTags" ,  produces = "application/json" ) default  @ Deprecated  ResponseEntity  <  List  < Pet > > findPetsByTags  (    @ NotNull  @ ApiParam  (  value = "Tags to filter by" ,  required = true )  @ Valid  @ RequestParam  (  value = "tags" ,  required = true )  List  < String > tags )  {    getRequest  ( ) . ifPresent  (  request ->  {  for ( MediaType mediaType :  MediaType . parseMediaTypes  (  request . getHeader  ( "Accept" ) ) )  {  if  (  mediaType . isCompatibleWith  (  MediaType . valueOf  ( "application/json" ) ) )  {  String  exampleString = "{ \"photoUrls\" : [ \"photoUrls\", \"photoUrls\" ], \"name\" : \"doggie\", \"id\" : 0, \"category\" : { \"name\" : \"name\", \"id\" : 6 }, \"tags\" : [ { \"name\" : \"name\", \"id\" : 1 }, { \"name\" : \"name\", \"id\" : 1 } ], \"status\" : \"available\" }" ;   ApiUtil . setExampleResponse  ( request , "application/json" , exampleString ) ;  break ; }  if  (  mediaType . isCompatibleWith  (  MediaType . valueOf  ( "application/xml" ) ) )  {  String  exampleString = "<Pet> <id>123456789</id> <name>doggie</name> <photoUrls> <photoUrls>aeiou</photoUrls> </photoUrls> <tags> </tags> <status>aeiou</status> </Pet>" ;   ApiUtil . setExampleResponse  ( request , "application/xml" , exampleString ) ;  break ; } } } ) ;  return  new  ResponseEntity  < >  (  HttpStatus . NOT_IMPLEMENTED ) ; }    @ ApiOperation  (  tags =  { "pet" } ,  value = "Find pet by ID" ,  nickname = "getPetById" ,  notes = "Returns a single pet" ,  response =  Pet . class ,  authorizations =  {  @ Authorization  (  value = "api_key" ) } )  @ ApiResponses  (  {  @ ApiResponse  (  code = 200 ,  message = "successful operation" ,  response =  Pet . class ) ,  @ ApiResponse  (  code = 400 ,  message = "Invalid ID supplied" ) ,  @ ApiResponse  (  code = 404 ,  message = "Pet not found" ) } )  @ RequestMapping  (  method =  RequestMethod . GET ,  value = "/pet/{petId}" ,  produces = "application/json" ) default  ResponseEntity  < Pet > getPetById  (    @ ApiParam  (  value = "ID of pet to return" ,  required = true )  @ PathVariable  ( "petId" ) Long petId )  {    getRequest  ( ) . ifPresent  (  request ->  {  for ( MediaType mediaType :  MediaType . parseMediaTypes  (  request . getHeader  ( "Accept" ) ) )  {  if  (  mediaType . isCompatibleWith  (  MediaType . valueOf  ( "application/json" ) ) )  {  String  exampleString = "{ \"photoUrls\" : [ \"photoUrls\", \"photoUrls\" ], \"name\" : \"doggie\", \"id\" : 0, \"category\" : { \"name\" : \"name\", \"id\" : 6 }, \"tags\" : [ { \"name\" : \"name\", \"id\" : 1 }, { \"name\" : \"name\", \"id\" : 1 } ], \"status\" : \"available\" }" ;   ApiUtil . setExampleResponse  ( request , "application/json" , exampleString ) ;  break ; }  if  (  mediaType . isCompatibleWith  (  MediaType . valueOf  ( "application/xml" ) ) )  {  String  exampleString = "<Pet> <id>123456789</id> <name>doggie</name> <photoUrls> <photoUrls>aeiou</photoUrls> </photoUrls> <tags> </tags> <status>aeiou</status> </Pet>" ;   ApiUtil . setExampleResponse  ( request , "application/xml" , exampleString ) ;  break ; } } } ) ;  return  new  ResponseEntity  < >  (  HttpStatus . NOT_IMPLEMENTED ) ; }    @ ApiOperation  (  tags =  { "pet" } ,  value = "Update an existing pet" ,  nickname = "updatePet" ,  notes = "" ,  authorizations =  {  @ Authorization  (  value = "petstore_auth" ,  scopes =  {  @ AuthorizationScope  (  scope = "write:pets" ,  description = "modify pets in your account" ) ,  @ AuthorizationScope  (  scope = "read:pets" ,  description = "read your pets" ) } ) } )  @ ApiResponses  (  {  @ ApiResponse  (  code = 400 ,  message = "Invalid ID supplied" ) ,  @ ApiResponse  (  code = 404 ,  message = "Pet not found" ) ,  @ ApiResponse  (  code = 405 ,  message = "Validation exception" ) } )  @ RequestMapping  (  method =  RequestMethod . PUT ,  value = "/pet" ,  consumes = "application/json" ) default  ResponseEntity  < Void > updatePet  (    @ ApiParam  (  value = "Pet object that needs to be added to the store" ,  required = true )  @ Valid  @ RequestBody Pet body )  {  return  new  ResponseEntity  < >  (  HttpStatus . NOT_IMPLEMENTED ) ; }    @ ApiOperation  (  tags =  { "pet" } ,  value = "Updates a pet in the store with form data" ,  nickname = "updatePetWithForm" ,  notes = "" ,  authorizations =  {  @ Authorization  (  value = "petstore_auth" ,  scopes =  {  @ AuthorizationScope  (  scope = "write:pets" ,  description = "modify pets in your account" ) ,  @ AuthorizationScope  (  scope = "read:pets" ,  description = "read your pets" ) } ) } )  @ ApiResponses  (  {  @ ApiResponse  (  code = 405 ,  message = "Invalid input" ) } )  @ RequestMapping  (  method =  RequestMethod . POST ,  value = "/pet/{petId}" ,  consumes = "application/x-www-form-urlencoded" ) default  ResponseEntity  < Void > updatePetWithForm  (    @ ApiParam  (  value = "ID of pet that needs to be updated" ,  required = true )  @ PathVariable  ( "petId" ) Long petId ,    @ ApiParam  (  value = "Updated name of the pet" )  @ Valid  @ RequestParam  (  value = "name" ,  required = false ) String name ,    @ ApiParam  (  value = "Updated status of the pet" )  @ Valid  @ RequestParam  (  value = "status" ,  required = false ) String status )  {  return  new  ResponseEntity  < >  (  HttpStatus . NOT_IMPLEMENTED ) ; }    @ ApiOperation  (  tags =  { "pet" } ,  value = "uploads an image" ,  nickname = "uploadFile" ,  notes = "" ,  response =  ModelApiResponse . class ,  authorizations =  {  @ Authorization  (  value = "petstore_auth" ,  scopes =  {  @ AuthorizationScope  (  scope = "write:pets" ,  description = "modify pets in your account" ) ,  @ AuthorizationScope  (  scope = "read:pets" ,  description = "read your pets" ) } ) } )  @ ApiResponses  (  {  @ ApiResponse  (  code = 200 ,  message = "successful operation" ,  response =  ModelApiResponse . class ) } )  @ RequestMapping  (  method =  RequestMethod . POST ,  value = "/pet/{petId}/uploadImage" ,  produces = "application/json" ,  consumes = "multipart/form-data" ) default  ResponseEntity  < ModelApiResponse > uploadFile  (    @ ApiParam  (  value = "ID of pet to update" ,  required = true )  @ PathVariable  ( "petId" ) Long petId ,    @ ApiParam  (  value = "Additional data to pass to server" )  @ Valid  @ RequestParam  (  value = "additionalMetadata" ,  required = false ) String additionalMetadata ,    @ ApiParam  (  value = "file to upload" )  @ RequestPart  (  value = "file" ,  required = false ) MultipartFile file )  {    getRequest  ( ) . ifPresent  (  request ->  {  for ( MediaType mediaType :  MediaType . parseMediaTypes  (  request . getHeader  ( "Accept" ) ) )  {  if  (  mediaType . isCompatibleWith  (  MediaType . valueOf  ( "application/json" ) ) )  {  String  exampleString = "{ \"code\" : 0, \"type\" : \"type\", \"message\" : \"message\" }" ;   ApiUtil . setExampleResponse  ( request , "application/json" , exampleString ) ;  break ; } } } ) ;  return  new  ResponseEntity  < >  (  HttpStatus . NOT_IMPLEMENTED ) ; } }