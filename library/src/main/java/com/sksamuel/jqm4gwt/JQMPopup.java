  package   com . sksamuel . jqm4gwt ;   import      com . google . gwt . core . client . JavaScriptObject ;  import      com . google . gwt . dom . client . Element ;  import      com . google . gwt . event . shared . HandlerRegistration ;  import       com . google . gwt . user . client . ui . Widget ;  import     com . sksamuel . jqm4gwt . JQMPopupEvent . PopupState ;   public class JQMPopup  extends JQMContainer  {   private static  int  counter = 1 ;   private String  tolerance ;   public JQMPopup  ( )  {  this  (  "popup-" +  (  counter ++ ) ) ; }   public JQMPopup  (  String popupId )  {  super  ( popupId , "popup" ) ; }   public JQMPopup  (  Widget ...  widgets )  {  this  ( ) ;   add  ( widgets ) ; }    @ Override public void setContainerId  (  String containerId )  {   super . setContainerId  ( containerId ) ;   removeAttribute  ( "data-url" ) ; }    @ Override public JQMContainer withContainerId  ( )  {   setContainerId  (  "popup-" +  (  counter ++ ) ) ;  return this ; }   private static native void initialize  (  Element elt ) ;   public void initDynamic  ( )  {   initialize  (  getElement  ( ) ) ; }   private static native void waitInitOpen  (  String waitForSelector ,  Element elt ) ;   public void waitInitOpen  (  String waitForSelector )  {  if  (   waitForSelector == null ||  waitForSelector . isEmpty  ( ) )  {   initDynamic  ( ) ;   open  ( ) ;  return ; }   waitInitOpen  ( waitForSelector ,  getElement  ( ) ) ; }   private static native void _close  (  Element elt ) ;   private static native void _open  (  Element elt ) ;   public static native void close  (  String selector ) ;   public static native void open  (  String selector ) ;   public JQMPopup close  ( )  {   _close  (  getElement  ( ) ) ;  return this ; }   public JQMPopup open  ( )  {   _open  (  getElement  ( ) ) ;  return this ; }    @ Override public String getRelType  ( )  {  return "popup" ; }   public String getOverlayTheme  ( )  {  return  getAttribute  ( "data-overlay-theme" ) ; }   public void setOverlayTheme  (  String theme )  {   setAttribute  ( "data-overlay-theme" , theme ) ; }   public JQMPopup withOverlayTheme  (  String theme )  {   setOverlayTheme  ( theme ) ;  return this ; }   public boolean isPadding  ( )  {  return  JQMCommon . hasStyle  ( this , "ui-content" ) ; }   public void setPadding  (  boolean padding )  {  if  ( padding )  {   addStyleName  ( "ui-content" ) ; } else  {   removeStyleName  ( "ui-content" ) ; } }   public JQMPopup withPadding  (  boolean padding )  {   setPadding  ( padding ) ;  return this ; }   public String getPosition  ( )  {  return  JQMCommon . getPopupPos  ( this ) ; }   public void setPosition  (  String pos )  {   JQMCommon . setPopupPos  ( this , pos ) ; }    @ Override public String toString  ( )  {  return   "JQMPopup [id=" + id + "]" ; }   public boolean isDialog  ( )  {  String  s =  JQMCommon . getAttribute  ( this , "data-dismissible" ) ;  return  "false" . equals  ( s ) ; }   public void setDialog  (  boolean value )  {   JQMCommon . setAttribute  ( this , "data-dismissible" ,  value ? "false" : null ) ; }   public boolean isDismissible  ( )  {  return  !  isDialog  ( ) ; }   public void setDismissible  (  boolean value )  {   setDialog  (  ! value ) ; }   public boolean isShadow  ( )  {  String  s =  JQMCommon . getAttribute  ( this , "data-shadow" ) ;  boolean  noShadow =  "false" . equals  ( s ) ;  return  ! noShadow ; }   public void setShadow  (  boolean value )  {   JQMCommon . setAttribute  ( this , "data-shadow" ,  value ? null : "false" ) ; }   public String getArrows  ( )  {  return  JQMCommon . getAttribute  ( this , "data-arrow" ) ; }   public void setArrows  (  String arrows )  {   JQMCommon . setAttribute  ( this , "data-arrow" , arrows ) ; }   protected void onAfterClose  ( )  { }   protected void doAfterClose  ( )  {   onAfterClose  ( ) ;   JQMPopupEvent . fire  ( this ,  PopupState . AFTER_CLOSE ) ; }   protected void onAfterOpen  ( )  { }   protected void doAfterOpen  ( )  {   onAfterOpen  ( ) ;   JQMPopupEvent . fire  ( this ,  PopupState . AFTER_OPEN ) ; }   protected void onBeforePosition  (  PopupOptions openOptions )  { }   public static class PopupOptions  {   private Double  x ;   private Double  y ;   private String  positionTo ;   public Double getX  ( )  {  return x ; }   public void setX  (  Double x )  {    this . x = x ; }   public Double getY  ( )  {  return y ; }   public void setY  (  Double y )  {    this . y = y ; }   public String getPositionTo  ( )  {  return positionTo ; }   public void setPositionTo  (  String positionTo )  {    this . positionTo = positionTo ; }    @ Override public String toString  ( )  {  return       "PopupOptions [x=" +  JQMContext . round  ( x , 2 ) + ", y=" +  JQMContext . round  ( y , 2 ) + ", positionTo=" + positionTo + "]" ; } }   protected void doBeforePosition  (  JavaScriptObject openOptions )  {  String  p =  JQMContext . getJsObjValue  ( openOptions , "positionTo" ) ;  Double  x =  JQMContext . getJsObjDoubleValue  ( openOptions , "x" ) ;  Double  y =  JQMContext . getJsObjDoubleValue  ( openOptions , "y" ) ;  PopupOptions  opts =  new PopupOptions  ( ) ;   opts . setPositionTo  ( p ) ;   opts . setX  ( x ) ;   opts . setY  ( y ) ;   onBeforePosition  ( opts ) ;   JQMPopupEvent . fire  ( this ,  PopupState . BEFORE_POSITION , opts ) ;  String  newP =  opts . getPositionTo  ( ) ;  if  (  newP == null )  {  if  (   p != null &&  !  p . isEmpty  ( ) )   JQMContext . deleteJsObjProperty  ( openOptions , "positionTo" ) ; } else  {   JQMContext . setJsObjValue  ( openOptions , "positionTo" , newP ) ; }  Double  newX =  opts . getX  ( ) ;  if  (  newX == null )  {  if  (  x != null )   JQMContext . deleteJsObjProperty  ( openOptions , "x" ) ; } else  {   JQMContext . setJsObjDoubleValue  ( openOptions , "x" , newX ) ; }  Double  newY =  opts . getY  ( ) ;  if  (  newY == null )  {  if  (  y != null )   JQMContext . deleteJsObjProperty  ( openOptions , "y" ) ; } else  {   JQMContext . setJsObjDoubleValue  ( openOptions , "y" , newY ) ; } }   private static native void setTolerance  (  Element elt ,  String tolerance ) ;   private static native String getTolerance  (  Element elt ) ;   protected static native boolean isInitialized  (  Element elt ) ;   public String getTolerance  ( )  {  Element  elt =  getElement  ( ) ;  if  (  isInitialized  ( elt ) )  return  getTolerance  ( elt ) ; else  return tolerance ; }   public void setTolerance  (  String tolerance )  {    this . tolerance = tolerance ;  Element  elt =  getElement  ( ) ;  if  (  isInitialized  ( elt ) )   setTolerance  ( elt , tolerance ) ; }   private static native JavaScriptObject jsCalcEltCoords  (  String positionTo ) ;   public static class EltCoords  {   public final  double  left ;   public final  double  top ;   public final  double  width ;   public final  double  height ;   public EltCoords  (   double left ,   double top ,   double width ,   double height )  {  super  ( ) ;    this . left = left ;    this . top = top ;    this . width = width ;    this . height = height ; }    @ Override public String toString  ( )  {  return         "EltCoords [left=" +  JQMContext . round  ( left , 2 ) + ", top=" +  JQMContext . round  ( top , 2 ) + ", width=" +  JQMContext . round  ( width , 2 ) + ", height=" +  JQMContext . round  ( height , 2 ) + "]" ; } }   public static EltCoords calcEltCoords  (  String positionTo )  {  JavaScriptObject  o =  jsCalcEltCoords  ( positionTo ) ;  if  (  o == null )  return null ;  Double  left =  JQMContext . getJsObjDoubleValue  ( o , "left" ) ;  Double  top =  JQMContext . getJsObjDoubleValue  ( o , "top" ) ;  Double  width =  JQMContext . getJsObjDoubleValue  ( o , "width" ) ;  Double  height =  JQMContext . getJsObjDoubleValue  ( o , "height" ) ;  return  new EltCoords  ( left , top , width , height ) ; }   private static native void bindLifecycleEvents  (  JQMPopup p ,  Element elt ) ;   private static native void unbindLifecycleEvents  (  Element elt ) ;   private static native void bindCreated  (  Element elt ,  JQMPopup pop ) ;   private void created  ( )  {   setTolerance  (  getElement  ( ) , tolerance ) ; }    @ Override protected void onLoad  ( )  {   super . onLoad  ( ) ;  Element  elt =  getElement  ( ) ;   bindLifecycleEvents  ( this , elt ) ;  if  (  tolerance != null )  {   bindCreated  ( elt , this ) ; } }    @ Override protected void onUnload  ( )  {   unbindLifecycleEvents  (  getElement  ( ) ) ;   super . onUnload  ( ) ; }   public HandlerRegistration addPopupHandler  (   JQMPopupEvent . Handler handler )  {  return  addHandler  ( handler ,  JQMPopupEvent . getType  ( ) ) ; }   public boolean isCloseThenClick  ( )  {  String  s =  JQMCommon . getAttribute  (  getElement  ( ) , "data-closeThenClick" ) ;  return  "true" . equals  ( s ) ; }   public void setCloseThenClick  (  boolean value )  {   JQMCommon . setAttribute  (  getElement  ( ) , "data-closeThenClick" ,  value ? "true" : null ) ; } }