  package   com . sksamuel . jqm4gwt ;   import      com . google . gwt . core . client . JavaScriptObject ;  import      com . google . gwt . dom . client . Document ;  import      com . google . gwt . dom . client . Element ;  import      com . google . gwt . event . shared . EventHandler ;  import       com . google . gwt . event . shared . GwtEvent . Type ;  import      com . google . gwt . event . shared . HandlerRegistration ;  import       com . google . gwt . user . client . ui . Composite ;  import       com . google . gwt . user . client . ui . HasEnabled ;  import       com . google . gwt . user . client . ui . UIObject ;  import       com . google . gwt . user . client . ui . Widget ;  import     com . sksamuel . jqm4gwt . events . HasJQMEventHandlers ;  import     com . sksamuel . jqm4gwt . events . JQMEventFactory ;  import     com . sksamuel . jqm4gwt . events . JQMHandlerRegistration ;  import      com . sksamuel . jqm4gwt . events . JQMHandlerRegistration . WidgetHandlerCounter ;  import      com . sksamuel . jqm4gwt . form . elements . JQMFilterable ;  import      com . sksamuel . jqm4gwt . form . elements . JQMFilterableEvent ;  import      com . sksamuel . jqm4gwt . form . elements . JQMSelect ;  import     com . sksamuel . jqm4gwt . layout . JQMCollapsibleSet ;  import     com . sksamuel . jqm4gwt . list . JQMList ;   public abstract class JQMWidget  extends Composite  implements   HasTheme  < JQMWidget > ,  HasId  < JQMWidget > , HasDataRole , HasEnabled , HasJQMEventHandlers , HasFilterable  {   private boolean  boundFilterEvents ;   private boolean  boundFilterCallback ;   private JavaScriptObject  origFilter ;   public String getAttribute  (  String name )  {  return  JQMCommon . getAttribute  ( this , name ) ; }   public boolean getAttributeBoolean  (  String name )  {  return  "true" . equalsIgnoreCase  (  getAttribute  ( name ) ) ; }    @ Override public String getDataRole  ( )  {  return  JQMCommon . getDataRole  ( this ) ; }    @ Override public String getTheme  ( )  {  return  JQMCommon . getTheme  ( this ) ; }   protected void removeAttribute  (  String name )  {    getElement  ( ) . removeAttribute  ( name ) ; }   public void removeDataRole  ( )  {   JQMCommon . removeDataRole  ( this ) ; }   public void setAttribute  (  String name ,  String value )  {   JQMCommon . setAttribute  ( this , name , value ) ; }    @ Override public void setDataRole  (  String value )  {   JQMCommon . setDataRole  ( this , value ) ; }    @ Override public final String getId  ( )  {  return   getElement  ( ) . getId  ( ) ; }   public final String getWidgetId  ( )  {  return  getId  ( ) ; }   protected final void setId  ( )  {   setId  (   Document . get  ( ) . createUniqueId  ( ) ) ; }    @ Override public final void setId  (  String id )  {    getElement  ( ) . setId  ( id ) ; }   public final void setWidgetId  (  String id )  {   setId  ( id ) ; }    @ Override public final JQMWidget withId  (  String id )  {   setId  ( id ) ;  return this ; }    @ Override public void setTheme  (  String themeName )  {   JQMCommon . setTheme  ( this , themeName ) ; }    @ Override public JQMWidget withTheme  (  String themeName )  {   setTheme  ( themeName ) ;  return this ; }    @ Override public void setEnabled  (  boolean b )  {   JQMCommon . setEnabled  ( this , b ) ; }    @ Override public boolean isEnabled  ( )  {  return  JQMCommon . isEnabled  ( this ) ; }    @ Override public boolean isVisible  ( )  {  return   super . isVisible  ( ) &&  JQMCommon . isVisible  ( this ) ; }    @ Override public HandlerRegistration addJQMEventHandler  (  String jqmEventName ,  EventHandler handler )  {   Type  < EventHandler >  t =  JQMEventFactory . getType  ( jqmEventName ,  EventHandler . class ) ;  return  JQMHandlerRegistration . registerJQueryHandler  (  new WidgetHandlerCounter  ( )  {    @ Override public  int getHandlerCountForWidget  (   Type  <  ? > type )  {  return  getHandlerCount  ( type ) ; } } , this , handler , jqmEventName , t ) ; }   public String getFilterText  ( )  {  return  JQMCommon . getFilterText  (  getDataFilterWidget  ( ) ) ; }   public void setFilterText  (  String filterText )  {   JQMCommon . setFilterText  (  getDataFilterWidget  ( ) , filterText ) ; }   protected Widget getDataFilterWidget  ( )  {  return this ; }   public boolean isFilterable  ( )  {  return  JQMCommon . isFilterable  (  getDataFilterWidget  ( ) ) ; }   public void setFilterable  (  boolean value )  {   JQMCommon . setFilterable  (  getDataFilterWidget  ( ) , value ) ;   checkFilterEvents  ( ) ; }   public String getDataFilter  ( )  {  return  JQMCommon . getDataFilter  (  getDataFilterWidget  ( ) ) ; }   public void setDataFilter  (  String filterSelector )  {   JQMCommon . setDataFilter  (  getDataFilterWidget  ( ) , filterSelector ) ;   checkFilterEvents  ( ) ; }   protected Element getFilterSearchElt  ( )  {  String  s =  getDataFilter  ( ) ;  if  (   s == null ||  s . isEmpty  ( ) )  return null ;  return  findElt  ( s ) ; }   protected static native Element findElt  (  String selector ) ;   public String getFilterSearchText  ( )  {  Element  elt =  getFilterSearchElt  ( ) ;  if  (  elt == null )  return null ;  return  JQMCommon . getAttribute  ( elt , "data-lastval" ) ; }   public void setFilterSearchText  (  String value )  {  Element  elt =  getFilterSearchElt  ( ) ;  if  (  elt == null )  return ;   refreshFilterSearch  ( elt , value ) ; }   protected static native void refreshFilterSearch  (  Element elt ,  String text ) ;   public String getFilterChildren  ( )  {  return  JQMCommon . getFilterChildren  (  getDataFilterWidget  ( ) ) ; }   public void setFilterChildren  (  String filterChildren )  {   JQMCommon . setFilterChildren  (  getDataFilterWidget  ( ) , filterChildren ) ; }   public boolean isFilterReveal  ( )  {  return  JQMCommon . isFilterReveal  (  getDataFilterWidget  ( ) ) ; }   public void setFilterReveal  (  boolean value )  {   JQMCommon . setFilterReveal  (  getDataFilterWidget  ( ) , value ) ; }    @ Override public void refreshFilter  ( )  {  if  (  isFilterable  ( ) )   JQMCommon . refreshFilter  (  getDataFilterWidget  ( ) ) ; }   protected void onBeforeFilter  (  String filter )  { }    @ Override public void doBeforeFilter  (  String filter )  {   onBeforeFilter  ( filter ) ;   JQMFilterableEvent . fire  ( this ,   JQMFilterableEvent . FilterableState . BEFORE_FILTER , filter ) ; }   public HandlerRegistration addFilterableHandler  (   JQMFilterableEvent . Handler handler )  {  return  addHandler  ( handler ,  JQMFilterableEvent . getType  ( ) ) ; }   private void bindFilterEvents  ( )  {  if  ( boundFilterEvents )  return ;   JQMCommon . bindFilterEvents  ( this ,   getDataFilterWidget  ( ) . getElement  ( ) ) ;   boundFilterEvents = true ; }   private void unbindFilterEvents  ( )  {  if  (  ! boundFilterEvents )  return ;   JQMCommon . unbindFilterEvents  (   getDataFilterWidget  ( ) . getElement  ( ) ) ;   boundFilterEvents = false ; }   protected Boolean onFiltering  (  Element elt ,  Integer index ,  String searchValue )  {  return null ; }    @ Override public Boolean doFiltering  (  Element elt ,  Integer index ,  String searchValue )  {  Boolean  rslt =  onFiltering  ( elt , index , searchValue ) ;  Boolean  eventRslt =  JQMFilterableEvent . fire  ( this ,   JQMFilterableEvent . FilterableState . FILTERING , searchValue , elt , index ) ;  if  (    rslt != null && rslt ||   eventRslt != null && eventRslt )  return true ;  if  (  rslt != null )  return rslt ;  if  (  eventRslt != null )  return eventRslt ;  return null ; }   private void bindFilterCallback  ( )  {  if  ( boundFilterCallback )  return ;  Element  elt =   getDataFilterWidget  ( ) . getElement  ( ) ;   origFilter =  JQMCommon . getFilterCallback  ( elt ) ;   JQMCommon . bindFilterCallback  ( this , elt , origFilter ) ;   boundFilterCallback = true ; }   private void unbindFilterCallback  ( )  {  if  (  ! boundFilterCallback )  return ;   JQMCommon . unbindFilterCallback  (   getDataFilterWidget  ( ) . getElement  ( ) , origFilter ) ;   origFilter = null ;   boundFilterCallback = false ; }   private void checkFilterEvents  ( )  {  if  (  isAttached  ( ) )  {  boolean  b =  isFilterable  ( ) ;  if  (  ! b )  {   unbindFilterEvents  ( ) ;   unbindFilterCallback  ( ) ; } else  {   bindFilterEvents  ( ) ;   bindFilterableCreated  (   getDataFilterWidget  ( ) . getElement  ( ) , this ) ; } } }   private static native void bindFilterableCreated  (  Element elt ,  JQMWidget w ) ;   private void filterableCreated  ( )  {   bindFilterCallback  ( ) ; }    @ Override protected void onLoad  ( )  {   super . onLoad  ( ) ;   checkFilterEvents  ( ) ; }    @ Override protected void onUnload  ( )  {   unbindFilterEvents  ( ) ;   unbindFilterCallback  ( ) ;   super . onUnload  ( ) ; } }