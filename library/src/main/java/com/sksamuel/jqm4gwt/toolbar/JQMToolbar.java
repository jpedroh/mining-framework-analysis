  package    com . sksamuel . jqm4gwt . toolbar ;   import      com . google . gwt . dom . client . Element ;  import      com . google . gwt . uibinder . client . UiChild ;  import       com . google . gwt . user . client . ui . FlowPanel ;  import       com . google . gwt . user . client . ui . HasText ;  import       com . google . gwt . user . client . ui . Widget ;  import    com . sksamuel . jqm4gwt . JQMWidget ;  import     com . sksamuel . jqm4gwt . html . Heading ;   public abstract class JQMToolbar  extends JQMWidget  implements  HasText , HasFixedPosition  {   private final FlowPanel  flow ;   private Heading  header ;   protected JQMToolbar  (  String dataRole ,  String styleName ,  String text )  {   flow =  new FlowPanel  ( ) ;   initWidget  ( flow ) ;   setDataRole  ( dataRole ) ;   setStyleName  ( styleName ) ;   setText  ( text ) ;   setTapToggle  ( false ) ; }    @ UiChild  (  tagname = "widget" ) public void add  (  Widget w )  {   flow . add  ( w ) ; }    @ Override public String getText  ( )  {  return   header == null ? null :  header . getText  ( ) ; }    @ Override public void setText  (  String text )  {  if  (  text == null )  {  if  (  header != null )   flow . remove  ( header ) ; } else  {  if  (  header == null )  {   header =  new Heading  ( 1 ) ;   flow . add  ( header ) ; }   header . setText  ( text ) ; } }   public  Widget  [ ] getWidgets  ( )  {   Widget  [ ]  widgets =  new Widget  [  flow . getWidgetCount  ( ) ] ;  for (   int  k = 0 ;  k <  flow . getWidgetCount  ( ) ;  k ++ )  {    widgets [ k ] =  flow . getWidget  ( k ) ; }  return widgets ; }   public void insert  (  Widget left ,   int i )  {   flow . insert  ( left , i ) ; }    @ Override public final boolean isFixed  ( )  {  return  "fixed" . equals  (  getAttribute  ( "data-position" ) ) ; }    @ Override public final void setFixed  (  boolean fixed )  {  if  ( fixed )   setAttribute  ( "data-position" , "fixed" ) ; else   removeAttribute  ( "data-position" ) ; }   public void remove  (  Widget w )  {   flow . remove  ( w ) ; }   public void removeText  ( )  {  if  (  header != null )  {   flow . remove  ( header ) ;   header = null ; } }   public boolean isTapToggle  ( )  {  String  s =  getAttribute  ( "data-tap-toggle" ) ;  if  (   s == null ||  s . isEmpty  ( ) )  return true ;  return  !  (  "false" . equals  ( s ) ) ; }   public void setTapToggle  (  boolean value )  {  if  ( value )   removeAttribute  ( "data-tap-toggle" ) ; else   setAttribute  ( "data-tap-toggle" , "false" ) ; }   public boolean isUpdatePagePadding  ( )  {  String  s =  getAttribute  ( "data-update-page-padding" ) ;  if  (   s == null ||  s . isEmpty  ( ) )  return true ;  return  !  (  "false" . equals  ( s ) ) ; }   public void setUpdatePagePadding  (  boolean value )  {  if  ( value )   removeAttribute  ( "data-update-page-padding" ) ; else   setAttribute  ( "data-update-page-padding" , "false" ) ; }   private static native void updatePagePadding  (  Element elt ) ;   public void updatePagePadding  ( )  {   updatePagePadding  (  getElement  ( ) ) ; }   public void refresh  ( )  {   refresh  (  getElement  ( ) ) ; }   private static native void refresh  (  Element elt ) ;   private static native void hide  (  Element elt ) ;   private static native void show  (  Element elt ) ;   private static native void toggle  (  Element elt ) ;   public void hide  ( )  {   hide  (  getElement  ( ) ) ; }   public void show  ( )  {   show  (  getElement  ( ) ) ; }   public void toggle  ( )  {   toggle  (  getElement  ( ) ) ; } }