  package    com . sksamuel . jqm4gwt . toolbar ;   import      com . google . gwt . core . client . Scheduler ;  import       com . google . gwt . core . client . Scheduler . ScheduledCommand ;  import      com . google . gwt . dom . client . Document ;  import      com . google . gwt . dom . client . Element ;  import      com . google . gwt . dom . client . Node ;  import      com . google . gwt . dom . client . NodeList ;  import      com . google . gwt . uibinder . client . UiChild ;  import      com . google . gwt . uibinder . client . UiConstructor ;  import       com . google . gwt . user . client . ui . FlowPanel ;  import       com . google . gwt . user . client . ui . SimplePanel ;  import       com . google . gwt . user . client . ui . Widget ;  import    com . sksamuel . jqm4gwt . JQMPage ;  import    com . sksamuel . jqm4gwt . JQMWidget ;  import      com . sksamuel . jqm4gwt . toolbar . JQMPanelEvent . PanelState ;   public class JQMPanel  extends JQMWidget  {   public static enum Display  {  REVEAL  ( "reveal" ) ,  PUSH  ( "push" ) ,  OVERLAY  ( "overlay" )  ;   private final String  jqmDisplay ;   private Display  (  String jqmDisplay )  {    this . jqmDisplay = jqmDisplay ; }   public String getJqmValue  ( )  {  return jqmDisplay ; }   public static Display fromJqmValue  (  String jqmValue )  {  if  (   jqmValue == null ||  jqmValue . isEmpty  ( ) )  return null ;  for ( Display i :  Display . values  ( ) )  {  if  (   i . getJqmValue  ( ) . equals  ( jqmValue ) )  return i ; }  return null ; } }   public static enum Position  {  LEFT  ( "left" ) ,  RIGHT  ( "right" )  ;   private final String  jqmPos ;   private Position  (  String jqmPos )  {    this . jqmPos = jqmPos ; }   public String getJqmValue  ( )  {  return jqmPos ; }   public static Position fromJqmValue  (  String jqmValue )  {  if  (   jqmValue == null ||  jqmValue . isEmpty  ( ) )  return null ;  for ( Position i :  Position . values  ( ) )  {  if  (   i . getJqmValue  ( ) . equals  ( jqmValue ) )  return i ; }  return null ; } }   private SimplePanel  flowPanelContainer ;   private FlowPanel  flowPanel ;   public JQMPanel  ( )  {  this  (   Document . get  ( ) . createUniqueId  ( ) ) ; }   public  @ UiConstructor JQMPanel  (  String panelId )  {   flowPanel =  new FlowPanel  ( ) ;   flowPanel . setStylePrimaryName  ( "ui-panel-inner" ) ;   flowPanelContainer =  new SimplePanel  ( ) ;   flowPanelContainer . add  ( flowPanel ) ;   initWidget  ( flowPanelContainer ) ;  if  (   panelId == null ||  panelId . isEmpty  ( ) )   setId  (   Document . get  ( ) . createUniqueId  ( ) ) ; else   setId  ( panelId ) ;   setDataRole  ( "panel" ) ; }    @ UiChild  (  tagname = "widget" ) public void add  (  Widget w )  {   flowPanel . add  ( w ) ; }   public void remove  (  Widget w )  {   flowPanel . remove  ( w ) ; }   public  Widget  [ ] getWidgets  ( )  {   Widget  [ ]  widgets =  new Widget  [  flowPanel . getWidgetCount  ( ) ] ;  for (   int  k = 0 ;  k <  flowPanel . getWidgetCount  ( ) ;  k ++ )  {    widgets [ k ] =  flowPanel . getWidget  ( k ) ; }  return widgets ; }   public void refresh  ( )  {   updateLayout  (  getElement  ( ) ) ; }   private static native void updateLayout  (  Element elt ) ;   public void setAnimate  (  boolean animate )  {   setAttribute  ( "data-animate" ,  String . valueOf  ( animate ) ) ; }   public boolean isAnimate  ( )  {  return  "true" . equals  (  getAttribute  ( "data-animate" ) ) ; }   public void setDisplay  (  Display display )  {   setAttribute  ( "data-display" ,   display != null ?  display . getJqmValue  ( ) : null ) ; }   public Display getDisplay  ( )  {  return  Display . fromJqmValue  (  getAttribute  ( "data-display" ) ) ; }   public void setPosition  (  Position position )  {   setAttribute  ( "data-position" ,   position != null ?  position . getJqmValue  ( ) : null ) ; }   public Position getPosition  ( )  {  return  Position . fromJqmValue  (  getAttribute  ( "data-position" ) ) ; }   public void setPositionFixed  (  boolean positionFixed )  {   setAttribute  ( "data-position-fixed" ,  String . valueOf  ( positionFixed ) ) ; }   public boolean isPositionFixed  ( )  {  return  "true" . equals  (  getAttribute  ( "data-position-fixed" ) ) ; }   public void setSwipeClose  (  boolean swipeClose )  {   setAttribute  ( "data-swipe-close" ,  String . valueOf  ( swipeClose ) ) ; }   public boolean isSwipeClose  ( )  {  return  "true" . equals  (  getAttribute  ( "data-swipe-close" ) ) ; }   public void setDismissible  (  boolean dismissible )  {   setAttribute  ( "data-dismissible" ,  String . valueOf  ( dismissible ) ) ; }   public boolean isDismissible  ( )  {  return  "true" . equals  (  getAttribute  ( "data-dismissible" ) ) ; }   public void open  ( )  {   _open  (  getElement  ( ) ) ; }   public void close  ( )  {   _close  (  getElement  ( ) ) ; }   public void toggle  ( )  {   _toggle  (  getElement  ( ) ) ; }   protected void onPanelBeforeClose  ( )  { }   protected void onPanelBeforeOpen  ( )  { }   protected void onPanelClose  ( )  { }   protected void onPanelCreate  ( )  { }   protected void onPanelOpen  ( )  { }   protected void doPanelBeforeClose  ( )  {   onPanelBeforeClose  ( ) ;   JQMPanelEvent . fire  ( this ,  PanelState . BEFORE_CLOSE ) ; }   protected void doPanelBeforeOpen  ( )  {   onPanelBeforeOpen  ( ) ;   JQMPanelEvent . fire  ( this ,  PanelState . BEFORE_OPEN ) ; }   protected void doPanelClose  ( )  {   onPanelClose  ( ) ;   JQMPanelEvent . fire  ( this ,  PanelState . CLOSE ) ; }   protected void doPanelCreate  ( )  {   onPanelCreate  ( ) ;   JQMPanelEvent . fire  ( this ,  PanelState . CREATE ) ; }   protected void doPanelOpen  ( )  {   onPanelOpen  ( ) ;   JQMPanelEvent . fire  ( this ,  PanelState . OPEN ) ; }    @ Override protected void onLoad  ( )  {  Widget  parent =  getParent  ( ) ;  if  (  parent instanceof JQMPage )   bindLifecycleEvents  ( this ,   (  ( JQMPage ) parent ) . getId  ( ) ) ; }    @ Override protected void onUnload  ( )  {  Widget  parent =  getParent  ( ) ;  if  (  parent instanceof JQMPage )   unbindLifecycleEvents  (   (  ( JQMPage ) parent ) . getId  ( ) ) ; }   private static native void bindLifecycleEvents  (  JQMPanel p ,  String id ) ;   private static native void bindLifecycleEventsExternal  (  JQMPanel p ,  String id ) ;   private static native void unbindLifecycleEvents  (  String id ) ;   private static native void _open  (  Element elt ) ;   private static native void _close  (  Element elt ) ;   private static native void _toggle  (  Element elt ) ;   public boolean isExternal  ( )  {   NodeList  < Node >  children =    Document . get  ( ) . getBody  ( ) . getChildNodes  ( ) ;  if  (   children == null ||   children . getLength  ( ) == 0 )  return false ;  for (   int  i = 0 ;  i <  children . getLength  ( ) ;  i ++ )  {  if  (   children . getItem  ( i ) ==  getElement  ( ) )  return true ; }  return false ; }   public void setExternal  (  boolean value )  {  if  (  value ==  isExternal  ( ) )  return ;  if  ( value )  {     Document . get  ( ) . getBody  ( ) . appendChild  (  getElement  ( ) ) ;    Scheduler . get  ( ) . scheduleFinally  (  new ScheduledCommand  ( )  {    @ Override public void execute  ( )  {   manualInitialize  (  getElement  ( ) ) ;   bindLifecycleEventsExternal  (  JQMPanel . this ,  getId  ( ) ) ; } } ) ; } else  {     Document . get  ( ) . getBody  ( ) . removeChild  (  getElement  ( ) ) ; } }   private static native void manualInitialize  (  Element elt ) ; }