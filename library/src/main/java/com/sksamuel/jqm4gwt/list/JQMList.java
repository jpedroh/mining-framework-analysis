  package    com . sksamuel . jqm4gwt . list ;   import   java . util . ArrayList ;  import   java . util . Collection ;  import   java . util . List ;  import      com . google . gwt . dom . client . Element ;  import       com . google . gwt . event . dom . client . ClickEvent ;  import       com . google . gwt . event . dom . client . ClickHandler ;  import       com . google . gwt . event . dom . client . HasClickHandlers ;  import       com . google . gwt . event . shared . GwtEvent . Type ;  import      com . google . gwt . event . shared . HandlerRegistration ;  import      com . google . gwt . uibinder . client . UiChild ;  import       com . google . gwt . user . client . ui . HasText ;  import       com . google . gwt . user . client . ui . Widget ;  import    com . sksamuel . jqm4gwt . DataIcon ;  import    com . sksamuel . jqm4gwt . HasCorners ;  import    com . sksamuel . jqm4gwt . HasInset ;  import    com . sksamuel . jqm4gwt . JQMCommon ;  import    com . sksamuel . jqm4gwt . JQMContext ;  import    com . sksamuel . jqm4gwt . JQMPage ;  import    com . sksamuel . jqm4gwt . JQMWidget ;  import     com . sksamuel . jqm4gwt . events . HasTapHandlers ;  import     com . sksamuel . jqm4gwt . events . JQMComponentEvents ;  import     com . sksamuel . jqm4gwt . events . JQMHandlerRegistration ;  import      com . sksamuel . jqm4gwt . events . JQMHandlerRegistration . WidgetHandlerCounter ;  import     com . sksamuel . jqm4gwt . events . TapEvent ;  import     com . sksamuel . jqm4gwt . events . TapHandler ;  import     com . sksamuel . jqm4gwt . html . ListWidget ;   public class JQMList  extends JQMWidget  implements  HasClickHandlers , HasTapHandlers ,  HasInset  < JQMList > ,  HasFilter  < JQMList > ,  HasCorners  < JQMList >  {   public static class Ordered  extends JQMList  {   public Ordered  ( )  {  super  ( true ) ; } }   public static class Unordered  extends JQMList  {   public Unordered  ( )  {  super  ( false ) ; } }   private final ListWidget  list ;   private  int  clickIndex ;   private boolean  clickIsSplit ;   private final  List  < JQMListItem >  items =  new  ArrayList  < JQMListItem >  ( ) ;   public JQMList  ( )  {  this  ( false ) ; }   public JQMList  (  boolean ordered )  {   list =  new ListWidget  ( ordered ) ;   initWidget  ( list ) ;   setStyleName  ( "jqm4gwt-list" ) ;   setDataRole  ( "listview" ) ;   setId  ( ) ; }    @ Override public HandlerRegistration addClickHandler  (  ClickHandler handler )  {  return  list . addDomHandler  ( handler ,  ClickEvent . getType  ( ) ) ; }    @ Override public HandlerRegistration addTapHandler  (  TapHandler handler )  {  return  JQMHandlerRegistration . registerJQueryHandler  (  new WidgetHandlerCounter  ( )  {    @ Override public  int getHandlerCountForWidget  (   Type  <  ? > type )  {  return  getHandlerCount  ( type ) ; } } , this , handler ,  JQMComponentEvents . TAP_EVENT ,  TapEvent . getType  ( ) ) ; }   public void addDivider  (   int index ,  JQMListDivider d )  {   list . insert  ( d , index ) ;   items . add  ( index , null ) ;   d . setList  ( this ) ; }   public HasText addDivider  (  String text )  {  JQMListDivider  d =  new JQMListDivider  ( text ) ;   appendDivider  ( d ) ;  return d ; }    @ UiChild  (  tagname = "divider" ) public void appendDivider  (  JQMListDivider divider )  {   addDivider  (  items . size  ( ) , divider ) ; }   public void addItem  (   int index ,   final JQMListItem item )  {   list . insert  ( item , index ) ;   items . add  ( index , item ) ;   item . setList  ( this ) ; }   public JQMListItem addItem  (   int index ,  String text )  {  return  addItem  ( index , text ,  ( String ) null ) ; }   public JQMListItem addItem  (   int index ,  String text ,  String url )  {  JQMListItem  item =  new JQMListItem  ( text , url ) ;   addItem  ( index , item ) ;  return item ; }   public JQMListItem addItem  (  String text )  {  return  addItem  ( text ,  ( String ) null ) ; }   public static enum ListItemImageKind  {  NONE ,  THUMBNAIL ,  ICON }   public JQMListItem addItem  (  String text ,  String url ,  ListItemImageKind imageKind ,  String imageUrl )  {  return  addItem  (  items . size  ( ) , text , url , imageKind , imageUrl ) ; }   public JQMListItem addItem  (   int index ,  String text ,  String url ,  ListItemImageKind imageKind ,  String imageUrl )  {  JQMListItem  item = null ;  boolean  hasImage =  imageKind !=  ListItemImageKind . NONE ;  boolean  clickable =  url != null ;  if  ( hasImage )  {  if  ( clickable )  {   item =  addItem  ( index , text , url ) ; } else  {   item =  addItem  ( index , text ) ;   item . addHeaderText  ( 1 , "" ) ; }  switch  ( imageKind )  {   case ICON :  if  (   imageUrl != null &&  !  imageUrl . isEmpty  ( ) )   item . setIcon  ( imageUrl ) ;  break ;   case THUMBNAIL :  if  (   imageUrl != null &&  !  imageUrl . isEmpty  ( ) )   item . setThumbnail  ( imageUrl ) ;  break ;   default :  break ; } } else  {   item =  addItem  ( index , text , url ) ; }  return item ; }    @ UiChild  (  tagname = "item" ) public void appendItem  (  JQMListItem item )  {   addItem  (  items . size  ( ) , item ) ; }   public JQMListItem addItem  (  String text ,  JQMPage page )  {  return  addItem  ( text ,  "#" +  page . getId  ( ) ) ; }   public JQMListItem addItem  (  String text ,  String url )  {  JQMListItem  item =  new JQMListItem  ( text , url ) ;   addItem  (  items . size  ( ) , item ) ;  return item ; }   public JQMList addItems  (   Collection  < String > items )  {  for ( String item : items )   addItem  ( item ) ;  return this ; }   public void clear  ( )  {   list . clear  ( ) ;   items . clear  ( ) ; }   public boolean contains  (  JQMListItem item )  {  return  items . contains  ( item ) ; }   public  int getClickIndex  ( )  {  return clickIndex ; }   public boolean getClickIsSplit  ( )  {  return clickIsSplit ; }   public JQMListItem getClickItem  ( )  {  return  items . get  (  getClickIndex  ( ) ) ; }   public String getCountTheme  ( )  {  return  getAttribute  ( "data-count-theme" ) ; }   public String getDividerTheme  ( )  {  return  getAttribute  ( "data-divider-theme" ) ; }    @ Override public JQMList withFilterable  (  boolean filterable )  {   setFilterable  ( filterable ) ;  return this ; }   public String getFilterPlaceholder  ( )  {  return  getAttribute  ( "data-filter-placeholder" ) ; }   public void setFilterPlaceholder  (  String placeholderText )  {   setAttribute  ( "data-filter-placeholder" , placeholderText ) ; }   public String getFilterTheme  ( )  {  return  getAttribute  ( "data-filter-theme" ) ; }   public void setFilterTheme  (  String theme )  {   setAttribute  ( "data-filter-theme" , theme ) ; }   public JQMList withFilterTheme  (  String theme )  {   setFilterTheme  ( theme ) ;  return this ; }    @ Override public boolean isFilterReveal  ( )  {  return  "true" . equals  (  JQMCommon . getAttribute  ( this , "data-filter-reveal" ) ) ; }    @ Override public void setFilterReveal  (  boolean value )  {   JQMCommon . setAttribute  ( this , "data-filter-reveal" ,  value ? "true" : null ) ; }    @ Override protected Element getFilterSearchElt  ( )  {  Element  elt =  super . getFilterSearchElt  ( ) ;  if  (  elt != null )  return elt ;   elt =  getAutoFilterSearchElt  (  getElement  ( ) ) ;  return elt ; }   private static native Element getAutoFilterSearchElt  (  Element list ) ;   public JQMListItem getItem  (   int pos )  {  return  items . get  ( pos ) ; }   public  List  < JQMListItem > getItems  ( )  {  return items ; }   public boolean isAnyListItem  ( )  {  for ( JQMListItem li : items )  {  if  (  li != null )  return true ; }  return false ; }   public interface LiCallback  {  void on  (  JQMListItem item ) ; }   public void forEach  (  LiCallback callback )  {  if  (  callback == null )  return ;  for ( JQMListItem li : items )  {  if  (  li == null )  continue ;   callback . on  ( li ) ; } }   public void setAllChecked  (  boolean checked )  {  for ( JQMListItem li : items )  {  if  (   li == null ||   li . isChecked  ( ) == checked )  continue ;   li . setChecked  ( checked ) ; } }   public static enum ListChecked  {  NONE ,  ANY ,  ALL }   public ListChecked getCheckedInfo  ( )  {  boolean  anyChecked = false ;  boolean  allChecked = true ;   int  cnt = 0 ;  for ( JQMListItem li : items )  {  if  (   li == null ||  !  li . isCheckBox  ( ) )  continue ;   cnt ++ ;  if  (  !  li . isChecked  ( ) )  {   allChecked = false ;  if  ( anyChecked )  break ; } else  {   anyChecked = true ;  if  (  ! allChecked )  break ; } }  if  (  cnt == 0 )   allChecked = false ;  if  ( allChecked )  return  ListChecked . ALL ; else  if  ( anyChecked )  return  ListChecked . ANY ; else  return  ListChecked . NONE ; }   public boolean isAnyChecked  ( )  {  for ( JQMListItem li : items )  {  if  (   li == null ||  !  li . isCheckBox  ( ) )  continue ;  if  (  li . isChecked  ( ) )  return true ; }  return false ; }    @ Override public boolean isInset  ( )  {  return  "true" . equals  (   getElement  ( ) . getAttribute  ( "inset" ) ) ; }   public void refresh  ( )  {   refresh  (  getElement  ( ) ) ; }   protected static native void refresh  (  Element elt ) ;   public void recreate  ( )  {   JQMContext . render  (  getElement  ( ) ) ; }   protected boolean isDivider  (  Widget w )  {  if  (  w == null )  return false ;  return   JQMListDivider . ATTR_VALUE . equals  (   w . getElement  ( ) . getAttribute  (  JQMListDivider . ATTR_NAME ) ) ; }   public void removeDivider  (  JQMListDivider divider )  {  if  (  divider == null )  return ;  for (   int  k = 0 ;  k <  list . getWidgetCount  ( ) ;  k ++ )  {  Widget  w =  list . getWidget  ( k ) ;  if  (   isDivider  ( w ) &&  divider . equals  ( w ) )  {   list . remove  ( k ) ;   items . remove  ( k ) ;  return ; } } }   public boolean removeDivider  (  String text )  {  for (   int  k = 0 ;  k <  list . getWidgetCount  ( ) ;  k ++ )  {  Widget  w =  list . getWidget  ( k ) ;  if  (   isDivider  ( w ) &&    w . getElement  ( ) . getInnerText  ( ) . equals  ( text ) )  {   list . remove  ( k ) ;   items . remove  ( k ) ;  return true ; } }  return false ; }   public boolean removeDividerByTag  (  Object tag )  {  if  (  tag == null )  return false ;  for (   int  k = 0 ;  k <  list . getWidgetCount  ( ) ;  k ++ )  {  Widget  w =  list . getWidget  ( k ) ;  if  (   isDivider  ( w ) &&  tag . equals  (   (  ( JQMListDivider ) w ) . getTag  ( ) ) )  {   list . remove  ( k ) ;   items . remove  ( k ) ;  return true ; } }  return false ; }   public JQMListDivider findDivider  (  String text )  {  for (   int  k = 0 ;  k <  list . getWidgetCount  ( ) ;  k ++ )  {  Widget  w =  list . getWidget  ( k ) ;  if  (   isDivider  ( w ) &&    w . getElement  ( ) . getInnerText  ( ) . equals  ( text ) )  {  return  ( JQMListDivider ) w ; } }  return null ; }   public JQMListDivider findDividerByTag  (  Object tag )  {  if  (  tag == null )  return null ;  for (   int  k = 0 ;  k <  list . getWidgetCount  ( ) ;  k ++ )  {  Widget  w =  list . getWidget  ( k ) ;  if  (   isDivider  ( w ) &&  tag . equals  (   (  ( JQMListDivider ) w ) . getTag  ( ) ) )  {  return  ( JQMListDivider ) w ; } }  return null ; }   public  List  < JQMListDivider > getDividers  ( )  {   List  < JQMListDivider >  rslt = null ;  for (   int  k = 0 ;  k <  list . getWidgetCount  ( ) ;  k ++ )  {  Widget  w =  list . getWidget  ( k ) ;  if  (  isDivider  ( w ) )  {  if  (  rslt == null )   rslt =  new  ArrayList  < JQMListDivider >  ( ) ;   rslt . add  (  ( JQMListDivider ) w ) ; } }  return rslt ; }   public  int findDividerIdx  (  JQMListDivider d )  {  if  (  d == null )  return  - 1 ;  for (   int  k = 0 ;  k <  list . getWidgetCount  ( ) ;  k ++ )  {  Widget  w =  list . getWidget  ( k ) ;  if  (  d . equals  ( w ) )  return k ; }  return  - 1 ; }   public  int findInsertIdxByDivider  (  JQMListDivider d )  {  if  (  d == null )  return  - 1 ;   int  i =  findDividerIdx  ( d ) ;  if  (  i ==  - 1 )  return  - 1 ;   List  < JQMListItem >  lst =  getItems  ( ) ;   int  rslt =  i + 1 ;  while  (  rslt <  lst . size  ( ) )  {  if  (   lst . get  ( rslt ) == null )  {  return rslt ; }   rslt ++ ; }  return rslt ; }   public JQMListItem findItem  (  String text )  {  if  (  text == null )  return null ;   List  < JQMListItem >  lst =  getItems  ( ) ;  for ( JQMListItem i : lst )  {  if  (  i == null )  continue ;  if  (  text . equals  (  i . getText  ( ) ) )  return i ; }  return null ; }   public  int findItemOnlyIdx  (  JQMListItem item )  {  if  (  item == null )  return  - 1 ;   List  < JQMListItem >  items =  getItems  ( ) ;  if  (  items == null )  return  - 1 ;   int  i =  items . indexOf  ( item ) ;  if  (  i ==  - 1 )  return  - 1 ;   int  j = 0 ;  for ( JQMListItem k : items )  {  if  (  k == null )  continue ;  if  (  k == item )  return j ;   j ++ ; }  return  - 1 ; }   public JQMListItem findItemByTag  (  Object tag )  {  if  (  tag == null )  return null ;   List  < JQMListItem >  lst =  getItems  ( ) ;  for ( JQMListItem i : lst )  {  if  (  i == null )  continue ;  if  (  tag . equals  (  i . getTag  ( ) ) )  return i ; }  return null ; }   public void removeItem  (   int pos )  {   items . remove  ( pos ) ;   list . remove  ( pos ) ; }   public void removeItem  (  JQMListItem item )  {  if  (  item != null )  {   items . remove  ( item ) ;   list . remove  ( item ) ; } }   public void removeItems  (   List  < JQMListItem > items )  {  for ( JQMListItem item : items )   removeItem  ( item ) ; }   public void setAutoDividers  (  boolean auto )  {    getElement  ( ) . setAttribute  ( "data-autodividers" ,  String . valueOf  ( auto ) ) ; }   public JQMList withAutoDividers  (  boolean auto )  {   setAutoDividers  ( auto ) ;  return this ; }   protected JQMList setClickIndex  (   int clickIndex ,  boolean isSplit )  {    this . clickIndex = clickIndex ;    this . clickIsSplit = isSplit ;  return this ; }  JQMList setClickItem  (  JQMListItem item ,  boolean isSplit )  {   setClickIndex  (  list . getWidgetIndex  ( item ) , isSplit ) ;  return this ; }   public void setCountTheme  (  String theme )  {   setAttribute  ( "data-count-theme" , theme ) ; }   public JQMList withCountTheme  (  String theme )  {   setCountTheme  ( theme ) ;  return this ; }   public void setDividerTheme  (  String theme )  {   setAttribute  ( "data-divider-theme" , theme ) ; }   public JQMList withDividerTheme  (  String theme )  {   setDividerTheme  ( theme ) ;  return this ; }   public void setHeaderTheme  (  String theme )  {   setAttribute  ( "data-header-theme" , theme ) ; }   public JQMList withHeaderTheme  (  String theme )  {   setHeaderTheme  ( theme ) ;  return this ; }    @ Override public void setInset  (  boolean inset )  {  if  ( inset )    getElement  ( ) . setAttribute  ( "data-inset" , "true" ) ; else    getElement  ( ) . removeAttribute  ( "data-inset" ) ; }    @ Override public JQMList withInset  (  boolean inset )  {   setInset  ( inset ) ;  return this ; }   public void setSplitTheme  (  String theme )  {   setAttribute  ( "data-split-theme" , theme ) ; }   public JQMList withSplitTheme  (  String theme )  {   setSplitTheme  ( theme ) ;  return this ; }   public String getSplitTheme  ( )  {  return  getAttribute  ( "data-split-theme" ) ; }   public void setSplitIcon  (  DataIcon icon )  {   setAttribute  ( "data-split-icon" ,   icon != null ?  icon . getJqmValue  ( ) : null ) ; }   public DataIcon getSplitIcon  ( )  {  String  s =  getAttribute  ( "data-split-icon" ) ;  return  DataIcon . fromJqmValue  ( s ) ; }    @ Override public boolean isCorners  ( )  {  return  JQMCommon . isCorners  ( this ) ; }    @ Override public void setCorners  (  boolean corners )  {   JQMCommon . setCorners  ( this , corners ) ; }    @ Override public JQMList withCorners  (  boolean corners )  {   setCorners  ( corners ) ;  return this ; }   public boolean isIconNoDisc  ( )  {  return  JQMCommon . isIconNoDisc  ( this ) ; }   public void setIconNoDisc  (  boolean value )  {   JQMCommon . setIconNoDisc  ( this , value ) ; }   public boolean isIconAlt  ( )  {  return  JQMCommon . isIconAlt  ( this ) ; }   public void setIconAlt  (  boolean value )  {   JQMCommon . setIconAlt  ( this , value ) ; } }