  package    com . sksamuel . jqm4gwt . list ;   import      com . google . gwt . dom . client . Document ;  import      com . google . gwt . dom . client . Element ;  import      com . google . gwt . dom . client . EventTarget ;  import      com . google . gwt . dom . client . FieldSetElement ;  import      com . google . gwt . dom . client . InputElement ;  import      com . google . gwt . dom . client . LIElement ;  import      com . google . gwt . dom . client . Node ;  import      com . google . gwt . dom . client . Style ;  import       com . google . gwt . dom . client . Style . Unit ;  import       com . google . gwt . event . dom . client . ClickEvent ;  import       com . google . gwt . event . dom . client . ClickHandler ;  import       com . google . gwt . event . dom . client . HasClickHandlers ;  import       com . google . gwt . event . shared . GwtEvent . Type ;  import      com . google . gwt . event . shared . HandlerRegistration ;  import      com . google . gwt . uibinder . client . UiConstructor ;  import      com . google . gwt . user . client . DOM ;  import       com . google . gwt . user . client . ui . FlowPanel ;  import       com . google . gwt . user . client . ui . TextBox ;  import       com . google . gwt . user . client . ui . Widget ;  import    com . sksamuel . jqm4gwt . DataIcon ;  import    com . sksamuel . jqm4gwt . HasText ;  import    com . sksamuel . jqm4gwt . IconPos ;  import    com . sksamuel . jqm4gwt . JQMCommon ;  import     com . sksamuel . jqm4gwt . events . HasTapHandlers ;  import     com . sksamuel . jqm4gwt . events . JQMComponentEvents ;  import     com . sksamuel . jqm4gwt . events . JQMHandlerRegistration ;  import      com . sksamuel . jqm4gwt . events . JQMHandlerRegistration . WidgetHandlerCounter ;  import     com . sksamuel . jqm4gwt . events . TapEvent ;  import     com . sksamuel . jqm4gwt . events . TapHandler ;  import     com . sksamuel . jqm4gwt . html . CustomFlowPanel ;  import     com . sksamuel . jqm4gwt . panel . JQMControlGroup ;   public class JQMListItem  extends CustomFlowPanel  implements   HasText  < JQMListItem > , HasClickHandlers , HasTapHandlers  {   private Element  countElem ;   private Element  imageElem ;   private Element  anchor ;   private Element  split ;   private String  splitTheme ;   private Element  asideElem ;   private Element  headerElem ;   private JQMList  list ;   public class LiControlGroup  extends JQMControlGroup  {   protected LiControlGroup  (  Element element ,  String styleName )  {  super  ( element , styleName ) ; } }   private LiControlGroup  controlGroup ;   private FlowPanel  controlGroupRootElem ;   private TextBox  checkBoxInput ;   private HandlerRegistration  clickHandler ;   private HandlerRegistration  tapHandler ;    @ UiConstructor public JQMListItem  ( )  {  super  (  DOM . createElement  (  LIElement . TAG ) ) ;   setStyleName  ( "jqm4gwt-listitem" ) ;   setId  ( ) ; }   public JQMListItem  (  String text )  {  this  ( ) ;  if  (  text == null )  throw  new RuntimeException  ( "Cannot create list item with null text" ) ;   setText  ( text ) ; }   public JQMListItem  (  String text ,  String url )  {  this  ( text ) ;  if  (  url != null )   setUrl  ( url ) ; }    @ Override public HandlerRegistration addClickHandler  (  ClickHandler handler )  {   setUrl  ( "#" ) ;  return  addDomHandler  ( handler ,  ClickEvent . getType  ( ) ) ; }    @ Override public HandlerRegistration addTapHandler  (  TapHandler handler )  {   setUrl  ( "#" ) ;  return  JQMHandlerRegistration . registerJQueryHandler  (  new WidgetHandlerCounter  ( )  {    @ Override public  int getHandlerCountForWidget  (   Type  <  ? > type )  {  return  getHandlerCount  ( type ) ; } } , this , handler ,  JQMComponentEvents . TAP_EVENT ,  TapEvent . getType  ( ) ) ; }   private boolean isSplitClicked  (  Element elt )  {  if  (   split == null ||  elt == null )  return false ;  Element  element = elt ;  while  (  element != null )  {  if  (  element == split )  return true ;   element =  element . getParentElement  ( ) ; }  return false ; }   public boolean isSplitClicked  (  EventTarget target )  {  if  (  target == null )  return false ;  Element  element =  Element . as  ( target ) ;  return  isSplitClicked  ( element ) ; }   public JQMListItem addHeaderText  (   int n ,  String html )  {  Element  e =   Document . get  ( ) . createHElement  ( n ) ;   e . setInnerHTML  ( html ) ;   attachChild  ( e ) ;  return this ; }   public JQMListItem addText  (  String html )  {  Element  e =   Document . get  ( ) . createPElement  ( ) ;   e . setInnerHTML  ( html ) ;   attachChild  ( e ) ;  return this ; }   private void attachChild  (  Element elem )  {  if  (  anchor == null )    getElement  ( ) . appendChild  ( elem ) ; else  if  (  controlGroup != null )    controlGroup . getElement  ( ) . appendChild  ( elem ) ; else   anchor . appendChild  ( elem ) ; }   private void removeChild  (  Element elem )  {  if  (  anchor == null )    getElement  ( ) . removeChild  ( elem ) ; else  if  (  controlGroup != null )    controlGroup . getElement  ( ) . removeChild  ( elem ) ; else   anchor . removeChild  ( elem ) ; }   private void createAndAttachAsideElem  ( )  {   asideElem =   Document . get  ( ) . createPElement  ( ) ;   asideElem . setClassName  ( "ui-li-aside" ) ;   attachChild  ( asideElem ) ; }   private void createAndAttachCountElement  ( )  {   countElem =   Document . get  ( ) . createSpanElement  ( ) ;   countElem . setClassName  ( "ui-li-count" ) ;   attachChild  ( countElem ) ; }   public Integer getCount  ( )  {  if  (  countElem == null )  return null ;  return  Integer . parseInt  (  countElem . getInnerText  ( ) ) ; }    @ Override public String getText  ( )  {  return   headerElem != null ?  headerElem . getInnerText  ( ) : null ; }   private void moveAnchorChildrenTo  (  Element elt )  {  for (   int  k = 0 ;  k <  anchor . getChildCount  ( ) ;  k ++ )  {  Node  node =  anchor . getChild  ( k ) ;   anchor . removeChild  ( node ) ;   elt . appendChild  ( node ) ; } }   private void moveAnchorChildrenToThis  ( )  {   moveAnchorChildrenTo  (  getElement  ( ) ) ; }   private void moveThisChildrenToAnchor  ( )  {  for (   int  k = 0 ;  k <   getElement  ( ) . getChildCount  ( ) ;  k ++ )  {  Node  node =   getElement  ( ) . getChild  ( k ) ;    getElement  ( ) . removeChild  ( node ) ;   anchor . appendChild  ( node ) ; } }   public JQMListItem removeAside  ( )  {  if  (  asideElem != null )  {    getElement  ( ) . removeChild  ( asideElem ) ;   asideElem = null ; }  return this ; }   public JQMListItem removeCount  ( )  {  if  (  countElem != null )  {    getElement  ( ) . removeChild  ( countElem ) ;   countElem = null ; }  return this ; }   public JQMListItem removeImage  ( )  {  if  (  imageElem != null )  {    getElement  ( ) . removeChild  ( imageElem ) ;   imageElem = null ; }  return this ; }   public JQMListItem removeUrl  ( )  {  if  (  anchor == null )  return null ;   moveAnchorChildrenToThis  ( ) ;    getElement  ( ) . removeChild  ( anchor ) ;   anchor = null ;   setSplitHref  ( null ) ;  return this ; }   public JQMListItem setAside  (  String text )  {  if  (  text == null )  throw  new RuntimeException  ( "Cannot set aside to null. Call removeAside() if you wanted to remove the aside text" ) ;  if  (  asideElem == null )   createAndAttachAsideElem  ( ) ;   asideElem . setInnerText  ( text ) ;  return this ; }   public JQMListItem setCount  (  Integer count )  {  if  (  count == null )  throw  new RuntimeException  ( "Cannot set count to null. Call removeCount() if you wanted to remove the bubble" ) ;  if  (  countElem == null )   createAndAttachCountElement  ( ) ;   countElem . setInnerText  (  count . toString  ( ) ) ;  return this ; }   public JQMListItem setIcon  (  String src )  {   setImage  ( src , true ) ;  return this ; }   private JQMListItem setId  ( )  {    getElement  ( ) . setId  (   Document . get  ( ) . createUniqueId  ( ) ) ;  return this ; }   public JQMListItem setImage  (  String src ,  boolean icon )  {  if  (  src == null )  throw  new RuntimeException  ( "Cannot set image to null. Call removeImage() if you wanted to remove the image" ) ;  if  (  imageElem == null )  {   imageElem =   Document . get  ( ) . createImageElement  ( ) ;   attachChild  ( imageElem ) ; }   imageElem . setAttribute  ( "src" , src ) ;  if  ( icon )   imageElem . setAttribute  ( "class" , "ui-li-icon" ) ; else   imageElem . removeAttribute  ( "class" ) ;  return this ; }    @ Override protected void onLoad  ( )  {   super . onLoad  ( ) ;   addItemActivationHandlers  ( ) ; }    @ Override protected void onUnload  ( )  {   removeItemActivationHandlers  ( ) ; }   protected JQMListItem setList  (  JQMList jqmList )  {   removeItemActivationHandlers  ( ) ;    this . list = jqmList ;   addItemActivationHandlers  ( ) ;  return this ; }   private void removeItemActivationHandlers  ( )  {  if  (  clickHandler != null )   clickHandler . removeHandler  ( ) ;  if  (  tapHandler != null )   tapHandler . removeHandler  ( ) ; }   private void addItemActivationHandlers  ( )  {  if  (  list != null )  {  if  (  clickHandler == null )  {   clickHandler =  addClickHandler  (  new ClickHandler  ( )  {    @ Override public void onClick  (  ClickEvent event )  {  boolean  isSplit =   (  event != null ) ?  isSplitClicked  (   event . getNativeEvent  ( ) . getEventTarget  ( ) ) : false ;   list . setClickItem  (  JQMListItem . this , isSplit ) ; } } ) ; }  if  (  tapHandler == null )  {   tapHandler =  addTapHandler  (  new TapHandler  ( )  {    @ Override public void onTap  (  TapEvent event )  {  boolean  isSplit =   (  event != null ) ?  isSplitClicked  (   event . getJQueryEvent  ( ) . getEventTarget  ( ) ) : false ;   list . setClickItem  (  JQMListItem . this , isSplit ) ; } } ) ; } } }    @ Override public void setText  (  String text )  {  if  (  text == null )  {  if  (  headerElem != null )  {   removeChild  ( headerElem ) ;   headerElem = null ; }  return ; }  if  (  headerElem == null )  {   headerElem =   Document . get  ( ) . createHElement  ( 3 ) ;   attachChild  ( headerElem ) ; }   headerElem . setInnerText  ( text ) ; }   public JQMListItem setThumbnail  (  String src )  {   setImage  ( src , false ) ;  return this ; }   public JQMListItem setUrl  (  String url )  {  if  (  url == null )  throw  new RuntimeException  ( "Cannot set URL to null. Call removeUrl() if you wanted to remove the URL" ) ;  if  (  anchor == null )  {   anchor =   Document . get  ( ) . createAnchorElement  ( ) ;   moveThisChildrenToAnchor  ( ) ;    getElement  ( ) . appendChild  ( anchor ) ; }   anchor . setAttribute  ( "href" , url ) ;  return this ; }   public void setHref  (  String url )  {   setUrl  ( url ) ; }   public void setSplitHref  (  String url )  {  if  (  url == null )  {  if  (  split != null )  {    getElement  ( ) . removeChild  ( split ) ;   split = null ;   checkSplitPadding  ( ) ; }  return ; }  if  (  split != null )  return ;  if  (  anchor == null )   setUrl  ( "#" ) ;   split =   Document . get  ( ) . createAnchorElement  ( ) ;   split . setAttribute  ( "href" , url ) ;    getElement  ( ) . appendChild  ( split ) ;   setSplitTheme  ( splitTheme ) ;   checkSplitPadding  ( ) ; }   public void setDataIcon  (  DataIcon icon )  {   JQMCommon . setIcon  (  getElement  ( ) , icon ) ; }   public DataIcon getDataIcon  ( )  {  return  JQMCommon . getIcon  (  getElement  ( ) ) ; }   public void setSplitIcon  (  DataIcon icon )  {   JQMCommon . setIcon  (  getElement  ( ) , icon ) ; }   public DataIcon getSplitIcon  ( )  {  return  JQMCommon . getIcon  (  getElement  ( ) ) ; }   public void setSplitTheme  (  String theme )  {   splitTheme = theme ;  if  (  split != null )   JQMCommon . setTheme  ( split , theme ) ; }   public String getSplitTheme  ( )  {  if  (  split == null )  return splitTheme ;   splitTheme =  JQMCommon . getTheme  ( split ) ;  return splitTheme ; }    @ Override public JQMListItem withText  (  String text )  {   setText  ( text ) ;  return this ; }   private void checkSplitPadding  ( )  {  if  (   anchor == null ||  controlGroup == null )  return ;    anchor . getStyle  ( ) . setPaddingRight  (   split == null ? 0 : 42 ,  Unit . PX ) ; }   private void createControlGroup  ( )  {  if  (  controlGroup != null )  return ;  if  (  anchor == null )   setUrl  ( "#" ) ;    anchor . getStyle  ( ) . setPadding  ( 0 ,  Unit . PX ) ;   checkSplitPadding  ( ) ;  CustomFlowPanel  groupRoot =  new CustomFlowPanel  (   checkBoxInput == null ?  DOM . createDiv  ( ) :  DOM . createLabel  ( ) ) ; 
<<<<<<<
 if  (  checkBoxInput != null )   setStyleName  (  groupRoot . getElement  ( ) , "jqm4gwt-li-band" ) ;
=======
  setStyleName  ( label , "jqm4gwt-li-band" ) ;
>>>>>>>
   JQMCommon . setCorners  ( groupRoot , false ) ;  Style  st =   groupRoot . getElement  ( ) . getStyle  ( ) ;   st . setBorderWidth  ( 0 ,  Unit . PX ) ;   st . setMarginTop  ( 0 ,  Unit . PX ) ;   st . setMarginBottom  ( 0 ,  Unit . PX ) ;  FieldSetElement  fldSet =   Document . get  ( ) . createFieldSetElement  ( ) ;  LiControlGroup  grp =  new LiControlGroup  ( fldSet , "jqm4gwt-li-controls" ) ;   groupRoot . add  ( grp ) ;   moveAnchorChildrenTo  ( fldSet ) ;   controlGroupRootElem = groupRoot ;   controlGroup = grp ;   add  ( controlGroupRootElem ) ; }   public void setControlGroup  (  boolean value )  {  if  ( value )  {   createControlGroup  ( ) ; } else  if  (  controlGroup != null )  {   remove  ( controlGroupRootElem ) ;    getElement  ( ) . removeChild  ( anchor ) ;   anchor = null ;   setSplitHref  ( null ) ;   controlGroupRootElem = null ;   controlGroup = null ;   checkBoxInput = null ; } }   public boolean isControlGroup  ( )  {  return  controlGroup != null ; }   public LiControlGroup getControlGroup  ( )  {  return controlGroup ; }   public void setCheckBox  (  IconPos iconPos )  {  if  (  checkBoxInput != null )  {  if  (  iconPos == null )  {   controlGroup . remove  ( checkBoxInput ) ;   checkBoxInput = null ;   setControlGroup  ( false ) ;   setControlGroup  ( true ) ; } else  {   JQMCommon . setIconPos  ( controlGroupRootElem , iconPos ) ; }  return ; }  if  (  iconPos == null )  return ;  TextBox  cb =  new TextBox  ( ) ;    cb . getElement  ( ) . setAttribute  ( "type" , "checkbox" ) ;   checkBoxInput = cb ;   setControlGroup  ( false ) ;   createControlGroup  ( ) ;   JQMCommon . setIconPos  ( controlGroupRootElem , iconPos ) ;   controlGroup . insert  ( cb , 0 ) ; }   public IconPos getCheckBox  ( )  {  if  (  checkBoxInput == null )  return null ;  return  JQMCommon . getIconPos  ( controlGroupRootElem ) ; }   public boolean isChecked  ( )  {  if  (  checkBoxInput == null )  return false ;  InputElement  cb =   checkBoxInput . getElement  ( ) . cast  ( ) ;  return  cb . isChecked  ( ) ; }   private native void setChecked  (  InputElement e ,  boolean value ) ;   public void setChecked  (  boolean value )  {  if  (   checkBoxInput == null ||   isChecked  ( ) == value )  return ;  InputElement  cb =   checkBoxInput . getElement  ( ) . cast  ( ) ;   setChecked  ( cb , value ) ; }   public void addWidget  (  Widget w )  {  if  (   w == null ||  controlGroup == null )  return ;   controlGroup . add  ( w ) ; }   public  int getWidgetCount  ( )  {  if  (  controlGroup == null )  return 0 ;  return  controlGroup . getWidgetCount  ( ) ; }   public Widget getWidget  (   int index )  {  if  (  controlGroup == null )  return null ;  return  controlGroup . getWidget  ( index ) ; } }