  package     com . sksamuel . jqm4gwt . form . elements ;   import   java . util . ArrayList ;  import   java . util . HashMap ;  import   java . util . List ;  import   java . util . Map ;  import      com . google . gwt . core . client . Scheduler ;  import       com . google . gwt . core . client . Scheduler . ScheduledCommand ;  import      com . google . gwt . dom . client . Document ;  import      com . google . gwt . dom . client . Element ;  import      com . google . gwt . dom . client . NodeList ;  import      com . google . gwt . dom . client . OptionElement ;  import      com . google . gwt . dom . client . SelectElement ;  import       com . google . gwt . event . dom . client . BlurHandler ;  import       com . google . gwt . event . dom . client . ChangeEvent ;  import       com . google . gwt . event . dom . client . ChangeHandler ;  import       com . google . gwt . event . dom . client . ClickHandler ;  import       com . google . gwt . event . dom . client . FocusEvent ;  import       com . google . gwt . event . dom . client . FocusHandler ;  import       com . google . gwt . event . dom . client . HasChangeHandlers ;  import       com . google . gwt . event . dom . client . HasClickHandlers ;  import       com . google . gwt . event . dom . client . HasFocusHandlers ;  import       com . google . gwt . event . logical . shared . ValueChangeEvent ;  import       com . google . gwt . event . logical . shared . ValueChangeHandler ;  import       com . google . gwt . event . shared . GwtEvent . Type ;  import      com . google . gwt . event . shared . HandlerRegistration ;  import       com . google . gwt . i18n . client . HasDirection . Direction ;  import      com . google . gwt . uibinder . client . UiChild ;  import       com . google . gwt . user . client . ui . Focusable ;  import       com . google . gwt . user . client . ui . HasValue ;  import       com . google . gwt . user . client . ui . Label ;  import       com . google . gwt . user . client . ui . ListBox ;  import       com . google . gwt . user . client . ui . Widget ;  import    com . sksamuel . jqm4gwt . DataIcon ;  import    com . sksamuel . jqm4gwt . HasCorners ;  import    com . sksamuel . jqm4gwt . HasIcon ;  import    com . sksamuel . jqm4gwt . HasMini ;  import    com . sksamuel . jqm4gwt . HasNative ;  import    com . sksamuel . jqm4gwt . HasPreventFocusZoom ;  import    com . sksamuel . jqm4gwt . HasText ;  import    com . sksamuel . jqm4gwt . IconPos ;  import    com . sksamuel . jqm4gwt . JQMCommon ;  import    com . sksamuel . jqm4gwt . JQMPage ;  import    com . sksamuel . jqm4gwt . JQMWidget ;  import     com . sksamuel . jqm4gwt . events . HasTapHandlers ;  import     com . sksamuel . jqm4gwt . events . JQMComponentEvents ;  import     com . sksamuel . jqm4gwt . events . JQMHandlerRegistration ;  import      com . sksamuel . jqm4gwt . events . JQMHandlerRegistration . WidgetHandlerCounter ;  import     com . sksamuel . jqm4gwt . events . TapEvent ;  import     com . sksamuel . jqm4gwt . events . TapHandler ;  import     com . sksamuel . jqm4gwt . form . JQMFieldContainer ;  import     com . sksamuel . jqm4gwt . html . FormLabel ;   public class JQMSelect  extends JQMFieldContainer  implements   HasNative  < JQMSelect > ,  HasText  < JQMSelect > , HasFocusHandlers , HasChangeHandlers , HasClickHandlers , HasTapHandlers ,  HasValue  < String > , JQMFormWidget ,  HasIcon  < JQMSelect > , HasPreventFocusZoom ,  HasCorners  < JQMSelect > ,  HasMini  < JQMSelect > , Focusable  {   public static class Option  {   private String  value ;   private String  text ;   private String  filterText ;   private boolean  placeholder ;   private boolean  selected ;   private boolean  disabled ;   private DataIcon  icon ;   private String  customIcon ;   public Option  ( )  { }   public String getValue  ( )  {  return value ; }   public void setValue  (  String value )  {    this . value = value ; }   public String getText  ( )  {  return text ; }   public void setText  (  String text )  {    this . text = text ; }   public boolean isPlaceholder  ( )  {  return placeholder ; }   public void setPlaceholder  (  boolean placeholder )  {    this . placeholder = placeholder ; }   public boolean isSelected  ( )  {  return selected ; }   public void setSelected  (  boolean selected )  {    this . selected = selected ; }   public boolean isDisabled  ( )  {  return disabled ; }   public void setDisabled  (  boolean disabled )  {    this . disabled = disabled ; }   public DataIcon getIcon  ( )  {  return icon ; }   public void setIcon  (  DataIcon icon )  {    this . icon = icon ; }   public String getCustomIcon  ( )  {  return customIcon ; }   public void setCustomIcon  (  String customIcon )  {    this . customIcon = customIcon ; }   public String getFilterText  ( )  {  return filterText ; }   public void setFilterText  (  String filterText )  {    this . filterText = filterText ; } }   private static final String  SELECT_STYLENAME = "jqm4gwt-select" ;   protected class ListBoxEx  extends ListBox  {   public ListBoxEx  (  boolean isMultipleSelect )  {  super  ( isMultipleSelect ) ; }    @ Override public void setOptionText  (  OptionElement option ,  String text ,  Direction dir )  {   super . setOptionText  ( option , text , dir ) ; } }   protected final ListBoxEx  select ;   protected final  Map  < String , Integer >  selectIdx =  new  HashMap  < String , Integer >  ( ) ;   protected final FormLabel  label ;   private boolean  valueChangeHandlerInitialized ;   private boolean  transparent = true ;   private Element  transparentPrevPage ;   private boolean  transparentPrevPageClearCache ;   private boolean  transparentDoPrevPageLifecycle ;   private String  delayedValue ;   private Boolean  delayedFireEvents ;   private boolean  addingOptions ;   private  ArrayList  < OptionElement >  addingOptionList ;   public JQMSelect  ( )  {  this  ( null ) ; }   public JQMSelect  (  String text )  {  String  id =   Document . get  ( ) . createUniqueId  ( ) ;   label =  new FormLabel  ( ) ;   label . setFor  ( id ) ;   add  ( label ) ;   select =  new ListBoxEx  ( false ) ;    select . getElement  ( ) . setId  ( id ) ;   add  ( select ) ;   setText  ( text ) ;   addStyleName  ( SELECT_STYLENAME ) ; }    @ Override public HandlerRegistration addBlurHandler  (  BlurHandler handler )  {  return  select . addBlurHandler  ( handler ) ; }    @ Override public HandlerRegistration addChangeHandler  (  ChangeHandler handler )  {  return  select . addChangeHandler  ( handler ) ; }    @ Override public HandlerRegistration addClickHandler  (  ClickHandler handler )  {  return  select . addClickHandler  ( handler ) ; }    @ Override public HandlerRegistration addTapHandler  (  TapHandler handler )  {  return  JQMHandlerRegistration . registerJQueryHandler  (  new WidgetHandlerCounter  ( )  {    @ Override public  int getHandlerCountForWidget  (   Type  <  ? > type )  {  return  getHandlerCount  ( type ) ; } } , this , handler ,  JQMComponentEvents . TAP_EVENT ,  TapEvent . getType  ( ) ) ; }    @ Override public Label addErrorLabel  ( )  {  return null ; }    @ Override public HandlerRegistration addFocusHandler  (  FocusHandler handler )  {  return  addDomHandler  ( handler ,  FocusEvent . getType  ( ) ) ; }    @ UiChild public void addOption  (  Option option )  {   addOption  (  option . value ,  option . text ,  option . filterText ,  option . isPlaceholder  ( ) ,  option . isSelected  ( ) ,  option . isDisabled  ( ) ,  option . getIcon  ( ) ,  option . getCustomIcon  ( ) ) ; }   public void addOption  (  String text )  {   addOption  ( text , text ) ; }   private static void prepareOption  (  OptionElement opt ,  String value ,  String filterText ,  boolean placeholder ,  boolean selected ,  boolean disabled ,  DataIcon icon ,  String customIcon )  {  if  (  value == null )   JQMCommon . setAttribute  ( opt , "value" , null ) ;  if  (   filterText != null &&  !  filterText . isEmpty  ( ) )  {   JQMCommon . setFilterText  ( opt , filterText ) ; }  if  ( placeholder )   JQMCommon . setAttribute  ( opt , "data-placeholder" , "true" ) ;  if  ( selected )   JQMCommon . setAttribute  ( opt , "selected" , "selected" ) ;  if  ( disabled )   JQMCommon . setAttribute  ( opt , "disabled" , "disabled" ) ;  if  (  icon != null )   JQMCommon . setIcon  ( opt , icon ) ; else  if  (  customIcon != null )   JQMCommon . setIcon  ( opt , customIcon ) ; }   private void addOption  (  String value ,  String text ,  String filterText ,  boolean placeholder ,  boolean selected ,  boolean disabled ,  DataIcon icon ,  String customIcon )  {  if  ( addingOptions )  {  OptionElement  opt =   Document . get  ( ) . createOptionElement  ( ) ;   select . setOptionText  ( opt , text , null ) ;   opt . setValue  ( value ) ;   prepareOption  ( opt , value , filterText , placeholder , selected , disabled , icon , customIcon ) ;   addingOptionList . add  ( opt ) ; } else  {   select . addItem  ( text , value ) ;  if  (        value == null ||  (   filterText != null &&  !  filterText . isEmpty  ( ) ) || placeholder || selected || disabled ||  icon != null ||  customIcon != null )  {  SelectElement  selElt =   select . getElement  ( ) . cast  ( ) ;   NodeList  < OptionElement >  opts =  selElt . getOptions  ( ) ;   int  i =   opts . getLength  ( ) - 1 ;  OptionElement  opt =  opts . getItem  ( i ) ;   prepareOption  ( opt , value , filterText , placeholder , selected , disabled , icon , customIcon ) ;   selectIdx . put  (  opt . getValue  ( ) , i ) ; } else  {   int  i =   select . getItemCount  ( ) - 1 ;  String  v =  select . getValue  ( i ) ;   selectIdx . put  ( v , i ) ; }  if  (  delayedValue != null )   tryResolveDelayed  ( ) ; } }   protected void rebuildSearchIndex  ( )  {   selectIdx . clear  ( ) ;  for (   int  i = 0 ;  i <  select . getItemCount  ( ) ;  i ++ )  {  String  v =  select . getValue  ( i ) ;   selectIdx . put  ( v , i ) ; } }   public void beginAddOptions  (   int initialCapacity )  {   addingOptions = true ;   addingOptionList =   initialCapacity < 0 ?  new  ArrayList  < OptionElement >  ( ) :  new  ArrayList  < OptionElement >  ( initialCapacity ) ; }   public void beginAddOptions  ( )  {   beginAddOptions  (  - 1 ) ; }   public void endAddOptions  ( )  {   addingOptions = false ;  if  (  !  addingOptionList . isEmpty  ( ) )  {  SelectElement  selElt =   select . getElement  ( ) . cast  ( ) ;   int  i =   selElt . getOptions  ( ) . getLength  ( ) ;  for ( OptionElement opt : addingOptionList )  {   selElt . add  ( opt , null ) ;   selectIdx . put  (  opt . getValue  ( ) , i ) ;   i ++ ; } }   addingOptionList = null ;  if  (  delayedValue != null )   tryResolveDelayed  ( ) ; }   private void addOption  (  String value ,  String text ,  String filterText ,  boolean placeholder ,  boolean selected ,  boolean disabled )  {   addOption  ( value , text , filterText , placeholder , selected , disabled , null , null ) ; }   public void addOption  (  String value ,  String text ,  String filterText )  {   addOption  ( value , text , filterText , false , false , false ) ; }   public void addOption  (  String value ,  String text )  {   addOption  ( value , text , null ) ; }   public  int getOptionCount  ( )  {  return  select . getItemCount  ( ) ; }   public String getOptionText  (   int index )  {  return  select . getItemText  ( index ) ; }   public String getOptionValue  (   int index )  {  return  select . getValue  ( index ) ; }   public String getOptionIcon  (  String optValue )  {  if  (  optValue == null )  return null ;   List  < OptionElement >  opts =  getOptions  ( ) ;  for ( OptionElement opt : opts )  {  if  (  optValue . equals  (  opt . getValue  ( ) ) )  {  return  JQMCommon . getCustomIcon  ( opt ) ; } }  return null ; }   public  List  < OptionElement > getOptions  ( )  {  SelectElement  selElt =   select . getElement  ( ) . cast  ( ) ;   NodeList  < OptionElement >  opts =  selElt . getOptions  ( ) ;   List  < OptionElement >  rslt =  new  ArrayList  < OptionElement >  (   opts != null ?  opts . getLength  ( ) : 0 ) ;  if  (  opts != null )  {  for (   int  i = 0 ;  i <  opts . getLength  ( ) ;  i ++ )  {  OptionElement  opt =  opts . getItem  ( i ) ;   rslt . add  ( opt ) ; } }  return rslt ; }   public OptionElement getOption  (   int index )  {  if  (  index < 0 )  return null ;  SelectElement  selElt =   select . getElement  ( ) . cast  ( ) ;   NodeList  < OptionElement >  opts =  selElt . getOptions  ( ) ;  return   index <  opts . getLength  ( ) ?  opts . getItem  ( index ) : null ; }    @ Override public HandlerRegistration addValueChangeHandler  (   ValueChangeHandler  < String > handler )  {  if  (  ! valueChangeHandlerInitialized )  {   valueChangeHandlerInitialized = true ;   addChangeHandler  (  new ChangeHandler  ( )  {    @ Override public void onChange  (  ChangeEvent event )  {   ValueChangeEvent . fire  (  JQMSelect . this ,  getValue  ( ) ) ; } } ) ; }  return  addHandler  ( handler ,  ValueChangeEvent . getType  ( ) ) ; }    @ Override public IconPos getIconPos  ( )  {  return  JQMCommon . getIconPos  ( select ) ; }    @ Override public void setIconPos  (  IconPos pos )  {   JQMCommon . setIconPos  ( select , pos ) ; }    @ Override public JQMSelect withIconPos  (  IconPos pos )  {   setIconPos  ( pos ) ;  return this ; }    @ Override public boolean isMini  ( )  {  return  JQMCommon . isMini  ( select ) ; }    @ Override public void setMini  (  boolean mini )  {   JQMCommon . setMini  ( select , mini ) ; }    @ Override public JQMSelect withMini  (  boolean mini )  {   setMini  ( mini ) ;  return this ; }   public  int getSelectedIndex  ( )  {  return  select . getSelectedIndex  ( ) ; }   public String getSelectedValue  ( )  {  return  getValue  ( ) ; }    @ Override public  int getTabIndex  ( )  {  return  select . getTabIndex  ( ) ; }    @ Override public String getText  ( )  {  return  label . getText  ( ) ; }    @ Override public String getValue  ( )  {  return  getValue  (  getSelectedIndex  ( ) ) ; }   public String getValue  (   int index )  {  return   index ==  - 1 ? null :  select . getValue  ( index ) ; }   public String getDelayedValue  ( )  {  return delayedValue ; }   public  int indexOf  (  String value )  {  if  (  value == null )  return  - 1 ;  Integer  i =  selectIdx . get  ( value ) ;  return   i == null ?  - 1 : i ; }    @ Override public boolean isCorners  ( )  {  return  JQMCommon . isCorners  ( select ) ; }    @ Override public void setCorners  (  boolean corners )  {   JQMCommon . setCorners  ( select , corners ) ; }    @ Override public JQMSelect withCorners  (  boolean corners )  {   setCorners  ( corners ) ;  return this ; }   public boolean isMultiple  ( )  {  String  s =  JQMCommon . getAttribute  ( select , "multiple" ) ;  return    s != null &&  !  s . isEmpty  ( ) &&  "multiple" . equals  ( s ) ; }   public void setMulitple  (  boolean value )  {   JQMCommon . setAttribute  ( select , "multiple" ,  value ? "multiple" : null ) ; }    @ Override public boolean isNative  ( )  {  String  s =  JQMCommon . getAttribute  ( select , "data-native-menu" ) ;  if  (   s == null ||  s . isEmpty  ( ) )  return true ;  return  !  "false" . equals  ( s ) ; }    @ Override public void setNative  (  boolean value )  {   JQMCommon . setAttribute  ( select , "data-native-menu" ,  value ? null : "false" ) ; }    @ Override public JQMSelect withNative  (  boolean value )  {   setNative  ( value ) ;  return this ; }    @ Override public boolean isPreventFocusZoom  ( )  {  return  "true" . equals  (  JQMCommon . getAttribute  ( select , "data-prevent-focus-zoom" ) ) ; }    @ Override public void setPreventFocusZoom  (  boolean b )  {   JQMCommon . setAttribute  ( select , "data-prevent-focus-zoom" ,  b ? "true" : null ) ; }   public boolean isShadow  ( )  {  String  s =  JQMCommon . getAttribute  ( select , "data-shadow" ) ;  if  (   s == null ||  s . isEmpty  ( ) )  return true ;  return  !  "false" . equals  ( s ) ; }   public void setShadow  (  boolean value )  {   JQMCommon . setAttribute  ( select , "data-shadow" ,  value ? null : "false" ) ; }   public void close  ( )  {   close  (  select . getElement  ( ) ) ; }   private static native void close  (  Element elt ) ;   public void open  ( )  {   open  (  select . getElement  ( ) ) ; }   private static native void open  (  Element elt ) ;   public void refresh  ( )  {   refresh  (  select . getElement  ( ) ) ; }   private static native void refresh  (  Element elt ) ;   public void removeOption  (  String value )  {   int  indexOf =  indexOf  ( value ) ;  if  (  indexOf >= 0 )  {   int  i =  select . getSelectedIndex  ( ) ;  if  (  i == indexOf )   select . setSelectedIndex  (  - 1 ) ;   select . removeItem  ( indexOf ) ; } }   public boolean isEmpty  ( )  {  return    getSelectedIndex  ( ) ==  - 1 &&   getOptionCount  ( ) == 0 ; }   public void clear  ( )  {   clear  ( false ) ; }   public void clear  (  boolean delayValue )  {  if  (  ! delayValue )   clearDelayed  ( ) ; else  {  String  v =  getValue  ( ) ;  if  (  v != null )  {   delayedValue = v ;   delayedFireEvents = false ; } }   select . clear  ( ) ;   selectIdx . clear  ( ) ;   select . setSelectedIndex  (  - 1 ) ; }   private void clearDelayed  ( )  {   delayedValue = null ;   delayedFireEvents = null ; }    @ Override public String getTheme  ( )  {  return  JQMCommon . getTheme  ( select ) ; }    @ Override public void setTheme  (  String themeName )  {   JQMCommon . applyTheme  ( select , themeName ) ; }    @ Override public JQMWidget withTheme  (  String themeName )  {   setTheme  ( themeName ) ;  return this ; }    @ Override public void setAccessKey  (   char key )  {   select . setAccessKey  ( key ) ; }    @ Override public void setFocus  (  boolean focused )  {   select . setFocus  ( focused ) ; }    @ Override public JQMSelect removeIcon  ( )  {  String  oldIcon =  JQMCommon . getCustomIcon  (  select . getElement  ( ) ) ;   oldIcon =   oldIcon == null ? "" :   JQMCommon . STYLE_UI_ICON + oldIcon ;   JQMCommon . setIcon  ( select , null ) ;   refreshIcon  (  getElement  ( ) , oldIcon , "" ) ;  return this ; }    @ Override public void setBuiltInIcon  (  DataIcon icon )  {  String  oldIcon =  JQMCommon . getCustomIcon  (  select . getElement  ( ) ) ;   oldIcon =   oldIcon == null ? "" :   JQMCommon . STYLE_UI_ICON + oldIcon ;   JQMCommon . setIcon  ( select , icon ) ;  String  newIcon =  JQMCommon . getCustomIcon  (  select . getElement  ( ) ) ;   newIcon =   newIcon == null ? "" :   JQMCommon . STYLE_UI_ICON + newIcon ;   refreshIcon  (  getElement  ( ) , oldIcon , newIcon ) ; }    @ Override public void setIconURL  (  String src )  {  String  oldIcon =  JQMCommon . getCustomIcon  (  select . getElement  ( ) ) ;   oldIcon =   oldIcon == null ? "" :   JQMCommon . STYLE_UI_ICON + oldIcon ;   JQMCommon . setIcon  (  select . getElement  ( ) , src ) ;  String  newIcon =  JQMCommon . getCustomIcon  (  select . getElement  ( ) ) ;   newIcon =   newIcon == null ? "" :   JQMCommon . STYLE_UI_ICON + newIcon ;   refreshIcon  (  getElement  ( ) , oldIcon , newIcon ) ; }   private static native void refreshIcon  (  Element elt ,  String oldIcon ,  String newIcon ) ;    @ Override public JQMSelect withBuiltInIcon  (  DataIcon icon )  {   setBuiltInIcon  ( icon ) ;  return this ; }    @ Override public JQMSelect withIconURL  (  String src )  {   setIconURL  ( src ) ;  return this ; }   public boolean isIconNoDisc  ( )  {  return  JQMCommon . isIconNoDisc  ( this ) ; }   public void setIconNoDisc  (  boolean value )  {   JQMCommon . setIconNoDisc  ( this , value ) ; }   public boolean isIconAlt  ( )  {  return  JQMCommon . isIconAlt  ( this ) ; }   public void setIconAlt  (  boolean value )  {   JQMCommon . setIconAlt  ( this , value ) ; }   public String getOverlayTheme  ( )  {  return  JQMCommon . getAttribute  ( select , "data-overlay-theme" ) ; }   public void setOverlayTheme  (  String theme )  {   JQMCommon . setAttribute  ( select , "data-overlay-theme" , theme ) ; }   public void setSelectedIndex  (   int index )  {   select . setSelectedIndex  ( index ) ;   refresh  ( ) ; }   public void setSelectedValue  (  String value ,  boolean ignoreCase )  {  if  (  value == null )  {   setSelectedIndex  (  - 1 ) ;  return ; }  if  (  ! ignoreCase )  {   int  i =  indexOf  ( value ) ;   setSelectedIndex  ( i ) ;  return ; } else  {   int  i =  indexOf  ( value ) ;  if  (  i >= 0 )  {   setSelectedIndex  ( i ) ;  return ; } }  for (   int  k = 0 ;  k <  select . getItemCount  ( ) ;  k ++ )  {  String  v =  select . getValue  ( k ) ;  boolean  eq =  value . equalsIgnoreCase  ( v ) ;  if  ( eq )  {   setSelectedIndex  ( k ) ;  return ; } } }    @ Override public void setTabIndex  (   int index )  {   select . setTabIndex  ( index ) ; }    @ Override public void setText  (  String text )  {   label . setText  ( text ) ; }    @ Override public JQMSelect withText  (  String text )  {   setText  ( text ) ;  return this ; }    @ Override public void setValue  (  String value )  {   setValue  ( value , false ) ; }    @ Override public void setValue  (  String value ,  boolean fireEvents )  {   int  newIdx =   value == null ?  - 1 :  indexOf  ( value ) ;  if  (   newIdx ==  - 1 &&  value != null )  {   delayedValue = value ;   delayedFireEvents = fireEvents ; } else  {   clearDelayed  ( ) ; }   setNewSelectedIndex  ( newIdx , fireEvents ) ; }   private void setNewSelectedIndex  (   int newIdx ,  boolean fireEvents )  {   int  oldIdx =  fireEvents ?  getSelectedIndex  ( ) :  - 1 ;   setSelectedIndex  ( newIdx ) ;  if  ( fireEvents )  {   newIdx =  getSelectedIndex  ( ) ;  if  (  oldIdx != newIdx )  {   ValueChangeEvent . fire  ( this ,  getValue  ( newIdx ) ) ; } } }   private void tryResolveDelayed  ( )  {  if  (  delayedValue == null )  return ;   int  newIdx =  indexOf  ( delayedValue ) ;  if  (  newIdx ==  - 1 )  return ;  boolean  fireEvents =   delayedFireEvents != null ? delayedFireEvents : false ;   clearDelayed  ( ) ;   setNewSelectedIndex  ( newIdx , fireEvents ) ; }   public String getCloseText  ( )  {  return  JQMCommon . getAttribute  ( select , "data-close-text" ) ; }   public void setCloseText  (  String value )  {   JQMCommon . setAttribute  ( select , "data-close-text" , value ) ; }   public boolean getSelectInline  ( )  {  return  JQMCommon . isInline  ( select ) ; }   public void setSelectInline  (  boolean value )  {   JQMCommon . setInline  ( select , value ) ; }   public boolean isHidePlaceholderMenuItems  ( )  {  String  s =  JQMCommon . getAttribute  ( select , "data-hide-placeholder-menu-items" ) ;  if  (   s == null ||  s . isEmpty  ( ) )  return true ;  return  !  "false" . equals  ( s ) ; }   public void setHidePlaceholderMenuItems  (  boolean value )  {   JQMCommon . setAttribute  ( select , "data-hide-placeholder-menu-items" ,  value ? null : "false" ) ; }    @ Override protected Widget getDataFilterWidget  ( )  {  return select ; }    @ Override protected void onLoad  ( )  {   super . onLoad  ( ) ;   bindLifecycleEvents  (   select . getElement  ( ) . getId  ( ) , this ) ; }    @ Override protected void onUnload  ( )  {   unbindLifecycleEvents  (   select . getElement  ( ) . getId  ( ) ) ;   super . onUnload  ( ) ; }   private static native void bindLifecycleEvents  (  String id ,  JQMSelect selectCtrl ) ;   private static native void unbindLifecycleEvents  (  String id ) ;   protected void doDlgBeforeShow  (  Element dialog ,  Element prevPage )  {  if  (  transparent &&  prevPage != null )  {   transparentPrevPage = prevPage ;   prevPage . addClassName  (  JQMPage . UI_DIALOG_BACKGROUND ) ;  String  s =  prevPage . getAttribute  (  JQMPage . DATA_DOM_CACHE ) ;  if  (  "true" . equals  ( s ) )  {   transparentPrevPageClearCache = false ; } else  {   transparentPrevPageClearCache = true ;   prevPage . setAttribute  (  JQMPage . DATA_DOM_CACHE , "true" ) ; }  if  (  ! transparentDoPrevPageLifecycle )  {  JQMPage  prev =  JQMPage . findPage  ( transparentPrevPage ) ;  if  (  prev != null )   prev . unbindLifecycleEvents  ( ) ; } } else  {   transparentPrevPage = null ;   transparentPrevPageClearCache = false ; }  if  ( transparent )   dialog . addClassName  (  JQMPage . JQM4GWT_DLG_TRANSPARENT ) ; else   dialog . removeClassName  (  JQMPage . JQM4GWT_DLG_TRANSPARENT ) ; }   protected void doDlgHide  (  Element dialog ,  Element nextPage )  {  if  (  transparentPrevPage != null )  {   transparentPrevPage . removeClassName  (  JQMPage . UI_DIALOG_BACKGROUND ) ;  if  ( transparentPrevPageClearCache )  {   transparentPrevPage . removeAttribute  (  JQMPage . DATA_DOM_CACHE ) ; }  if  (  ! transparentDoPrevPageLifecycle )  {   final JQMPage  prev =  JQMPage . findPage  ( transparentPrevPage ) ;  if  (  prev != null )  {    Scheduler . get  ( ) . scheduleFinally  (  new ScheduledCommand  ( )  {    @ Override public void execute  ( )  {   prev . bindLifecycleEvents  ( ) ; } } ) ; } }   transparentPrevPage = null ;   transparentPrevPageClearCache = false ; } }   public boolean isDlgTransparent  ( )  {  return transparent ; }   public void setDlgTransparent  (  boolean transparent )  {    this . transparent = transparent ; }   public boolean isDlgTransparentDoPrevPageLifecycle  ( )  {  return transparentDoPrevPageLifecycle ; }   public void setDlgTransparentDoPrevPageLifecycle  (  boolean transparentDoPrevPageLifecycle )  {    this . transparentDoPrevPageLifecycle = transparentDoPrevPageLifecycle ; } }