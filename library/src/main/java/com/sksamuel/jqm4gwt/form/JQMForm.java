  package    com . sksamuel . jqm4gwt . form ;   import   java . util . ArrayList ;  import   java . util . Collection ;  import   java . util . HashMap ;  import   java . util . List ;  import   java . util . Map ;  import      com . google . gwt . core . client . Scheduler ;  import       com . google . gwt . core . client . Scheduler . ScheduledCommand ;  import       com . google . gwt . event . dom . client . BlurEvent ;  import       com . google . gwt . event . dom . client . BlurHandler ;  import       com . google . gwt . event . dom . client . ClickEvent ;  import       com . google . gwt . event . dom . client . ClickHandler ;  import      com . google . gwt . user . client . Window ;  import       com . google . gwt . user . client . ui . FlowPanel ;  import       com . google . gwt . user . client . ui . InlineLabel ;  import       com . google . gwt . user . client . ui . Label ;  import       com . google . gwt . user . client . ui . UIObject ;  import       com . google . gwt . user . client . ui . Widget ;  import    com . sksamuel . jqm4gwt . JQMContext ;  import    com . sksamuel . jqm4gwt . Mobile ;  import      com . sksamuel . jqm4gwt . form . elements . JQMFormWidget ;  import      com . sksamuel . jqm4gwt . form . validators . NotNullOrEmptyValidator ;  import      com . sksamuel . jqm4gwt . form . validators . Validator ;   public class JQMForm  extends FlowPanel  {   private static final String  STYLE_OK_VALIDATED = "jqm4gwt-fieldvalidated" ;   private static final String  STYLE_ERRORCONTAIN = "jqm4gwt-errorcontain" ;   private static final String  STYLE_ERROR_TYPE = "jqm4gwt-errortype-" ;   private static final String  STYLE_FORM_REQUIRED = "jqm4gwt-form-required" ;   private static final String  STYLE_FORM_VALIDATOR = "jqm4gwt-form-validator-" ;   private static final String  JQM4GWT_ERROR_LABEL_STYLENAME = "jqm4gwt-error" ;   private static final  int  ERROR_SCROLL_OFFSET = 80 ;   private final FlowPanel  generalErrors =  new FlowPanel  ( ) ;   private final  List  < Label >  errors =  new  ArrayList  < Label >  ( ) ;   private  SubmissionHandler  <  ? >  submissionHandler ;   private final  Map  < Validator , Label >  validatorLabels =  new  HashMap  < Validator , Label >  ( ) ;   private final  Map  < JQMFormWidget ,  Collection  < Validator > >  widgetValidators =  new  HashMap  < JQMFormWidget ,  Collection  < Validator > >  ( ) ;   private final  Map  < Validator , Widget >  notifiedWidgets =  new  HashMap  < Validator , Widget >  ( ) ;   protected JQMForm  (   SubmissionHandler  <  ? > handler )  {  this  ( ) ;   setSubmissionHandler  ( handler ) ; }   public JQMForm  ( )  {   setStyleName  ( "jqm4gwt-form" ) ;   add  ( generalErrors ) ; }   public  SubmissionHandler  <  ? > getSubmissionHandler  ( )  {  return submissionHandler ; }   public void setSubmissionHandler  (   SubmissionHandler  <  ? > submissionHandler )  {    this . submissionHandler = submissionHandler ; }   protected void add  (  JQMSubmit submit )  {   super . add  ( submit ) ;   submit . addClickHandler  (  new ClickHandler  ( )  {    @ Override public void onClick  (  ClickEvent event )  {   submit  ( ) ; } } ) ; }   public void addRequired  (  JQMFormWidget widget )  {   addRequired  ( widget , true ) ; }   public void addRequired  (  JQMFormWidget widget ,  boolean immediate )  {   addRequired  ( widget , "This field cannot be empty" , immediate ) ; }   public void addRequired  (  JQMFormWidget widget ,  String msg )  {   addRequired  ( widget , msg , true ) ; }   public void addRequired  (  JQMFormWidget widget ,  String msg ,  boolean immediate )  {   add  ( widget ) ;   setRequired  ( widget , msg , immediate ) ; }    @ Deprecated public void addValidator  (  JQMFormWidget widget ,  Validator validator )  {   addValidator  ( validator , widget ) ; }   public void addValidator  (  Validator validator )  {   addValidator  ( validator ,  ( JQMFormWidget ) null ) ; }   public void addValidator  (  Validator validator ,  boolean immediate ,  JQMFormWidget ...  firingWidgets )  {   addValidator  ( null , validator , immediate , firingWidgets ) ; }   public void addValidator  (  Validator validator ,  JQMFormWidget ...  firingWidgets )  {   addValidator  ( null , validator , true , firingWidgets ) ; }   private void addErrorLabel  (  Validator validator ,  Label label )  {   errors . add  ( label ) ;   validatorLabels . put  ( validator , label ) ; }   public void addValidator  (  Widget notifiedWidget ,  Validator validator ,  boolean immediate ,  Widget positionErrorAfter ,  JQMFormWidget ...  firingWidgets )  {  boolean  labelAdded = false ;  if  (  firingWidgets != null )  {  for ( JQMFormWidget w : firingWidgets )  {  Label  la =  w . addErrorLabel  ( ) ;  if  (  la == null )  continue ;   labelAdded = true ;   addErrorLabel  ( validator , la ) ; } }  if  (  ! labelAdded )  {  Label  label =  new InlineLabel  ( ) ;   label . setStyleName  ( JQM4GWT_ERROR_LABEL_STYLENAME ) ;   label . setVisible  ( false ) ;   addErrorLabel  ( validator , label ) ;  if  (  positionErrorAfter == null )  {   add  ( label ) ; } else  {  boolean  inserted = false ;  Widget  w = positionErrorAfter ;  while  (  w != null )  {   int  i =  getWidgetIndex  ( w ) ;  if  (  i >= 0 )  {   insert  ( label ,  i + 1 ) ;   inserted = true ;  break ; }   w =  w . getParent  ( ) ; }  if  (  ! inserted )   add  ( label ) ; } }   registerValidatorWithFiringWidgets  ( validator , firingWidgets , immediate ) ;  boolean  required =  validator instanceof NotNullOrEmptyValidator ;  String  validatorClass =  STYLE_FORM_VALIDATOR +  getShortClassName  (  validator . getClass  ( ) ) ;  if  (  notifiedWidget != null )  {   notifiedWidgets . put  ( validator , notifiedWidget ) ;    notifiedWidget . getElement  ( ) . addClassName  ( validatorClass ) ;  if  ( required )    notifiedWidget . getElement  ( ) . addClassName  ( STYLE_FORM_REQUIRED ) ; } else  if  (  firingWidgets != null )  {  for ( JQMFormWidget w : firingWidgets )  {     w . asWidget  ( ) . getElement  ( ) . addClassName  ( validatorClass ) ;  if  ( required )     w . asWidget  ( ) . getElement  ( ) . addClassName  ( STYLE_FORM_REQUIRED ) ; } } }   public void addValidator  (  Widget notifiedWidget ,  Validator validator ,  boolean immediate ,  JQMFormWidget ...  firingWidgets )  {   final Widget  pos ;  if  (   firingWidgets != null &&   firingWidgets . length > 0 )  {   pos =   firingWidgets [   firingWidgets . length - 1 ] . asWidget  ( ) ; } else  {   pos = notifiedWidget ; }   addValidator  ( notifiedWidget , validator , immediate , pos , firingWidgets ) ; }   public void clearValidationErrors  ( )  {  for ( Label label :  validatorLabels . values  ( ) )  {   label . setVisible  ( false ) ; }   clearValidationStyles  ( ) ; }   public void clearValidationStyles  ( )  {  for ( JQMFormWidget widget :  widgetValidators . keySet  ( ) )  {  UIObject  ui =  widget . asWidget  ( ) ;   Collection  < Validator >  validators =  widgetValidators . get  ( widget ) ;  for ( Validator v : validators )  {  if  (  notifiedWidgets . containsKey  ( v ) )   ui =  notifiedWidgets . get  ( v ) ;   removeStyles  ( v , ui ) ; } } }   private  int getFirstErrorOffset  ( )  {  for ( Label label : errors )  {  if  (  label . isVisible  ( ) )  {  return  JQMContext . getTop  (  label . getElement  ( ) ) ; } }  return 0 ; }   public void hideFormProcessingDialog  ( )  {   Mobile . hideLoadingDialog  ( ) ; }   private void registerValidatorWithFiringWidget  (   final JQMFormWidget widget ,  Validator validator ,  boolean immediate )  {  if  ( immediate )  if  (   widgetValidators . get  ( widget ) == null )   widget . addBlurHandler  (  new BlurHandler  ( )  {    @ Override public void onBlur  (  BlurEvent event )  {   validate  ( widget ) ; } } ) ;  if  (   widgetValidators . get  ( widget ) == null )  {   widgetValidators . put  ( widget ,  new  ArrayList  < Validator >  ( ) ) ; }    widgetValidators . get  ( widget ) . add  ( validator ) ; }   private void registerValidatorWithFiringWidgets  (  Validator validator ,   JQMFormWidget  [ ] widgets ,  boolean immediate )  {  if  (  widgets != null )  for ( JQMFormWidget widget : widgets )  {   registerValidatorWithFiringWidget  ( widget , validator , immediate ) ; } }   private static String getShortClassName  (   Class  <  ? > clazz )  {  if  (  clazz == null )  return null ;  String  s =  clazz . getName  ( ) ;   int  p =  s . lastIndexOf  ( '.' ) ;  if  (  p >= 0 )  return  s . substring  (  p + 1 ) ; else  return s ; }   private static void removeStyles  (  Validator validator ,  UIObject ui )  {   ui . removeStyleName  (  STYLE_ERROR_TYPE +  getShortClassName  (  validator . getClass  ( ) ) ) ;   ui . removeStyleName  ( STYLE_ERRORCONTAIN ) ;   ui . removeStyleName  ( STYLE_OK_VALIDATED ) ; }   protected void scrollToFirstError  ( )  {   int  y =   getFirstErrorOffset  ( ) - ERROR_SCROLL_OFFSET ;   Mobile . silentScroll  ( y ) ; }   public void setError  (  String string )  {  Label  errorLabel =  new Label  ( string ) ;   errorLabel . setStyleName  ( JQM4GWT_ERROR_LABEL_STYLENAME ) ;   generalErrors . add  ( errorLabel ) ;   Window . scrollTo  ( 0 , 0 ) ; }   public void setRequired  (  JQMFormWidget widget ,  String msg )  {   setRequired  ( widget , msg , true ) ; }   public void setRequired  (  JQMFormWidget widget ,  String msg ,  boolean immediate )  {   addValidator  (  new NotNullOrEmptyValidator  ( widget , msg ) , immediate , widget ) ; }   public void showFormProcessingDialog  (  String msg )  {   Mobile . showLoadingDialog  ( msg ) ; }   public void submit  (  String ...  submitMsgs )  {  if  (  submissionHandler == null )  throw  new IllegalStateException  (  "No SubmissionHandler has been set for this Form and it is in an invalid " + "state for submit() until one has been defined." ) ;   generalErrors . clear  ( ) ;  boolean  validated =  validate  ( ) ;  if  ( validated )  {  String  s = null ;  if  (   submitMsgs . length > 0 )   s =  submitMsgs [ 0 ] ;  if  (   s == null ||  s . isEmpty  ( ) )   s = "Submitting form" ;   showFormProcessingDialog  ( s ) ;    @ SuppressWarnings  ( "unchecked" )  SubmissionHandler  < JQMForm >  h =  (  SubmissionHandler  < JQMForm > ) submissionHandler ;   h . onSubmit  ( this ) ; } else  {   scrollToFirstError  ( ) ; } }   public boolean validate  ( )  {  boolean  validated = true ;  for ( JQMFormWidget widget :  widgetValidators . keySet  ( ) )  {  if  (  !  validate  ( widget ) )   validated = false ; }  return validated ; }   protected boolean validate  (  JQMFormWidget widget )  {  boolean  validated = true ;   Collection  < Validator >  validators =  widgetValidators . get  ( widget ) ;  for ( Validator v : validators )  if  (  !  validate  ( v ,  widget . asWidget  ( ) ) )   validated = false ;  return validated ; }   protected boolean validate  (  Validator validator ,  UIObject ui )  {  if  (  notifiedWidgets . containsKey  ( validator ) )   ui =  notifiedWidgets . get  ( validator ) ;  String  msg =  validator . validate  ( ) ;  if  (   msg == null ||   msg . length  ( ) == 0 )  {   validationStyles  ( validator , null , ui , true ) ;  return true ; } else  {   validationStyles  ( validator , msg , ui , false ) ;  return false ; } }   private void validationStyles  (  Validator validator ,  String msg ,  UIObject ui ,  boolean pass )  {   removeStyles  ( validator , ui ) ;   final Label  label =  validatorLabels . get  ( validator ) ;  if  ( pass )  {    Scheduler . get  ( ) . scheduleEntry  (  new ScheduledCommand  ( )  {    @ Override public void execute  ( )  {   label . setText  ( null ) ;   label . setVisible  ( false ) ; } } ) ; } else  {   label . setVisible  ( true ) ;   label . setText  ( msg ) ;   ui . addStyleName  (  STYLE_ERROR_TYPE +  getShortClassName  (  validator . getClass  ( ) ) ) ; }  if  (   ui . getStyleName  ( ) . contains  ( STYLE_ERROR_TYPE ) )  {   ui . addStyleName  ( STYLE_ERRORCONTAIN ) ; } else  {   ui . addStyleName  ( STYLE_OK_VALIDATED ) ; } } }