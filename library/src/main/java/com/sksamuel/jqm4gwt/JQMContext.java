  package   com . sksamuel . jqm4gwt ;   import   java . util . Date ;  import      com . google . gwt . core . client . JavaScriptObject ;  import      com . google . gwt . core . client . JsArrayString ;  import      com . google . gwt . core . client . JsDate ;  import      com . google . gwt . dom . client . Element ;  import       com . google . gwt . user . client . ui . RootPanel ;  import       com . google . gwt . user . client . ui . Widget ;   public class JQMContext  {   private static boolean  defaultTransistionDirection = false ;   private static boolean  defaultChangeHash = true ;   public static native void disableHashListening  ( ) ;   public static void attachAndEnhance  (  JQMContainer container )  {  if  (  container == null )  return ;  RootPanel  p =  RootPanel . get  ( ) ;  if  (  p == null )  return ;   p . add  ( container ) ;   enhance  ( container ) ;   container . setEnhanced  ( true ) ; }   public static void changePage  (  JQMContainer container )  {   changePage  ( container , false ) ; }   public static void changePage  (  JQMContainer container ,  boolean dialog )  {   changePage  ( container , dialog ,  getDefaultTransition  ( ) ) ; }   public static void changePage  (  JQMContainer container ,  Transition transition )  {   changePage  ( container , false , transition ) ; }   public static void changePage  (  JQMContainer container ,  boolean dialog ,  Transition transition )  {   changePage  ( container , dialog , transition , defaultTransistionDirection ) ; }   public static void changePage  (  JQMContainer container ,  Transition transition ,  boolean reverse )  {   changePage  ( container , false , transition , reverse ) ; }   public static void changePage  (  JQMContainer container ,  boolean dialog ,  Transition transition ,  boolean reverse )  {   Mobile . changePage  (  "#" +  container . getId  ( ) , transition , reverse , defaultChangeHash , dialog ) ; }   private static void enhance  (  JQMContainer c )  {   render  (  c . getElement  ( ) ) ; }   public static Transition getDefaultTransition  ( )  {  String  val =  getDefaultTransitionImpl  ( ) ;  Transition  t =  getTransitionForJQMString  ( val ) ;  return   t != null ? t :  Transition . FADE ; }   private static Transition getTransitionForJQMString  (  String val )  {  if  (  val != null )  {  for ( Transition t :  Transition . values  ( ) )  {  if  (  val . equalsIgnoreCase  (  t . getJqmValue  ( ) ) )  {  return t ; } } }  return null ; }   private static native String getDefaultTransitionImpl  ( ) ;   public static native  int getLeft  (  String id ) ;   public static native  int getTop  (  String id ) ;   public static native  int getTop  (  Element elt ) ;   public static native void initializePage  ( ) ;   public static void render  (  String id )  {  if  (   id == null ||  id . isEmpty  ( ) )  {  throw  new IllegalArgumentException  ( "render() for empty id is not possible" ) ; }   renderImpl  ( id ) ; }   public static void render  (  Element elt )  {  if  (  elt == null )  {  throw  new IllegalArgumentException  ( "render() for null element is not possible" ) ; }   renderImpl  ( elt ) ; }   private static native void renderImpl  (  String id ) ;   private static native void renderImpl  (  Element elt ) ;   public static void setDefaultTransition  (  Transition defaultTransition )  {   setDefaultTransitionImpl  (  defaultTransition . getJqmValue  ( ) ) ; }   public static void setDefaultTransition  (  Transition defaultTransition ,  boolean direction )  {   setDefaultTransitionImpl  (  defaultTransition . getJqmValue  ( ) ) ;   defaultTransistionDirection = direction ; }   private static native void setDefaultTransitionImpl  (  String transition ) ;   public static void setDefaultChangeHash  (  boolean defaultChangeHash )  {    JQMContext . defaultChangeHash = defaultChangeHash ; }   public static void silentScroll  (  Element e )  {  if  (   e . getId  ( ) != null )   Mobile . silentScroll  (  getTop  (  e . getId  ( ) ) ) ; }   public static void silentScroll  (  Widget widget )  {   silentScroll  (  widget . getElement  ( ) ) ; }   public static Date jsDateToDate  (  JsDate jsDate )  {  if  (  jsDate == null )  return null ;   double  msec =  jsDate . getTime  ( ) ;  return  new Date  (  (  long ) msec ) ; }   public static JsArrayString getJsArrayString  (  String ...  strings )  {  JsArrayString  jsStrs =  ( JsArrayString )  JavaScriptObject . createArray  ( ) ;  for ( String s : strings )  {   jsStrs . push  ( s ) ; }  return jsStrs ; }   public static native JavaScriptObject getCssForRule  (  String rule ,  JsArrayString props ,  JsArrayString regexProps ) ;   public static native String jsObjToString  (  JavaScriptObject jsObj ,  String propValueSeparator ,  String propsSeparator ) ;   public static native JsArrayString getJsObjKeys  (  JavaScriptObject jsObj ) ;   public static native String getJsObjValue  (  JavaScriptObject jsObj ,  String key ) ;   public static native void setJsObjValue  (  JavaScriptObject jsObj ,  String key ,  String value ) ;   public static native void deleteJsObjProperty  (  JavaScriptObject jsObj ,  String key ) ;   public static native Integer getJsObjIntValue  (  JavaScriptObject jsObj ,  String key ) ;   public static native Double getJsObjDoubleValue  (  JavaScriptObject jsObj ,  String key ) ;   public static native void setJsObjIntValue  (  JavaScriptObject jsObj ,  String key ,   int value ) ;   public static native void setJsObjDoubleValue  (  JavaScriptObject jsObj ,  String key ,   double value ) ;   public static  double round  (   double valueToRound ,   int numberOfDecimalPlaces )  {   double  multipicationFactor =  Math . pow  ( 10 , numberOfDecimalPlaces ) ;   double  interestedInZeroDPs =  valueToRound * multipicationFactor ;  return   Math . round  ( interestedInZeroDPs ) / multipicationFactor ; } }