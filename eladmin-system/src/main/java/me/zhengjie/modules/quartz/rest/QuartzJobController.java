  package     me . zhengjie . modules . quartz . rest ;   import    io . swagger . annotations . Api ;  import    io . swagger . annotations . ApiOperation ;  import  lombok . RequiredArgsConstructor ;  import    lombok . extern . slf4j . Slf4j ;  import    me . zhengjie . annotation . Log ;  import    me . zhengjie . exception . BadRequestException ;  import      me . zhengjie . modules . quartz . domain . QuartzJob ;  import      me . zhengjie . modules . quartz . service . QuartzJobService ;  import       me . zhengjie . modules . quartz . service . dto . JobQueryCriteria ;  import    me . zhengjie . utils . SpringContextHolder ;  import     org . springframework . data . domain . Pageable ;  import    org . springframework . http . HttpStatus ;  import    org . springframework . http . ResponseEntity ;  import      org . springframework . security . access . prepost . PreAuthorize ;  import     org . springframework . validation . annotation . Validated ;  import     org . springframework . web . bind . annotation .  * ;  import    javax . servlet . http . HttpServletResponse ;  import   java . io . IOException ;  import   java . util . Set ;  import      me . zhengjie . modules . quartz . domain . QuartzLog ;  import    me . zhengjie . utils . PageResult ;    @ Slf4j  @ RestController  @ RequiredArgsConstructor  @ RequestMapping  ( "/api/jobs" )  @ Api  (  tags = "系统:定时任务管理" ) public class QuartzJobController  {   private static final String  ENTITY_NAME = "quartzJob" ;   private final QuartzJobService  quartzJobService ;    @ ApiOperation  ( "查询定时任务" )  @ GetMapping  @ PreAuthorize  ( "@el.check('timing:list')" ) public  ResponseEntity  <  PageResult  < QuartzJob > > queryQuartzJob  (  JobQueryCriteria criteria ,  Pageable pageable )  {  return  new  ResponseEntity  < >  (  quartzJobService . queryAll  ( criteria , pageable ) ,  HttpStatus . OK ) ; }    @ ApiOperation  ( "导出任务数据" )  @ GetMapping  (  value = "/download" )  @ PreAuthorize  ( "@el.check('timing:list')" ) public void exportQuartzJob  (  HttpServletResponse response ,  JobQueryCriteria criteria )  throws IOException  {   quartzJobService . download  (  quartzJobService . queryAll  ( criteria ) , response ) ; }    @ ApiOperation  ( "导出日志数据" )  @ GetMapping  (  value = "/logs/download" )  @ PreAuthorize  ( "@el.check('timing:list')" ) public void exportQuartzJobLog  (  HttpServletResponse response ,  JobQueryCriteria criteria )  throws IOException  {   quartzJobService . downloadLog  (  quartzJobService . queryAllLog  ( criteria ) , response ) ; }    @ ApiOperation  ( "查询任务执行日志" )  @ GetMapping  (  value = "/logs" )  @ PreAuthorize  ( "@el.check('timing:list')" ) public  ResponseEntity  <  PageResult  < QuartzLog > > queryQuartzJobLog  (  JobQueryCriteria criteria ,  Pageable pageable )  {  return  new  ResponseEntity  < >  (  quartzJobService . queryAllLog  ( criteria , pageable ) ,  HttpStatus . OK ) ; }    @ Log  ( "新增定时任务" )  @ ApiOperation  ( "新增定时任务" )  @ PostMapping  @ PreAuthorize  ( "@el.check('timing:add')" ) public  ResponseEntity  < Object > createQuartzJob  (    @ Validated  @ RequestBody QuartzJob resources )  {  throw  new BadRequestException  ( "演示环境不支持新增任务！" ) ; }    @ Log  ( "修改定时任务" )  @ ApiOperation  ( "修改定时任务" )  @ PutMapping  @ PreAuthorize  ( "@el.check('timing:edit')" ) public  ResponseEntity  < Object > updateQuartzJob  (    @ Validated  (   QuartzJob . Update . class )  @ RequestBody QuartzJob resources )  {   checkBean  (  resources . getBeanName  ( ) ) ;   quartzJobService . update  ( resources ) ;  return  new  ResponseEntity  < >  (  HttpStatus . NO_CONTENT ) ; }    @ Log  ( "更改定时任务状态" )  @ ApiOperation  ( "更改定时任务状态" )  @ PutMapping  (  value = "/{id}" )  @ PreAuthorize  ( "@el.check('timing:edit')" ) public  ResponseEntity  < Object > updateQuartzJobStatus  (    @ PathVariable Long id )  {  throw  new BadRequestException  ( "演示环境请使用执行按钮运行任务！" ) ; }    @ Log  ( "执行定时任务" )  @ ApiOperation  ( "执行定时任务" )  @ PutMapping  (  value = "/exec/{id}" )  @ PreAuthorize  ( "@el.check('timing:edit')" ) public  ResponseEntity  < Object > executionQuartzJob  (    @ PathVariable Long id )  {   quartzJobService . execution  (  quartzJobService . findById  ( id ) ) ;  return  new  ResponseEntity  < >  (  HttpStatus . NO_CONTENT ) ; }    @ Log  ( "删除定时任务" )  @ ApiOperation  ( "删除定时任务" )  @ DeleteMapping  @ PreAuthorize  ( "@el.check('timing:del')" ) public  ResponseEntity  < Object > deleteQuartzJob  (    @ RequestBody  Set  < Long > ids )  {  throw  new BadRequestException  ( "演示环境不支持删除定时任务！" ) ; }   private void checkBean  (  String beanName )  {  if  (  !   SpringContextHolder . getAllServiceBeanName  ( ) . contains  ( beanName ) )  {  throw  new BadRequestException  ( "非法的 Bean，请重新输入！" ) ; } } }