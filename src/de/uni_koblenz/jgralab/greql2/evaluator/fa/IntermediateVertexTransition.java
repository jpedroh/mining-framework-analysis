  package      de . uni_koblenz . jgralab . greql2 . evaluator . fa ;   import   org . pcollections . PCollection ;  import    de . uni_koblenz . jgralab . Edge ;  import    de . uni_koblenz . jgralab . Vertex ;  import      de . uni_koblenz . jgralab . greql2 . evaluator . InternalGreqlEvaluator ;  import       de . uni_koblenz . jgralab . greql2 . evaluator . vertexeval . VertexEvaluator ;  import      de . uni_koblenz . jgralab . greql2 . serialising . GreqlSerializer ;   public class IntermediateVertexTransition  extends Transition  {   public  VertexEvaluator  <  ? >  intermediateVertexEvaluator ;    @ Override public boolean equalSymbol  (  Transition t )  {  if  (  !  (  t instanceof IntermediateVertexTransition ) )  {  return false ; }  IntermediateVertexTransition  vt =  ( IntermediateVertexTransition ) t ;  if  (  intermediateVertexEvaluator !=  vt . intermediateVertexEvaluator )  {  return false ; }  return true ; }   public IntermediateVertexTransition  (  State start ,  State end ,   VertexEvaluator  <  ? > intermediateVertices )  {  super  ( start , end ) ;   intermediateVertexEvaluator = intermediateVertices ; }   protected IntermediateVertexTransition  (  IntermediateVertexTransition t ,  boolean addToStates )  {  super  ( t , addToStates ) ;   intermediateVertexEvaluator =  t . intermediateVertexEvaluator ; }    @ Override public Transition copy  (  boolean addToStates )  {  return  new IntermediateVertexTransition  ( this , addToStates ) ; }    @ Override public boolean isEpsilon  ( )  {  return false ; }    @ Override public String edgeString  ( )  {  String  desc = "IndermediateVertexTransition" ;  return desc ; }    @ Override public boolean accepts  (  Vertex v ,  Edge e ,  InternalGreqlEvaluator evaluator )  {  if  (  intermediateVertexEvaluator != null )  {  Object  tempRes =  intermediateVertexEvaluator . getResult  ( evaluator ) ;  if  (  tempRes instanceof PCollection )  {    @ SuppressWarnings  ( "unchecked" )  PCollection  < Vertex >  intermediateVertices =  (  PCollection  < Vertex > ) tempRes ;  return  intermediateVertices . contains  ( v ) ; } else  {  Vertex  intermediateVertex =  ( Vertex ) tempRes ;  return  v == intermediateVertex ; } }  return false ; }    @ Override public Vertex getNextVertex  (  Vertex v ,  Edge e )  {  return v ; }    @ Override public String prettyPrint  ( )  {  return  "IntermediateVertex " +  GreqlSerializer . serializeVertex  (  intermediateVertexEvaluator . getVertex  ( ) ) ; }    @ Override public boolean consumesEdge  ( )  {  return false ; }   public VertexEvaluator getIntermediateVertexEvaluator  ( )  {  return intermediateVertexEvaluator ; } }