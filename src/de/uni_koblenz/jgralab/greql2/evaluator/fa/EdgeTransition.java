  package      de . uni_koblenz . jgralab . greql2 . evaluator . fa ;   import   java . util . Set ;  import    de . uni_koblenz . jgralab . Edge ;  import    de . uni_koblenz . jgralab . Vertex ;  import      de . uni_koblenz . jgralab . greql2 . evaluator . InternalGreqlEvaluator ;  import      de . uni_koblenz . jgralab . greql2 . evaluator . QueryImpl ;  import       de . uni_koblenz . jgralab . greql2 . evaluator . vertexeval . VertexEvaluator ;  import      de . uni_koblenz . jgralab . greql2 . schema . Expression ;  import      de . uni_koblenz . jgralab . greql2 . types . TypeCollection ;  import      de . uni_koblenz . jgralab . greql2 . schema . GReQLDirection ;   public class EdgeTransition  extends SimpleTransition  {   private final  VertexEvaluator  <  ? >  allowedEdgeEvaluator ;    @ Override public String edgeString  ( )  {  String  desc = "EdgeTransition" ;  return desc ; }    @ Override public boolean equalSymbol  (  Transition t )  {  if  (  !  (  t instanceof EdgeTransition ) )  {  return false ; }  EdgeTransition  et =  ( EdgeTransition ) t ;  if  (  !  typeCollection . equals  (  et . typeCollection ) )  {  return false ; }  if  (  validToEdgeRoles != null )  {  if  (   et . validToEdgeRoles == null )  {  return false ; }  if  (  !  validToEdgeRoles . equals  (  et . validToEdgeRoles ) )  {  return false ; } } else  {  if  (   et . validToEdgeRoles != null )  {  return false ; } }  if  (  validFromEdgeRoles == null )  {  if  (   et . validFromEdgeRoles != null )  {  return false ; } } else  {  if  (   et . validFromEdgeRoles == null )  {  return false ; }  if  (  !  validFromEdgeRoles . equals  (  et . validFromEdgeRoles ) )  {  return false ; } }  if  (  allowedEdgeEvaluator !=  et . allowedEdgeEvaluator )  {  return false ; }  if  (  validDirection !=  et . validDirection )  {  return false ; }  if  (  predicateEvaluator != null )  {  if  (   et . predicateEvaluator == null )  {  return false ; }  if  (  !  predicateEvaluator . equals  (  et . predicateEvaluator ) )  {  return false ; } } else  {  if  (   et . predicateEvaluator != null )  {  return false ; } }  return true ; }   protected EdgeTransition  (  EdgeTransition t ,  boolean addToStates )  {  super  ( t , addToStates ) ;   allowedEdgeEvaluator =  t . allowedEdgeEvaluator ; }    @ Override public Transition copy  (  boolean addToStates )  {  return  new EdgeTransition  ( this , addToStates ) ; }   public EdgeTransition  (  State start ,  State end ,  AllowedEdgeDirection dir ,  TypeCollection typeCollection ,   Set  < String > roles ,   VertexEvaluator  <  ? > edgeEval ,   VertexEvaluator  <  ? extends Expression > predicateEval ,  QueryImpl query )  {  super  ( start , end , dir , typeCollection , roles , predicateEval , query ) ;   allowedEdgeEvaluator = edgeEval ; }    @ Override public boolean accepts  (  Vertex v ,  Edge e ,  InternalGreqlEvaluator evaluator )  {  if  (  !  super . accepts  ( v , e , evaluator ) )  {  return false ; }  if  (  allowedEdgeEvaluator != null )  {  Edge  allowedEdge =   (  ( Edge )  allowedEdgeEvaluator . getResult  ( evaluator ) ) . getNormalEdge  ( ) ;  if  (   e . getNormalEdge  ( ) != allowedEdge )  {  return false ; } }  return true ; }   public boolean consumedEdge  ( )  {  return true ; }   public VertexEvaluator getAllowedEdgeEvaluator  ( )  {  return allowedEdgeEvaluator ; }   public EdgeTransition  (  State start ,  State end ,  GReQLDirection dir ,  TypeCollection typeCollection ,   Set  < String > roles ,  VertexEvaluator edgeEval ,  VertexEvaluator predicateEval ,   GraphMarker  < VertexEvaluator > graphMarker )  {  super  ( start , end , dir , typeCollection , roles , predicateEval , graphMarker ) ;   allowedEdgeEvaluator = edgeEval ; } }