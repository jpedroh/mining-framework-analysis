  package      de . uni_koblenz . jgralab . greql2 . evaluator . fa ;   import    de . uni_koblenz . jgralab . Edge ;  import    de . uni_koblenz . jgralab . Vertex ;  import      de . uni_koblenz . jgralab . greql2 . evaluator . InternalGreqlEvaluator ;   public abstract class Transition  {   protected State  startState ;   public final State getStartState  ( )  {  return startState ; }   public void setStartState  (  State state )  {   startState . removeOutTransition  ( this ) ;   startState = state ;   startState . addOutTransition  ( this ) ; }   public State  endState ;   public void setEndState  (  State state )  {   endState . removeInTransition  ( this ) ;   endState = state ;   endState . addInTransition  ( this ) ; }   public Transition  (  State start ,  State end )  {   startState = start ;   endState = end ;   startState . addOutTransition  ( this ) ;   endState . addInTransition  ( this ) ; }   protected Transition  (  Transition t ,  boolean addToStates )  {   startState =  t . startState ;   endState =  t . endState ;  if  ( addToStates )  {   startState . addOutTransition  ( this ) ;   endState . addInTransition  ( this ) ; } }   public abstract String edgeString  ( ) ;   public abstract String prettyPrint  ( ) ;   public abstract Transition copy  (  boolean addToStates ) ;   public void delete  ( )  {   startState . removeOutTransition  ( this ) ;   endState . removeInTransition  ( this ) ; }   public abstract boolean equalSymbol  (  Transition t ) ;   public void reverse  ( )  {  State  s = startState ;   startState . removeOutTransition  ( this ) ;   endState . removeInTransition  ( this ) ;   startState = endState ;   endState = s ;   endState . addInTransition  ( this ) ;   startState . addOutTransition  ( this ) ; }   public abstract boolean isEpsilon  ( ) ;   public abstract boolean accepts  (  Vertex v ,  Edge e ,  InternalGreqlEvaluator evaluator ) ;   public abstract Vertex getNextVertex  (  Vertex v ,  Edge e ) ;   public abstract boolean consumesEdge  ( ) ; }