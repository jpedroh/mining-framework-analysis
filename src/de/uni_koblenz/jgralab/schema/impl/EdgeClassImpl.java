  package     de . uni_koblenz . jgralab . schema . impl ;   import    de . uni_koblenz . jgralab . Edge ;  import     de . uni_koblenz . jgralab . schema . AggregationKind ;  import     de . uni_koblenz . jgralab . schema . EdgeClass ;  import     de . uni_koblenz . jgralab . schema . IncidenceClass ;  import     de . uni_koblenz . jgralab . schema . IncidenceDirection ;  import     de . uni_koblenz . jgralab . schema . VertexClass ;  import      de . uni_koblenz . jgralab . schema . exception . SchemaException ;   public class EdgeClassImpl  extends  GraphElementClassImpl  < EdgeClass , Edge >  implements  EdgeClass  {   private IncidenceClass  from ,  to ;   protected EdgeClassImpl  (  String simpleName ,  PackageImpl pkg ,  GraphClassImpl gc ,  VertexClass from ,   int fromMin ,   int fromMax ,  String fromRoleName ,  AggregationKind aggrFrom ,  VertexClass to ,   int toMin ,   int toMax ,  String toRoleName ,  AggregationKind aggrTo )  {  super  ( simpleName , pkg , gc ,  gc . edgeClassDag ) ;  if  (   pkg . isDefaultPackage  ( ) &&  simpleName . equals  ( DEFAULTEDGECLASS_NAME ) )  { } else  if  (   pkg . isDefaultPackage  ( ) &&  simpleName . equals  ( TEMPORARYEDGECLASS_NAME ) )  { } else  {  if  (   (  from ==  graphClass . getDefaultVertexClass  ( ) ) ||  (  to ==  graphClass . getDefaultVertexClass  ( ) ) )  {  throw  new SchemaException  (       "EdgeClasses from/to the default vertex class are forbidden!\n " + "Tried to create edge class " + simpleName + ": " +  to . getQualifiedName  ( ) + " -> " +  to . getQualifiedName  ( ) ) ; } }  IncidenceClass  fromInc =  new IncidenceClassImpl  ( this , from , fromRoleName , fromMin , fromMax ,  IncidenceDirection . OUT , aggrFrom ) ;  IncidenceClass  toInc =  new IncidenceClassImpl  ( this , to , toRoleName , toMin , toMax ,  IncidenceDirection . IN , aggrTo ) ;    this . from = fromInc ;    this . to = toInc ;    (  ( VertexClassImpl ) from ) . addOutIncidenceClass  ( fromInc ) ;    (  ( VertexClassImpl ) to ) . addInIncidenceClass  ( toInc ) ;   parentPackage . addEdgeClass  ( this ) ;   graphClass . addEdgeClass  ( this ) ; }    @ Override public String getVariableName  ( )  {  return  "ec_" +   getQualifiedName  ( ) . replace  ( '.' , '_' ) ; }    @ Override public void addSuperClass  (  EdgeClass superClass )  {   assertNotFinished  ( ) ;  if  (  superClass == this )  {  return ; }   checkIncidenceClassSpecialization  (  getFrom  ( ) ,  superClass . getFrom  ( ) ) ;   checkIncidenceClassSpecialization  (  getTo  ( ) ,  superClass . getTo  ( ) ) ;   super . addSuperClass  ( superClass ) ;    (  ( IncidenceClassImpl )  getFrom  ( ) ) . addSubsettedIncidenceClass  (  superClass . getFrom  ( ) ) ;    (  ( IncidenceClassImpl )  getTo  ( ) ) . addSubsettedIncidenceClass  (  superClass . getTo  ( ) ) ; }    @ Override public final IncidenceClass getFrom  ( )  {  return from ; }    @ Override public final IncidenceClass getTo  ( )  {  return to ; }   static void checkIncidenceClassSpecialization  (  IncidenceClass special ,  IncidenceClass general )  {  if  (  !  (    general . getVertexClass  ( ) . equals  (  special . getVertexClass  ( ) ) ||   general . getVertexClass  ( ) . isSuperClassOf  (  special . getVertexClass  ( ) ) ) )  {  String  dir =    special . getDirection  ( ) ==  IncidenceDirection . OUT ? "Alpha" : "Omega" ;  throw  new SchemaException  (       "An IncidenceClass may specialize only IncidenceClasses whose connected vertex class " + "is identical or a superclass of the own one. Offending EdgeClasses are " +   special . getEdgeClass  ( ) . getQualifiedName  ( ) + " which wants to specialize " +   general . getEdgeClass  ( ) . getQualifiedName  ( ) + " at end " + dir ) ; }  if  (   special . getMax  ( ) >  general . getMax  ( ) )  {  String  dir =    special . getDirection  ( ) ==  IncidenceDirection . OUT ? "Alpha" : "Omega" ;  throw  new SchemaException  (       "The multiplicity of an edge class may not be larger than " + "the multiplicities of its superclass. Offending EdgeClasses are " +   special . getEdgeClass  ( ) . getQualifiedName  ( ) + " and " +   general . getEdgeClass  ( ) . getQualifiedName  ( ) + " at end " + dir ) ; }  if  (     general . getRolename  ( ) . equals  (  special . getRolename  ( ) ) &&  !   general . getRolename  ( ) . isEmpty  ( ) &&  !   special . getRolename  ( ) . isEmpty  ( ) )  {  String  dir =    special . getDirection  ( ) ==  IncidenceDirection . OUT ? "Alpha" : "Omega" ;  throw  new SchemaException  (       "An IncidenceClass may only redefine (or subset) an IncidenceClass with a different name. Offending" + "EdgeClasses are " +   special . getEdgeClass  ( ) . getQualifiedName  ( ) + " and " +   general . getEdgeClass  ( ) . getQualifiedName  ( ) + " at end " + dir ) ; }  for ( IncidenceClass ic :  general . getSubsettedIncidenceClasses  ( ) )  {  if  (     ic . getRolename  ( ) . equals  (  special . getRolename  ( ) ) &&  !   general . getRolename  ( ) . isEmpty  ( ) &&  !   ic . getRolename  ( ) . isEmpty  ( ) )  {  String  dir =    ic . getDirection  ( ) ==  IncidenceDirection . OUT ? "Alpha" : "Omega" ;  throw  new SchemaException  (       "An IncidenceClass may only redefine (or subset) an IncidenceClass with a different name. Offending" + "EdgeClasses are " +   special . getEdgeClass  ( ) . getQualifiedName  ( ) + " and " +   ic . getEdgeClass  ( ) . getQualifiedName  ( ) + " at end " + dir ) ; } } }    @ Override protected void register  ( )  {   super . register  ( ) ;    graphClass . edgeClasses . put  ( qualifiedName , this ) ;    parentPackage . edgeClasses . put  ( simpleName , this ) ; }    @ Override protected void unregister  ( )  {   super . unregister  ( ) ;    graphClass . edgeClasses . remove  ( qualifiedName ) ;    parentPackage . edgeClasses . remove  ( simpleName ) ; }    @ Override public void delete  ( )  {  if  (  this ==  graphClass . getDefaultEdgeClass  ( ) )  {  throw  new SchemaException  ( "The default edge class cannot be deleted." ) ; }  VertexClassImpl  fromVC =  ( VertexClassImpl )  from . getVertexClass  ( ) ;  VertexClassImpl  toVC =  ( VertexClassImpl )  to . getVertexClass  ( ) ;   fromVC . unlink  ( from ) ;   toVC . unlink  ( to ) ;   super . delete  ( ) ;    graphClass . edgeClasses . remove  ( qualifiedName ) ;    graphClass . edgeClassDag . delete  ( this ) ;    parentPackage . edgeClasses . remove  ( simpleName ) ; }    @ Override protected EdgeClass getDefaultClass  ( )  {  return  graphClass . getDefaultEdgeClass  ( ) ; }    @ Override public boolean isDefaultGraphElementClass  ( )  {  return  this ==  graphClass . getDefaultEdgeClass  ( ) ; } }