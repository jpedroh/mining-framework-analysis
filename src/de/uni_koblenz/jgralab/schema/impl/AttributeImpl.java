  package     de . uni_koblenz . jgralab . schema . impl ;   import    de . uni_koblenz . jgralab . AttributedElement ;  import    de . uni_koblenz . jgralab . GraphIOException ;  import     de . uni_koblenz . jgralab . schema . Attribute ;  import     de . uni_koblenz . jgralab . schema . AttributedElementClass ;  import     de . uni_koblenz . jgralab . schema . Domain ;  import      de . uni_koblenz . jgralab . schema . exception . SchemaException ;  import    java . util . regex . Pattern ;   public class AttributeImpl  implements  Attribute ,  Comparable  < Attribute >  {   private String  name ;   private final Domain  domain ;   private final  AttributedElementClass  <  ? ,  ? >  aec ;   private final String  sortKey ;   private String  defaultValueAsString ;   private Object  defaultValue ;   private Object  defaultTransactionValue ;   private boolean  defaultTransactionValueComputed ;   private boolean  defaultValueComputed ;  AttributeImpl  (  String name ,  Domain domain ,   AttributedElementClass  <  ? ,  ? > aec ,  String defaultValue )  {  if  (  !   ATTRIBUTE_NAME_PATTERN . matcher  ( name ) . matches  ( ) )  {  throw  new SchemaException  (   "Invalid attribute name '" + name + "'." ) ; }    this . name = name ;    this . domain = domain ;    this . aec = aec ;   sortKey =   name + ":" +  domain . getQualifiedName  ( ) ;   setDefaultValueAsString  ( defaultValue ) ;  DomainImpl  d =  (  ( DomainImpl )  this . domain ) ;   d . registerAttribute  ( this ) ; }    @ Override public String toString  ( )  {  return  "Attribute " + sortKey ; }    @ Override public Domain getDomain  ( )  {  return domain ; }    @ Override public String getName  ( )  {  return name ; }    @ Override public  AttributedElementClass  <  ? ,  ? > getAttributedElementClass  ( )  {  return aec ; }    @ Override public boolean equals  (  Object o )  {  return  this == o ; }    @ Override public  int hashCode  ( )  {  return   sortKey . hashCode  ( ) +  aec . hashCode  ( ) ; }    @ Override public  int compareTo  (  Attribute o )  {   int  i =  sortKey . compareTo  (  o . getSortKey  ( ) ) ;  if  (  i != 0 )  {  return i ; }  return  aec . compareTo  (  o . getAttributedElementClass  ( ) ) ; }    @ Override public String getSortKey  ( )  {  return sortKey ; }    @ Override public String getDefaultValueAsString  ( )  {  return defaultValueAsString ; }    @ Override public void setDefaultValueAsString  (  String defaultValue )  throws SchemaException  {  if  (  defaultValueAsString != null )  {  throw  new SchemaException  (     "Cannot assign a new default value to Attribute " + name + " of " +  aec . getQualifiedName  ( ) + "." ) ; }   defaultValueAsString = defaultValue ; }    @ Override public void setDefaultTransactionValue  (   AttributedElement  <  ? ,  ? > element )  throws GraphIOException  {  if  (  defaultValueAsString != null )  {  if  ( defaultTransactionValueComputed )  {   element . setAttribute  ( name , defaultTransactionValue ) ; } else  {  if  (  defaultValueAsString != null )  {   element . readAttributeValueFromString  ( name , defaultValueAsString ) ; }   defaultTransactionValue =  element . getAttribute  ( name ) ;   defaultTransactionValueComputed = true ; } } }    @ Override public void setDefaultValue  (   AttributedElement  <  ? ,  ? > element )  throws GraphIOException  {  if  ( defaultValueComputed )  {   element . setAttribute  ( name , defaultValue ) ; } else  {  if  (  defaultValueAsString != null )  {   element . readAttributeValueFromString  ( name , defaultValueAsString ) ; }   defaultValue =  element . getAttribute  ( name ) ;   defaultValueComputed = true ; } }   private static final Pattern  ATTRIBUTE_NAME_PATTERN =  Pattern . compile  ( "\\p{Lower}\\w*" ) ;    @ Override public void delete  ( )  {    (  ( SchemaImpl )  aec . getSchema  ( ) ) . assertNotFinished  ( ) ;    (  (  AttributedElementClassImpl  <  ? ,  ? > ) aec ) . deleteAttribute  ( this ) ;  DomainImpl  d =  ( DomainImpl ) domain ;    d . attributes =   d . attributes . minus  ( this ) ; }    @ Override public void setName  (  String newName )  {    (  ( SchemaImpl )  aec . getSchema  ( ) ) . assertNotFinished  ( ) ;  if  (  !   ATTRIBUTE_NAME_PATTERN . matcher  ( newName ) . matches  ( ) )  {  throw  new SchemaException  (   "Invalid attribute name '" + newName + "'." ) ; }   name = newName ; } }