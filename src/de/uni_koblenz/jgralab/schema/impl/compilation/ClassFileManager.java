  package      de . uni_koblenz . jgralab . schema . impl . compilation ;   import   java . io . ByteArrayOutputStream ;  import   java . io . IOException ;  import   java . util . Set ;  import    java . util . logging . Logger ;  import   javax . tools . FileObject ;  import   javax . tools . ForwardingJavaFileManager ;  import   javax . tools . JavaFileManager ;  import   javax . tools . JavaFileObject ;  import    javax . tools . JavaFileObject . Kind ;  import    de . uni_koblenz . jgralab . EclipseAdapter ;  import    de . uni_koblenz . jgralab . JGraLab ;   public class ClassFileManager  extends  ForwardingJavaFileManager  < JavaFileManager >  {   private final Logger  logger ;   private final String  qualifiedSchemaName ;   public ClassFileManager  (  ManagableArtifact ma ,  JavaFileManager fm )  {  super  ( fm ) ;   logger = null ;    this . qualifiedSchemaName =  ma . getManagedName  ( ) ; }    @ Override public boolean hasLocation  (  Location location )  {  return   super . hasLocation  ( location ) ||   location . getName  ( ) . equals  ( "CLASS_PATH" ) ; }    @ Override public String inferBinaryName  (  Location location ,  JavaFileObject file )  {  if  (   (  logger != null ) &&   location . getName  ( ) . equals  ( "CLASS_PATH" ) )  {   logger . fine  (     "(" + location + ", " + file + ")" ) ; }  if  (    location . getName  ( ) . equals  ( "CLASS_PATH" ) &&  (  file instanceof ClassFileObject ) )  {  return   (  ( ClassFileObject ) file ) . getBinaryName  ( ) ; }  return  super . inferBinaryName  ( location , file ) ; }    @ Override public JavaFileObject getJavaFileForOutput  (  Location location ,  String className ,  Kind kind ,  FileObject sibling )  {  if  (  logger != null )  {   logger . fine  (         "(" + location + ", " + className + ", " + kind + ", " + sibling + ")" ) ; }  InMemoryClassFile  cfa =  new InMemoryClassFile  ( className ) ;    SchemaClassManager . instance  ( qualifiedSchemaName ) . putSchemaClass  ( className , cfa ) ;  return cfa ; }    @ Override public  Iterable  < JavaFileObject > list  (  Location location ,  String packageName ,   Set  < Kind > kinds ,  boolean recurse )  throws IOException  {  if  (  logger != null )  {   logger . fine  (         "(" + location + ", " + packageName + ", " + kinds + ", " + recurse + ")" ) ; }  EclipseAdapter  ea =  JGraLab . getEclipseAdapter  ( ) ;  if  (   (  ea == null ) ||  !  (  (    location . getName  ( ) . equals  ( "CLASS_PATH" ) &&  kinds . contains  (  Kind . CLASS ) ) ) )  {  return  super . list  ( location , packageName , kinds , recurse ) ; }  return  ea . listJavaFileObjects  ( packageName , recurse ) ; } }