  package     de . uni_koblenz . jgralab . impl . generic ;   import   java . io . IOException ;  import   java . util . Map ;  import    de . uni_koblenz . jgralab . AttributedElement ;  import    de . uni_koblenz . jgralab . Edge ;  import    de . uni_koblenz . jgralab . Graph ;  import    de . uni_koblenz . jgralab . GraphException ;  import    de . uni_koblenz . jgralab . GraphIO ;  import    de . uni_koblenz . jgralab . GraphIOException ;  import    de . uni_koblenz . jgralab . NoSuchAttributeException ;  import    de . uni_koblenz . jgralab . Record ;  import    de . uni_koblenz . jgralab . Vertex ;  import     de . uni_koblenz . jgralab . impl . EdgeIterable ;  import     de . uni_koblenz . jgralab . impl . RecordImpl ;  import     de . uni_koblenz . jgralab . impl . VertexIterable ;  import      de . uni_koblenz . jgralab . impl . std . GraphImpl ;  import     de . uni_koblenz . jgralab . schema . Attribute ;  import     de . uni_koblenz . jgralab . schema . BasicDomain ;  import     de . uni_koblenz . jgralab . schema . BooleanDomain ;  import     de . uni_koblenz . jgralab . schema . Domain ;  import     de . uni_koblenz . jgralab . schema . DoubleDomain ;  import     de . uni_koblenz . jgralab . schema . EdgeClass ;  import     de . uni_koblenz . jgralab . schema . EnumDomain ;  import     de . uni_koblenz . jgralab . schema . GraphClass ;  import     de . uni_koblenz . jgralab . schema . IntegerDomain ;  import     de . uni_koblenz . jgralab . schema . LongDomain ;  import     de . uni_koblenz . jgralab . schema . RecordDomain ;  import      de . uni_koblenz . jgralab . schema . RecordDomain . RecordComponent ;  import     de . uni_koblenz . jgralab . schema . VertexClass ;   public class GenericGraphImpl  extends GraphImpl  implements  InternalAttributesArrayAccess  {   private GraphClass  type ;   private  Object  [ ]  attributes ;   protected GenericGraphImpl  (  GraphClass type ,  String id ,   int vmax ,   int emax )  {  super  ( id , type , vmax , emax ) ;    this . type = type ;  if  (  type . hasAttributes  ( ) )  {   attributes =  new Object  [  type . getAttributeCount  ( ) ] ;  if  (  !  isLoading  ( ) )  {   GenericGraphImpl . initializeGenericAttributeValues  ( this ) ; } } }    @ Override public  <  T  extends Vertex > T createVertex  (  VertexClass vc )  {  return  graphFactory . createVertex  ( vc , 0 , this ) ; }    @ Override public  <  T  extends Edge > T createEdge  (  EdgeClass ec ,  Vertex alpha ,  Vertex omega )  {  return  graphFactory . createEdge  ( ec , 0 , this , alpha , omega ) ; }    @ Override public GraphClass getAttributedElementClass  ( )  {  return type ; }    @ Override public void readAttributeValueFromString  (  String attributeName ,  String value )  throws GraphIOException , NoSuchAttributeException  {   int  i =  type . getAttributeIndex  ( attributeName ) ;    attributes [ i ] =    type . getAttribute  ( attributeName ) . getDomain  ( ) . parseGenericAttribute  (  GraphIO . createStringReader  ( value ,  getSchema  ( ) ) ) ; }    @ Override public void readAttributeValues  (  GraphIO io )  throws GraphIOException  {  for ( Attribute a :  type . getAttributeList  ( ) )  {    attributes [  type . getAttributeIndex  (  a . getName  ( ) ) ] =   a . getDomain  ( ) . parseGenericAttribute  ( io ) ; } }    @ Override public String writeAttributeValueToString  (  String attributeName )  throws IOException , GraphIOException , NoSuchAttributeException  {  GraphIO  io =  GraphIO . createStringWriter  (  getSchema  ( ) ) ;     type . getAttribute  ( attributeName ) . getDomain  ( ) . serializeGenericAttribute  ( io ,  getAttribute  ( attributeName ) ) ;  return  io . getStringWriterResult  ( ) ; }    @ Override public void writeAttributeValues  (  GraphIO io )  throws IOException , GraphIOException  {  for ( Attribute a :  type . getAttributeList  ( ) )  {    a . getDomain  ( ) . serializeGenericAttribute  ( io ,  getAttribute  (  a . getName  ( ) ) ) ; } }    @ SuppressWarnings  ( "unchecked" )  @ Override public  <  T > T getAttribute  (  String name )  {   int  i =   getAttributedElementClass  ( ) . getAttributeIndex  ( name ) ;  return  ( T )  attributes [ i ] ; }    @ Override public  <  T > void setAttribute  (  String name ,  T data )  {   int  i =   getAttributedElementClass  ( ) . getAttributeIndex  ( name ) ;  if  (    type . getAttribute  ( name ) . getDomain  ( ) . isConformGenericValue  ( data ) )  {  if  (  hasECARuleManager  ( ) )  {  T  oldValue =  getAttribute  ( name ) ;    getECARuleManager  ( ) . fireBeforeChangeAttributeEvents  ( this , name , oldValue , data ) ;    attributes [ i ] = data ;    getECARuleManager  ( ) . fireAfterChangeAttributeEvents  ( this , name , oldValue , data ) ; } else  {    attributes [ i ] = data ; } } else  {  Domain  d =   type . getAttribute  ( name ) . getDomain  ( ) ;  throw  new ClassCastException  (    (    "Expected " +  (   (  d instanceof RecordDomain ) ?   RecordImpl . class . getName  ( ) :  d . getJavaAttributeImplementationTypeName  (  d . getPackageName  ( ) ) ) + " object, but received " + data ) == null ?  (    data . getClass  ( ) . getName  ( ) + " object instead" ) :  data + " instead" ) ; } }    @ Override public Vertex getFirstVertex  (  VertexClass vertexClass )  {  Vertex  v =  getFirstVertex  ( ) ;  if  (  v == null )  {  return null ; }  if  (    v . getAttributedElementClass  ( ) . equals  ( vertexClass ) ||    v . getAttributedElementClass  ( ) . getAllSuperClasses  ( ) . contains  ( vertexClass ) )  {  return v ; }  return  v . getNextVertex  ( vertexClass ) ; }    @ Override public Edge getFirstEdge  (  EdgeClass edgeClass )  {  Edge  e =  getFirstEdge  ( ) ;  if  (  e == null )  {  return null ; }  if  (    e . getAttributedElementClass  ( ) . equals  ( edgeClass ) ||    e . getAttributedElementClass  ( ) . getAllSuperClasses  ( ) . contains  ( edgeClass ) )  {  return e ; }  return  e . getNextEdge  ( edgeClass ) ; }    @ Override public  Iterable  < Vertex > vertices  (  VertexClass vc )  {  return  new  VertexIterable  < Vertex >  ( this , vc ) ; }    @ Override public  Iterable  < Edge > edges  (  EdgeClass ec )  {  return  new  EdgeIterable  < Edge >  ( this , ec ) ; }    @ Override public void initializeAttributesWithDefaultValues  ( )  {   initializeGenericAttributeValues  ( this ) ; }   public static Object genericAttributeDefaultValue  (  Domain domain )  {  if  (  domain instanceof BasicDomain )  {  if  (  domain instanceof BooleanDomain )  {  return  Boolean . valueOf  ( false ) ; } else  if  (  domain instanceof IntegerDomain )  {  return  Integer . valueOf  ( 0 ) ; } else  if  (  domain instanceof LongDomain )  {  return  Long . valueOf  ( 0 ) ; } else  if  (  domain instanceof DoubleDomain )  {  return  Double . valueOf  ( 0.0 ) ; } else  {  return null ; } } else  {  return null ; } }   static void initializeGenericAttributeValues  (   AttributedElement  <  ? ,  ? > ae )  {  for ( Attribute attr :   ae . getAttributedElementClass  ( ) . getAttributeList  ( ) )  {  if  (   (   attr . getDefaultValueAsString  ( ) != null ) &&  !   attr . getDefaultValueAsString  ( ) . isEmpty  ( ) )  {  try  {   attr . setDefaultValue  ( ae ) ; }  catch (   GraphIOException e )  {   e . printStackTrace  ( ) ; } } else  {   ae . setAttribute  (  attr . getName  ( ) ,  genericAttributeDefaultValue  (  attr . getDomain  ( ) ) ) ; } } }    @ Override public boolean isInstanceOf  (  GraphClass cls )  {  return  type . equals  ( cls ) ; }    @ Override public Object getEnumConstant  (  EnumDomain enumDomain ,  String constantName )  {  for ( String cn :  enumDomain . getConsts  ( ) )  {  if  (  cn . equals  ( constantName ) )  {  return cn ; } }  throw  new GraphException  (    "No such enum constant '" + constantName + "' in EnumDomain " + enumDomain ) ; }    @ Override public Record createRecord  (  RecordDomain recordDomain ,   Map  < String , Object > values )  {  RecordImpl  record =  RecordImpl . empty  ( ) ;  for ( RecordComponent c :  recordDomain . getComponents  ( ) )  {  assert  (  values . containsKey  (  c . getName  ( ) ) ) ;   record =  record . plus  (  c . getName  ( ) ,  values . get  (  c . getName  ( ) ) ) ; }  return record ; }    @ Override public  Class  <  ? extends Graph > getSchemaClass  ( )  {  throw  new UnsupportedOperationException  ( "This method is not supported by the generic implementation" ) ; }    @ Override public Vertex getFirstVertex  (   Class  <  ? extends Vertex > vertexClass )  {  throw  new UnsupportedOperationException  ( "This method is not supported by the generic implementation" ) ; }    @ Override public  Iterable  < Vertex > vertices  (   Class  <  ? extends Vertex > vertexClass )  {  throw  new UnsupportedOperationException  ( "This method is not supported by the generic implementation" ) ; }    @ Override public Edge getFirstEdge  (   Class  <  ? extends Edge > edgeClass )  {  throw  new UnsupportedOperationException  ( "This method is not supported by the generic implementation" ) ; }    @ Override public  Iterable  < Edge > edges  (   Class  <  ? extends Edge > edgeClass )  {  throw  new UnsupportedOperationException  ( "This method is not supported by the generic implementation" ) ; }    @ Override public void invokeOnAttributesArray  (  OnAttributesFunction fn )  {   attributes =  fn . invoke  ( this , attributes ) ; } }