  package   net . tridentsdk . base ;   import    net . tridentsdk . world . World ;  import   org . junit . Test ;  import   org . mockito . Mockito ;  import static   org . junit . Assert .  * ;   public class PositionTest  {   private final World  world =  Mockito . mock  (  World . class ) ;    @ Test public void testWorld  ( )  {   assertNotNull  (   new Position  (  this . world ) . world  ( ) ) ; }    @ Test public void testYaw  ( )  {   assertEquals  ( 0 ,   new Position  (  this . world , 0D , 0D , 0D , 0F , 0F ) . getYaw  ( ) , 0 ) ; }    @ Test public void testPitch  ( )  {   assertEquals  ( 0 ,   new Position  (  this . world , 0 , 0 , 0 ) . getPitch  ( ) , 0 ) ; }    @ Test public void testTheOtherConstructor  ( )  {   assertEquals  (  new Position  (  this . world , 0D , 0D , 0D ) ,  new Position  (  this . world , 0D , 0D , 0D ) ) ; }    @ Test public void testWrite  ( )  {  Position  p0 =  new Position  (  this . world ) ;  Position  p1 =  new Position  (  this . world ) ;  Vector  vector =  VectorsTest . rand  ( ) ;   vector . vecWrite  ( p0 ) ;   p0 . write  ( p1 ) ;   assertEquals  ( p0 , p1 ) ; }    @ Test public void testBlock  ( )  {  Position  position =  new Position  (  this . world ) ;  Block  block =  position . getBlock  ( ) ;   assertEquals  (   this . world . getBlockAt  (  position . getIntX  ( ) ,  position . getIntY  ( ) ,  position . getIntZ  ( ) ) , block ) ; }    @ Test public void distance  ( )  {  Position  p0 =  new Position  (  this . world ) ;  Position  p1 =  new Position  (  this . world , 0 , 1 , 0 ) ;   assertEquals  ( 1 ,  p0 . distance  ( p1 ) , 0 ) ; }    @ Test public void testEqualsHashString  ( )  {  Position  p0 =  new Position  (  this . world ) ;  Position  p1 =  new Position  (  this . world ) ;  Vector  vector =  VectorsTest . rand  ( ) ;   vector . vecWrite  ( p0 ) ;   vector . vecWrite  ( p1 ) ;   assertEquals  ( p0 , p1 ) ;   assertNotEquals  ( p0 ,  VectorsTest . rand  ( ) ) ;   assertEquals  (  p0 . hashCode  ( ) ,  p1 . hashCode  ( ) ) ;   assertEquals  (  p0 . toString  ( ) ,  p1 . toString  ( ) ) ; }    @ Test public void testSettersAndGetters  ( )  {  Position  p0 =  new Position  (  this . world ) ;   p0 . set  ( 1 , 2 , 3 ) ;   p0 . setYaw  ( 4 ) ;   p0 . setPitch  ( 5 ) ;   assertEquals  ( 1 ,  p0 . x  ( ) , 0 ) ;   assertEquals  ( 2 ,  p0 . y  ( ) , 0 ) ;   assertEquals  ( 3 ,  p0 . z  ( ) , 0 ) ;   assertEquals  ( 4 ,  p0 . yaw  ( ) , 0 ) ;   assertEquals  ( 5 ,  p0 . pitch  ( ) , 0 ) ;   assertEquals  (   p0 . intX  ( ) / 16 ,  p0 . getChunkX  ( ) ) ;   assertEquals  (   p0 . intZ  ( ) / 16 ,  p0 . getChunkZ  ( ) ) ;   p0 . set  ( 1D , 2D , 3D ) ;   assertEquals  ( 1 ,  p0 . getX  ( ) , 0 ) ;   assertEquals  ( 2 ,  p0 . getY  ( ) , 0 ) ;   assertEquals  ( 3 ,  p0 . getZ  ( ) , 0 ) ;   assertEquals  ( 4 ,  p0 . getYaw  ( ) , 0 ) ;   assertEquals  ( 5 ,  p0 . getPitch  ( ) , 0 ) ;   assertEquals  (   p0 . getIntX  ( ) / 16 ,  p0 . getChunkX  ( ) ) ;   assertEquals  (   p0 . getIntZ  ( ) / 16 ,  p0 . getChunkZ  ( ) ) ; }    @ Test public void testClone  ( )  {  Position  p0 =  new Position  (  this . world ) ;   assertEquals  ( p0 ,  p0 . clone  ( ) ) ; }    @ Test public void testToWorldVec  ( )  {  Position  p =  new Position  (  this . world ) ;  ImmutableWorldVector  vec =  p . toWorldVector  ( ) ;   assertEquals  (  vec . getWorld  ( ) ,  p . world  ( ) ) ;   assertEquals  (  vec . getX  ( ) ,  p . intX  ( ) ) ;   assertEquals  (  vec . getY  ( ) ,  p . intY  ( ) ) ;   assertEquals  (  vec . getZ  ( ) ,  p . intZ  ( ) ) ; } }