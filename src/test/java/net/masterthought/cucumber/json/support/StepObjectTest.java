  package     net . masterthought . cucumber . json . support ;   import static      org . assertj . core . api . Assertions . assertThat ;  import   org . junit . Before ;  import   org . junit . Rule ;  import   org . junit . Test ;  import    org . junit . rules . ExpectedException ;  import    net . masterthought . cucumber . ValidationException ;   public class StepObjectTest  {    @ Rule public ExpectedException  thrown =  ExpectedException . none  ( ) ;   private StepObject  stepObject ;    @ Before public void setUp  ( )  {   stepObject =  new StepObject  ( "Test step location" ) ;   stepObject . addDuration  ( 1000000000L ,  Status . PASSED ) ;   stepObject . addDuration  ( 2200000000L ,  Status . FAILED ) ;   stepObject . addDuration  ( 303000000L ,  Status . UNDEFINED ) ; }    @ Test public void StepObject_OnNullLocation_ThrowsException  ( )  {   thrown . expect  (  ValidationException . class ) ;   new StepObject  ( null ) ; }    @ Test public void getLocation_ReturnsLocation  ( )  {  String  location =  stepObject . getLocation  ( ) ;    assertThat  ( location ) . isEqualTo  ( "Test step location" ) ; } 
<<<<<<<
   @ Test public void addDurationSumsDurations  ( )  {  StepObject  step =  new StepObject  ( "ble bla ble" ) ;   step . addDuration  ( 20L ,  Status . PASSED ) ;   step . addDuration  ( 5L ,  Status . PASSED ) ;   step . addDuration  ( 700L ,  Status . UNDEFINED ) ;    assertThat  (  step . getDurations  ( ) ) . isEqualTo  ( 725L ) ;    assertThat  (  step . getTotalOccurrences  ( ) ) . isEqualTo  ( 3 ) ;    assertThat  (  step . getStatus  ( ) ) . isEqualTo  (  Status . UNDEFINED ) ; }
=======
>>>>>>>
    @ Test public void getFormattedTotalDuration_ReturnsFormattedSumDurations  ( )  {  String  duration =  stepObject . getFormattedTotalDuration  ( ) ;    assertThat  ( duration ) . isEqualTo  ( "3.503" ) ; }    @ Test public void getAverageDurations_ReturnsTime  ( )  {   long  avgDuration =  stepObject . getAverageDuration  ( ) ;    assertThat  ( avgDuration ) . isEqualTo  (  3503000000L / 3 ) ; }    @ Test public void getFormattedAverageDuration_ReturnsFormattedSumDurations  ( )  {  String  duration =  stepObject . getFormattedAverageDuration  ( ) ;    assertThat  ( duration ) . isEqualTo  ( "1.167" ) ; }    @ Test public void getPercentageResult_Returns0Percent  ( )  {  String  percentage =  stepObject . getPercentageResult  ( ) ;    assertThat  ( percentage ) . isEqualTo  ( "33.33%" ) ; }    @ Test public void getPercentageResult_OnOnlyFailures_Returns0Percent  ( )  {  StepObject  step =  new StepObject  ( "Test step location" ) ;   step . addDuration  ( 2200000000L ,  Status . FAILED ) ;   step . addDuration  ( 303000000L ,  Status . UNDEFINED ) ;  String  percentage =  step . getPercentageResult  ( ) ;    assertThat  ( percentage ) . isEqualTo  ( "0.00%" ) ; }    @ Test public void addDuration_ReturnsSumsDurations  ( )  {  StepObject  step =  new StepObject  ( "ble bla ble" ) ;   step . addDuration  ( 20L ,  Status . PASSED ) ;   step . addDuration  ( 5L ,  Status . PASSED ) ;   step . addDuration  ( 700L ,  Status . UNDEFINED ) ;    assertThat  (  step . getDuration  ( ) ) . isEqualTo  ( 725L ) ;    assertThat  (  step . getTotalOccurrences  ( ) ) . isEqualTo  ( 3 ) ;    assertThat  (  step . getStatus  ( ) ) . isEqualTo  (  Status . FAILED ) ; }    @ Test public void getFormattedMaxDuration_ReturnsFormattedMaxDurations  ( )  {  String  duration =  stepObject . getFormattedTotalDuration  ( ) ;    assertThat  ( duration ) . isEqualTo  ( "3.503" ) ; }    @ Test public void getFormattedMaxDuration_ReturnsdMaxDurations  ( )  {   long  maxDuration =  stepObject . getMaxDuration  ( ) ;    assertThat  ( maxDuration ) . isEqualTo  ( 2200000000L ) ; } }