  package    net . masterthought . cucumber . json ;   import static      org . assertj . core . api . Assertions . assertThat ;  import   org . junit . Before ;  import   org . junit . Test ;  import      net . masterthought . cucumber . generators . integrations . PageTest ;  import      net . masterthought . cucumber . json . support . Status ;   public class ElementTest  extends PageTest  {    @ Before public void setUp  ( )  {   setUpWithJson  ( SAMPLE_JSON ) ; }    @ Test public void getSteps_ReturnsSteps  ( )  {  Element  element =    features . get  ( 0 ) . getElements  ( ) [ 1 ] ;   Step  [ ]  steps =  element . getSteps  ( ) ;    assertThat  ( steps ) . hasSize  ( 6 ) ;    assertThat  (   steps [ 0 ] . getName  ( ) ) . isEqualTo  ( "the account balance is 100" ) ; }    @ Test public void getBefore_ReturnsHooks  ( )  {  Element  element =    features . get  ( 1 ) . getElements  ( ) [ 0 ] ;   Hook  [ ]  before =  element . getBefore  ( ) ;    assertThat  ( before ) . hasSize  ( 2 ) ;    assertThat  (    before [ 0 ] . getResult  ( ) . getDuration  ( ) ) . isEqualTo  ( 10744700L ) ; }    @ Test public void getAfter_ReturnsHooks  ( )  {  Element  element =    features . get  ( 1 ) . getElements  ( ) [ 0 ] ;   Hook  [ ]  after =  element . getAfter  ( ) ;    assertThat  ( after ) . hasSize  ( 1 ) ;    assertThat  (    after [ 0 ] . getResult  ( ) . getDuration  ( ) ) . isEqualTo  ( 64700000L ) ; }    @ Test public void getTags_ReturnsTags  ( )  {  Element  element =    features . get  ( 1 ) . getElements  ( ) [ 0 ] ;   Tag  [ ]  tags =  element . getTags  ( ) ;    assertThat  ( tags ) . hasSize  ( 1 ) ;    assertThat  (   tags [ 0 ] . getName  ( ) ) . isEqualTo  ( "@checkout" ) ; }    @ Test public void getStatus_ReturnsStatus  ( )  {  Element  element =    features . get  ( 1 ) . getElements  ( ) [ 0 ] ;  Status  status =  element . getStatus  ( ) ;    assertThat  ( status ) . isEqualTo  (  Status . FAILED ) ; }    @ Test public void getBeforeStatus_ReturnsStatus  ( )  {  Element  element =    features . get  ( 1 ) . getElements  ( ) [ 0 ] ;  Status  status =  element . getBeforeStatus  ( ) ;    assertThat  ( status ) . isEqualTo  (  Status . FAILED ) ; }    @ Test public void getBeforeStatus_OnNoExistingBefore_ReturnsStatus  ( )  {  Element  element =    features . get  ( 0 ) . getElements  ( ) [ 0 ] ;  Status  status =  element . getBeforeStatus  ( ) ;    assertThat  (  element . getBefore  ( ) ) . isEmpty  ( ) ;    assertThat  ( status ) . isEqualTo  (  Status . PASSED ) ; }    @ Test public void getAfterStatus_ReturnsStatus  ( )  {  Element  element =    features . get  ( 1 ) . getElements  ( ) [ 0 ] ;  Status  status =  element . getAfterStatus  ( ) ;    assertThat  ( status ) . isEqualTo  (  Status . UNDEFINED ) ; }    @ Test public void getAfterStatus_OnNoExistingBefore_ReturnsStatus  ( )  {  Element  element =    features . get  ( 0 ) . getElements  ( ) [ 0 ] ;  Status  status =  element . getAfterStatus  ( ) ;    assertThat  (  element . getAfter  ( ) ) . isEmpty  ( ) ;    assertThat  ( status ) . isEqualTo  (  Status . PASSED ) ; }    @ Test public void getStepsStatus_ReturnsStatus  ( )  {  Element  element =    features . get  ( 1 ) . getElements  ( ) [ 0 ] ;  Status  status =  element . getStepsStatus  ( ) ;    assertThat  ( status ) . isEqualTo  (  Status . FAILED ) ; }    @ Test public void getName_ReturnsName  ( )  {  Element  element =    features . get  ( 1 ) . getElements  ( ) [ 0 ] ;  String  name =  element . getName  ( ) ;    assertThat  ( name ) . isEqualTo  ( "Account may not have sufficient funds" ) ; }    @ Test public void getKeyword_ReturnsName  ( )  {  Element  element =    features . get  ( 0 ) . getElements  ( ) [ 0 ] ;  String  keyword =  element . getKeyword  ( ) ;    assertThat  ( keyword ) . isEqualTo  ( "Background" ) ; }    @ Test public void getType_ReturnsName  ( )  {  Element  element =    features . get  ( 1 ) . getElements  ( ) [ 0 ] ;  String  type =  element . getType  ( ) ;    assertThat  ( type ) . isEqualTo  ( "scenario" ) ; }    @ Test public void getDescription_ReturnsDescription  ( )  {  Element  element =    features . get  ( 1 ) . getElements  ( ) [ 0 ] ;  String  description =  element . getDescription  ( ) ;    assertThat  ( description ) . isEqualTo  ( "Account holder withdraws more cash" ) ; }    @ Test public void getDescription_OnMissingDescription_ReturnsEmptyString  ( )  {  Element  element =    features . get  ( 1 ) . getElements  ( ) [ 1 ] ;  String  description =  element . getDescription  ( ) ;    assertThat  ( description ) . isEmpty  ( ) ; }    @ Test public void isScenario_ReturnsTrueForScenarios  ( )  {  Feature  feature =  features . get  ( 0 ) ;   boolean  [ ]  results =  {    feature . getElements  ( ) [ 0 ] . isScenario  ( ) ,    feature . getElements  ( ) [ 1 ] . isScenario  ( ) } ;    assertThat  ( results ) . containsOnly  ( false , true ) ; }    @ Test public void getFeature_ReturnsFeature  ( )  {  Element  element =    features . get  ( 0 ) . getElements  ( ) [ 0 ] ;  Feature  feature =  element . getFeature  ( ) ;    assertThat  (  feature . getId  ( ) ) . isEqualTo  ( "account-holder-withdraws-cash" ) ; }    @ Test public void getDuration_ReturnsDuration  ( )  {  Element  element =    features . get  ( 0 ) . getElements  ( ) [ 0 ] ;   long  duration =  element . getDuration  ( ) ;    assertThat  ( duration ) . isEqualTo  ( 99124118111L ) ; }    @ Test public void getFormattedDuration_ReturnsFormattedDuration  ( )  {  Element  element =    features . get  ( 0 ) . getElements  ( ) [ 0 ] ;  String  duration =  element . getFormattedDuration  ( ) ;    assertThat  ( duration ) . isEqualTo  ( "1:39.124" ) ; } }