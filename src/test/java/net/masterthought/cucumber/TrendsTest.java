  package   net . masterthought . cucumber ;   import static      org . assertj . core . api . Assertions . assertThat ;  import  mockit . Deencapsulation ;  import   org . junit . Test ;   public class TrendsTest  {    @ Test public void addBuild_AddsNewResultAtTheLastPosition  ( )  {  Trends  trends =  new Trends  ( ) ;  Reportable  result =  ReportableBuilder . buildSample  ( ) ;   trends . addBuild  ( "buildName" , result ) ;   final String  buildNumber = "this is the build!" ;   trends . addBuild  ( buildNumber , result ) ;     assertThat  (  trends . getBuildNumbers  ( ) ) . hasSize  ( 2 ) . endsWith  ( buildNumber ) ;     assertThat  (  trends . getPassedFeatures  ( ) ) . hasSize  ( 2 ) . endsWith  (  result . getPassedFeatures  ( ) ) ;     assertThat  (  trends . getFailedFeatures  ( ) ) . hasSize  ( 2 ) . endsWith  (  result . getFailedFeatures  ( ) ) ;     assertThat  (  trends . getTotalFeatures  ( ) ) . hasSize  ( 2 ) . endsWith  (  result . getFeatures  ( ) ) ;     assertThat  (  trends . getPassedScenarios  ( ) ) . hasSize  ( 2 ) . endsWith  (  result . getPassedScenarios  ( ) ) ;     assertThat  (  trends . getFailedScenarios  ( ) ) . hasSize  ( 2 ) . endsWith  (  result . getFailedScenarios  ( ) ) ;     assertThat  (  trends . getTotalScenarios  ( ) ) . hasSize  ( 2 ) . endsWith  (  result . getScenarios  ( ) ) ;     assertThat  (  trends . getPassedSteps  ( ) ) . hasSize  ( 2 ) . endsWith  (  result . getPassedSteps  ( ) ) ;     assertThat  (  trends . getFailedSteps  ( ) ) . hasSize  ( 2 ) . endsWith  (  result . getFailedSteps  ( ) ) ;     assertThat  (  trends . getSkippedSteps  ( ) ) . hasSize  ( 2 ) . endsWith  (  result . getSkippedSteps  ( ) ) ;     assertThat  (  trends . getPendingSteps  ( ) ) . hasSize  ( 2 ) . endsWith  (  result . getPendingSteps  ( ) ) ;     assertThat  (  trends . getUndefinedSteps  ( ) ) . hasSize  ( 2 ) . endsWith  (  result . getUndefinedSteps  ( ) ) ;     assertThat  (  trends . getTotalSteps  ( ) ) . hasSize  ( 2 ) . endsWith  (  result . getSteps  ( ) ) ;     assertThat  (  trends . getDurations  ( ) ) . hasSize  ( 2 ) . endsWith  ( 3206126182390L ) ; }    @ Test public void addBuild_OnMissingDataForSteps_FillsMissingDataForSteps  ( )  {  Trends  trends =  new Trends  ( ) ;  Reportable  result =  ReportableBuilder . buildSample  ( ) ;   trends . addBuild  ( "buildName" , result ) ;   final  String  [ ]  buildNumbers =  new String  [ ]  { "a" , "b" , "e" } ;   Deencapsulation . setField  ( trends , "buildNumbers" , buildNumbers ) ;   trends . addBuild  ( "the build!" , result ) ;     assertThat  (  trends . getBuildNumbers  ( ) ) . hasSize  (   buildNumbers . length + 1 ) . containsExactly  ( "a" , "b" , "e" , "the build!" ) ;     assertThat  (  trends . getPassedFeatures  ( ) ) . hasSize  (   buildNumbers . length + 1 ) . containsExactly  ( 0 , 0 , 2 , 2 ) ;     assertThat  (  trends . getPassedScenarios  ( ) ) . hasSize  (   buildNumbers . length + 1 ) . containsExactly  ( 0 , 0 , 13 , 13 ) ;     assertThat  (  trends . getPassedSteps  ( ) ) . hasSize  (   buildNumbers . length + 1 ) . containsExactly  ( 0 , 0 , 31 , 31 ) ;     assertThat  (  trends . getSkippedSteps  ( ) ) . hasSize  (   buildNumbers . length + 1 ) . containsExactly  ( 0 , 0 , 41 , 41 ) ;     assertThat  (  trends . getPendingSteps  ( ) ) . hasSize  (   buildNumbers . length + 1 ) . containsExactly  ( 0 , 0 , 73 , 73 ) ;     assertThat  (  trends . getUndefinedSteps  ( ) ) . hasSize  (   buildNumbers . length + 1 ) . containsExactly  ( 0 , 0 , 79 , 79 ) ;     assertThat  (  trends . getDurations  ( ) ) . hasSize  (   buildNumbers . length + 1 ) . containsExactly  (  - 1L ,  - 1L , 3206126182390L , 3206126182390L ) ; }    @ Test public void limitItems_ReducesNumberOfItems  ( )  {   final  int  limit = 1 ;   final String  buildName = "a, e -> c" ;  Trends  trends =  new Trends  ( ) ;  Reportable  result =  ReportableBuilder . buildSample  ( ) ;  for (   int  i = 0 ;  i <  limit + 3 ;  i ++ )  {   trends . addBuild  ( buildName , result ) ; }   trends . limitItems  ( limit ) ;     assertThat  (  trends . getBuildNumbers  ( ) ) . hasSize  ( limit ) . containsExactly  ( buildName ) ;     assertThat  (  trends . getPassedFeatures  ( ) ) . hasSize  ( limit ) . containsExactly  (  result . getPassedFeatures  ( ) ) ;     assertThat  (  trends . getFailedFeatures  ( ) ) . hasSize  ( limit ) . containsExactly  (  result . getFailedFeatures  ( ) ) ;     assertThat  (  trends . getTotalFeatures  ( ) ) . hasSize  ( limit ) . containsExactly  (  result . getFeatures  ( ) ) ;     assertThat  (  trends . getPassedScenarios  ( ) ) . hasSize  ( limit ) . containsExactly  (  result . getPassedScenarios  ( ) ) ;     assertThat  (  trends . getFailedScenarios  ( ) ) . hasSize  ( limit ) . containsExactly  (  result . getFailedScenarios  ( ) ) ;     assertThat  (  trends . getTotalScenarios  ( ) ) . hasSize  ( limit ) . containsExactly  (  result . getScenarios  ( ) ) ;     assertThat  (  trends . getPassedSteps  ( ) ) . hasSize  ( limit ) . containsExactly  (  result . getPassedSteps  ( ) ) ;     assertThat  (  trends . getFailedSteps  ( ) ) . hasSize  ( limit ) . containsExactly  (  result . getFailedSteps  ( ) ) ;     assertThat  (  trends . getPendingSteps  ( ) ) . hasSize  ( limit ) . containsExactly  (  result . getPendingSteps  ( ) ) ;     assertThat  (  trends . getSkippedSteps  ( ) ) . hasSize  ( limit ) . containsExactly  (  result . getSkippedSteps  ( ) ) ;     assertThat  (  trends . getUndefinedSteps  ( ) ) . hasSize  ( limit ) . containsExactly  (  result . getUndefinedSteps  ( ) ) ;     assertThat  (  trends . getTotalSteps  ( ) ) . hasSize  ( limit ) . containsExactly  (  result . getSteps  ( ) ) ;     assertThat  (  trends . getDurations  ( ) ) . hasSize  ( limit ) . containsExactly  (  result . getDuration  ( ) ) ; }    @ Test public void copyLastElements_OnBigLimit_ReturnsPassedIntArray  ( )  {   final   int  [ ]  array =  new  int  [ ]  { 3 , 4 , 5 , 6 , 7 , 8 } ;   final  int  limit =   array . length + 1 ;    int  [ ]  limitedArray =  Deencapsulation . invoke  (  Trends . class , "copyLastElements" , array , limit ) ;    assertThat  ( limitedArray ) . isSameAs  ( array ) ; }    @ Test public void copyLastElements_OnBigLimit_ReturnsPassedLongArray  ( )  {   final   long  [ ]  array =  new  long  [ ]  { 3 , 4 , 5 , 6 , 7 , 8 } ;   final  int  limit =   array . length + 1 ;    long  [ ]  limitedArray =  Deencapsulation . invoke  (  Trends . class , "copyLastElements" , array , limit ) ;    assertThat  ( limitedArray ) . isSameAs  ( array ) ; }    @ Test public void copyLastElements_OnBigLimit_ReturnsPassedStringArray  ( )  {   final  String  [ ]  array =  new String  [ ]  { "3" , "4" , "5" , "6" , "7" , "8" } ;   final  int  limit =   array . length + 1 ;   String  [ ]  limitedArray =  Deencapsulation . invoke  (  Trends . class , "copyLastElements" , array , limit ) ;    assertThat  ( limitedArray ) . isSameAs  ( array ) ; }    @ Test public void applyPatchForFeatures_OnFailedGreaterThanTotal_ChangesTotalFeatureAndFailed  ( )  {   final  int  totalFeatures = 1000 ;   final  int  failedFeatures =  totalFeatures + 1 ;  Trends  trends =  new Trends  ( ) ;   int  pendingFeatures = 0 ;   int  undefinedFeatures = 0 ;  Reportable  result =  new ReportableBuilder  ( 0 , failedFeatures , pendingFeatures , undefinedFeatures , totalFeatures , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 3206126182398L ) ;   trends . addBuild  ( "buildNumber" , result ) ;   Deencapsulation . invoke  ( trends , "applyPatchForFeatures" ) ;    assertThat  (   trends . getTotalFeatures  ( ) [ 0 ] ) . isGreaterThan  (   trends . getFailedFeatures  ( ) [ 0 ] ) ;    assertThat  (  trends . getTotalFeatures  ( ) ) . containsExactly  ( failedFeatures ) ;    assertThat  (  trends . getFailedFeatures  ( ) ) . containsExactly  ( totalFeatures ) ; } }