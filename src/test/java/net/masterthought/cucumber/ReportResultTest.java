  package   net . masterthought . cucumber ;   import static      org . assertj . core . api . Assertions . assertThat ;  import   java . util . List ;  import    java . util . regex . Pattern ;  import   org . junit . Before ;  import   org . junit . Test ;  import     net . masterthought . cucumber . json . Feature ;  import      net . masterthought . cucumber . json . support . StepObject ;  import      net . masterthought . cucumber . json . support . TagObject ;   public class ReportResultTest  extends ReportGenerator  {    @ Before public void setUp  ( )  {   setUpWithJson  ( SAMPLE_JSON ) ; }    @ Test public void getAllFeatures_ReturnsFeatures  ( )  {   List  < Feature >  features =  reportResult . getAllFeatures  ( ) ;    assertThat  ( features ) . hasSize  ( 2 ) ; }    @ Test public void getTags_ReturnsTags  ( )  {   List  < TagObject >  tags =  reportResult . getAllTags  ( ) ;    assertThat  ( tags ) . hasSize  ( 3 ) ; }    @ Test public void getAllSteps_ReturnsSteps  ( )  {   List  < StepObject >  tags =  reportResult . getAllSteps  ( ) ;    assertThat  ( tags ) . hasSize  ( 16 ) ; }    @ Test public void getTagReport_ReturnsTagReport  ( )  {  Reportable  reportable =  reportResult . getTagReport  ( ) ;    assertThat  (  reportable . getDuration  ( ) ) . isEqualTo  ( 509064334L ) ; }    @ Test public void getAllXXXFeatures_ReturnsFeaturesByStatus  ( )  {   int  passingFeatures =   reportResult . getFeatureReport  ( ) . getPassedFeatures  ( ) ;   int  failedFeatures =   reportResult . getFeatureReport  ( ) . getFailedFeatures  ( ) ;   int  pendingFeatures =   reportResult . getFeatureReport  ( ) . getPendingFeatures  ( ) ;   int  undefinedFeatures =   reportResult . getFeatureReport  ( ) . getUndefinedFeatures  ( ) ;    assertThat  ( passingFeatures ) . isEqualTo  ( 1 ) ;    assertThat  ( failedFeatures ) . isEqualTo  ( 1 ) ;    assertThat  ( pendingFeatures ) . isEqualTo  ( 0 ) ;    assertThat  ( undefinedFeatures ) . isEqualTo  ( 0 ) ; }    @ Test public void getBuildTime_ReturnsFormattedBuildTime  ( )  {  String  time =  reportResult . getBuildTime  ( ) ;    assertThat  ( time ) . containsPattern  (  Pattern . compile  ( "^\\d{0,2} .{3} \\d{4}, \\d{1,2}:\\d{1,2}$" ) ) ; } }