  package    org . restheart . test . performance ;   import   com . mongodb . BasicDBObject ;  import    io . undertow . util . Headers ;  import    org . restheart . db . DocumentDAO ;  import    org . restheart . db . MongoDBClientSingleton ;  import   java . io . File ;  import   java . io . IOException ;  import   java . net . Authenticator ;  import   java . net . PasswordAuthentication ;  import    java . nio . file . Path ;  import    org . apache . http . HttpEntity ;  import    org . apache . http . HttpResponse ;  import    org . apache . http . StatusLine ;  import      org . apache . http . client . fluent . Executor ;  import      org . apache . http . client . fluent . Request ;  import      org . apache . http . client . fluent . Response ;  import     org . apache . http . entity . ContentType ;  import static    org . junit . Assert . assertEquals ;  import static    org . junit . Assert . assertNotNull ;  import   org . restheart . ConfigurationException ;  import    org . restheart . hal . Representation ;  import    org . restheart . utils . FileUtils ;  import    org . restheart . utils . HttpStatus ;   public class LoadPutPT  {   private String  url ;   private String  id ;   private String  pwd ;   private String  db ;   private String  coll ;   private static final ContentType  halCT =  ContentType . create  (  Representation . HAL_JSON_MEDIA_TYPE ) ;   private Executor  httpExecutor ;   private final Path  CONF_FILE =   new File  ( "./etc/restheart-perftest.yml" ) . toPath  ( ) ;   public void prepare  ( )  {   Authenticator . setDefault  (  new Authenticator  ( )  {    @ Override protected PasswordAuthentication getPasswordAuthentication  ( )  {  return  new PasswordAuthentication  ( id ,  pwd . toCharArray  ( ) ) ; } } ) ;  try  {   MongoDBClientSingleton . init  (  FileUtils . getConfiguration  ( CONF_FILE , false ) ) ; }  catch (   ConfigurationException ex )  {    System . out . println  (   ex . getMessage  ( ) + ", exiting..." ) ;   System . exit  (  - 1 ) ; }   httpExecutor =  Executor . newInstance  ( ) ; }   public void put  ( )  throws Exception  {  BasicDBObject  content =  new BasicDBObject  ( "random" ,  Math . random  ( ) ) ;  Response  resp =  httpExecutor . execute  (    Request . Post  ( url ) . bodyString  (  content . toString  ( ) , halCT ) . addHeader  (  Headers . CONTENT_TYPE_STRING ,  Representation . HAL_JSON_MEDIA_TYPE ) ) ;  HttpResponse  httpResp =  resp . returnResponse  ( ) ;   assertNotNull  ( httpResp ) ;  HttpEntity  entity =  httpResp . getEntity  ( ) ;   assertNotNull  ( entity ) ;  StatusLine  statusLine =  httpResp . getStatusLine  ( ) ;   assertNotNull  ( statusLine ) ;   assertEquals  ( "check status code" ,  HttpStatus . SC_CREATED ,  statusLine . getStatusCode  ( ) ) ; }   public void dbdirect  ( )  throws IOException  {  BasicDBObject  content =  new BasicDBObject  ( "random" ,  Math . random  ( ) ) ;    new DocumentDAO  ( ) . upsertDocument  ( db , coll , null , content , null , false ) ; }   public void setId  (  String id )  {    this . id = id ; }   public void setPwd  (  String pwd )  {    this . pwd = pwd ; }   public void setDb  (  String db )  {    this . db = db ; }   public void setColl  (  String coll )  {    this . coll = coll ; }   public void setUrl  (  String url )  {    this . url = url ; } }