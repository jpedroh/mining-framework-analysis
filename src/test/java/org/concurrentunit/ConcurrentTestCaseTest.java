  package  org . concurrentunit ;   import    java . util . concurrent . TimeoutException ;  import   org . junit . Test ;   public class ConcurrentTestCaseTest  extends ConcurrentTestCase  {    @ Test public void waitShouldSupportResume  ( )  throws Throwable  {    new Thread  (  new Runnable  ( )  {   public void run  ( )  {   resume  ( ) ; } } ) . start  ( ) ;   threadWait  ( ) ; }    @ Test  (  expected =  IllegalArgumentException . class ) public void waitShouldSupportExceptions  ( )  throws Throwable  {    new Thread  (  new Runnable  ( )  {   public void run  ( )  {  try  {  throw  new IllegalArgumentException  ( ) ; }  catch (   Exception e )  {   threadFail  ( e ) ; } } } ) . start  ( ) ;   threadWait  ( ) ; }    @ Test  (  expected =  AssertionError . class ) public void waitShouldSupportAssertionErrors  ( )  throws Throwable  {    new Thread  (  new Runnable  ( )  {   public void run  ( )  {   threadAssertTrue  ( false ) ; } } ) . start  ( ) ;   threadWait  ( 0 ) ; }    @ Test  (  expected =  TimeoutException . class ) public void waitShouldSupportTimeouts  ( )  throws Throwable  {    new Thread  (  new Runnable  ( )  {   public void run  ( )  {   threadAssertTrue  ( true ) ; } } ) . start  ( ) ;   threadWait  ( 500 ) ; }    @ Test  (  expected =  TimeoutException . class ) public void sleepShouldSupportTimeouts  ( )  throws Throwable  {    new Thread  (  new Runnable  ( )  {   public void run  ( )  { } } ) . start  ( ) ;   sleep  ( 500 ) ; }    @ Test public void sleepShouldSupportResume  ( )  throws Throwable  {    new Thread  (  new Runnable  ( )  {   public void run  ( )  {   resume  ( ) ; } } ) . start  ( ) ;   sleep  ( 500 ) ; }    @ Test  (  expected =  AssertionError . class ) public void sleepShouldSupportAssertionErrors  ( )  throws Throwable  {    new Thread  (  new Runnable  ( )  {   public void run  ( )  {   threadAssertTrue  ( false ) ; } } ) . start  ( ) ;   sleep  ( 500 ) ; }    @ Test public void shouldSupportMultipleResumes  ( )  throws Throwable  {    new Thread  (  new Runnable  ( )  {   public void run  ( )  {  for (   int  i = 0 ;  i < 5 ;  i ++ )   resume  ( ) ; } } ) . start  ( ) ;   threadWait  ( 500 , 5 ) ; }    @ Test public void shouldSupportThreadWait0WithResumeCount  ( )  throws Throwable  {    new Thread  (  new Runnable  ( )  {   public void run  ( )  {  for (   int  i = 0 ;  i < 5 ;  i ++ )   resume  ( ) ; } } ) . start  ( ) ;   threadWait  ( 0 , 5 ) ; } }