  package     org . apache . commons . collections4 . bag ;   import   java . io . IOException ;  import   java . io . Serializable ;  import   java . util . ArrayList ;  import   java . util . Arrays ;  import   java . util . Collection ;  import   java . util . ConcurrentModificationException ;  import   java . util . HashSet ;  import   java . util . Iterator ;  import   java . util . List ;  import   java . util . NoSuchElementException ;  import   java . util . Set ;  import     org . apache . commons . collections4 . Bag ;  import     org . apache . commons . collections4 . BulkTest ;  import      org . apache . commons . collections4 . collection . AbstractCollectionTest ;  import      org . apache . commons . collections4 . set . AbstractSetTest ;  import static      org . junit . jupiter . api . Assertions . assertNotEquals ;  import static      org . junit . jupiter . api . Assertions . assertNull ;  import static      org . junit . jupiter . api . Assertions . assertThrows ;  import static      org . junit . jupiter . api . Assertions . assertTrue ;   public abstract class AbstractBagTest  <  T >  extends  AbstractCollectionTest  < T >  {   public AbstractBagTest  (   final String testName )  {  super  ( testName ) ; }    @ Override public  Collection  < T > makeConfirmedCollection  ( )  {  return  new  ArrayList  < >  ( ) ; }    @ Override public  Collection  < T > makeConfirmedFullCollection  ( )  {   final  Collection  < T >  coll =  makeConfirmedCollection  ( ) ;   coll . addAll  (  Arrays . asList  (  getFullElements  ( ) ) ) ;  return coll ; }    @ Override public abstract  Bag  < T > makeObject  ( ) ;    @ Override public  Bag  < T > makeFullCollection  ( )  {   final  Bag  < T >  bag =  makeObject  ( ) ;   bag . addAll  (  Arrays . asList  (  getFullElements  ( ) ) ) ;  return bag ; }    @ Override public void resetEmpty  ( )  {   this . setCollection  (  CollectionBag . collectionBag  (  makeObject  ( ) ) ) ;   this . setConfirmed  (  makeConfirmedCollection  ( ) ) ; }    @ Override public void resetFull  ( )  {   this . setCollection  (  CollectionBag . collectionBag  (  makeFullCollection  ( ) ) ) ;   this . setConfirmed  (  makeConfirmedFullCollection  ( ) ) ; }    @ Override public  Bag  < T > getCollection  ( )  {  return  (  Bag  < T > )  super . getCollection  ( ) ; }    @ SuppressWarnings  ( "unchecked" ) public void testBagAdd  ( )  {  if  (  !  isAddSupported  ( ) )  {  return ; }   final  Bag  < T >  bag =  makeObject  ( ) ;   bag . add  (  ( T ) "A" ) ;   assertTrue  ( "Should contain 'A'" ,  bag . contains  ( "A" ) ) ;   assertEquals  ( "Should have count of 1" , 1 ,  bag . getCount  ( "A" ) ) ;   bag . add  (  ( T ) "A" ) ;   assertTrue  ( "Should contain 'A'" ,  bag . contains  ( "A" ) ) ;   assertEquals  ( "Should have count of 2" , 2 ,  bag . getCount  ( "A" ) ) ;   bag . add  (  ( T ) "B" ) ;   assertTrue  (  bag . contains  ( "A" ) ) ;   assertTrue  (  bag . contains  ( "B" ) ) ; }    @ SuppressWarnings  ( "unchecked" ) public void testBagEqualsSelf  ( )  {   final  Bag  < T >  bag =  makeObject  ( ) ;   assertEquals  ( bag , bag ) ;  if  (  !  isAddSupported  ( ) )  {  return ; }   bag . add  (  ( T ) "elt" ) ;   assertEquals  ( bag , bag ) ;   bag . add  (  ( T ) "elt" ) ;   assertEquals  ( bag , bag ) ;   bag . add  (  ( T ) "elt2" ) ;   assertEquals  ( bag , bag ) ; }    @ SuppressWarnings  ( "unchecked" ) public void testBagRemove  ( )  {  if  (  !  isRemoveSupported  ( ) )  {  return ; }   final  Bag  < T >  bag =  makeObject  ( ) ;   bag . add  (  ( T ) "A" ) ;   assertEquals  ( "Should have count of 1" , 1 ,  bag . getCount  ( "A" ) ) ;   bag . remove  ( "A" ) ;   assertEquals  ( "Should have count of 0" , 0 ,  bag . getCount  ( "A" ) ) ;   bag . add  (  ( T ) "A" ) ;   bag . add  (  ( T ) "A" ) ;   bag . add  (  ( T ) "A" ) ;   bag . add  (  ( T ) "A" ) ;   assertEquals  ( "Should have count of 4" , 4 ,  bag . getCount  ( "A" ) ) ;   bag . remove  ( "A" , 0 ) ;   assertEquals  ( "Should have count of 4" , 4 ,  bag . getCount  ( "A" ) ) ;   bag . remove  ( "A" , 2 ) ;   assertEquals  ( "Should have count of 2" , 2 ,  bag . getCount  ( "A" ) ) ;   bag . remove  ( "A" ) ;   assertEquals  ( "Should have count of 0" , 0 ,  bag . getCount  ( "A" ) ) ; }    @ SuppressWarnings  ( "unchecked" ) public void testBagRemoveAll  ( )  {  if  (  !  isRemoveSupported  ( ) )  {  return ; }   final  Bag  < T >  bag =  makeObject  ( ) ;   bag . add  (  ( T ) "A" , 2 ) ;   assertEquals  ( "Should have count of 2" , 2 ,  bag . getCount  ( "A" ) ) ;   bag . add  (  ( T ) "B" ) ;   bag . add  (  ( T ) "C" ) ;   assertEquals  ( "Should have count of 4" , 4 ,  bag . size  ( ) ) ;   final  List  < String >  delete =  new  ArrayList  < >  ( ) ;   delete . add  ( "A" ) ;   delete . add  ( "B" ) ;   bag . removeAll  ( delete ) ;   assertEquals  ( "Should have count of 1" , 1 ,  bag . getCount  ( "A" ) ) ;   assertEquals  ( "Should have count of 0" , 0 ,  bag . getCount  ( "B" ) ) ;   assertEquals  ( "Should have count of 1" , 1 ,  bag . getCount  ( "C" ) ) ;   assertEquals  ( "Should have count of 2" , 2 ,  bag . size  ( ) ) ; }    @ SuppressWarnings  ( "unchecked" ) public void testBagContains  ( )  {  if  (  !  isAddSupported  ( ) )  {  return ; }   final  Bag  < T >  bag =  makeObject  ( ) ;   assertFalse  ( "Bag does not have at least 1 'A'" ,  bag . contains  ( "A" ) ) ;   assertFalse  ( "Bag does not have at least 1 'B'" ,  bag . contains  ( "B" ) ) ;   bag . add  (  ( T ) "A" ) ;   assertTrue  ( "Bag has at least 1 'A'" ,  bag . contains  ( "A" ) ) ;   assertFalse  ( "Bag does not have at least 1 'B'" ,  bag . contains  ( "B" ) ) ;   bag . add  (  ( T ) "A" ) ;   assertTrue  ( "Bag has at least 1 'A'" ,  bag . contains  ( "A" ) ) ;   assertFalse  ( "Bag does not have at least 1 'B'" ,  bag . contains  ( "B" ) ) ;   bag . add  (  ( T ) "B" ) ;   assertTrue  ( "Bag has at least 1 'A'" ,  bag . contains  ( "A" ) ) ;   assertTrue  ( "Bag has at least 1 'B'" ,  bag . contains  ( "B" ) ) ; }    @ SuppressWarnings  ( "unchecked" ) public void testBagContainsAll  ( )  {  if  (  !  isAddSupported  ( ) )  {  return ; }   final  Bag  < T >  bag =  makeObject  ( ) ;   final  List  < String >  known =  new  ArrayList  < >  ( ) ;   final  List  < String >  known1A =  new  ArrayList  < >  ( ) ;   known1A . add  ( "A" ) ;   final  List  < String >  known2A =  new  ArrayList  < >  ( ) ;   known2A . add  ( "A" ) ;   known2A . add  ( "A" ) ;   final  List  < String >  known1B =  new  ArrayList  < >  ( ) ;   known1B . add  ( "B" ) ;   final  List  < String >  known1A1B =  new  ArrayList  < >  ( ) ;   known1A1B . add  ( "A" ) ;   known1A1B . add  ( "B" ) ;   assertTrue  ( "Bag containsAll of empty" ,  bag . containsAll  ( known ) ) ;   assertFalse  ( "Bag does not containsAll of 1 'A'" ,  bag . containsAll  ( known1A ) ) ;   assertFalse  ( "Bag does not containsAll of 2 'A'" ,  bag . containsAll  ( known2A ) ) ;   assertFalse  ( "Bag does not containsAll of 1 'B'" ,  bag . containsAll  ( known1B ) ) ;   assertFalse  ( "Bag does not containsAll of 1 'A' 1 'B'" ,  bag . containsAll  ( known1A1B ) ) ;   bag . add  (  ( T ) "A" ) ;   assertTrue  ( "Bag containsAll of empty" ,  bag . containsAll  ( known ) ) ;   assertTrue  ( "Bag containsAll of 1 'A'" ,  bag . containsAll  ( known1A ) ) ;   assertFalse  ( "Bag does not containsAll of 2 'A'" ,  bag . containsAll  ( known2A ) ) ;   assertFalse  ( "Bag does not containsAll of 1 'B'" ,  bag . containsAll  ( known1B ) ) ;   assertFalse  ( "Bag does not containsAll of 1 'A' 1 'B'" ,  bag . containsAll  ( known1A1B ) ) ;   bag . add  (  ( T ) "A" ) ;   assertTrue  ( "Bag containsAll of empty" ,  bag . containsAll  ( known ) ) ;   assertTrue  ( "Bag containsAll of 1 'A'" ,  bag . containsAll  ( known1A ) ) ;   assertTrue  ( "Bag containsAll of 2 'A'" ,  bag . containsAll  ( known2A ) ) ;   assertFalse  ( "Bag does not containsAll of 1 'B'" ,  bag . containsAll  ( known1B ) ) ;   assertFalse  ( "Bag does not containsAll of 1 'A' 1 'B'" ,  bag . containsAll  ( known1A1B ) ) ;   bag . add  (  ( T ) "A" ) ;   assertTrue  ( "Bag containsAll of empty" ,  bag . containsAll  ( known ) ) ;   assertTrue  ( "Bag containsAll of 1 'A'" ,  bag . containsAll  ( known1A ) ) ;   assertTrue  ( "Bag containsAll of 2 'A'" ,  bag . containsAll  ( known2A ) ) ;   assertFalse  ( "Bag does not containsAll of 1 'B'" ,  bag . containsAll  ( known1B ) ) ;   assertFalse  ( "Bag does not containsAll of 1 'A' 1 'B'" ,  bag . containsAll  ( known1A1B ) ) ;   bag . add  (  ( T ) "B" ) ;   assertTrue  ( "Bag containsAll of empty" ,  bag . containsAll  ( known ) ) ;   assertTrue  ( "Bag containsAll of 1 'A'" ,  bag . containsAll  ( known1A ) ) ;   assertTrue  ( "Bag containsAll of 2 'A'" ,  bag . containsAll  ( known2A ) ) ;   assertTrue  ( "Bag containsAll of 1 'B'" ,  bag . containsAll  ( known1B ) ) ;   assertTrue  ( "Bag containsAll of 1 'A' 1 'B'" ,  bag . containsAll  ( known1A1B ) ) ; }    @ SuppressWarnings  ( "unchecked" ) public void testBagSize  ( )  {  if  (  !  isAddSupported  ( ) )  {  return ; }   final  Bag  < T >  bag =  makeObject  ( ) ;   assertEquals  ( "Should have 0 total items" , 0 ,  bag . size  ( ) ) ;   bag . add  (  ( T ) "A" ) ;   assertEquals  ( "Should have 1 total items" , 1 ,  bag . size  ( ) ) ;   bag . add  (  ( T ) "A" ) ;   assertEquals  ( "Should have 2 total items" , 2 ,  bag . size  ( ) ) ;   bag . add  (  ( T ) "A" ) ;   assertEquals  ( "Should have 3 total items" , 3 ,  bag . size  ( ) ) ;   bag . add  (  ( T ) "B" ) ;   assertEquals  ( "Should have 4 total items" , 4 ,  bag . size  ( ) ) ;   bag . add  (  ( T ) "B" ) ;   assertEquals  ( "Should have 5 total items" , 5 ,  bag . size  ( ) ) ;   bag . remove  ( "A" , 2 ) ;   assertEquals  ( "Should have 1 'A'" , 1 ,  bag . getCount  ( "A" ) ) ;   assertEquals  ( "Should have 3 total items" , 3 ,  bag . size  ( ) ) ;   bag . remove  ( "B" ) ;   assertEquals  ( "Should have 1 total item" , 1 ,  bag . size  ( ) ) ; }    @ SuppressWarnings  ( "unchecked" ) public void testBagRetainAll  ( )  {  if  (  !  isAddSupported  ( ) )  {  return ; }   final  Bag  < T >  bag =  makeObject  ( ) ;   bag . add  (  ( T ) "A" ) ;   bag . add  (  ( T ) "A" ) ;   bag . add  (  ( T ) "A" ) ;   bag . add  (  ( T ) "B" ) ;   bag . add  (  ( T ) "B" ) ;   bag . add  (  ( T ) "C" ) ;   final  List  < String >  retains =  new  ArrayList  < >  ( ) ;   retains . add  ( "B" ) ;   retains . add  ( "C" ) ;   bag . retainAll  ( retains ) ;   assertEquals  ( "Should have 2 total items" , 2 ,  bag . size  ( ) ) ; }    @ SuppressWarnings  ( "unchecked" ) public void testBagIterator  ( )  {  if  (  !  isAddSupported  ( ) )  {  return ; }   final  Bag  < T >  bag =  makeObject  ( ) ;   bag . add  (  ( T ) "A" ) ;   bag . add  (  ( T ) "A" ) ;   bag . add  (  ( T ) "B" ) ;   assertEquals  ( "Bag should have 3 items" , 3 ,  bag . size  ( ) ) ;   final  Iterator  < T >  i =  bag . iterator  ( ) ;  boolean  foundA = false ;  while  (  i . hasNext  ( ) )  {   final String  element =  ( String )  i . next  ( ) ;  if  (  element . equals  ( "A" ) )  {  if  (  ! foundA )  {   foundA = true ; } else  {   i . remove  ( ) ; } } }   assertTrue  ( "Bag should still contain 'A'" ,  bag . contains  ( "A" ) ) ;   assertEquals  ( "Bag should have 2 items" , 2 ,  bag . size  ( ) ) ;   assertEquals  ( "Bag should have 1 'A'" , 1 ,  bag . getCount  ( "A" ) ) ; }    @ SuppressWarnings  ( "unchecked" ) public void testBagIteratorFail  ( )  {  if  (  !  isAddSupported  ( ) )  {  return ; }   final  Bag  < T >  bag =  makeObject  ( ) ;   bag . add  (  ( T ) "A" ) ;   bag . add  (  ( T ) "A" ) ;   bag . add  (  ( T ) "B" ) ;   final  Iterator  < T >  it =  bag . iterator  ( ) ;   it . next  ( ) ;   bag . remove  ( "A" ) ;  Exception  exception =  assertThrows  (  ConcurrentModificationException . class ,   ( ) ->  {   it . next  ( ) ; } ) ;   assertNull  (  exception . getMessage  ( ) ) ; }    @ SuppressWarnings  ( "unchecked" ) public void testBagIteratorFailNoMore  ( )  {  if  (  !  isAddSupported  ( ) )  {  return ; }   final  Bag  < T >  bag =  makeObject  ( ) ;   bag . add  (  ( T ) "A" ) ;   bag . add  (  ( T ) "A" ) ;   bag . add  (  ( T ) "B" ) ;   final  Iterator  < T >  it =  bag . iterator  ( ) ;   it . next  ( ) ;   it . next  ( ) ;   it . next  ( ) ;  Exception  exception =  assertThrows  (  NoSuchElementException . class ,   ( ) ->  {   it . next  ( ) ; } ) ;   assertNull  (  exception . getMessage  ( ) ) ; }    @ SuppressWarnings  ( "unchecked" ) public void testBagIteratorFailDoubleRemove  ( )  {  if  (  !  isAddSupported  ( ) )  {  return ; }   final  Bag  < T >  bag =  makeObject  ( ) ;   bag . add  (  ( T ) "A" ) ;   bag . add  (  ( T ) "A" ) ;   bag . add  (  ( T ) "B" ) ;   final  Iterator  < T >  it =  bag . iterator  ( ) ;   it . next  ( ) ;   it . next  ( ) ;   assertEquals  ( 3 ,  bag . size  ( ) ) ;   it . remove  ( ) ;   assertEquals  ( 2 ,  bag . size  ( ) ) ;  Exception  exception =  assertThrows  (  IllegalStateException . class ,   ( ) ->  {   it . remove  ( ) ; } ) ;   assertNull  (  exception . getMessage  ( ) ) ;   assertEquals  ( 2 ,  bag . size  ( ) ) ;   it . next  ( ) ;   it . remove  ( ) ;   assertEquals  ( 1 ,  bag . size  ( ) ) ; }    @ SuppressWarnings  ( "unchecked" ) public void testBagIteratorRemoveProtectsInvariants  ( )  {  if  (  !  isAddSupported  ( ) )  {  return ; }   final  Bag  < T >  bag =  makeObject  ( ) ;   bag . add  (  ( T ) "A" ) ;   bag . add  (  ( T ) "A" ) ;   assertEquals  ( 2 ,  bag . size  ( ) ) ;   final  Iterator  < T >  it =  bag . iterator  ( ) ;   assertEquals  ( "A" ,  it . next  ( ) ) ;   assertTrue  (  it . hasNext  ( ) ) ;   it . remove  ( ) ;   assertEquals  ( 1 ,  bag . size  ( ) ) ;   assertTrue  (  it . hasNext  ( ) ) ;   assertEquals  ( "A" ,  it . next  ( ) ) ;   assertFalse  (  it . hasNext  ( ) ) ;   it . remove  ( ) ;   assertEquals  ( 0 ,  bag . size  ( ) ) ;   assertFalse  (  it . hasNext  ( ) ) ;   final  Iterator  < T >  it2 =  bag . iterator  ( ) ;   assertFalse  (  it2 . hasNext  ( ) ) ; }    @ SuppressWarnings  ( "unchecked" ) public void testBagToArray  ( )  {  if  (  !  isAddSupported  ( ) )  {  return ; }   final  Bag  < T >  bag =  makeObject  ( ) ;   bag . add  (  ( T ) "A" ) ;   bag . add  (  ( T ) "A" ) ;   bag . add  (  ( T ) "B" ) ;   bag . add  (  ( T ) "B" ) ;   bag . add  (  ( T ) "C" ) ;   final  Object  [ ]  array =  bag . toArray  ( ) ;   int  a = 0 ,  b = 0 ,  c = 0 ;  for (  final Object element : array )  {   a +=   element . equals  ( "A" ) ? 1 : 0 ;   b +=   element . equals  ( "B" ) ? 1 : 0 ;   c +=   element . equals  ( "C" ) ? 1 : 0 ; }   assertEquals  ( 2 , a ) ;   assertEquals  ( 2 , b ) ;   assertEquals  ( 1 , c ) ; }    @ SuppressWarnings  ( "unchecked" ) public void testBagToArrayPopulate  ( )  {  if  (  !  isAddSupported  ( ) )  {  return ; }   final  Bag  < T >  bag =  makeObject  ( ) ;   bag . add  (  ( T ) "A" ) ;   bag . add  (  ( T ) "A" ) ;   bag . add  (  ( T ) "B" ) ;   bag . add  (  ( T ) "B" ) ;   bag . add  (  ( T ) "C" ) ;   final  String  [ ]  array =  bag . toArray  (  new String  [ 0 ] ) ;   int  a = 0 ,  b = 0 ,  c = 0 ;  for (  final String element : array )  {   a +=   element . equals  ( "A" ) ? 1 : 0 ;   b +=   element . equals  ( "B" ) ? 1 : 0 ;   c +=   element . equals  ( "C" ) ? 1 : 0 ; }   assertEquals  ( 2 , a ) ;   assertEquals  ( 2 , b ) ;   assertEquals  ( 1 , c ) ; }    @ SuppressWarnings  ( "unchecked" ) public void testBagEquals  ( )  {  if  (  !  isAddSupported  ( ) )  {  return ; }   final  Bag  < T >  bag =  makeObject  ( ) ;   final  Bag  < T >  bag2 =  makeObject  ( ) ;   assertEquals  ( bag , bag2 ) ;   bag . add  (  ( T ) "A" ) ;   assertNotEquals  ( bag , bag2 ) ;   bag2 . add  (  ( T ) "A" ) ;   assertEquals  ( bag , bag2 ) ;   bag . add  (  ( T ) "A" ) ;   bag . add  (  ( T ) "B" ) ;   bag . add  (  ( T ) "B" ) ;   bag . add  (  ( T ) "C" ) ;   bag2 . add  (  ( T ) "A" ) ;   bag2 . add  (  ( T ) "B" ) ;   bag2 . add  (  ( T ) "B" ) ;   bag2 . add  (  ( T ) "C" ) ;   assertEquals  ( bag , bag2 ) ; }    @ SuppressWarnings  ( "unchecked" ) public void testBagEqualsHashBag  ( )  {  if  (  !  isAddSupported  ( ) )  {  return ; }   final  Bag  < T >  bag =  makeObject  ( ) ;   final  Bag  < T >  bag2 =  new  HashBag  < >  ( ) ;   assertEquals  ( bag , bag2 ) ;   bag . add  (  ( T ) "A" ) ;   assertNotEquals  ( bag , bag2 ) ;   bag2 . add  (  ( T ) "A" ) ;   assertEquals  ( bag , bag2 ) ;   bag . add  (  ( T ) "A" ) ;   bag . add  (  ( T ) "B" ) ;   bag . add  (  ( T ) "B" ) ;   bag . add  (  ( T ) "C" ) ;   bag2 . add  (  ( T ) "A" ) ;   bag2 . add  (  ( T ) "B" ) ;   bag2 . add  (  ( T ) "B" ) ;   bag2 . add  (  ( T ) "C" ) ;   assertEquals  ( bag , bag2 ) ; }    @ SuppressWarnings  ( "unchecked" ) public void testBagHashCode  ( )  {  if  (  !  isAddSupported  ( ) )  {  return ; }   final  Bag  < T >  bag =  makeObject  ( ) ;   final  Bag  < T >  bag2 =  makeObject  ( ) ;   assertEquals  ( 0 ,  bag . hashCode  ( ) ) ;   assertEquals  ( 0 ,  bag2 . hashCode  ( ) ) ;   assertEquals  (  bag . hashCode  ( ) ,  bag2 . hashCode  ( ) ) ;   bag . add  (  ( T ) "A" ) ;   bag . add  (  ( T ) "A" ) ;   bag . add  (  ( T ) "B" ) ;   bag . add  (  ( T ) "B" ) ;   bag . add  (  ( T ) "C" ) ;   bag2 . add  (  ( T ) "A" ) ;   bag2 . add  (  ( T ) "A" ) ;   bag2 . add  (  ( T ) "B" ) ;   bag2 . add  (  ( T ) "B" ) ;   bag2 . add  (  ( T ) "C" ) ;   assertEquals  (  bag . hashCode  ( ) ,  bag2 . hashCode  ( ) ) ;   int  total = 0 ;   total +=   "A" . hashCode  ( ) ^ 2 ;   total +=   "B" . hashCode  ( ) ^ 2 ;   total +=   "C" . hashCode  ( ) ^ 1 ;   assertEquals  ( total ,  bag . hashCode  ( ) ) ;   assertEquals  ( total ,  bag2 . hashCode  ( ) ) ; }   public BulkTest bulkTestBagUniqueSet  ( )  {  return  new TestBagUniqueSet  ( ) ; }   public class TestBagUniqueSet  extends  AbstractSetTest  < T >  {   public TestBagUniqueSet  ( )  {  super  ( "" ) ; }    @ Override public  T  [ ] getFullElements  ( )  {  return   AbstractBagTest . this . getFullElements  ( ) ; }    @ Override public  T  [ ] getOtherElements  ( )  {  return   AbstractBagTest . this . getOtherElements  ( ) ; }    @ Override public  Set  < T > makeObject  ( )  {  return    AbstractBagTest . this . makeObject  ( ) . uniqueSet  ( ) ; }    @ Override public  Set  < T > makeFullCollection  ( )  {  return    AbstractBagTest . this . makeFullCollection  ( ) . uniqueSet  ( ) ; }    @ Override public boolean isNullSupported  ( )  {  return   AbstractBagTest . this . isNullSupported  ( ) ; }    @ Override public boolean isAddSupported  ( )  {  return false ; }    @ Override public boolean isRemoveSupported  ( )  {  return false ; }    @ Override public boolean isTestSerialization  ( )  {  return false ; }    @ Override public void resetEmpty  ( )  {    AbstractBagTest . this . resetEmpty  ( ) ;    TestBagUniqueSet . this . setCollection  (    AbstractBagTest . this . getCollection  ( ) . uniqueSet  ( ) ) ;    TestBagUniqueSet . this . setConfirmed  (  new  HashSet  < >  (   AbstractBagTest . this . getConfirmed  ( ) ) ) ; }    @ Override public void resetFull  ( )  {    AbstractBagTest . this . resetFull  ( ) ;    TestBagUniqueSet . this . setCollection  (    AbstractBagTest . this . getCollection  ( ) . uniqueSet  ( ) ) ;    TestBagUniqueSet . this . setConfirmed  (  new  HashSet  < >  (   AbstractBagTest . this . getConfirmed  ( ) ) ) ; }    @ Override public void verify  ( )  {   super . verify  ( ) ; } }   public void testEmptyBagCompatibility  ( )  throws IOException , ClassNotFoundException  {   final  Bag  < T >  bag =  makeObject  ( ) ;  if  (    bag instanceof Serializable &&  !  skipSerializedCanonicalTests  ( ) &&  isTestSerialization  ( ) )  {   final  Bag  <  ? >  bag2 =  (  Bag  <  ? > )  readExternalFormFromDisk  (  getCanonicalEmptyCollectionName  ( bag ) ) ;   assertTrue  ( "Bag is empty" ,  bag2 . isEmpty  ( ) ) ;   assertEquals  ( bag , bag2 ) ; } }   public void testFullBagCompatibility  ( )  throws IOException , ClassNotFoundException  {   final  Bag  < T >  bag =  makeFullCollection  ( ) ;  if  (    bag instanceof Serializable &&  !  skipSerializedCanonicalTests  ( ) &&  isTestSerialization  ( ) )  {   final  Bag  <  ? >  bag2 =  (  Bag  <  ? > )  readExternalFormFromDisk  (  getCanonicalFullCollectionName  ( bag ) ) ;   assertEquals  ( "Bag is the right size" ,  bag . size  ( ) ,  bag2 . size  ( ) ) ;   assertEquals  ( bag , bag2 ) ; } } }