  package     org . apache . commons . collections4 . comparators ;   import static      org . junit . jupiter . api . Assertions . assertEquals ;  import static      org . junit . jupiter . api . Assertions . assertTrue ;  import static      org . junit . jupiter . api . Assertions . fail ;  import   java . io . FileNotFoundException ;  import   java . io . IOException ;  import   java . io . Serializable ;  import   java . util . Collections ;  import   java . util . Comparator ;  import   java . util . LinkedList ;  import   java . util . List ;  import     org . apache . commons . collections4 . AbstractObjectTest ;  import   org . junit . Test ;   public abstract class AbstractComparatorTest  <  T >  extends AbstractObjectTest  {   public AbstractComparatorTest  (   final String testName )  {  super  ( testName ) ; }   public abstract  List  < T > getComparableObjectsOrdered  ( ) ;    @ Override public abstract  Comparator  < T > makeObject  ( ) ;    @ Override public boolean supportsEmptyCollections  ( )  {  return false ; }    @ Override public boolean supportsFullCollections  ( )  {  return false ; }   protected void reverseObjects  (   final  List  <  ? > list )  {   Collections . reverse  ( list ) ; }   protected void randomizeObjects  (   final  List  <  ? > list )  {   Collections . shuffle  ( list ) ; }   protected void sortObjects  (   final  List  < T > list ,   final  Comparator  <  ? super T > comparator )  {   list . sort  ( comparator ) ; }    @ Test public void testEmptyListSort  ( )  {   final  List  < T >  list =  new  LinkedList  < >  ( ) ;   sortObjects  ( list ,  makeObject  ( ) ) ;   final  List  < T >  list2 =  new  LinkedList  < >  ( ) ;   assertEquals  ( list2 , list ) ; }    @ Test public void testReverseListSort  ( )  {   final  Comparator  < T >  comparator =  makeObject  ( ) ;   final  List  < T >  randomList =  getComparableObjectsOrdered  ( ) ;   reverseObjects  ( randomList ) ;   sortObjects  ( randomList , comparator ) ;   final  List  < T >  orderedList =  getComparableObjectsOrdered  ( ) ;   assertEquals  ( orderedList , randomList ) ; }    @ Test public void testRandomListSort  ( )  {   final  Comparator  < T >  comparator =  makeObject  ( ) ;   final  List  < T >  randomList =  getComparableObjectsOrdered  ( ) ;   randomizeObjects  ( randomList ) ;   sortObjects  ( randomList , comparator ) ;   final  List  < T >  orderedList =  getComparableObjectsOrdered  ( ) ;   assertEquals  ( orderedList , randomList ) ; }    @ Test public void testComparatorIsSerializable  ( )  {   final  Comparator  < T >  comparator =  makeObject  ( ) ;   assertTrue  (  comparator instanceof Serializable ) ; }   public String getCanonicalComparatorName  (   final Object object )  {   final StringBuilder  retval =  new StringBuilder  ( ) ;   retval . append  ( TEST_DATA_PATH ) ;  String  colName =   object . getClass  ( ) . getName  ( ) ;   colName =  colName . substring  (   colName . lastIndexOf  ( "." ) + 1 ,  colName . length  ( ) ) ;   retval . append  ( colName ) ;   retval . append  ( ".version" ) ;   retval . append  (  getCompatibilityVersion  ( ) ) ;   retval . append  ( ".obj" ) ;  return  retval . toString  ( ) ; }    @ SuppressWarnings  ( "unchecked" )  @ Test public void testComparatorCompatibility  ( )  throws IOException , ClassNotFoundException  {  if  (  !  skipSerializedCanonicalTests  ( ) )  {   Comparator  < T >  comparator = null ;  try  {   comparator =  (  Comparator  < T > )  readExternalFormFromDisk  (  getCanonicalComparatorName  (  makeObject  ( ) ) ) ; }  catch (   final  FileNotFoundException exception )  {   final boolean  autoCreateSerialized = false ;  if  ( autoCreateSerialized )  {   comparator =  makeObject  ( ) ;   final String  fileName =  getCanonicalComparatorName  ( comparator ) ;   writeExternalFormToDisk  (  ( Serializable ) comparator , fileName ) ;   fail  (   "Serialized form could not be found.  A serialized version " + "has now been written (and should be added to CVS): " + fileName ) ; } else  {   fail  (   "The Serialized form could be located to test serialization " + "compatibility: " +  exception . getMessage  ( ) ) ; } }   final  List  < T >  randomList =  getComparableObjectsOrdered  ( ) ;   reverseObjects  ( randomList ) ;   sortObjects  ( randomList , comparator ) ;   final  List  < T >  orderedList =  getComparableObjectsOrdered  ( ) ;   assertEquals  ( orderedList , randomList ) ; } } }