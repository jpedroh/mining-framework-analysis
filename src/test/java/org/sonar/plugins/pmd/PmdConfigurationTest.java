  package    org . sonar . plugins . pmd ;   import    net . sourceforge . pmd . Report ;  import      org . sonar . api . batch . fs . FileSystem ;  import   java . io . File ;  import   java . io . IOException ;  import   java . util . List ;  import static    org . mockito . Mockito . mock ;  import static    org . mockito . Mockito . verifyZeroInteractions ;  import static    org . mockito . Mockito . when ;  import    java . nio . charset . StandardCharsets ;  import    java . nio . file . Files ;  import    java . nio . file . Path ;  import     org . junit . jupiter . api . AfterAll ;  import     org . junit . jupiter . api . BeforeAll ;  import     org . junit . jupiter . api . BeforeEach ;  import     org . junit . jupiter . api . Test ;  import      org . sonar . api . config . internal . MapSettings ;  import static      org . assertj . core . api . Assertions . assertThat ;  import static      org . assertj . core . api . Assertions . catchThrowable ;  class PmdConfigurationTest  {   private PmdConfiguration  configuration ;   private MapSettings  settings =  new Settings  ( ) ;   private final FileSystem  fs =  mock  (  FileSystem . class ) ;   private static final File  WORK_DIR =  new File  ( "test-work-dir" ) ;   static  @ SuppressWarnings  ( "ResultOfMethodCallIgnored" )  @ BeforeAll void createTempDir  ( )  {   deleteTempDir  ( ) ;   WORK_DIR . mkdir  ( ) ; }   static  @ SuppressWarnings  ( "ResultOfMethodCallIgnored" )  @ AfterAll void deleteTempDir  ( )  {  if  (  WORK_DIR . exists  ( ) )  {  for ( File file :  WORK_DIR . listFiles  ( ) )  {   file . delete  ( ) ; }   WORK_DIR . delete  ( ) ; } }    @ BeforeEach void setUpPmdConfiguration  ( )  {   settings =  new MapSettings  ( ) ;   configuration =  new PmdConfiguration  ( fs ,  settings . asConfig  ( ) ) ; }    @ Test void should_dump_xml_rule_set  ( )  throws IOException  {    when  (  fs . workDir  ( ) ) . thenReturn  ( WORK_DIR ) ;  File  rulesFile =  configuration . dumpXmlRuleSet  ( "pmd" , "<rules>" ) ;    assertThat  ( rulesFile ) . isEqualTo  (  new File  ( WORK_DIR , "pmd.xml" ) ) ;    assertThat  (  Files . readAllLines  (  rulesFile . toPath  ( ) ,  StandardCharsets . UTF_8 ) ) . containsExactly  ( "<rules>" ) ; }    @ Test void should_fail_to_dump_xml_rule_set  ( )  {    when  (  fs . workDir  ( ) ) . thenReturn  (  new File  ( "xxx" ) ) ;   final Throwable  thrown =  catchThrowable  (   ( ) ->  configuration . dumpXmlRuleSet  ( "pmd" , "<xml>" ) ) ;     assertThat  ( thrown ) . isInstanceOf  (  IllegalStateException . class ) . hasMessage  ( "Fail to save the PMD configuration" ) ; }    @ Test void should_dump_xml_report  ( )  throws IOException  {    when  (  fs . workDir  ( ) ) . thenReturn  ( WORK_DIR ) ;   settings . setProperty  (  PmdConfiguration . PROPERTY_GENERATE_XML , true ) ;  Path  reportFile =  configuration . dumpXmlReport  (  new Report  ( ) ) ;    assertThat  (  reportFile . toFile  ( ) ) . isEqualTo  (  new File  ( WORK_DIR , "pmd-result.xml" ) ) ;   List  < String >  writtenLines =  Files . readAllLines  ( reportFile ,  StandardCharsets . UTF_8 ) ;    assertThat  ( writtenLines ) . hasSize  ( 6 ) ;    assertThat  (  writtenLines . get  ( 1 ) ) . contains  ( "<pmd" ) ; }    @ Test void should_fail_to_dump_xml_report  ( )  {    when  (  fs . workDir  ( ) ) . thenReturn  (  new File  ( "xxx" ) ) ;   settings . setProperty  (  PmdConfiguration . PROPERTY_GENERATE_XML , true ) ;   final Throwable  thrown =  catchThrowable  (   ( ) ->  configuration . dumpXmlReport  (  new Report  ( ) ) ) ;     assertThat  ( thrown ) . isInstanceOf  (  IllegalStateException . class ) . hasMessage  ( "Fail to save the PMD report" ) ; }    @ Test void should_ignore_xml_report_when_property_is_not_set  ( )  {  Path  reportFile =  configuration . dumpXmlReport  (  new Report  ( ) ) ;    assertThat  ( reportFile ) . isNull  ( ) ;   verifyZeroInteractions  ( fs ) ; } }