  package    org . sonar . plugins . pmd ;   import    net . sourceforge . pmd . PMDConfiguration ;  import    net . sourceforge . pmd . PMDException ;  import    net . sourceforge . pmd . RuleContext ;  import    net . sourceforge . pmd . RuleSets ;  import    net . sourceforge . pmd . SourceCodeProcessor ;  import      net . sourceforge . pmd . lang . java . JavaLanguageHandler ;  import    org . mockito . stubbing . Answer ;  import   java . io . InputStream ;  import   java . io . InputStreamReader ;  import   java . util . List ;  import static    org . mockito . Mockito . doAnswer ;  import static    org . mockito . Mockito . doThrow ;  import static    org . mockito . Mockito . mock ;  import static    org . mockito . Mockito . verify ;  import   java . io . BufferedReader ;  import    java . nio . charset . StandardCharsets ;  import    java . util . stream . Collectors ;  import     org . junit . jupiter . api . Test ;  import      org . sonar . api . batch . fs . InputFile ;  import       org . sonar . api . batch . fs . internal . TestInputFileBuilder ;  import static      org . assertj . core . api . Assertions . assertThat ;  import static      org . assertj . core . api . Assertions . catchThrowable ;  import static    org . mockito . ArgumentMatchers . any ;  import static    org . mockito . ArgumentMatchers . eq ;  class PmdTemplateTest  {   private final InputFile  inputFile =   TestInputFileBuilder . create  ( "src" , "test/resources/org/sonar/plugins/pmd/source.txt" ) . build  ( ) ;   private final RuleSets  rulesets =  mock  (  RuleSets . class ) ;   private final RuleContext  ruleContext =  mock  (  RuleContext . class ) ;   private final PMDConfiguration  configuration =  mock  (  PMDConfiguration . class ) ;   private final SourceCodeProcessor  processor =  mock  (  SourceCodeProcessor . class ) ;    @ Test void should_process_input_file  ( )  throws Exception  {     doAnswer  (  (  Answer  < Void > )  invocation ->  {   final InputStream  inputStreamArg =  ( InputStream )   invocation . getArguments  ( ) [ 0 ] ;   final  List  < String >  inputStreamLines =    new BufferedReader  (  new InputStreamReader  ( inputStreamArg ) ) . lines  ( ) . collect  (  Collectors . toList  ( ) ) ;    assertThat  ( inputStreamLines ) . containsExactly  ( "Example source" ) ;  return null ; } ) . when  ( processor ) . processSourceCode  (  any  (  InputStream . class ) ,  eq  ( rulesets ) ,  eq  ( ruleContext ) ) ;    new PmdTemplate  ( configuration , processor ) . process  ( inputFile , rulesets , ruleContext ) ;    verify  ( ruleContext ) . setSourceCodeFilename  (   inputFile . uri  ( ) . toString  ( ) ) ;    verify  ( processor ) . processSourceCode  (  any  (  InputStream . class ) ,  eq  ( rulesets ) ,  eq  ( ruleContext ) ) ; }    @ Test void should_ignore_PMD_error  ( )  throws PMDException , FileNotFoundException  {     doThrow  (  new PMDException  ( "BUG" ) ) . when  ( processor ) . processSourceCode  (  any  (  InputStream . class ) ,  any  (  RuleSets . class ) ,  any  (  RuleContext . class ) ) ;    new PmdTemplate  ( configuration , processor ) . process  ( inputFile , rulesets , ruleContext ) ; }    @ Test void java12_version  ( )  {    assertThat  (   PmdTemplate . languageVersion  ( "1.2" ) . getLanguageVersionHandler  ( ) ) . isInstanceOf  (  JavaLanguageHandler . class ) ; }    @ Test void java5_version  ( )  {    assertThat  (   PmdTemplate . languageVersion  ( "5" ) . getLanguageVersionHandler  ( ) ) . isInstanceOf  (  JavaLanguageHandler . class ) ; }    @ Test void java6_version  ( )  {    assertThat  (   PmdTemplate . languageVersion  ( "6" ) . getLanguageVersionHandler  ( ) ) . isInstanceOf  (  JavaLanguageHandler . class ) ; }    @ Test void java7_version  ( )  {    assertThat  (   PmdTemplate . languageVersion  ( "7" ) . getLanguageVersionHandler  ( ) ) . isInstanceOf  (  JavaLanguageHandler . class ) ; }    @ Test void java8_version  ( )  {    assertThat  (   PmdTemplate . languageVersion  ( "8" ) . getLanguageVersionHandler  ( ) ) . isInstanceOf  (  JavaLanguageHandler . class ) ; }    @ Test public void java9_version  ( )  {    assertThat  (   PmdTemplate . languageVersion  ( "9" ) . getLanguageVersionHandler  ( ) ) . isInstanceOf  (  JavaLanguageHandler . class ) ; }    @ Test public void java10_version  ( )  {    assertThat  (   PmdTemplate . languageVersion  ( "10" ) . getLanguageVersionHandler  ( ) ) . isInstanceOf  (  JavaLanguageHandler . class ) ; }    @ Test public void java11_version  ( )  {    assertThat  (   PmdTemplate . languageVersion  ( "11" ) . getLanguageVersionHandler  ( ) ) . isInstanceOf  (  JavaLanguageHandler . class ) ; }    @ Test void should_fail_on_invalid_java_version  ( )  {   final Throwable  thrown =  catchThrowable  (   ( ) ->  PmdTemplate . create  ( "12.2" ,  mock  (  ClassLoader . class ) ,  StandardCharsets . UTF_8 ) ) ;    assertThat  ( thrown ) . isInstanceOf  (  IllegalArgumentException . class ) ; }    @ Test void shouldnt_fail_on_valid_java_version  ( )  {   PmdTemplate . create  ( "6" ,  mock  (  ClassLoader . class ) ,  StandardCharsets . UTF_8 ) ; }    @ Test void should_set_classloader  ( )  {  ClassLoader  classloader =  mock  (  ClassLoader . class ) ;  PmdTemplate  pmdTemplate =  PmdTemplate . create  ( "6" , classloader ,  StandardCharsets . UTF_8 ) ;    assertThat  (   pmdTemplate . configuration  ( ) . getClassLoader  ( ) ) . isEqualTo  ( classloader ) ; }    @ Test void should_set_encoding  ( )  {  PmdTemplate  pmdTemplate =  PmdTemplate . create  ( "6" ,  mock  (  ClassLoader . class ) ,  StandardCharsets . UTF_16BE ) ;    assertThat  (    pmdTemplate . configuration  ( ) . getSourceEncoding  ( ) . toString  ( ) ) . isEqualTo  ( "UTF-16BE" ) ; } }