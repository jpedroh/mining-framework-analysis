  package    hudson . plugins . build_timeout . operations ;   import   java . util . Arrays ;  import   java . util . LinkedList ;  import   hudson . model . ParametersDefinitionProperty ;  import   hudson . model . StringParameterDefinition ;  import    hudson . plugins . build_timeout . BuildTimeOutAction ;  import   org . junit . Rule ;  import   org . junit . Test ;  import     org . jvnet . hudson . test . SleepBuilder ;  import   hudson . model . Cause ;  import   hudson . model . FreeStyleProject ;  import   hudson . model . ParametersAction ;  import   hudson . model . StringParameterValue ;  import   hudson . model . Result ;  import    hudson . plugins . build_timeout . BuildTimeOutOperation ;  import    hudson . plugins . build_timeout . QuickBuildTimeOutStrategy ;  import    hudson . plugins . build_timeout . BuildTimeoutWrapper ;  import static   org . junit . Assert .  * ;  import     org . jvnet . hudson . test . JenkinsRule ;   public class AbortAndRestartOperationTest  {    @ Rule public JenkinsRule  j =  new JenkinsRule  ( ) ; 
<<<<<<<
   @ Test public void testAbortAndRestartOnce  ( )  throws Exception  {  FreeStyleProject  testproject =  j . createFreeStyleProject  ( ) ;  QuickBuildTimeOutStrategy  strategy =  new QuickBuildTimeOutStrategy  ( 5000 ) ;  AbortAndRestartOperation  operation =  new AbortAndRestartOperation  ( "1" ) ;   LinkedList  < BuildTimeOutOperation >  list =  new  LinkedList  < >  ( ) ;   list . add  ( operation ) ;  BuildTimeoutWrapper  wrapper =  new BuildTimeoutWrapper  ( strategy , list , "" ) ;    testproject . getBuildWrappersList  ( ) . add  ( wrapper ) ;    testproject . getBuildersList  ( ) . add  (  new SleepBuilder  (   5 * 60 * 1000 ) ) ;   testproject . scheduleBuild  (  new  Cause . UserIdCause  ( ) ) ;   j . waitUntilNoActivityUpTo  ( 25000 ) ;   assertNotNull  (  testproject . getFirstBuild  ( ) ) ;   assertFalse  (   testproject . getFirstBuild  ( ) . equals  (  testproject . getLastBuild  ( ) ) ) ;   assertEquals  (   testproject . getBuilds  ( ) . size  ( ) , 2 ) ;   assertEquals  (  Result . ABORTED ,   testproject . getFirstBuild  ( ) . getResult  ( ) ) ;   assertEquals  (  Result . ABORTED ,   testproject . getLastBuild  ( ) . getResult  ( ) ) ;  BuildTimeOutAction  action =   testproject . getFirstBuild  ( ) . getAction  (  BuildTimeOutAction . class ) ;   assertNotNull  ( action ) ;   assertEquals  (   AbortAndRestartOperation . class . getSimpleName  ( ) ,  action . getReason  ( ) ) ; }
=======
>>>>>>>
 
<<<<<<<
   @ Test public void testAbortAndRestartTwice  ( )  throws Exception  {  FreeStyleProject  testproject =  j . createFreeStyleProject  ( ) ;  QuickBuildTimeOutStrategy  strategy =  new QuickBuildTimeOutStrategy  ( 5000 ) ;  AbortAndRestartOperation  operation =  new AbortAndRestartOperation  ( "2" ) ;   LinkedList  < BuildTimeOutOperation >  list =  new  LinkedList  < >  ( ) ;   list . add  ( operation ) ;  BuildTimeoutWrapper  wrapper =  new BuildTimeoutWrapper  ( strategy , list , "" ) ;    testproject . getBuildWrappersList  ( ) . add  ( wrapper ) ;    testproject . getBuildersList  ( ) . add  (  new SleepBuilder  (   5 * 60 * 1000 ) ) ;   assertTrue  (    testproject . getBuilds  ( ) . size  ( ) == 0 ) ;   testproject . scheduleBuild  (  new  Cause . UserIdCause  ( ) ) ;   j . waitUntilNoActivityUpTo  ( 25000 ) ;   assertNotNull  (  testproject . getFirstBuild  ( ) ) ;   assertFalse  (   testproject . getFirstBuild  ( ) . equals  (  testproject . getLastBuild  ( ) ) ) ;   assertEquals  (   testproject . getBuilds  ( ) . size  ( ) , 3 ) ;   assertEquals  (  Result . ABORTED ,   testproject . getBuildByNumber  ( 1 ) . getResult  ( ) ) ;   assertEquals  (  Result . ABORTED ,   testproject . getBuildByNumber  ( 2 ) . getResult  ( ) ) ;   assertEquals  (  Result . ABORTED ,   testproject . getBuildByNumber  ( 3 ) . getResult  ( ) ) ;  BuildTimeOutAction  action =   testproject . getBuildByNumber  ( 1 ) . getAction  (  BuildTimeOutAction . class ) ;   assertNotNull  ( action ) ;   assertEquals  (   AbortAndRestartOperation . class . getSimpleName  ( ) ,  action . getReason  ( ) ) ; }
=======
>>>>>>>
 
<<<<<<<
   @ Test public void testUsingVariable  ( )  throws Exception  {  FreeStyleProject  p =  j . createFreeStyleProject  ( ) ;   p . addProperty  (  new ParametersDefinitionProperty  (  new StringParameterDefinition  ( "RESTART" , null ) ) ) ;    p . getBuildWrappersList  ( ) . add  (  new BuildTimeoutWrapper  (  new QuickBuildTimeOutStrategy  ( 1000 ) ,  Arrays .  < BuildTimeOutOperation > asList  (  new AbortAndRestartOperation  ( "${RESTART}" ) ) , "" ) ) ;    p . getBuildersList  ( ) . add  (  new SleepBuilder  (   5 * 60 * 1000 ) ) ;   j . assertBuildStatus  (  Result . ABORTED ,   p . scheduleBuild2  ( 0 ,  new  Cause . UserIdCause  ( ) ,  new ParametersAction  (  new StringParameterValue  ( "RESTART" , "1" ) ) ) . get  ( ) ) ;   j . waitUntilNoActivityUpTo  ( 25000 ) ;   assertEquals  ( 2 ,   p . getBuilds  ( ) . size  ( ) ) ;  BuildTimeOutAction  action =   p . getBuildByNumber  ( 1 ) . getAction  (  BuildTimeOutAction . class ) ;   assertNotNull  ( action ) ; }
=======
>>>>>>>
 
<<<<<<<
   @ Test public void testUsingBadRestart  ( )  throws Exception  {  FreeStyleProject  p =  j . createFreeStyleProject  ( ) ;    p . getBuildWrappersList  ( ) . add  (  new BuildTimeoutWrapper  (  new QuickBuildTimeOutStrategy  ( 1000 ) ,  Arrays .  < BuildTimeOutOperation > asList  (  new AbortAndRestartOperation  ( "${RESTART}" ) ) , "" ) ) ;    p . getBuildersList  ( ) . add  (  new SleepBuilder  (   5 * 60 * 1000 ) ) ;   j . assertBuildStatus  (  Result . ABORTED ,   p . scheduleBuild2  ( 0 ,  new  Cause . UserIdCause  ( ) ,  new ParametersAction  (  new StringParameterValue  ( "RESTART" , "xxx" ) ) ) . get  ( ) ) ;   j . waitUntilNoActivityUpTo  ( 25000 ) ;   assertEquals  ( 1 ,   p . getBuilds  ( ) . size  ( ) ) ;  BuildTimeOutAction  action =   p . getFirstBuild  ( ) . getAction  (  BuildTimeOutAction . class ) ;   assertNotNull  ( action ) ;   assertEquals  (   AbortAndRestartOperation . class . getSimpleName  ( ) ,  action . getReason  ( ) ) ; }
=======
>>>>>>>
    @ Test public void abortAndRestartOnce  ( )  throws Exception  {  FreeStyleProject  testproject =  j . createFreeStyleProject  ( ) ;  QuickBuildTimeOutStrategy  strategy =  new QuickBuildTimeOutStrategy  ( 5000 ) ;  AbortAndRestartOperation  operation =  new AbortAndRestartOperation  ( "1" ) ;   LinkedList  < BuildTimeOutOperation >  list =  new  LinkedList  < >  ( ) ;   list . add  ( operation ) ;  BuildTimeoutWrapper  wrapper =  new BuildTimeoutWrapper  ( strategy , list , "" ) ;    testproject . getBuildWrappersList  ( ) . add  ( wrapper ) ;    testproject . getBuildersList  ( ) . add  (  new SleepBuilder  (   5 * 60 * 1000 ) ) ;   testproject . scheduleBuild  (  new  Cause . UserIdCause  ( ) ) ;   j . waitUntilNoActivityUpTo  ( 25000 ) ;   assertNotNull  (  testproject . getFirstBuild  ( ) ) ;   assertFalse  (   testproject . getFirstBuild  ( ) . equals  (  testproject . getLastBuild  ( ) ) ) ;   assertEquals  (   testproject . getBuilds  ( ) . size  ( ) , 2 ) ;   assertEquals  (  Result . ABORTED ,   testproject . getFirstBuild  ( ) . getResult  ( ) ) ;   assertEquals  (  Result . ABORTED ,   testproject . getLastBuild  ( ) . getResult  ( ) ) ; }    @ Test public void abortAndRestartTwice  ( )  throws Exception  {  FreeStyleProject  testproject =  j . createFreeStyleProject  ( ) ;  QuickBuildTimeOutStrategy  strategy =  new QuickBuildTimeOutStrategy  ( 5000 ) ;  AbortAndRestartOperation  operation =  new AbortAndRestartOperation  ( "2" ) ;   LinkedList  < BuildTimeOutOperation >  list =  new  LinkedList  < >  ( ) ;   list . add  ( operation ) ;  BuildTimeoutWrapper  wrapper =  new BuildTimeoutWrapper  ( strategy , list , "" ) ;    testproject . getBuildWrappersList  ( ) . add  ( wrapper ) ;    testproject . getBuildersList  ( ) . add  (  new SleepBuilder  (   5 * 60 * 1000 ) ) ;   assertTrue  (    testproject . getBuilds  ( ) . size  ( ) == 0 ) ;   testproject . scheduleBuild  (  new  Cause . UserIdCause  ( ) ) ;   j . waitUntilNoActivityUpTo  ( 25000 ) ;   assertNotNull  (  testproject . getFirstBuild  ( ) ) ;   assertFalse  (   testproject . getFirstBuild  ( ) . equals  (  testproject . getLastBuild  ( ) ) ) ;   assertEquals  (   testproject . getBuilds  ( ) . size  ( ) , 3 ) ;   assertEquals  (  Result . ABORTED ,   testproject . getBuildByNumber  ( 1 ) . getResult  ( ) ) ;   assertEquals  (  Result . ABORTED ,   testproject . getBuildByNumber  ( 2 ) . getResult  ( ) ) ;   assertEquals  (  Result . ABORTED ,   testproject . getBuildByNumber  ( 3 ) . getResult  ( ) ) ; }    @ Test public void usingVariable  ( )  throws Exception  {  FreeStyleProject  p =  j . createFreeStyleProject  ( ) ;   p . addProperty  (  new ParametersDefinitionProperty  (  new StringParameterDefinition  ( "RESTART" , null ) ) ) ;    p . getBuildWrappersList  ( ) . add  (  new BuildTimeoutWrapper  (  new QuickBuildTimeOutStrategy  ( 1000 ) ,  Arrays .  < BuildTimeOutOperation > asList  (  new AbortAndRestartOperation  ( "${RESTART}" ) ) , "" ) ) ;    p . getBuildersList  ( ) . add  (  new SleepBuilder  (   5 * 60 * 1000 ) ) ;   j . assertBuildStatus  (  Result . ABORTED ,   p . scheduleBuild2  ( 0 ,  new  Cause . UserIdCause  ( ) ,  new ParametersAction  (  new StringParameterValue  ( "RESTART" , "1" ) ) ) . get  ( ) ) ;   j . waitUntilNoActivityUpTo  ( 25000 ) ;   assertEquals  ( 2 ,   p . getBuilds  ( ) . size  ( ) ) ; }    @ Test public void usingBadRestart  ( )  throws Exception  {  FreeStyleProject  p =  j . createFreeStyleProject  ( ) ;    p . getBuildWrappersList  ( ) . add  (  new BuildTimeoutWrapper  (  new QuickBuildTimeOutStrategy  ( 1000 ) ,  Arrays .  < BuildTimeOutOperation > asList  (  new AbortAndRestartOperation  ( "${RESTART}" ) ) , "" ) ) ;    p . getBuildersList  ( ) . add  (  new SleepBuilder  (   5 * 60 * 1000 ) ) ;   j . assertBuildStatus  (  Result . ABORTED ,   p . scheduleBuild2  ( 0 ,  new  Cause . UserIdCause  ( ) ,  new ParametersAction  (  new StringParameterValue  ( "RESTART" , "xxx" ) ) ) . get  ( ) ) ;   j . waitUntilNoActivityUpTo  ( 25000 ) ;   assertEquals  ( 1 ,   p . getBuilds  ( ) . size  ( ) ) ; } }