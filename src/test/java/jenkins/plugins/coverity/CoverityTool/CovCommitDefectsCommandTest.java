  package    jenkins . plugins . coverity . CoverityTool ;   import   jenkins . plugins . coverity .  * ;  import     org . apache . commons . lang . StringUtils ;  import   org . junit . Assert ;  import   org . junit . Test ;  import   org . mockito . Mockito ;  import   java . io . IOException ;  import   java . util . ArrayList ;  import   java . util . List ;  import static    org . junit . Assert . assertEquals ;  import static    org . mockito . Mockito . when ;   public class CovCommitDefectsCommandTest  extends CommandTestBase  {    @ Test public void prepareCommandTest  ( )  throws IOException , InterruptedException  {  CIMStream  cimStream =  new CIMStream  ( "TestInstance" , "TestProject" , "TestStream" , null , "TestId" , null ) ;   List  < CIMStream >  cimStreamList =  new  ArrayList  < >  ( ) ;   cimStreamList . add  ( cimStream ) ;  CIMInstance  cimInstance =  new CIMInstance  ( "TestInstance" , "Localhost" , 8080 , "TestUser" , "TestPassword" , false , 0 ) ;  InvocationAssistance  invocationAssistance =  new InvocationAssistance  ( false ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false ) ;  CoverityPublisher  publisher =  new CoverityPublisher  ( cimStreamList , invocationAssistance , false , false , false , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , null , null ) ;  ICommand  covCommitDefectsCommand =  new CovCommitDefectsCommand  ( build , launcher , listener , publisher ,  StringUtils . EMPTY , envVars , cimStream , cimInstance ,  CoverityVersion . VERSION_JASPER ) ;   setExpectedArguments  (  new String  [ ]  { "cov-commit-defects" , "--dir" , "TestDir" , "--host" , "Localhost" , "--port" , "8080" , "--stream" , "TestStream" , "--user" , "TestUser" } ) ;   covCommitDefectsCommand . runCommand  ( ) ;   assertEquals  ( "TestPassword" ,  envVars . get  ( "COVERITY_PASSPHRASE" ) ) ;   consoleLogger . verifyLastMessage  (  "[Coverity] cov-commit-defects command line arguments: " +  actualArguments . toString  ( ) ) ; }    @ Test public void addDataPortTest  ( )  throws IOException , InterruptedException  {  CIMStream  cimStream =  new CIMStream  ( "TestInstance" , "TestProject" , "TestStream" , null , "TestId" , null ) ;   List  < CIMStream >  cimStreamList =  new  ArrayList  < >  ( ) ;   cimStreamList . add  ( cimStream ) ;  CIMInstance  cimInstance =  new CIMInstance  ( "TestInstance" , "Localhost" , 8080 , "TestUser" , "TestPassword" , false , 1234 ) ;  InvocationAssistance  invocationAssistance =  new InvocationAssistance  ( false ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false ) ;  CoverityPublisher  publisher =  new CoverityPublisher  ( cimStreamList , invocationAssistance , false , false , false , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , null , null ) ;  ICommand  covCommitDefectsCommand =  new CovCommitDefectsCommand  ( build , launcher , listener , publisher ,  StringUtils . EMPTY , envVars , cimStream , cimInstance ,  CoverityVersion . VERSION_JASPER ) ;   setExpectedArguments  (  new String  [ ]  { "cov-commit-defects" , "--dir" , "TestDir" , "--host" , "Localhost" , "--dataport" , "1234" , "--stream" , "TestStream" , "--user" , "TestUser" } ) ;   covCommitDefectsCommand . runCommand  ( ) ;   assertEquals  ( "TestPassword" ,  envVars . get  ( "COVERITY_PASSPHRASE" ) ) ;   consoleLogger . verifyLastMessage  (  "[Coverity] cov-commit-defects command line arguments: " +  actualArguments . toString  ( ) ) ; }    @ Test public void addDataPortTest_WithSslConfiguration  ( )  throws IOException , InterruptedException  {  CIMStream  cimStream =  new CIMStream  ( "TestInstance" , "TestProject" , "TestStream" , null , "TestId" , null ) ;   List  < CIMStream >  cimStreamList =  new  ArrayList  < >  ( ) ;   cimStreamList . add  ( cimStream ) ;  CIMInstance  cimInstance =  new CIMInstance  ( "TestInstance" , "Localhost" , 8080 , "TestUser" , "TestPassword" , true , 1234 ) ;  InvocationAssistance  invocationAssistance =  new InvocationAssistance  ( false ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false ) ;  SSLConfigurations  sslConfigurations =  new SSLConfigurations  ( true , null ) ;   sslConfigurations . setCertFileName  ( "TestCertFile" ) ;   CoverityPublisher . DescriptorImpl  descriptor =  Mockito . mock  (   CoverityPublisher . DescriptorImpl . class ) ;  CoverityPublisher  publisher =  Mockito . mock  (  CoverityPublisher . class ) ;    when  (  publisher . getDescriptor  ( ) ) . thenReturn  ( descriptor ) ;    when  (  publisher . getCimStreams  ( ) ) . thenReturn  ( cimStreamList ) ;    when  (  publisher . getInvocationAssistance  ( ) ) . thenReturn  ( invocationAssistance ) ;    when  (  publisher . getInvocationAssistance  ( ) ) . thenReturn  ( invocationAssistance ) ;    when  (  descriptor . getSslConfigurations  ( ) ) . thenReturn  ( sslConfigurations ) ;  ICommand  covCommitDefectsCommand =  new CovCommitDefectsCommand  ( build , launcher , listener , publisher ,  StringUtils . EMPTY , envVars , cimStream , cimInstance ,  CoverityVersion . VERSION_JASPER ) ;   setExpectedArguments  (  new String  [ ]  { "cov-commit-defects" , "--dir" , "TestDir" , "--host" , "Localhost" , "--dataport" , "1234" , "--ssl" , "--on-new-cert" , "trust" , "--cert" , "TestCertFile" , "--stream" , "TestStream" , "--user" , "TestUser" } ) ;   covCommitDefectsCommand . runCommand  ( ) ;   assertEquals  ( "TestPassword" ,  envVars . get  ( "COVERITY_PASSPHRASE" ) ) ;   consoleLogger . verifyLastMessage  (  "[Coverity] cov-commit-defects command line arguments: " +  actualArguments . toString  ( ) ) ; }    @ Test public void addHttpsPortTest  ( )  throws IOException , InterruptedException  {  CIMStream  cimStream =  new CIMStream  ( "TestInstance" , "TestProject" , "TestStream" , null , "TestId" , null ) ;   List  < CIMStream >  cimStreamList =  new  ArrayList  < >  ( ) ;   cimStreamList . add  ( cimStream ) ;  CIMInstance  cimInstance =  new CIMInstance  ( "TestInstance" , "Localhost" , 8080 , "TestUser" , "TestPassword" , true , 0 ) ;  InvocationAssistance  invocationAssistance =  new InvocationAssistance  ( false ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false ) ;  SSLConfigurations  sslConfigurations =  new SSLConfigurations  ( true , null ) ;   sslConfigurations . setCertFileName  ( "TestCertFile" ) ;   CoverityPublisher . DescriptorImpl  descriptor =  Mockito . mock  (   CoverityPublisher . DescriptorImpl . class ) ;  CoverityPublisher  publisher =  Mockito . mock  (  CoverityPublisher . class ) ;    when  (  publisher . getDescriptor  ( ) ) . thenReturn  ( descriptor ) ;    when  (  publisher . getCimStreams  ( ) ) . thenReturn  ( cimStreamList ) ;    when  (  publisher . getInvocationAssistance  ( ) ) . thenReturn  ( invocationAssistance ) ;    when  (  publisher . getInvocationAssistance  ( ) ) . thenReturn  ( invocationAssistance ) ;    when  (  descriptor . getSslConfigurations  ( ) ) . thenReturn  ( sslConfigurations ) ;  ICommand  covCommitDefectsCommand =  new CovCommitDefectsCommand  ( build , launcher , listener , publisher ,  StringUtils . EMPTY , envVars , cimStream , cimInstance ,  CoverityVersion . VERSION_JASPER ) ;   setExpectedArguments  (  new String  [ ]  { "cov-commit-defects" , "--dir" , "TestDir" , "--host" , "Localhost" , "--https-port" , "8080" , "--ssl" , "--on-new-cert" , "trust" , "--cert" , "TestCertFile" , "--stream" , "TestStream" , "--user" , "TestUser" } ) ;   covCommitDefectsCommand . runCommand  ( ) ;   assertEquals  ( "TestPassword" ,  envVars . get  ( "COVERITY_PASSPHRASE" ) ) ;   consoleLogger . verifyLastMessage  (  "[Coverity] cov-commit-defects command line arguments: " +  actualArguments . toString  ( ) ) ; }    @ Test public void addCommitArgumentsTest  ( )  throws IOException , InterruptedException  {  CIMStream  cimStream =  new CIMStream  ( "TestInstance" , "TestProject" , "TestStream" , null , "TestId" , null ) ;   List  < CIMStream >  cimStreamList =  new  ArrayList  < >  ( ) ;   cimStreamList . add  ( cimStream ) ;  CIMInstance  cimInstance =  new CIMInstance  ( "TestInstance" , "Localhost" , 8080 , "TestUser" , "TestPassword" , false , 0 ) ;  InvocationAssistance  invocationAssistance =  new InvocationAssistance  ( false ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , "AdditionalCommitArguments" ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false ) ;  CoverityPublisher  publisher =  new CoverityPublisher  ( cimStreamList , invocationAssistance , false , false , false , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , null , null ) ;  ICommand  covCommitDefectsCommand =  new CovCommitDefectsCommand  ( build , launcher , listener , publisher ,  StringUtils . EMPTY , envVars , cimStream , cimInstance ,  CoverityVersion . VERSION_JASPER ) ;   setExpectedArguments  (  new String  [ ]  { "cov-commit-defects" , "--dir" , "TestDir" , "--host" , "Localhost" , "--port" , "8080" , "--stream" , "TestStream" , "--user" , "TestUser" , "AdditionalCommitArguments" } ) ;   covCommitDefectsCommand . runCommand  ( ) ;   assertEquals  ( "TestPassword" ,  envVars . get  ( "COVERITY_PASSPHRASE" ) ) ;   consoleLogger . verifyLastMessage  (  "[Coverity] cov-commit-defects command line arguments: " +  actualArguments . toString  ( ) ) ; }    @ Test public void addCommitArgumentsTest_WithParseException  ( )  throws IOException , InterruptedException  {  CIMStream  cimStream =  new CIMStream  ( "TestInstance" , "TestProject" , "TestStream" , null , "TestId" , null ) ;   List  < CIMStream >  cimStreamList =  new  ArrayList  < >  ( ) ;   cimStreamList . add  ( cimStream ) ;  CIMInstance  cimInstance =  new CIMInstance  ( "TestInstance" , "Localhost" , 8080 , "TestUser" , "TestPassword" , false , 0 ) ;  InvocationAssistance  invocationAssistance =  new InvocationAssistance  ( false ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , "\'" ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false ) ;  CoverityPublisher  publisher =  new CoverityPublisher  ( cimStreamList , invocationAssistance , false , false , false , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , null , null ) ;  ICommand  covCommitDefectsCommand =  new CovCommitDefectsCommand  ( build , launcher , listener , publisher ,  StringUtils . EMPTY , envVars , cimStream , cimInstance ,  CoverityVersion . VERSION_JASPER ) ;  try  {   covCommitDefectsCommand . runCommand  ( ) ;   Assert . fail  ( "RuntimeException should have been thrown" ) ; }  catch (   RuntimeException e )  {   assertEquals  ( "ParseException occurred during tokenizing the cov-commit-defect commit arguments." ,  e . getMessage  ( ) ) ; } }    @ Test public void cannotExecute  ( )  throws IOException , InterruptedException  {  CoverityPublisher  publisher =  new CoverityPublisher  ( null , null , false , false , false , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , null , null ) ;  ICommand  covCommitDefectsCommand =  new CovCommitDefectsCommand  ( build , launcher , listener , publisher ,  StringUtils . EMPTY , envVars , null , null ,  CoverityVersion . VERSION_JASPER ) ;   covCommitDefectsCommand . runCommand  ( ) ;   consoleLogger . verifyLastMessage  ( "[Coverity] Skipping command because it can't be executed" ) ; } 
<<<<<<<
=======
   @ Test public void CovCommitDefectsCommand_PrepareCommandTest  ( )  {   mocker . replay  ( ) ;  CIMStream  cimStream =  new CIMStream  ( "TestInstance" , "TestProject" , "TestStream" , null , "TestId" , null ) ;   List  < CIMStream >  cimStreamList =  new  ArrayList  < >  ( ) ;   cimStreamList . add  ( cimStream ) ;  CIMInstance  cimInstance =  new CIMInstance  ( "TestInstance" , "Localhost" , 8080 , "TestUser" , "TestPassword" , false , 0 ) ;  InvocationAssistance  invocationAssistance =  new InvocationAssistance  ( false ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false ) ;  CoverityPublisher  publisher =  new CoverityPublisher  ( cimStreamList , invocationAssistance , false , false , false , false , false , null , null ) ;  CovCommand  covCommitDefectsCommand =  new CovCommitDefectsCommand  ( build , launcher , listener , publisher ,  StringUtils . EMPTY , envVars , cimStream , cimInstance ,  CoverityVersion . VERSION_JASPER ) ;   List  < String >  covCommitDefectsArguments =  covCommitDefectsCommand . getCommandLines  ( ) ;   assertEquals  ( 11 ,  covCommitDefectsArguments . size  ( ) ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "cov-commit-defects" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "--dir" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "TestDir" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "--host" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "Localhost" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "--port" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "8080" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "--stream" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "TestStream" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "--user" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "TestUser" ) ;   assertEquals  ( "TestPassword" ,  envVars . get  ( "COVERITY_PASSPHRASE" ) ) ;   assertEquals  ( 0 ,  covCommitDefectsArguments . size  ( ) ) ; }
>>>>>>>
 
<<<<<<<
=======
   @ Test public void CovCommitDefectsCommand_AddDataPortTest  ( )  {   mocker . replay  ( ) ;  CIMStream  cimStream =  new CIMStream  ( "TestInstance" , "TestProject" , "TestStream" , null , "TestId" , null ) ;   List  < CIMStream >  cimStreamList =  new  ArrayList  < >  ( ) ;   cimStreamList . add  ( cimStream ) ;  CIMInstance  cimInstance =  new CIMInstance  ( "TestInstance" , "Localhost" , 8080 , "TestUser" , "TestPassword" , false , 1234 ) ;  InvocationAssistance  invocationAssistance =  new InvocationAssistance  ( false ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false ) ;  CoverityPublisher  publisher =  new CoverityPublisher  ( cimStreamList , invocationAssistance , false , false , false , false , false , null , null ) ;  CovCommand  covCommitDefectsCommand =  new CovCommitDefectsCommand  ( build , launcher , listener , publisher ,  StringUtils . EMPTY , envVars , cimStream , cimInstance ,  CoverityVersion . VERSION_JASPER ) ;   List  < String >  covCommitDefectsArguments =  covCommitDefectsCommand . getCommandLines  ( ) ;   assertEquals  ( 11 ,  covCommitDefectsArguments . size  ( ) ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "cov-commit-defects" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "--dir" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "TestDir" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "--host" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "Localhost" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "--dataport" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "1234" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "--stream" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "TestStream" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "--user" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "TestUser" ) ;   assertEquals  ( "TestPassword" ,  envVars . get  ( "COVERITY_PASSPHRASE" ) ) ;   assertEquals  ( 0 ,  covCommitDefectsArguments . size  ( ) ) ; }
>>>>>>>
 
<<<<<<<
=======
   @ Test public void CovCommitDefectsCommand_AddCommitArgumentsTest  ( )  {   mocker . replay  ( ) ;  CIMStream  cimStream =  new CIMStream  ( "TestInstance" , "TestProject" , "TestStream" , null , "TestId" , null ) ;   List  < CIMStream >  cimStreamList =  new  ArrayList  < >  ( ) ;   cimStreamList . add  ( cimStream ) ;  CIMInstance  cimInstance =  new CIMInstance  ( "TestInstance" , "Localhost" , 8080 , "TestUser" , "TestPassword" , false , 0 ) ;  InvocationAssistance  invocationAssistance =  new InvocationAssistance  ( false ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , "AdditionalCommitArguments" ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false ) ;  CoverityPublisher  publisher =  new CoverityPublisher  ( cimStreamList , invocationAssistance , false , false , false , false , false , null , null ) ;  CovCommand  covCommitDefectsCommand =  new CovCommitDefectsCommand  ( build , launcher , listener , publisher ,  StringUtils . EMPTY , envVars , cimStream , cimInstance ,  CoverityVersion . VERSION_JASPER ) ;   List  < String >  covCommitDefectsArguments =  covCommitDefectsCommand . getCommandLines  ( ) ;   assertEquals  ( 12 ,  covCommitDefectsArguments . size  ( ) ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "cov-commit-defects" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "--dir" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "TestDir" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "--host" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "Localhost" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "--port" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "8080" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "--stream" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "TestStream" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "--user" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "TestUser" ) ;   checkCommandLineArg  ( covCommitDefectsArguments , "AdditionalCommitArguments" ) ;   assertEquals  ( "TestPassword" ,  envVars . get  ( "COVERITY_PASSPHRASE" ) ) ;   assertEquals  ( 0 ,  covCommitDefectsArguments . size  ( ) ) ; }
>>>>>>>
 
<<<<<<<
=======
   @ Test public void CovCommitDefectsCommand_AddCommitArgumentsTest_WithParseException  ( )  {   mocker . replay  ( ) ;  CIMStream  cimStream =  new CIMStream  ( "TestInstance" , "TestProject" , "TestStream" , null , "TestId" , null ) ;   List  < CIMStream >  cimStreamList =  new  ArrayList  < >  ( ) ;   cimStreamList . add  ( cimStream ) ;  CIMInstance  cimInstance =  new CIMInstance  ( "TestInstance" , "Localhost" , 8080 , "TestUser" , "TestPassword" , false , 0 ) ;  InvocationAssistance  invocationAssistance =  new InvocationAssistance  ( false ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , "\'" ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false ) ;  CoverityPublisher  publisher =  new CoverityPublisher  ( cimStreamList , invocationAssistance , false , false , false , false , false , null , null ) ;   expectedException . expect  (  RuntimeException . class ) ;   expectedException . expectMessage  ( "ParseException occurred during tokenizing the cov-commit-defect commit arguments." ) ;  CovCommand  covCommitDefectsCommand =  new CovCommitDefectsCommand  ( build , launcher , listener , publisher ,  StringUtils . EMPTY , envVars , cimStream , cimInstance ,  CoverityVersion . VERSION_JASPER ) ; }
>>>>>>>
 }