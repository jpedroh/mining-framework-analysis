  package    jenkins . plugins . coverity . CoverityTool ;   import    jenkins . plugins . coverity . CoverityPublisher ;  import    jenkins . plugins . coverity . InvocationAssistance ;  import    jenkins . plugins . coverity . TaOptionBlock ;  import     org . apache . commons . lang . StringUtils ;  import   org . junit . Test ;  import   java . io . File ;  import   java . io . IOException ;  import   java . util . List ;  import static    org . junit . Assert . assertEquals ;   public class CovBuildCommandTest  extends CommandTestBase  {    @ Test public void commandForScriptSourcesTest  ( )  throws IOException , InterruptedException  {  InvocationAssistance  invocationAssistance =  new InvocationAssistance  ( false ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY , false , true ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false ) ;  CoverityPublisher  publisher =  new CoverityPublisher  ( null , invocationAssistance , false , false , false , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , null , null ) ;  ICommand  covBuildCommand =  new CovBuildCommand  ( build , launcher , listener , publisher ,  StringUtils . EMPTY , envVars ) ;   setExpectedArguments  (  new String  [ ]  { "cov-build" , "--dir" , "TestDir" , "--no-command" , "--fs-capture-search" , "$WORKSPACE" } ) ;   covBuildCommand . runCommand  ( ) ;   consoleLogger . verifyLastMessage  (  "[Coverity] cov-build command line arguments: " +  actualArguments . toString  ( ) ) ; }    @ Test public void commandForCompileSourcesTest_WithCaptureScriptSources  ( )  throws IOException , InterruptedException  {  InvocationAssistance  invocationAssistance =  new InvocationAssistance  ( false ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY , true , true ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false ) ;  CoverityPublisher  publisher =  new CoverityPublisher  ( null , invocationAssistance , false , false , false , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , null , null ) ;  ICommand  covBuildCommand =  new CovBuildCommand  ( build , launcher , listener , publisher ,  StringUtils . EMPTY , envVars ) ;   setExpectedArguments  (  new String  [ ]  { "cov-build" , "--dir" , "TestDir" , "--fs-capture-search" , "$WORKSPACE" } ) ;   covBuildCommand . runCommand  ( ) ;   consoleLogger . verifyLastMessage  (  "[Coverity] cov-build command line arguments: " +  actualArguments . toString  ( ) ) ; }    @ Test public void commandForCompileSourcesTest_WithTaOptions  ( )  throws IOException , InterruptedException  {  InvocationAssistance  invocationAssistance =  new InvocationAssistance  ( false ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY , true , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false ) ;  TaOptionBlock  taOptionBlock =  new TaOptionBlock  (  StringUtils . EMPTY , false , false , true ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , "Jacoco" , true , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , false ) ;  CoverityPublisher  publisher =  new CoverityPublisher  ( null , invocationAssistance , false , false , false , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , taOptionBlock , null ) ;  ICommand  covBuildCommand =  new CovBuildCommand  ( build , launcher , listener , publisher ,  StringUtils . EMPTY , envVars ) ;   setExpectedArguments  (  new String  [ ]  { "cov-build" , "--dir" , "TestDir" , "--java-coverage" , "Jacoco" , "--java-test" , "junit" } ) ;   covBuildCommand . runCommand  ( ) ;   consoleLogger . verifyLastMessage  (  "[Coverity] cov-build command line arguments: " +  actualArguments . toString  ( ) ) ; }    @ Test public void commandForCompileSourcesTest_WithAdditionalBuildArguments  ( )  throws IOException , InterruptedException  {  InvocationAssistance  invocationAssistance =  new InvocationAssistance  ( false ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY , true , false , "AdditionalBuildArguments" ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false ) ;  CoverityPublisher  publisher =  new CoverityPublisher  ( null , invocationAssistance , false , false , false , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , null , null ) ;  ICommand  covBuildCommand =  new CovBuildCommand  ( build , launcher , listener , publisher ,  StringUtils . EMPTY , envVars ) ;   setExpectedArguments  (  new String  [ ]  { "cov-build" , "--dir" , "TestDir" , "AdditionalBuildArguments" } ) ;   covBuildCommand . runCommand  ( ) ;   consoleLogger . verifyLastMessage  (  "[Coverity] cov-build command line arguments: " +  actualArguments . toString  ( ) ) ; }    @ Test public void cannotExecuteTest  ( )  throws IOException , InterruptedException  {  CoverityPublisher  publisher =  new CoverityPublisher  ( null , null , false , false , false , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , null , null ) ;  ICommand  covBuildCommand =  new CovBuildCommand  ( build , launcher , listener , publisher ,  StringUtils . EMPTY , envVars ) ;   covBuildCommand . runCommand  ( ) ;   consoleLogger . verifyLastMessage  ( "[Coverity] Skipping command because it can't be executed" ) ; } 
<<<<<<<
=======
   @ Test public void CovBuildCommand_CommandForScriptSourcesTest  ( )  {   mocker . replay  ( ) ;  InvocationAssistance  invocationAssistance =  new InvocationAssistance  ( false ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY , false , true ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false ) ;  CoverityPublisher  publisher =  new CoverityPublisher  ( null , invocationAssistance , false , false , false , false , false , null , null ) ;  CovCommand  covBuildCommand =  new CovBuildCommand  ( build , launcher , listener , publisher ,  StringUtils . EMPTY , envVars ) ;   List  < String >  covBuildArguments =  covBuildCommand . getCommandLines  ( ) ;   assertEquals  ( 6 ,  covBuildArguments . size  ( ) ) ;   checkCommandLineArg  ( covBuildArguments , "cov-build" ) ;   checkCommandLineArg  ( covBuildArguments , "--dir" ) ;   checkCommandLineArg  ( covBuildArguments , "TestDir" ) ;   checkCommandLineArg  ( covBuildArguments , "--no-command" ) ;   checkCommandLineArg  ( covBuildArguments , "--fs-capture-search" ) ;   checkCommandLineArg  ( covBuildArguments , "$WORKSPACE" ) ;   assertEquals  ( 0 ,  covBuildArguments . size  ( ) ) ; }
>>>>>>>
 
<<<<<<<
=======
   @ Test public void CovBuildCommand_CommandForCompileSourcesTest_WithCaptureScriptSources  ( )  {   mocker . replay  ( ) ;  InvocationAssistance  invocationAssistance =  new InvocationAssistance  ( false ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY , true , true ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false ) ;  CoverityPublisher  publisher =  new CoverityPublisher  ( null , invocationAssistance , false , false , false , false , false , null , null ) ;  CovCommand  covBuildCommand =  new CovBuildCommand  ( build , launcher , listener , publisher ,  StringUtils . EMPTY , envVars ) ;   List  < String >  covBuildArguments =  covBuildCommand . getCommandLines  ( ) ;   assertEquals  ( 5 ,  covBuildArguments . size  ( ) ) ;   checkCommandLineArg  ( covBuildArguments , "cov-build" ) ;   checkCommandLineArg  ( covBuildArguments , "--dir" ) ;   checkCommandLineArg  ( covBuildArguments , "TestDir" ) ;   checkCommandLineArg  ( covBuildArguments , "--fs-capture-search" ) ;   checkCommandLineArg  ( covBuildArguments , "$WORKSPACE" ) ;   assertEquals  ( 0 ,  covBuildArguments . size  ( ) ) ; }
>>>>>>>
 
<<<<<<<
=======
   @ Test public void CovBuildCommand_CommandForCompileSourcesTest_WithTaOptions  ( )  {   mocker . replay  ( ) ;  InvocationAssistance  invocationAssistance =  new InvocationAssistance  ( false ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY , true , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false ) ;  TaOptionBlock  taOptionBlock =  new TaOptionBlock  (  StringUtils . EMPTY , false , false , true ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , "Jacoco" , true , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , false ) ;  CoverityPublisher  publisher =  new CoverityPublisher  ( null , invocationAssistance , false , false , false , false , false , taOptionBlock , null ) ;  CovCommand  covBuildCommand =  new CovBuildCommand  ( build , launcher , listener , publisher ,  StringUtils . EMPTY , envVars ) ;   List  < String >  covBuildArguments =  covBuildCommand . getCommandLines  ( ) ;   assertEquals  ( 7 ,  covBuildArguments . size  ( ) ) ;   checkCommandLineArg  ( covBuildArguments , "cov-build" ) ;   checkCommandLineArg  ( covBuildArguments , "--dir" ) ;   checkCommandLineArg  ( covBuildArguments , "TestDir" ) ;   checkCommandLineArg  ( covBuildArguments , "--java-coverage" ) ;   checkCommandLineArg  ( covBuildArguments , "Jacoco" ) ;   checkCommandLineArg  ( covBuildArguments , "--java-test" ) ;   checkCommandLineArg  ( covBuildArguments , "junit" ) ;   assertEquals  ( 0 ,  covBuildArguments . size  ( ) ) ; }
>>>>>>>
 
<<<<<<<
=======
   @ Test public void CovBuildCommand_CommandForCompileSourcesTest_WithAdditionalBuildArguments  ( )  {   mocker . replay  ( ) ;  InvocationAssistance  invocationAssistance =  new InvocationAssistance  ( false ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY , true , false , "AdditionalBuildArguments" ,  StringUtils . EMPTY ,  StringUtils . EMPTY ,  StringUtils . EMPTY , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false , false ,  StringUtils . EMPTY ,  StringUtils . EMPTY , null , false ) ;  CoverityPublisher  publisher =  new CoverityPublisher  ( null , invocationAssistance , false , false , false , false , false , null , null ) ;  CovCommand  covBuildCommand =  new CovBuildCommand  ( build , launcher , listener , publisher ,  StringUtils . EMPTY , envVars ) ;   List  < String >  covBuildArguments =  covBuildCommand . getCommandLines  ( ) ;   assertEquals  ( 4 ,  covBuildArguments . size  ( ) ) ;   checkCommandLineArg  ( covBuildArguments , "cov-build" ) ;   checkCommandLineArg  ( covBuildArguments , "--dir" ) ;   checkCommandLineArg  ( covBuildArguments , "TestDir" ) ;   checkCommandLineArg  ( covBuildArguments , "AdditionalBuildArguments" ) ;   assertEquals  ( 0 ,  covBuildArguments . size  ( ) ) ; }
>>>>>>>
 }