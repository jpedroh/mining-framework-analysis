  package     com . fasterxml . jackson . core . sym ;   import   java . io . IOException ;  import    java . lang . reflect . Field ;  import    java . nio . charset . Charset ;  import    com . fasterxml . jackson . core .  * ;   public class TestSymbolTables  extends     com . fasterxml . jackson . core . BaseTest  {   public void testSyntheticWithChars  ( )  {  CharsToNameCanonicalizer  symbols =  CharsToNameCanonicalizer . createRoot  ( 1 ) ;   final  int  COUNT = 12000 ;  for (   int  i = 0 ;  i < COUNT ;  ++ i )  {  String  id =  fieldNameFor  ( i ) ;    char  [ ]  ch =  id . toCharArray  ( ) ;   symbols . findSymbol  ( ch , 0 ,  ch . length ,  symbols . calcHash  ( id ) ) ; }   assertEquals  ( 16384 ,  symbols . bucketCount  ( ) ) ;   assertEquals  ( COUNT ,  symbols . size  ( ) ) ;   assertEquals  ( 3431 ,  symbols . collisionCount  ( ) ) ;   assertEquals  ( 6 ,  symbols . maxCollisionLength  ( ) ) ; }    @ SuppressWarnings  ( "deprecation" ) public void testSyntheticWithBytesOld  ( )  throws IOException  {   final  int  SEED = 33333 ;  BytesToNameCanonicalizer  symbols =   BytesToNameCanonicalizer . createRoot  ( SEED ) . makeChild  (   JsonFactory . Feature . collectDefaults  ( ) ) ;   final  int  COUNT = 12000 ;  for (   int  i = 0 ;  i < COUNT ;  ++ i )  {  String  id =  fieldNameFor  ( i ) ;    int  [ ]  quads =  calcQuads  (  id . getBytes  ( "UTF-8" ) ) ;   symbols . addName  ( id , quads ,  quads . length ) ; }   assertEquals  ( COUNT ,  symbols . size  ( ) ) ;   assertEquals  ( 16384 ,  symbols . bucketCount  ( ) ) ;   assertEquals  ( 3476 ,  symbols . collisionCount  ( ) ) ;   assertEquals  ( 15 ,  symbols . maxCollisionLength  ( ) ) ; }   public void testSyntheticWithBytesNew  ( )  throws IOException  {   final  int  SEED = 33333 ;  ByteQuadsCanonicalizer  symbols =   ByteQuadsCanonicalizer . createRoot  ( SEED ) . makeChild  (   JsonFactory . Feature . collectDefaults  ( ) ) ;   final  int  COUNT = 12000 ;  for (   int  i = 0 ;  i < COUNT ;  ++ i )  {  String  id =  fieldNameFor  ( i ) ;    int  [ ]  quads =  calcQuads  (  id . getBytes  ( "UTF-8" ) ) ;   symbols . addName  ( id , quads ,  quads . length ) ; }   assertEquals  ( COUNT ,  symbols . size  ( ) ) ;   assertEquals  ( 16384 ,  symbols . bucketCount  ( ) ) ;   assertEquals  ( 8524 ,  symbols . primaryCount  ( ) ) ;   assertEquals  ( 2534 ,  symbols . secondaryCount  ( ) ) ;   assertEquals  ( 942 ,  symbols . tertiaryCount  ( ) ) ;   assertEquals  ( 0 ,  symbols . spilloverCount  ( ) ) ; }   public void testThousandsOfSymbolsWithChars  ( )  throws IOException  {   final  int  SEED = 33333 ;  CharsToNameCanonicalizer  symbolsCRoot =  CharsToNameCanonicalizer . createRoot  ( SEED ) ;   int  exp = 0 ;  for (   int  doc = 0 ;  doc < 100 ;  ++ doc )  {  CharsToNameCanonicalizer  symbolsC =  symbolsCRoot . makeChild  (   JsonFactory . Feature . collectDefaults  ( ) ) ;  for (   int  i = 0 ;  i < 250 ;  ++ i )  {  String  name =    "f_" + doc + "_" + i ;    char  [ ]  ch =  name . toCharArray  ( ) ;  String  str =  symbolsC . findSymbol  ( ch , 0 ,  ch . length ,  symbolsC . calcHash  ( name ) ) ;   assertNotNull  ( str ) ; }   symbolsC . release  ( ) ;   exp += 250 ;  if  (  exp >  CharsToNameCanonicalizer . MAX_ENTRIES_FOR_REUSE )  {   exp = 0 ; }   assertEquals  ( exp ,  symbolsCRoot . size  ( ) ) ; } }    @ SuppressWarnings  ( "deprecation" ) public void testThousandsOfSymbolsWithOldBytes  ( )  throws IOException  {   final  int  SEED = 33333 ;  BytesToNameCanonicalizer  symbolsBRoot =  BytesToNameCanonicalizer . createRoot  ( SEED ) ;   final Charset  utf8 =  Charset . forName  ( "UTF-8" ) ;   int  exp = 0 ;  for (   int  doc = 0 ;  doc < 100 ;  ++ doc )  {  BytesToNameCanonicalizer  symbolsB =  symbolsBRoot . makeChild  (   JsonFactory . Feature . collectDefaults  ( ) ) ;  for (   int  i = 0 ;  i < 250 ;  ++ i )  {  String  name =    "f_" + doc + "_" + i ;    int  [ ]  quads =  BytesToNameCanonicalizer . calcQuads  (  name . getBytes  ( utf8 ) ) ;   symbolsB . addName  ( name , quads ,  quads . length ) ;  Name  n =  symbolsB . findName  ( quads ,  quads . length ) ;   assertEquals  ( name ,  n . getName  ( ) ) ; }   symbolsB . release  ( ) ;   exp += 250 ;  if  (  exp >  BytesToNameCanonicalizer . MAX_ENTRIES_FOR_REUSE )  {   exp = 0 ; }   assertEquals  ( exp ,  symbolsBRoot . size  ( ) ) ; } }   public void testThousandsOfSymbolsWithNew  ( )  throws IOException  {   final  int  SEED = 33333 ;  ByteQuadsCanonicalizer  symbolsBRoot =  ByteQuadsCanonicalizer . createRoot  ( SEED ) ;   final Charset  utf8 =  Charset . forName  ( "UTF-8" ) ;   int  exp = 0 ;  ByteQuadsCanonicalizer  symbolsB = null ;  for (   int  doc = 0 ;  doc < 100 ;  ++ doc )  {   symbolsB =  symbolsBRoot . makeChild  (   JsonFactory . Feature . collectDefaults  ( ) ) ;  for (   int  i = 0 ;  i < 250 ;  ++ i )  {  String  name =    "f_" + doc + "_" + i ;    int  [ ]  quads =  calcQuads  (  name . getBytes  ( utf8 ) ) ;   symbolsB . addName  ( name , quads ,  quads . length ) ;  String  n =  symbolsB . findName  ( quads ,  quads . length ) ;   assertEquals  ( name , n ) ; }   symbolsB . release  ( ) ;   exp += 250 ;  if  (  exp >  ByteQuadsCanonicalizer . MAX_ENTRIES_FOR_REUSE )  {   exp = 0 ; }   assertEquals  ( exp ,  symbolsBRoot . size  ( ) ) ; }   assertEquals  ( 6250 ,  symbolsB . size  ( ) ) ;   assertEquals  ( 4761 ,  symbolsB . primaryCount  ( ) ) ;   assertEquals  ( 1190 ,  symbolsB . secondaryCount  ( ) ) ;   assertEquals  ( 299 ,  symbolsB . tertiaryCount  ( ) ) ;   assertEquals  ( 0 ,  symbolsB . spilloverCount  ( ) ) ; }   public void testByteBasedSymbolTable  ( )  throws Exception  {   final String  JSON =  aposToQuotes  (     "{'abc':1, 'abc\\u0000':2, '\\u0000abc':3, " + "'abc123':4,'abcd1234':5," + "'abcd1234a':6,'abcd1234abcd':7," + "'abcd1234abcd1':8" + "}" ) ;  JsonFactory  f =  new JsonFactory  ( ) ;  JsonParser  p =  f . createParser  (  JSON . getBytes  ( "UTF-8" ) ) ;  ByteQuadsCanonicalizer  symbols =  _findSymbols  ( p ) ;   assertEquals  ( 0 ,  symbols . size  ( ) ) ;   _streamThrough  ( p ) ;   assertEquals  ( 8 ,  symbols . size  ( ) ) ;   p . close  ( ) ;   p =  f . createParser  (  JSON . getBytes  ( "UTF-8" ) ) ;   _streamThrough  ( p ) ;   symbols =  _findSymbols  ( p ) ;   assertEquals  ( 8 ,  symbols . size  ( ) ) ;   p . close  ( ) ;   p =  f . createParser  (  JSON . getBytes  ( "UTF-8" ) ) ;   _streamThrough  ( p ) ;   symbols =  _findSymbols  ( p ) ;   assertEquals  ( 8 ,  symbols . size  ( ) ) ;   p . close  ( ) ; }   private void _streamThrough  (  JsonParser p )  throws IOException  {  while  (   p . nextToken  ( ) != null )  { } }   private ByteQuadsCanonicalizer _findSymbols  (  JsonParser p )  throws Exception  {  Field  syms =   p . getClass  ( ) . getDeclaredField  ( "_symbols" ) ;   syms . setAccessible  ( true ) ;  return  (  ( ByteQuadsCanonicalizer )  syms . get  ( p ) ) ; }    @ SuppressWarnings  ( "deprecation" ) public void testCollisionsWithBytes187  ( )  throws IOException  {  BytesToNameCanonicalizer  symbols =   BytesToNameCanonicalizer . createRoot  ( 1 ) . makeChild  (   JsonFactory . Feature . collectDefaults  ( ) ) ;   final  int  COUNT = 30000 ;  for (   int  i = 0 ;  i < COUNT ;  ++ i )  {  String  id =  String . valueOf  (  10000 + i ) ;    int  [ ]  quads =  BytesToNameCanonicalizer . calcQuads  (  id . getBytes  ( "UTF-8" ) ) ;   symbols . addName  ( id , quads ,  quads . length ) ; }   assertEquals  ( COUNT ,  symbols . size  ( ) ) ;   assertEquals  ( 65536 ,  symbols . bucketCount  ( ) ) ;   assertEquals  ( 5782 ,  symbols . collisionCount  ( ) ) ;   assertEquals  ( 24 ,  symbols . maxCollisionLength  ( ) ) ; }   public void testCollisionsWithChars187  ( )  throws IOException  {  CharsToNameCanonicalizer  symbols =  CharsToNameCanonicalizer . createRoot  ( 1 ) ;   final  int  COUNT = 30000 ;  for (   int  i = 0 ;  i < COUNT ;  ++ i )  {  String  id =  String . valueOf  (  10000 + i ) ;    char  [ ]  ch =  id . toCharArray  ( ) ;   symbols . findSymbol  ( ch , 0 ,  ch . length ,  symbols . calcHash  ( id ) ) ; }   assertEquals  ( COUNT ,  symbols . size  ( ) ) ;   assertEquals  ( 65536 ,  symbols . bucketCount  ( ) ) ;   assertEquals  ( 7127 ,  symbols . collisionCount  ( ) ) ;   assertEquals  ( 4 ,  symbols . maxCollisionLength  ( ) ) ; }   public void testCollisionsWithBytesNew187a  ( )  throws IOException  {  ByteQuadsCanonicalizer  symbols =   ByteQuadsCanonicalizer . createRoot  ( 1 ) . makeChild  (   JsonFactory . Feature . collectDefaults  ( ) ) ;   final  int  COUNT = 43000 ;  for (   int  i = 0 ;  i < COUNT ;  ++ i )  {  String  id =  String . valueOf  (  10000 + i ) ;    int  [ ]  quads =  calcQuads  (  id . getBytes  ( "UTF-8" ) ) ;   symbols . addName  ( id , quads ,  quads . length ) ; }   assertEquals  ( COUNT ,  symbols . size  ( ) ) ;   assertEquals  ( 65536 ,  symbols . bucketCount  ( ) ) ;   assertEquals  ( 32342 ,  symbols . primaryCount  ( ) ) ;   assertEquals  ( 8863 ,  symbols . secondaryCount  ( ) ) ;   assertEquals  ( 1795 ,  symbols . tertiaryCount  ( ) ) ;   assertEquals  ( 0 ,  symbols . spilloverCount  ( ) ) ; }   public void testCollisionsWithBytesNew187b  ( )  throws IOException  {  ByteQuadsCanonicalizer  symbols =   ByteQuadsCanonicalizer . createRoot  ( 1 ) . makeChild  (   JsonFactory . Feature . collectDefaults  ( ) ) ;   final  int  COUNT = 10000 ;  for (   int  i = 0 ;  i < COUNT ;  ++ i )  {  String  id =  String . valueOf  ( i ) ;    int  [ ]  quads =  calcQuads  (  id . getBytes  ( "UTF-8" ) ) ;   symbols . addName  ( id , quads ,  quads . length ) ; }   assertEquals  ( COUNT ,  symbols . size  ( ) ) ;   assertEquals  ( 32768 ,  symbols . bucketCount  ( ) ) ;   assertEquals  ( 9386 ,  symbols . primaryCount  ( ) ) ;   assertEquals  ( 345 ,  symbols . secondaryCount  ( ) ) ;   assertEquals  ( 257 ,  symbols . tertiaryCount  ( ) ) ;   assertEquals  ( 12 ,  symbols . spilloverCount  ( ) ) ; }   public void testShortNameCollisionsViaParser  ( )  throws Exception  {  JsonFactory  f =  new JsonFactory  ( ) ;  String  json =  _shortDoc191  ( ) ;  JsonParser  p ;   p =  f . createParser  ( json ) ;  while  (   p . nextToken  ( ) != null )  { }   p . close  ( ) ;   p =  f . createParser  (  json . getBytes  ( "UTF-8" ) ) ;  while  (   p . nextToken  ( ) != null )  { }   p . close  ( ) ; }   private String _shortDoc191  ( )  {  StringBuilder  sb =  new StringBuilder  ( ) ;   sb . append  ( "{\n" ) ;  for (   int  i = 0 ;  i < 400 ;  ++ i )  {  if  (  i > 0 )  {   sb . append  ( ",\n" ) ; }   sb . append  (  String . format  ( "\"\\u%04x\" : %d" , i , i ) ) ; }   sb . append  ( "}\n" ) ;  return  sb . toString  ( ) ; }    @ SuppressWarnings  ( "deprecation" ) public void testShortNameCollisionsDirectOld  ( )  throws IOException  {   final  int  COUNT = 600 ;  {  CharsToNameCanonicalizer  symbols =  CharsToNameCanonicalizer . createRoot  ( 1 ) ;  for (   int  i = 0 ;  i < COUNT ;  ++ i )  {  String  id =  String . valueOf  (  (  char ) i ) ;    char  [ ]  ch =  id . toCharArray  ( ) ;   symbols . findSymbol  ( ch , 0 ,  ch . length ,  symbols . calcHash  ( id ) ) ; }   assertEquals  ( COUNT ,  symbols . size  ( ) ) ;   assertEquals  ( 1024 ,  symbols . bucketCount  ( ) ) ;   assertEquals  ( 16 ,  symbols . collisionCount  ( ) ) ;   assertEquals  ( 1 ,  symbols . maxCollisionLength  ( ) ) ; }  {  BytesToNameCanonicalizer  symbols =   BytesToNameCanonicalizer . createRoot  ( 1 ) . makeChild  (   JsonFactory . Feature . collectDefaults  ( ) ) ;  for (   int  i = 0 ;  i < COUNT ;  ++ i )  {  String  id =  String . valueOf  (  (  char ) i ) ;    int  [ ]  quads =  calcQuads  (  id . getBytes  ( "UTF-8" ) ) ;   symbols . addName  ( id , quads ,  quads . length ) ; }   assertEquals  ( COUNT ,  symbols . size  ( ) ) ;   assertEquals  ( 1024 ,  symbols . bucketCount  ( ) ) ;   assertEquals  ( 209 ,  symbols . collisionCount  ( ) ) ;   assertEquals  ( 1 ,  symbols . maxCollisionLength  ( ) ) ; } }   public void testShortNameCollisionsDirectNew  ( )  throws IOException  {   final  int  COUNT = 700 ;  {   final  int  SEED = 33333 ;  ByteQuadsCanonicalizer  symbols =   ByteQuadsCanonicalizer . createRoot  ( SEED ) . makeChild  (   JsonFactory . Feature . collectDefaults  ( ) ) ;  for (   int  i = 0 ;  i < COUNT ;  ++ i )  {  String  id =  String . valueOf  (  (  char ) i ) ;    int  [ ]  quads =  calcQuads  (  id . getBytes  ( "UTF-8" ) ) ;   symbols . addName  ( id , quads ,  quads . length ) ; }   assertEquals  ( COUNT ,  symbols . size  ( ) ) ;   assertEquals  ( 2048 ,  symbols . bucketCount  ( ) ) ;   assertEquals  ( 640 ,  symbols . primaryCount  ( ) ) ;   assertEquals  ( 30 ,  symbols . secondaryCount  ( ) ) ;   assertEquals  ( 16 ,  symbols . tertiaryCount  ( ) ) ;   assertEquals  ( 14 ,  symbols . spilloverCount  ( ) ) ;   assertEquals  ( COUNT ,     symbols . primaryCount  ( ) +  symbols . secondaryCount  ( ) +  symbols . tertiaryCount  ( ) +  symbols . spilloverCount  ( ) ) ; } }   public void testShortQuotedDirectChars  ( )  throws IOException  {   final  int  COUNT = 400 ;  CharsToNameCanonicalizer  symbols =  CharsToNameCanonicalizer . createRoot  ( 1 ) ;  for (   int  i = 0 ;  i < COUNT ;  ++ i )  {  String  id =  String . format  ( "\\u%04x" , i ) ;    char  [ ]  ch =  id . toCharArray  ( ) ;   symbols . findSymbol  ( ch , 0 ,  ch . length ,  symbols . calcHash  ( id ) ) ; }   assertEquals  ( COUNT ,  symbols . size  ( ) ) ;   assertEquals  ( 1024 ,  symbols . bucketCount  ( ) ) ;   assertEquals  ( 112 ,  symbols . collisionCount  ( ) ) ;   assertEquals  ( 2 ,  symbols . maxCollisionLength  ( ) ) ; }   public void testShortQuotedDirectBytes  ( )  throws IOException  {   final  int  COUNT = 400 ;  BytesToNameCanonicalizer  symbols =   BytesToNameCanonicalizer . createRoot  ( 1 ) . makeChild  (   JsonFactory . Feature . collectDefaults  ( ) ) ;  for (   int  i = 0 ;  i < COUNT ;  ++ i )  {  String  id =  String . format  ( "\\u%04x" , i ) ;    int  [ ]  quads =  BytesToNameCanonicalizer . calcQuads  (  id . getBytes  ( "UTF-8" ) ) ;   symbols . addName  ( id , quads ,  quads . length ) ; }   assertEquals  ( COUNT ,  symbols . size  ( ) ) ;   assertEquals  ( 1024 ,  symbols . bucketCount  ( ) ) ;   assertEquals  ( 44 ,  symbols . collisionCount  ( ) ) ;   assertEquals  ( 2 ,  symbols . maxCollisionLength  ( ) ) ; } }