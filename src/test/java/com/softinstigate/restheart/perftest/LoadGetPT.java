  package    com . softinstigate . restheart . perftest ;   import   com . mongodb . DBCollection ;  import   com . mongodb . DBObject ;  import     com . softinstigate . restheart . db . CollectionDAO ;  import     com . softinstigate . restheart . db . MongoDBClientSingleton ;  import     com . softinstigate . restheart . utils . FileUtils ;  import   java . io . BufferedReader ;  import   java . io . File ;  import   java . io . IOException ;  import   java . io . InputStream ;  import   java . io . InputStreamReader ;  import   java . net . Authenticator ;  import   java . net . MalformedURLException ;  import   java . net . PasswordAuthentication ;  import   java . net . URL ;  import   java . net . URLConnection ;  import    java . nio . charset . StandardCharsets ;  import    java . nio . file . Path ;  import   java . util . ArrayList ;  import     com . softinstigate . restheart . db . DBCursorPool ;  import     com . softinstigate . restheart . utils . HttpStatus ;  import   java . net . URI ;  import   java . util . HashMap ;  import    java . util . concurrent . ConcurrentHashMap ;  import   junit . framework . Assert ;  import    org . apache . http . HttpEntity ;  import    org . apache . http . HttpHost ;  import    org . apache . http . HttpResponse ;  import    org . apache . http . StatusLine ;  import      org . apache . http . client . fluent . Executor ;  import      org . apache . http . client . fluent . Request ;  import      org . apache . http . client . fluent . Response ;   public class LoadGetPT  {   private String  url ;   private String  id ;   private String  pwd ;   private boolean  printData = false ;   private String  db ;   private String  coll ;   private final Path  CONF_FILE =   new File  ( "./etc/restheart-integrationtest.yml" ) . toPath  ( ) ;   public void setUrl  (  String url )  throws MalformedURLException  {    this . url = url ; }   public void prepare  ( )  {   Authenticator . setDefault  (  new Authenticator  ( )  {    @ Override protected PasswordAuthentication getPasswordAuthentication  ( )  {  return  new PasswordAuthentication  ( id ,  pwd . toCharArray  ( ) ) ; } } ) ;   MongoDBClientSingleton . init  (  FileUtils . getConfiguration  ( CONF_FILE ) ) ;   httpExecutor =    Executor . newInstance  ( ) . authPreemptive  (  new HttpHost  ( "127.0.0.1" , 8080 , "http" ) ) . auth  (  new HttpHost  ( "127.0.0.1" ) , id , pwd ) ; }   public void get  ( )  throws IOException  {  URLConnection  connection =   new URL  ( url ) . openConnection  ( ) ;  InputStream  stream =  connection . getInputStream  ( ) ;  try  (  BufferedReader in =  new BufferedReader  (  new InputStreamReader  ( stream ,  StandardCharsets . UTF_8 ) ) )  {  String  data =  in . readLine  ( ) ;  while  (  data != null )  {  if  ( printData )  {    System . out . println  ( data ) ; }   data =  in . readLine  ( ) ; } } }   public void dbdirect  ( )  throws IOException  {  DBCollection  dbcoll =  CollectionDAO . getCollection  ( db , coll ) ;   ArrayList  < DBObject >  data =  CollectionDAO . getCollectionData  ( dbcoll , 5000 , 100 , null , null ,   DBCursorPool . EAGER_CURSOR_ALLOCATION_POLICY . NONE ) ;  if  ( printData )  {    System . out . println  ( data ) ; } }   public void setId  (  String id )  {    this . id = id ; }   public void setPwd  (  String pwd )  {    this . pwd = pwd ; }   public void setPrintData  (  String printData )  {    this . printData =  Boolean . valueOf  ( printData ) ; }   public void setDb  (  String db )  {    this . db = db ; }   public void setColl  (  String coll )  {    this . coll = coll ; }   private Executor  httpExecutor ;   private final  ConcurrentHashMap  < Long , Integer >  threadPages =  new  ConcurrentHashMap  < >  ( ) ;   public void getPagesLinearly  ( )  throws Exception  {  Integer  page =  threadPages . get  (   Thread . currentThread  ( ) . getId  ( ) ) ;  if  (  page == null )  {   threadPages . put  (   Thread . currentThread  ( ) . getId  ( ) , 5000 ) ;   page = 5000 ; }  String  pagedUrl =   url + "?page=" +  (  page % 10000 ) ;   page ++ ;   threadPages . put  (   Thread . currentThread  ( ) . getId  ( ) , page ) ;  if  ( printData )    System . out . println  (     Thread . currentThread  ( ) . getId  ( ) + " -> " + pagedUrl ) ;  Response  resp =  httpExecutor . execute  (  Request . Get  (  new URI  ( pagedUrl ) ) ) ;  HttpResponse  httpResp =  resp . returnResponse  ( ) ;   Assert . assertNotNull  ( httpResp ) ;  HttpEntity  entity =  httpResp . getEntity  ( ) ;   Assert . assertNotNull  ( entity ) ;  StatusLine  statusLine =  httpResp . getStatusLine  ( ) ;   Assert . assertNotNull  ( statusLine ) ;   Assert . assertEquals  ( "check status code" ,  HttpStatus . SC_OK ,  statusLine . getStatusCode  ( ) ) ; }   public void getPagesRandomly  ( )  throws Exception  {   long  rpage =  Math . round  (   Math . random  ( ) * 10000 ) ;  String  pagedUrl =   url + "?page=" + rpage ;  Response  resp =  httpExecutor . execute  (  Request . Get  (  new URI  ( pagedUrl ) ) ) ;  HttpResponse  httpResp =  resp . returnResponse  ( ) ;   Assert . assertNotNull  ( httpResp ) ;  HttpEntity  entity =  httpResp . getEntity  ( ) ;   Assert . assertNotNull  ( entity ) ;  StatusLine  statusLine =  httpResp . getStatusLine  ( ) ;   Assert . assertNotNull  ( statusLine ) ;   Assert . assertEquals  ( "check status code" ,  HttpStatus . SC_OK ,  statusLine . getStatusCode  ( ) ) ; } }