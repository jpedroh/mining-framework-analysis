  package    com . plaid . client . integration ;   import static    org . junit . Assert . assertNotNull ;  import     com . plaid . client . integration . RecipientCreateTest ;  import     com . plaid . client . model . PaymentAmount ;  import     com . plaid . client . model . PaymentInitiationPaymentCreateRequest ;  import     com . plaid . client . model . PaymentInitiationPaymentCreateResponse ;  import     com . plaid . client . model . PaymentInitiationPaymentCreateResponse ;  import     com . plaid . client . model . PaymentInitiationRecipientCreateResponse ;  import     com . plaid . client . request . PlaidApi ;  import   org . junit . Test ;  import  retrofit2 . Response ;  import      com . plaid . client . model . paymentinitiation . Bacs ;  import      com . plaid . client . model . paymentinitiation . PaymentCreateOptions ;  import      com . plaid . client . request . paymentinitiation . PaymentGetRequest ;  import      com . plaid . client . response . paymentinitiation . PaymentGetResponse ;   public class PaymentCreateTest  extends AbstractIntegrationTest  {   public static  Response  < PaymentInitiationPaymentCreateResponse > createPayment  (  PlaidApi client )  throws Exception  {   Response  < PaymentInitiationRecipientCreateResponse >  createRecipientResponse =  RecipientCreateTest . createRecipientWithIban  ( client ) ;  String  recipientId =   createRecipientResponse . body  ( ) . getRecipientId  ( ) ;   assertNotNull  ( recipientId ) ;  PaymentAmount  amount =    new PaymentAmount  ( ) . currency  (   PaymentAmount . CurrencyEnum . GBP ) . value  ( 999.99 ) ;  PaymentInitiationPaymentCreateRequest  paymentCreateRequest =     new PaymentInitiationPaymentCreateRequest  ( ) . recipientId  ( recipientId ) . reference  ( "reference" ) . amount  ( amount ) ;   Response  < PaymentInitiationPaymentCreateResponse >  response =   client . paymentInitiationPaymentCreate  ( paymentCreateRequest ) . execute  ( ) ;  return response ; }    @ Test public void testPaymentCreateSuccess  ( )  throws Exception  {   Response  < PaymentInitiationPaymentCreateResponse >  response =  createPayment  (  client  ( ) ) ;   assertSuccessResponse  ( response ) ;   assertNotNull  (   response . body  ( ) . getPaymentId  ( ) ) ;   assertNotNull  (   response . body  ( ) . getStatus  ( ) ) ; }   public static  Response  < PaymentCreateResponse > createSingleImmediatePaymentWithOptions  (  PlaidClient client ,  PaymentCreateOptions options )  throws Exception  {   Response  < RecipientCreateResponse >  createRecipientResponse =  RecipientCreateTest . createRecipientWithIban  ( client ) ;  String  recipientId =   createRecipientResponse . body  ( ) . getRecipientId  ( ) ;   assertNotNull  ( recipientId ) ;  Amount  amount =  new Amount  ( "GBP" , 999.99 ) ;  PaymentCreateRequest  paymentCreateRequest =   new PaymentCreateRequest  ( recipientId , "reference" , amount ) . withOptions  ( options ) ;   Response  < PaymentCreateResponse >  response =    client . service  ( ) . paymentCreate  ( paymentCreateRequest ) . execute  ( ) ;  return response ; }    @ Test public void testSingleImmediatePaymentWithRequestRefundDetailsCreateSuccess  ( )  throws Exception  {  PaymentCreateOptions  options =   new PaymentCreateOptions  ( ) . withRefundDetails  ( true ) ;   Response  < PaymentCreateResponse >  response =  createSingleImmediatePaymentWithOptions  (  client  ( ) , options ) ;   assertSuccessResponse  ( response ) ;   assertNotNull  (   response . body  ( ) . getPaymentId  ( ) ) ;   assertNotNull  (   response . body  ( ) . getStatus  ( ) ) ; }    @ Test public void testSingleImmediatePaymentWithBacsCreateSuccess  ( )  throws Exception  {  PaymentCreateOptions  options =   new PaymentCreateOptions  ( ) . withBacs  (  new Bacs  ( "1234567890" , "000000" ) ) ;   Response  < PaymentCreateResponse >  response =  createSingleImmediatePaymentWithOptions  (  client  ( ) , options ) ;   assertSuccessResponse  ( response ) ;   assertNotNull  (   response . body  ( ) . getPaymentId  ( ) ) ;   assertNotNull  (   response . body  ( ) . getStatus  ( ) ) ;  PaymentGetRequest  request =  new PaymentGetRequest  (   response . body  ( ) . getPaymentId  ( ) ) ;   Response  < PaymentGetResponse >  getResponse =     client  ( ) . service  ( ) . paymentGet  ( request ) . execute  ( ) ;   assertSuccessResponse  ( response ) ;   assertNotNull  (   getResponse . body  ( ) . getPaymentId  ( ) ) ;   assertNotNull  (   getResponse . body  ( ) . getStatus  ( ) ) ;   assertNotNull  (   getResponse . body  ( ) . getBacs  ( ) ) ; }    @ Test public void testSingleImmediatePaymentWithIbanCreateSuccess  ( )  throws Exception  {  PaymentCreateOptions  options =   new PaymentCreateOptions  ( ) . withIban  ( "iban" ) ;   Response  < PaymentCreateResponse >  response =  createSingleImmediatePaymentWithOptions  (  client  ( ) , options ) ;   assertSuccessResponse  ( response ) ;   assertNotNull  (   response . body  ( ) . getPaymentId  ( ) ) ;   assertNotNull  (   response . body  ( ) . getStatus  ( ) ) ;  PaymentGetRequest  request =  new PaymentGetRequest  (   response . body  ( ) . getPaymentId  ( ) ) ;   Response  < PaymentGetResponse >  getResponse =     client  ( ) . service  ( ) . paymentGet  ( request ) . execute  ( ) ;   assertSuccessResponse  ( response ) ;   assertNotNull  (   getResponse . body  ( ) . getPaymentId  ( ) ) ;   assertNotNull  (   getResponse . body  ( ) . getStatus  ( ) ) ;   assertNotNull  (   getResponse . body  ( ) . getIban  ( ) ) ; } }