  package   ezvcard . io . json ;   import static   ezvcard . VCardVersion . V4_0 ;  import static     ezvcard . property . asserter . PropertyAsserter . assertAddress ;  import static     ezvcard . property . asserter . PropertyAsserter . assertBinaryProperty ;  import static     ezvcard . property . asserter . PropertyAsserter . assertDateProperty ;  import static     ezvcard . property . asserter . PropertyAsserter . assertEmail ;  import static     ezvcard . property . asserter . PropertyAsserter . assertGeo ;  import static     ezvcard . property . asserter . PropertyAsserter . assertListProperty ;  import static     ezvcard . property . asserter . PropertyAsserter . assertRawProperty ;  import static     ezvcard . property . asserter . PropertyAsserter . assertSimpleProperty ;  import static     ezvcard . property . asserter . PropertyAsserter . assertStructuredName ;  import static     ezvcard . property . asserter . PropertyAsserter . assertTelephone ;  import static     ezvcard . property . asserter . PropertyAsserter . assertTimezone ;  import static    ezvcard . util . TestUtils . assertNoMoreVCards ;  import static    ezvcard . util . TestUtils . assertPropertyCount ;  import static    ezvcard . util . TestUtils . assertValidate ;  import static    ezvcard . util . TestUtils . assertVersion ;  import static    ezvcard . util . TestUtils . assertWarnings ;  import static    org . junit . Assert . assertEquals ;  import static    org . junit . Assert . assertTrue ;  import   java . io . File ;  import   java . io . Writer ;  import   java . util . List ;  import   org . junit . Rule ;  import   org . junit . Test ;  import    org . junit . rules . TemporaryFolder ;  import  ezvcard . VCard ;  import  ezvcard . VCardDataType ;  import  ezvcard . VCardVersion ;  import   ezvcard . io . MyFormattedNameProperty ;  import    ezvcard . io . MyFormattedNameProperty . MyFormattedNameScribe ;  import    ezvcard . io . scribe . CannotParseScribe ;  import    ezvcard . io . scribe . SkipMeScribe ;  import    ezvcard . io . scribe . VCardPropertyScribe ;  import   ezvcard . parameter . AddressType ;  import   ezvcard . parameter . EmailType ;  import   ezvcard . parameter . TelephoneType ;  import   ezvcard . parameter . VCardParameters ;  import   ezvcard . property . VCardProperty ;  import   ezvcard . util . IOUtils ;  import   ezvcard . util . PartialDate ;  import   ezvcard . util . TelUri ;  import   ezvcard . util . UtcOffset ;   public class JCardReaderTest  {    @ Rule public TemporaryFolder  tempFolder =  new TemporaryFolder  ( ) ;    @ Test public void read_single  ( )  throws Throwable  {  String  json =      "[\"vcard\"," + "[" + "[\"version\", {}, \"text\", \"4.0\"]," + "[\"fn\", {}, \"text\", \"John Doe\"]" + "]" + "]" ;  JCardReader  reader =  new JCardReader  ( json ) ;  VCard  vcard =  reader . readNext  ( ) ;   assertVersion  ( V4_0 , vcard ) ;   assertPropertyCount  ( 1 , vcard ) ;     assertSimpleProperty  (  vcard . getFormattedNames  ( ) ) . value  ( "John Doe" ) . noMore  ( ) ;   assertWarnings  ( 0 , reader ) ;   assertNoMoreVCards  ( reader ) ; }    @ Test public void read_multiple  ( )  throws Throwable  {  String  json =              "[" + "[\"vcard\"," + "[" + "[\"version\", {}, \"text\", \"4.0\"]," + "[\"fn\", {}, \"text\", \"John Doe\"]" + "]" + "]," + "[\"vcard\"," + "[" + "[\"version\", {}, \"text\", \"4.0\"]," + "[\"fn\", {}, \"text\", \"Jane Doe\"]" + "]" + "]" + "]" ;  JCardReader  reader =  new JCardReader  ( json ) ;  VCard  vcard =  reader . readNext  ( ) ;   assertVersion  ( V4_0 , vcard ) ;   assertPropertyCount  ( 1 , vcard ) ;     assertSimpleProperty  (  vcard . getFormattedNames  ( ) ) . value  ( "John Doe" ) . noMore  ( ) ;   assertWarnings  ( 0 , reader ) ;   vcard =  reader . readNext  ( ) ;   assertVersion  ( V4_0 , vcard ) ;   assertPropertyCount  ( 1 , vcard ) ;     assertSimpleProperty  (  vcard . getFormattedNames  ( ) ) . value  ( "Jane Doe" ) . noMore  ( ) ;   assertWarnings  ( 0 , reader ) ;   assertNoMoreVCards  ( reader ) ; }    @ Test public void no_version  ( )  throws Exception  {  String  json =     "[\"vcard\"," + "[" + "[\"fn\", {}, \"text\", \"John Doe\"]" + "]" + "]" ;  JCardReader  reader =  new JCardReader  ( json ) ;  VCard  vcard =  reader . readNext  ( ) ;   assertVersion  ( V4_0 , vcard ) ;   assertPropertyCount  ( 1 , vcard ) ;     assertSimpleProperty  (  vcard . getFormattedNames  ( ) ) . value  ( "John Doe" ) . noMore  ( ) ;   assertWarnings  ( 1 , reader ) ;   assertNoMoreVCards  ( reader ) ; }    @ Test public void invalid_version  ( )  throws Exception  {  String  json =      "[\"vcard\"," + "[" + "[\"version\", {}, \"text\", \"3.0\"]," + "[\"fn\", {}, \"text\", \"John Doe\"]" + "]" + "]" ;  JCardReader  reader =  new JCardReader  ( json ) ;  VCard  vcard =  reader . readNext  ( ) ;   assertVersion  ( V4_0 , vcard ) ;   assertPropertyCount  ( 1 , vcard ) ;     assertSimpleProperty  (  vcard . getFormattedNames  ( ) ) . value  ( "John Doe" ) . noMore  ( ) ;   assertWarnings  ( 1 , reader ) ;   assertNoMoreVCards  ( reader ) ; }    @ Test public void no_properties  ( )  throws Throwable  {  String  json =    "[\"vcard\"," + "[" + "]" + "]" ;  JCardReader  reader =  new JCardReader  ( json ) ;  VCard  vcard =  reader . readNext  ( ) ;   assertVersion  ( V4_0 , vcard ) ;   assertPropertyCount  ( 0 , vcard ) ;   assertWarnings  ( 1 , reader ) ;   assertNoMoreVCards  ( reader ) ; }    @ Test public void no_properties_multiple  ( )  throws Throwable  {  String  json =          "[" + "[\"vcard\"," + "[" + "]" + "]," + "[\"vcard\"," + "[" + "]" + "]" + "]" ;  JCardReader  reader =  new JCardReader  ( json ) ;  VCard  vcard =  reader . readNext  ( ) ;   assertVersion  ( V4_0 , vcard ) ;   assertPropertyCount  ( 0 , vcard ) ;   assertWarnings  ( 1 , reader ) ;   vcard =  reader . readNext  ( ) ;   assertVersion  ( V4_0 , vcard ) ;   assertPropertyCount  ( 0 , vcard ) ;   assertWarnings  ( 1 , reader ) ;   assertNoMoreVCards  ( reader ) ; }    @ Test public void extendedType  ( )  throws Throwable  {  String  json =      "[\"vcard\"," + "[" + "[\"version\", {}, \"text\", \"4.0\"]," + "[\"x-type\", {}, \"text\", \"value\"]" + "]" + "]" ;  JCardReader  reader =  new JCardReader  ( json ) ;  VCard  vcard =  reader . readNext  ( ) ;   assertVersion  ( V4_0 , vcard ) ;   assertPropertyCount  ( 1 , vcard ) ;     assertRawProperty  ( "x-type" , vcard ) . value  ( "value" ) . noMore  ( ) ;   assertWarnings  ( 0 , reader ) ; }    @ Test public void registerExtendedType  ( )  throws Throwable  {  String  json =      "[\"vcard\"," + "[" + "[\"version\", {}, \"text\", \"4.0\"]," + "[\"x-type\", {}, \"text\", \"value\"]" + "]" + "]" ;  JCardReader  reader =  new JCardReader  ( json ) ;   reader . registerScribe  (  new TypeForTestingScribe  ( ) ) ;  VCard  vcard =  reader . readNext  ( ) ;   assertVersion  ( V4_0 , vcard ) ;   assertPropertyCount  ( 1 , vcard ) ;  TypeForTesting  prop =  vcard . getProperty  (  TypeForTesting . class ) ;   assertEquals  ( "value" ,   prop . value . asSingle  ( ) ) ;   assertWarnings  ( 0 , reader ) ; }    @ Test public void readExtendedType_override_standard_type_classes  ( )  throws Throwable  {  String  json =      "[\"vcard\"," + "[" + "[\"version\", {}, \"text\", \"4.0\"]," + "[\"fn\", {}, \"text\", \"John Doe\"]" + "]" + "]" ;  JCardReader  reader =  new JCardReader  ( json ) ;   reader . registerScribe  (  new MyFormattedNameScribe  ( ) ) ;  VCard  vcard =  reader . readNext  ( ) ;   assertPropertyCount  ( 1 , vcard ) ;   assertVersion  ( V4_0 , vcard ) ;  MyFormattedNameProperty  prop =  vcard . getProperty  (  MyFormattedNameProperty . class ) ;   assertEquals  ( "JOHN DOE" ,  prop . value ) ;   assertWarnings  ( 0 , reader ) ; }    @ Test public void skipMeException  ( )  throws Throwable  {  String  json =      "[\"vcard\"," + "[" + "[\"version\", {}, \"text\", \"4.0\"]," + "[\"skipme\", {}, \"text\", \"value\"]" + "]" + "]" ;  JCardReader  reader =  new JCardReader  ( json ) ;   reader . registerScribe  (  new SkipMeScribe  ( ) ) ;  VCard  vcard =  reader . readNext  ( ) ;   assertPropertyCount  ( 0 , vcard ) ;   assertWarnings  ( 1 , reader ) ; }    @ Test public void cannotParseException  ( )  throws Throwable  {  String  json =       "[\"vcard\"," + "[" + "[\"version\", {}, \"text\", \"4.0\"]," + "[\"cannotparse\", {}, \"text\", \"value\"]," + "[\"x-foo\", {}, \"text\", \"value\"]" + "]" + "]" ;  JCardReader  reader =  new JCardReader  ( json ) ;   reader . registerScribe  (  new CannotParseScribe  ( ) ) ;  VCard  vcard =  reader . readNext  ( ) ;   assertPropertyCount  ( 2 , vcard ) ;     assertRawProperty  ( "x-foo" , vcard ) . value  ( "value" ) . noMore  ( ) ;     assertRawProperty  ( "cannotparse" , vcard ) . value  ( "value" ) . noMore  ( ) ;   assertWarnings  ( 1 , reader ) ; }    @ Test public void utf8  ( )  throws Throwable  {  String  json =      "[\"vcard\"," + "[" + "[\"version\", {}, \"text\", \"4.0\"]," + "[\"note\", {}, \"text\", \"\u019dote\"]" + "]" + "]" ;  File  file =  tempFolder . newFile  ( ) ;  Writer  writer =  IOUtils . utf8Writer  ( file ) ;   writer . write  ( json ) ;   writer . close  ( ) ;  JCardReader  reader =  new JCardReader  ( file ) ;  VCard  vcard =  reader . readNext  ( ) ;   assertPropertyCount  ( 1 , vcard ) ;     assertSimpleProperty  (  vcard . getNotes  ( ) ) . value  ( "\u019dote" ) . noMore  ( ) ;   assertWarnings  ( 0 , reader ) ;   assertNoMoreVCards  ( reader ) ; }   private static class TypeForTesting  extends VCardProperty  {   public JCardValue  value ;   public TypeForTesting  (  JCardValue value )  {    this . value = value ; }    @ Override public TypeForTesting copy  ( )  {  throw  new UnsupportedOperationException  ( "Copy method should not be used." ) ; } }   private static class TypeForTestingScribe  extends  VCardPropertyScribe  < TypeForTesting >  {   public TypeForTestingScribe  ( )  {  super  (  TypeForTesting . class , "X-TYPE" ) ; }    @ Override protected VCardDataType _defaultDataType  (  VCardVersion version )  {  return  VCardDataType . TEXT ; }    @ Override protected String _writeText  (  TypeForTesting property ,  VCardVersion version )  {  return "" ; }    @ Override protected TypeForTesting _parseText  (  String value ,  VCardDataType dataType ,  VCardVersion version ,  VCardParameters parameters ,   List  < String > warnings )  {  return  new TypeForTesting  ( null ) ; }    @ Override protected TypeForTesting _parseJson  (  JCardValue value ,  VCardDataType dataType ,  VCardParameters parameters ,   List  < String > warnings )  {  return  new TypeForTesting  ( value ) ; } }    @ Test public void jcard_example  ( )  throws Throwable  {  JCardReader  reader =  new JCardReader  (   getClass  ( ) . getResourceAsStream  ( "jcard-example.json" ) ) ;  VCard  vcard =  reader . readNext  ( ) ;   validateExampleJCard  ( vcard ) ; 
<<<<<<<
         assertTelephone  ( vcard ) . uri  (    new  TelUri . Builder  ( "+1-418-656-9254" ) . extension  ( "102" ) . build  ( ) ) . types  (  TelephoneType . WORK ,  TelephoneType . VOICE ) . param  ( "PREF" , "1" ) . next  ( ) . uri  (   new  TelUri . Builder  ( "+1-418-262-6501" ) . build  ( ) ) . types  (  TelephoneType . WORK ,  TelephoneType . CELL ,  TelephoneType . VOICE ,  TelephoneType . VIDEO ,  TelephoneType . TEXT ) . noMore  ( ) ;
=======
>>>>>>>
   assertWarnings  ( 0 , reader ) ;   assertNoMoreVCards  ( reader ) ; }   public static void validateExampleJCard  (  VCard vcard )  {   assertVersion  ( V4_0 , vcard ) ;   assertPropertyCount  ( 16 , vcard ) ;     assertSimpleProperty  (  vcard . getFormattedNames  ( ) ) . value  ( "Simon Perreault" ) . noMore  ( ) ;       assertStructuredName  ( vcard ) . family  ( "Perreault" ) . given  ( "Simon" ) . suffixes  ( "ing. jr" , "M.Sc." ) . noMore  ( ) ;     assertDateProperty  (  vcard . getBirthdays  ( ) ) . partialDate  (     PartialDate . builder  ( ) . month  ( 2 ) . date  ( 3 ) . build  ( ) ) . noMore  ( ) ;     assertDateProperty  (  vcard . getAnniversaries  ( ) ) . date  ( "2009-08-08 19:30:00 +0000" ) . noMore  ( ) ;   assertTrue  (   vcard . getGender  ( ) . isMale  ( ) ) ;         assertSimpleProperty  (  vcard . getLanguages  ( ) ) . value  ( "fr" ) . param  ( "PREF" , "1" ) . next  ( ) . value  ( "en" ) . param  ( "PREF" , "2" ) . noMore  ( ) ;      assertListProperty  (  vcard . getOrganizations  ( ) ) . values  ( "Viagenie" ) . param  ( "TYPE" , "work" ) . noMore  ( ) ;           assertAddress  ( vcard ) . extendedAddress  ( "Suite D2-630" ) . streetAddress  ( "2875 Laurier" ) . locality  ( "Quebec" ) . region  ( "QC" ) . postalCode  ( "G1V 2M2" ) . country  ( "Canada" ) . types  (  AddressType . WORK ) . noMore  ( ) ;          assertTelephone  ( vcard ) . uri  (    new  TelUri . Builder  ( "+1-418-656-9254" ) . extension  ( "102" ) . build  ( ) ) . types  (  TelephoneType . WORK ,  TelephoneType . VOICE ) . param  ( "PREF" , "1" ) . next  ( ) . uri  (   new  TelUri . Builder  ( "+1-418-262-6501" ) . build  ( ) ) . types  (  TelephoneType . WORK ,  TelephoneType . VOICE ,  TelephoneType . CELL ,  TelephoneType . VIDEO ,  TelephoneType . TEXT ) . noMore  ( ) ;      assertEmail  ( vcard ) . value  ( "simon.perreault@viagenie.ca" ) . types  (  EmailType . WORK ) . noMore  ( ) ;       assertGeo  ( vcard ) . latitude  ( 46.772673 ) . longitude  (  - 71.282945 ) . param  ( "TYPE" , "work" ) . noMore  ( ) ;      assertBinaryProperty  (  vcard . getKeys  ( ) ) . url  ( "http://www.viagenie.ca/simon.perreault/simon.asc" ) . param  ( "TYPE" , "work" ) . noMore  ( ) ;     assertTimezone  ( vcard ) . offset  (  new UtcOffset  ( false ,  - 5 , 0 ) ) . noMore  ( ) ;      assertSimpleProperty  (  vcard . getUrls  ( ) ) . value  ( "http://nomis80.org" ) . param  ( "TYPE" , "home" ) . noMore  ( ) ;     assertValidate  ( vcard ) . versions  (  vcard . getVersion  ( ) ) . run  ( ) ; } }