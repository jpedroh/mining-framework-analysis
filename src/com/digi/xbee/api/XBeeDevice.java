  package    com . digi . xbee . api ;   import   java . io . IOException ;  import   java . util . ArrayList ;  import   org . slf4j . Logger ;  import   org . slf4j . LoggerFactory ;  import      com . digi . xbee . api . connection . IConnectionInterface ;  import      com . digi . xbee . api . connection . DataReader ;  import       com . digi . xbee . api . connection . serial . SerialPortParameters ;  import      com . digi . xbee . api . exceptions . ATCommandException ;  import      com . digi . xbee . api . exceptions . InterfaceAlreadyOpenException ;  import      com . digi . xbee . api . exceptions . InterfaceNotOpenException ;  import      com . digi . xbee . api . exceptions . InvalidOperatingModeException ;  import      com . digi . xbee . api . exceptions . OperationNotSupportedException ;  import      com . digi . xbee . api . exceptions . TimeoutException ;  import      com . digi . xbee . api . exceptions . TransmitException ;  import      com . digi . xbee . api . exceptions . XBeeException ;  import      com . digi . xbee . api . io . IOLine ;  import      com . digi . xbee . api . io . IOMode ;  import      com . digi . xbee . api . io . IOSample ;  import      com . digi . xbee . api . io . IOValue ;  import      com . digi . xbee . api . listeners . IPacketReceiveListener ;  import      com . digi . xbee . api . listeners . ISerialDataReceiveListener ;  import      com . digi . xbee . api . models . ATCommand ;  import      com . digi . xbee . api . models . ATCommandResponse ;  import      com . digi . xbee . api . models . ATCommandStatus ;  import      com . digi . xbee . api . models . XBee16BitAddress ;  import      com . digi . xbee . api . models . XBee64BitAddress ;  import      com . digi . xbee . api . models . OperatingMode ;  import      com . digi . xbee . api . models . XBeeProtocol ;  import      com . digi . xbee . api . models . XBeeTransmitOptions ;  import      com . digi . xbee . api . models . XBeeTransmitStatus ;  import      com . digi . xbee . api . packet . XBeeAPIPacket ;  import      com . digi . xbee . api . packet . APIFrameType ;  import      com . digi . xbee . api . packet . XBeePacket ;  import       com . digi . xbee . api . packet . common . ATCommandPacket ;  import       com . digi . xbee . api . packet . common . ATCommandResponsePacket ;  import       com . digi . xbee . api . packet . common . RemoteATCommandPacket ;  import       com . digi . xbee . api . packet . common . RemoteATCommandResponsePacket ;  import       com . digi . xbee . api . packet . common . TransmitPacket ;  import       com . digi . xbee . api . packet . common . TransmitStatusPacket ;  import       com . digi . xbee . api . packet . raw . TXStatusPacket ;  import      com . digi . xbee . api . utils . ByteUtils ;  import      com . digi . xbee . api . utils . HexUtils ;   public class XBeeDevice  {   protected static  int  DEFAULT_RECEIVE_TIMETOUT = 2000 ;   protected static  int  TIMEOUT_BEFORE_COMMAND_MODE = 1200 ;   protected static  int  TIMEOUT_ENTER_COMMAND_MODE = 1500 ;   private static String  COMMAND_MODE_CHAR = "+" ;   private static String  COMMAND_MODE_OK = "OK\r" ;   protected IConnectionInterface  connectionInterface ;   protected DataReader  dataReader = null ;   protected XBeeProtocol  xbeeProtocol =  XBeeProtocol . UNKNOWN ;   protected OperatingMode  operatingMode =  OperatingMode . UNKNOWN ;   protected XBee64BitAddress  xbee64BitAddress ;   protected  int  currentFrameID = 0xFF ;   protected  int  receiveTimeout = DEFAULT_RECEIVE_TIMETOUT ;   protected Logger  logger ;   private XBeeDevice  localXBeeDevice ;   public XBeeDevice  (  String port ,   int baudRate )  {  this  (  XBee . createConnectiontionInterface  ( port , baudRate ) ) ; }   public XBeeDevice  (  String port ,   int baudRate ,   int dataBits ,   int stopBits ,   int parity ,   int flowControl )  {  this  ( port ,  new SerialPortParameters  ( baudRate , dataBits , stopBits , parity , flowControl ) ) ; }   public XBeeDevice  (  String port ,  SerialPortParameters serialPortParameters )  {  this  (  XBee . createConnectiontionInterface  ( port , serialPortParameters ) ) ; }   public XBeeDevice  (  IConnectionInterface connectionInterface )  {  if  (  connectionInterface == null )  throw  new NullPointerException  ( "ConnectionInterface cannot be null." ) ;    this . connectionInterface = connectionInterface ;    this . logger =  LoggerFactory . getLogger  (  this . getClass  ( ) ) ;   logger . debug  (   toString  ( ) + "Using the connection interface {}." ,   connectionInterface . getClass  ( ) . getSimpleName  ( ) ) ; }   public XBeeDevice  (  XBeeDevice localXBeeDevice ,  XBee64BitAddress xbee64BitAddress )  {  if  (  localXBeeDevice == null )  throw  new NullPointerException  ( "Local XBee device cannot be null." ) ;  if  (  xbee64BitAddress == null )  throw  new NullPointerException  ( "XBee 64 bit address of the remote device cannot be null." ) ;  if  (  localXBeeDevice . isRemote  ( ) )  throw  new IllegalArgumentException  ( "The given local XBee device is remote." ) ;    this . localXBeeDevice = localXBeeDevice ;    this . connectionInterface =  localXBeeDevice . getConnectionInterface  ( ) ;    this . xbee64BitAddress = xbee64BitAddress ;    this . logger =  LoggerFactory . getLogger  (  this . getClass  ( ) ) ;   logger . debug  (   toString  ( ) + "Using the connection interface {}." ,   connectionInterface . getClass  ( ) . getSimpleName  ( ) ) ; }   public void open  ( )  throws XBeeException  {   logger . info  (   toString  ( ) + "Opening the connection interface..." ) ;  if  (  connectionInterface . isOpen  ( ) )  throw  new InterfaceAlreadyOpenException  ( ) ;   connectionInterface . open  ( ) ;   logger . info  (   toString  ( ) + "Connection interface open." ) ;  if  (  isRemote  ( ) )  return ;   dataReader =  new DataReader  ( connectionInterface , operatingMode ) ;   dataReader . start  ( ) ;  if  (  operatingMode ==  OperatingMode . UNKNOWN )   operatingMode =  determineOperatingMode  ( ) ;  if  (  operatingMode ==  OperatingMode . UNKNOWN )  {   close  ( ) ;  throw  new InvalidOperatingModeException  ( "Could not determine operating mode." ) ; } else  if  (  operatingMode ==  OperatingMode . AT )  {   close  ( ) ;  throw  new InvalidOperatingModeException  ( operatingMode ) ; } }   public void close  ( )  {  if  (   dataReader != null &&  dataReader . isRunning  ( ) )   dataReader . stopReader  ( ) ;   connectionInterface . close  ( ) ;   logger . info  (   toString  ( ) + "Connection interface closed." ) ; }   public boolean isOpen  ( )  {  if  (  connectionInterface != null )  return  connectionInterface . isOpen  ( ) ;  return false ; }   public IConnectionInterface getConnectionInterface  ( )  {  return connectionInterface ; }   public boolean isRemote  ( )  {  return  localXBeeDevice != null ; }   protected OperatingMode determineOperatingMode  ( )  throws OperationNotSupportedException  {  try  {   operatingMode =  OperatingMode . API ;   dataReader . setXBeeReaderMode  ( operatingMode ) ;  ATCommandResponse  response =  sendATCommand  (  new ATCommand  ( "AP" ) ) ;  if  (    response . getResponse  ( ) != null &&    response . getResponse  ( ) . length > 0 )  {  if  (    response . getResponse  ( ) [ 0 ] !=   OperatingMode . API . getID  ( ) )   operatingMode =  OperatingMode . API_ESCAPE ;   logger . debug  (   toString  ( ) + "Using {}." ,  operatingMode . getName  ( ) ) ;  return operatingMode ; } }  catch (   TimeoutException e )  {   operatingMode =  OperatingMode . AT ;   dataReader . setXBeeReaderMode  ( operatingMode ) ;  try  {   Thread . sleep  ( TIMEOUT_BEFORE_COMMAND_MODE ) ;  boolean  success =  enterATCommandMode  ( ) ;  if  ( success )  return  OperatingMode . AT ; }  catch (   TimeoutException e1 )  {   logger . error  (  e1 . getMessage  ( ) , e1 ) ; }  catch (   InvalidOperatingModeException e1 )  {   logger . error  (  e1 . getMessage  ( ) , e1 ) ; }  catch (   InterruptedException e1 )  {   logger . error  (  e1 . getMessage  ( ) , e1 ) ; } }  catch (   InvalidOperatingModeException e )  {   logger . error  ( "Invalid operating mode" , e ) ; }  catch (   IOException e )  {   logger . error  (  e . getMessage  ( ) , e ) ; }  return  OperatingMode . UNKNOWN ; }   public boolean enterATCommandMode  ( )  throws InvalidOperatingModeException , TimeoutException  {  if  (  !  connectionInterface . isOpen  ( ) )  throw  new InterfaceNotOpenException  ( ) ;  if  (  operatingMode !=  OperatingMode . AT )  throw  new InvalidOperatingModeException  ( "Invalid mode. Command mode can be only accessed while in AT mode." ) ;    byte  [ ]  readData =  new  byte  [ 256 ] ;  try  {   connectionInterface . writeData  (  COMMAND_MODE_CHAR . getBytes  ( ) ) ;   connectionInterface . writeData  (  COMMAND_MODE_CHAR . getBytes  ( ) ) ;   connectionInterface . writeData  (  COMMAND_MODE_CHAR . getBytes  ( ) ) ;   Thread . sleep  ( TIMEOUT_ENTER_COMMAND_MODE ) ;   int  readBytes =  connectionInterface . readData  ( readData ) ;  if  (  readBytes <  COMMAND_MODE_OK . length  ( ) )  throw  new TimeoutException  ( ) ;  String  readString =  new String  ( readData , 0 , readBytes ) ;  if  (  !  readString . contains  ( COMMAND_MODE_OK ) )  return false ;  return true ; }  catch (   IOException e )  {   logger . error  (  e . getMessage  ( ) , e ) ; }  catch (   InterruptedException e )  {   logger . error  (  e . getMessage  ( ) , e ) ; }  return false ; }   public XBee64BitAddress get64BitAddress  ( )  {  return xbee64BitAddress ; }   public OperatingMode getOperatingMode  ( )  {  return operatingMode ; }   public XBeeProtocol getXBeeProtocol  ( )  {  return xbeeProtocol ; }   protected void setXBeeProtocol  (  XBeeProtocol xbeeProtocol )  {    this . xbeeProtocol = xbeeProtocol ; }   public ATCommandResponse sendATCommand  (  ATCommand command )  throws InvalidOperatingModeException , TimeoutException , OperationNotSupportedException , IOException  {  if  (  command == null )  throw  new NullPointerException  ( "AT command cannot be null." ) ;  if  (  !  connectionInterface . isOpen  ( ) )  throw  new InterfaceNotOpenException  ( ) ;  ATCommandResponse  response = null ;  OperatingMode  operatingMode =  getOperatingMode  ( ) ;  switch  ( operatingMode )  {   case AT :   case UNKNOWN :   default :  throw  new InvalidOperatingModeException  ( operatingMode ) ;   case API :   case API_ESCAPE :  XBeePacket  packet ;  if  (  isRemote  ( ) )   packet =  new RemoteATCommandPacket  (  getNextFrameID  ( ) ,  get64BitAddress  ( ) ,  XBee16BitAddress . UNKNOWN_ADDRESS ,  XBeeTransmitOptions . NONE ,  command . getCommand  ( ) ,  command . getParameter  ( ) ) ; else   packet =  new ATCommandPacket  (  getNextFrameID  ( ) ,  command . getCommand  ( ) ,  command . getParameter  ( ) ) ;  if  (   command . getParameter  ( ) == null )   logger . debug  (   toString  ( ) + "Sending AT command '{}'." ,  command . getCommand  ( ) ) ; else   logger . debug  (   toString  ( ) + "Sending AT command '{} {}'." ,  command . getCommand  ( ) ,  HexUtils . prettyHexString  (  command . getParameter  ( ) ) ) ;  try  {  XBeePacket  answerPacket =  sendXBeePacket  ( packet , true ) ;  if  (  answerPacket instanceof ATCommandResponsePacket )   response =  new ATCommandResponse  ( command ,   (  ( ATCommandResponsePacket ) answerPacket ) . getCommandValue  ( ) ,   (  ( ATCommandResponsePacket ) answerPacket ) . getStatus  ( ) ) ; else  if  (  answerPacket instanceof RemoteATCommandResponsePacket )   response =  new ATCommandResponse  ( command ,   (  ( RemoteATCommandResponsePacket ) answerPacket ) . getCommandValue  ( ) ,   (  ( RemoteATCommandResponsePacket ) answerPacket ) . getStatus  ( ) ) ;  if  (   response . getResponse  ( ) != null )   logger . debug  (   toString  ( ) + "AT command response: {}." ,  HexUtils . prettyHexString  (  response . getResponse  ( ) ) ) ; else   logger . debug  (   toString  ( ) + "AT command response: null." ) ; }  catch (   ClassCastException e )  {   logger . error  (  "Received an invalid packet type after sending an AT command packet." + e ) ; } }  return response ; }   public XBeePacket sendXBeePacket  (  XBeePacket packet )  throws XBeeException  {  try  {  return  sendXBeePacket  ( packet ,  !  isRemote  ( ) ) ; }  catch (   IOException e )  {  throw  new XBeeException  ( "Error writing in the communication interface." , e ) ; } }   private XBeePacket sendXBeePacket  (   final XBeePacket packet ,  boolean sentFromLocalDevice )  throws InvalidOperatingModeException , TimeoutException , OperationNotSupportedException , IOException  {  if  (  packet == null )  throw  new NullPointerException  ( "XBee packet cannot be null." ) ;  if  (  !  connectionInterface . isOpen  ( ) )  throw  new InterfaceNotOpenException  ( ) ;  if  (  ! sentFromLocalDevice )  throw  new OperationNotSupportedException  ( "Remote devices cannot send data to other remote devices." ) ;  OperatingMode  operatingMode =  getOperatingMode  ( ) ;  switch  ( operatingMode )  {   case AT :   case UNKNOWN :   default :  throw  new InvalidOperatingModeException  ( operatingMode ) ;   case API :   case API_ESCAPE :   ArrayList  < XBeePacket >  responseList =  new  ArrayList  < XBeePacket >  ( ) ;  if  (  packet instanceof XBeeAPIPacket )  {  if  (  !   (  ( XBeeAPIPacket ) packet ) . needsAPIFrameID  ( ) )  {   sendXBeePacketAsync  ( packet , sentFromLocalDevice ) ;  return null ; } } else  {   sendXBeePacketAsync  ( packet , sentFromLocalDevice ) ;  return null ; }   insertFrameID  ( packet ) ;  IPacketReceiveListener  packetReceiveListener =  createPacketReceivedListener  ( packet , responseList ) ;   dataReader . addPacketReceiveListener  ( packetReceiveListener ) ;   writePacket  ( packet ) ;  try  {  synchronized  ( responseList )  {  try  {   responseList . wait  ( receiveTimeout ) ; }  catch (   InterruptedException e )  { } }  if  (   responseList . size  ( ) < 1 )  throw  new TimeoutException  ( ) ;  return  responseList . get  ( 0 ) ; }  finally  {   dataReader . removePacketReceiveListener  ( packetReceiveListener ) ; } } }   private void insertFrameID  (  XBeePacket xbeePacket )  {  if  (  xbeePacket instanceof XBeeAPIPacket )  return ;  if  (    (  ( XBeeAPIPacket ) xbeePacket ) . needsAPIFrameID  ( ) &&    (  ( XBeeAPIPacket ) xbeePacket ) . getFrameID  ( ) ==  XBeeAPIPacket . NO_FRAME_ID )    (  ( XBeeAPIPacket ) xbeePacket ) . setFrameID  (  getNextFrameID  ( ) ) ; }   private IPacketReceiveListener createPacketReceivedListener  (   final XBeePacket sentPacket ,   final  ArrayList  < XBeePacket > responseList )  {  IPacketReceiveListener  packetReceiveListener =  new IPacketReceiveListener  ( )  {    @ Override public void packetReceived  (  XBeePacket receivedPacket )  {  if  (   (  ( XBeeAPIPacket ) receivedPacket ) . checkFrameID  (  (   (  ( XBeeAPIPacket ) sentPacket ) . getFrameID  ( ) ) ) )  {  if  (   sentPacket instanceof XBeeAPIPacket &&  receivedPacket instanceof XBeeAPIPacket )  {  XBeeAPIPacket  sentAPIPacket =  ( XBeeAPIPacket ) sentPacket ;  XBeeAPIPacket  receivedAPIPacket =  ( XBeeAPIPacket ) receivedPacket ;  if  (   sentAPIPacket . getFrameType  ( ) ==  APIFrameType . AT_COMMAND )  {  if  (   receivedAPIPacket . getFrameType  ( ) !=  APIFrameType . AT_COMMAND_RESPONSE )  return ;  if  (  !    (  ( ATCommandPacket ) sentAPIPacket ) . getCommand  ( ) . equalsIgnoreCase  (   (  ( ATCommandResponsePacket ) receivedPacket ) . getCommand  ( ) ) )  return ; }  if  (   sentAPIPacket . getFrameType  ( ) ==  APIFrameType . REMOTE_AT_COMMAND_REQUEST )  {  if  (   receivedAPIPacket . getFrameType  ( ) !=  APIFrameType . REMOTE_AT_COMMAND_RESPONSE )  return ;  if  (  !    (  ( RemoteATCommandPacket ) sentAPIPacket ) . getCommand  ( ) . equalsIgnoreCase  (   (  ( RemoteATCommandResponsePacket ) receivedPacket ) . getCommand  ( ) ) )  return ; } }  if  (  !  isSamePacket  ( sentPacket , receivedPacket ) )  {   responseList . add  ( receivedPacket ) ;  synchronized  ( responseList )  {   responseList . notify  ( ) ; } } } } } ;  return packetReceiveListener ; }   private boolean isSamePacket  (  XBeePacket sentPacket ,  XBeePacket receivedPacket )  {  if  (   HexUtils . byteArrayToHexString  (  sentPacket . generateByteArray  ( ) ) . equals  (  HexUtils . byteArrayToHexString  (  receivedPacket . generateByteArray  ( ) ) ) )  return true ;  return false ; }   private void sendXBeePacket  (  XBeePacket packet ,  IPacketReceiveListener packetReceiveListener ,  boolean sentFromLocalDevice )  throws InvalidOperatingModeException , OperationNotSupportedException , IOException  {  if  (  packet == null )  throw  new NullPointerException  ( "XBee packet cannot be null." ) ;  if  (  !  connectionInterface . isOpen  ( ) )  throw  new InterfaceNotOpenException  ( ) ;  if  (  ! sentFromLocalDevice )  throw  new OperationNotSupportedException  ( "Remote devices cannot send data to other remote devices." ) ;  OperatingMode  operatingMode =  getOperatingMode  ( ) ;  switch  ( operatingMode )  {   case AT :   case UNKNOWN :   default :  throw  new InvalidOperatingModeException  ( operatingMode ) ;   case API :   case API_ESCAPE :  if  (  packet instanceof XBeeAPIPacket )  {  if  (   (  ( XBeeAPIPacket ) packet ) . needsAPIFrameID  ( ) )  {  if  (    (  ( XBeeAPIPacket ) packet ) . getFrameID  ( ) ==  XBeeAPIPacket . NO_FRAME_ID )    (  ( XBeeAPIPacket ) packet ) . setFrameID  (  getNextFrameID  ( ) ) ;  if  (  packetReceiveListener != null )   dataReader . addPacketReceiveListener  ( packetReceiveListener ,   (  ( XBeeAPIPacket ) packet ) . getFrameID  ( ) ) ; } else  if  (  packetReceiveListener != null )   dataReader . addPacketReceiveListener  ( packetReceiveListener ) ; }   writePacket  ( packet ) ;  break ; } }   private void sendXBeePacketAsync  (  XBeePacket packet ,  boolean sentFromLocalDevice )  throws InvalidOperatingModeException , OperationNotSupportedException , IOException  {   sendXBeePacket  ( packet , null , sentFromLocalDevice ) ; }   public void sendXBeePacket  (  XBeePacket packet ,  IPacketReceiveListener packetReceiveListener )  throws XBeeException  {  try  {   sendXBeePacket  ( packet , packetReceiveListener ,  !  isRemote  ( ) ) ; }  catch (   IOException e )  {  throw  new XBeeException  ( "Error writing in the communication interface." , e ) ; } }   public void sendXBeePacketAsync  (  XBeePacket packet )  throws IOException , XBeeException  {  try  {   sendXBeePacket  ( packet , null ,  !  isRemote  ( ) ) ; }  catch (   IOException e )  {  throw  new XBeeException  ( "Error writing in the communication interface." , e ) ; } }   protected void writePacket  (  XBeePacket packet )  throws IOException  {   logger . debug  (   toString  ( ) + "Sending XBee packet: \n{}" ,  packet . toPrettyString  ( ) ) ;  switch  ( operatingMode )  {   case API :   default :   connectionInterface . writeData  (  packet . generateByteArray  ( ) ) ;  break ;   case API_ESCAPE :   connectionInterface . writeData  (  packet . generateByteArrayEscaped  ( ) ) ;  break ; } }   public  int getNextFrameID  ( )  {  if  (  currentFrameID == 0xff )  {   currentFrameID = 1 ; } else   currentFrameID ++ ;  return currentFrameID ; }   public  int getReceiveTimeout  ( )  {  return receiveTimeout ; }   public void setReceiveTimeout  (   int receiveTimeout )  {  if  (  receiveTimeout < 0 )  throw  new IllegalArgumentException  ( "Receive timeout cannot be less than 0." ) ;    this . receiveTimeout = receiveTimeout ; }   public void startListeningForPackets  (  IPacketReceiveListener listener )  {  if  (  dataReader == null )  return ;   dataReader . addPacketReceiveListener  ( listener ) ; }   public void stopListeningForPackets  (  IPacketReceiveListener listener )  {  if  (  dataReader == null )  return ;   dataReader . removePacketReceiveListener  ( listener ) ; }   public void startListeningForSerialData  (  ISerialDataReceiveListener listener )  {  if  (  dataReader == null )  return ;   dataReader . addSerialDatatReceiveListener  ( listener ) ; }   public void stopListeningForSerialData  (  ISerialDataReceiveListener listener )  {  if  (  dataReader == null )  return ;   dataReader . removeSerialDataReceiveListener  ( listener ) ; }   public void sendSerialDataAsync  (  XBee64BitAddress address ,    byte  [ ] data )  throws XBeeException  {  if  (  address == null )  throw  new NullPointerException  ( "Address cannot be null" ) ;  if  (  data == null )  throw  new NullPointerException  ( "Data cannot be null" ) ;  if  (  !  connectionInterface . isOpen  ( ) )  throw  new InterfaceNotOpenException  ( ) ;  if  (  isRemote  ( ) )  throw  new OperationNotSupportedException  ( "Cannot send data to a remote device from a remote device." ) ;   logger . info  (   toString  ( ) + "Sending serial data asynchronously to {} >> {}." , address ,  HexUtils . prettyHexString  ( data ) ) ;  XBeePacket  xbeePacket =  new TransmitPacket  (  getNextFrameID  ( ) , address ,  XBee16BitAddress . UNKNOWN_ADDRESS , 0 ,  XBeeTransmitOptions . NONE , data ) ;   sendAndCheckXBeePacket  ( xbeePacket , true ) ; }   protected void sendSerialDataAsync  (  XBee64BitAddress address64Bit ,  XBee16BitAddress address16bit ,    byte  [ ] data )  throws XBeeException  {  if  (  address64Bit == null )  throw  new NullPointerException  ( "64-bit address cannot be null" ) ;  if  (  address16bit == null )  throw  new NullPointerException  ( "16-bit address cannot be null" ) ;  if  (  data == null )  throw  new NullPointerException  ( "Data cannot be null" ) ;  if  (  !  connectionInterface . isOpen  ( ) )  throw  new InterfaceNotOpenException  ( ) ;  if  (  isRemote  ( ) )  throw  new OperationNotSupportedException  ( "Cannot send data to a remote device from a remote device." ) ;   logger . info  (   toString  ( ) + "Sending serial data asynchronously to {}[{}] >> {}." , address64Bit , address16bit ,  HexUtils . prettyHexString  ( data ) ) ;  XBeePacket  xbeePacket =  new TransmitPacket  (  getNextFrameID  ( ) , address64Bit , address16bit , 0 ,  XBeeTransmitOptions . NONE , data ) ;   sendAndCheckXBeePacket  ( xbeePacket , true ) ; }   public void sendSerialDataAsync  (  XBeeDevice xbeeDevice ,    byte  [ ] data )  throws XBeeException  {  if  (  xbeeDevice == null )  throw  new NullPointerException  ( "XBee device cannot be null" ) ;   sendSerialDataAsync  (  xbeeDevice . get64BitAddress  ( ) , data ) ; }   public void sendSerialData  (  XBee64BitAddress address ,    byte  [ ] data )  throws TimeoutException , XBeeException  {  if  (  address == null )  throw  new NullPointerException  ( "Address cannot be null" ) ;  if  (  data == null )  throw  new NullPointerException  ( "Data cannot be null" ) ;  if  (  !  connectionInterface . isOpen  ( ) )  throw  new InterfaceNotOpenException  ( ) ;  if  (  isRemote  ( ) )  throw  new OperationNotSupportedException  ( "Cannot send data to a remote device from a remote device." ) ;   logger . info  (   toString  ( ) + "Sending serial data to {} >> {}." , address ,  HexUtils . prettyHexString  ( data ) ) ;  XBeePacket  xbeePacket =  new TransmitPacket  (  getNextFrameID  ( ) , address ,  XBee16BitAddress . UNKNOWN_ADDRESS , 0 ,  XBeeTransmitOptions . NONE , data ) ;   sendAndCheckXBeePacket  ( xbeePacket , false ) ; }   protected void sendSerialData  (  XBee64BitAddress address64Bit ,  XBee16BitAddress address16bit ,    byte  [ ] data )  throws TimeoutException , XBeeException  {  if  (  address64Bit == null )  throw  new NullPointerException  ( "64-bit address cannot be null" ) ;  if  (  address16bit == null )  throw  new NullPointerException  ( "16-bit address cannot be null" ) ;  if  (  data == null )  throw  new NullPointerException  ( "Data cannot be null" ) ;  if  (  !  connectionInterface . isOpen  ( ) )  throw  new InterfaceNotOpenException  ( ) ;  if  (  isRemote  ( ) )  throw  new OperationNotSupportedException  ( "Cannot send data to a remote device from a remote device." ) ;   logger . info  (   toString  ( ) + "Sending serial data to {}[{}] >> {}." , address64Bit , address16bit ,  HexUtils . prettyHexString  ( data ) ) ;  XBeePacket  xbeePacket =  new TransmitPacket  (  getNextFrameID  ( ) , address64Bit , address16bit , 0 ,  XBeeTransmitOptions . NONE , data ) ;   sendAndCheckXBeePacket  ( xbeePacket , false ) ; }   public void sendSerialData  (  XBeeDevice xbeeDevice ,    byte  [ ] data )  throws TimeoutException , XBeeException  {  if  (  xbeeDevice == null )  throw  new NullPointerException  ( "XBee device cannot be null" ) ;   sendSerialData  (  xbeeDevice . get64BitAddress  ( ) , data ) ; }   protected void sendAndCheckXBeePacket  (  XBeePacket packet ,  boolean asyncTransmission )  throws TransmitException , XBeeException  {  XBeePacket  receivedPacket = null ;  try  {  if  ( asyncTransmission )   sendXBeePacketAsync  ( packet , true ) ; else   receivedPacket =  sendXBeePacket  ( packet , true ) ; }  catch (   IOException e )  {  throw  new XBeeException  ( "Error writing in the communication interface." , e ) ; }  if  ( asyncTransmission )  return ;  if  (  receivedPacket == null )  throw  new TransmitException  ( null ) ;  if  (  receivedPacket instanceof TransmitStatusPacket )  {  if  (    (  ( TransmitStatusPacket ) receivedPacket ) . getTransmitStatus  ( ) == null )  throw  new TransmitException  ( null ) ; else  if  (    (  ( TransmitStatusPacket ) receivedPacket ) . getTransmitStatus  ( ) !=  XBeeTransmitStatus . SUCCESS )  throw  new TransmitException  (   (  ( TransmitStatusPacket ) receivedPacket ) . getTransmitStatus  ( ) ) ; } else  if  (  receivedPacket instanceof TXStatusPacket )  {  if  (    (  ( TXStatusPacket ) receivedPacket ) . getTransmitStatus  ( ) == null )  throw  new TransmitException  ( null ) ; else  if  (    (  ( TXStatusPacket ) receivedPacket ) . getTransmitStatus  ( ) !=  XBeeTransmitStatus . SUCCESS )  throw  new TransmitException  (   (  ( TXStatusPacket ) receivedPacket ) . getTransmitStatus  ( ) ) ; } else  throw  new TransmitException  ( null ) ; }   public void setIOConfiguration  (  IOLine ioLine ,  IOMode ioMode )  throws TimeoutException , XBeeException  {  if  (  ioLine == null )  throw  new NullPointerException  ( "IO line cannot be null." ) ;  if  (  ioMode == null )  throw  new NullPointerException  ( "IO mode cannot be null." ) ;  if  (  !  connectionInterface . isOpen  ( ) )  throw  new InterfaceNotOpenException  ( ) ;  String  atCommand =  ioLine . getConfigurationATCommand  ( ) ;  ATCommandResponse  response = null ;  try  {   response =  sendATCommand  (  new ATCommand  ( atCommand ,  new  byte  [ ]  {  (  byte )  ioMode . getID  ( ) } ) ) ; }  catch (   IOException e )  {  throw  new XBeeException  ( "Error writing in the communication interface." , e ) ; }   checkATCommandResponseIsValid  ( response ) ; }   public IOMode getIOConfiguration  (  IOLine ioLine )  throws TimeoutException , XBeeException  {  if  (  ioLine == null )  throw  new NullPointerException  ( "DIO pin cannot be null." ) ;  if  (  !  connectionInterface . isOpen  ( ) )  throw  new InterfaceNotOpenException  ( ) ;  ATCommandResponse  response = null ;  try  {   response =  sendATCommand  (  new ATCommand  (  ioLine . getConfigurationATCommand  ( ) ) ) ; }  catch (   IOException e )  {  throw  new XBeeException  ( "Error writing in the communication interface." , e ) ; }   checkATCommandResponseIsValid  ( response ) ;  if  (    response . getResponse  ( ) == null ||    response . getResponse  ( ) . length == 0 )  throw  new OperationNotSupportedException  ( "Answer does not conain the configuration value." ) ;   int  ioModeValue =   response . getResponse  ( ) [ 0 ] ;  IOMode  dioMode =  IOMode . getIOMode  ( ioModeValue , ioLine ) ;  if  (  dioMode == null )  throw  new OperationNotSupportedException  (   "Received configuration mode '" +  HexUtils . integerToHexString  ( ioModeValue , 1 ) + "' is not valid." ) ;  return dioMode ; }   public void setDIOValue  (  IOLine ioLine ,  IOValue ioValue )  throws TimeoutException , XBeeException  {  if  (  ioLine == null )  throw  new NullPointerException  ( "IO line cannot be null." ) ;  if  (  ioValue == null )  throw  new NullPointerException  ( "IO value cannot be null." ) ;  if  (  !  connectionInterface . isOpen  ( ) )  throw  new InterfaceNotOpenException  ( ) ;  String  atCommand =  ioLine . getConfigurationATCommand  ( ) ;    byte  [ ]  valueByte =  new  byte  [ ]  {  (  byte )  ioValue . getID  ( ) } ;  ATCommandResponse  response = null ;  try  {   response =  sendATCommand  (  new ATCommand  ( atCommand , valueByte ) ) ; }  catch (   IOException e )  {  throw  new XBeeException  ( "Error writing in the communication interface." , e ) ; }   checkATCommandResponseIsValid  ( response ) ; }   public IOValue getDIOValue  (  IOLine ioLine )  throws TimeoutException , XBeeException  {  IOSample  ioSample =  getIOSample  ( ioLine ) ;  if  (   !  ioSample . hasDigitalValues  ( ) ||  !   ioSample . getDigitalValues  ( ) . containsKey  ( ioLine ) )  throw  new OperationNotSupportedException  (   "Answer does not conain digital data for " +  ioLine . getName  ( ) + "." ) ;  return   ioSample . getDigitalValues  ( ) . get  ( ioLine ) ; }   public void setPWMDutyCycle  (  IOLine ioLine ,   double dutyCycle )  throws TimeoutException , XBeeException  {  if  (  ioLine == null )  throw  new NullPointerException  ( "IO line cannot be null." ) ;  if  (  !  ioLine . hasPWMCapability  ( ) )  throw  new IllegalArgumentException  ( "Provided IO line does not have PWM capability." ) ;  if  (   dutyCycle < 0 ||  dutyCycle > 100 )  throw  new IllegalArgumentException  ( "Duty Cycle must be between 0% and 100%." ) ;  if  (  !  connectionInterface . isOpen  ( ) )  throw  new InterfaceNotOpenException  ( ) ;   int  finaldutyCycle =  (  int )  (   dutyCycle * 1023.0 / 100.0 ) ;  String  atCommand =  ioLine . getPWMDutyCycleATCommand  ( ) ;  ATCommandResponse  response = null ;  try  {   response =  sendATCommand  (  new ATCommand  ( atCommand ,  ByteUtils . intToByteArray  ( finaldutyCycle ) ) ) ; }  catch (   IOException e )  {  throw  new XBeeException  ( "Error writing in the communication interface." , e ) ; }   checkATCommandResponseIsValid  ( response ) ; }   public  double getPWMDutyCycle  (  IOLine ioLine )  throws TimeoutException , XBeeException  {  if  (  ioLine == null )  throw  new NullPointerException  ( "IO line cannot be null." ) ;  if  (  !  ioLine . hasPWMCapability  ( ) )  throw  new IllegalArgumentException  ( "Provided IO line does not have PWM capability." ) ;  if  (  !  connectionInterface . isOpen  ( ) )  throw  new InterfaceNotOpenException  ( ) ;  ATCommandResponse  response = null ;  try  {   response =  sendATCommand  (  new ATCommand  (  ioLine . getPWMDutyCycleATCommand  ( ) ) ) ; }  catch (   IOException e )  {  throw  new XBeeException  ( "Error writing in the communication interface." , e ) ; }   checkATCommandResponseIsValid  ( response ) ;  if  (    response . getResponse  ( ) == null ||    response . getResponse  ( ) . length == 0 )  throw  new OperationNotSupportedException  ( "Answer does not conain PWM duty cycle value." ) ;   int  readValue =  ByteUtils . byteArrayToInt  (  response . getResponse  ( ) ) ;  return   Math . round  (   (   readValue * 100.0 / 1023.0 ) * 100.0 ) / 100.0 ; }   public  int getADCValue  (  IOLine ioLine )  throws TimeoutException , XBeeException  {  if  (  ioLine == null )  throw  new NullPointerException  ( "IO line cannot be null." ) ;  IOSample  ioSample =  getIOSample  ( ioLine ) ;  if  (   !  ioSample . hasAnalogValues  ( ) ||  !   ioSample . getAnalogValues  ( ) . containsKey  ( ioLine ) )  throw  new OperationNotSupportedException  (   "Answer does not conain analog data for " +  ioLine . getName  ( ) + "." ) ;  return   ioSample . getAnalogValues  ( ) . get  ( ioLine ) ; }   protected void checkATCommandResponseIsValid  (  ATCommandResponse response )  throws ATCommandException  {  if  (   response == null ||   response . getResponseStatus  ( ) == null )  throw  new ATCommandException  ( null ) ; else  if  (   response . getResponseStatus  ( ) !=  ATCommandStatus . OK )  throw  new ATCommandException  (  response . getResponseStatus  ( ) ) ; }   protected IOSample getIOSample  (  IOLine ioLine )  throws TimeoutException , XBeeException  {  if  (  ioLine == null )  throw  new NullPointerException  ( "IO line cannot be null." ) ;  if  (  !  connectionInterface . isOpen  ( ) )  throw  new InterfaceNotOpenException  ( ) ;  ATCommandResponse  response = null ;  try  {   response =  sendATCommand  (  new ATCommand  (  ioLine . getReadIOATCommand  ( ) ) ) ; }  catch (   IOException e )  {  throw  new XBeeException  ( "Error writing in the communication interface." , e ) ; }   checkATCommandResponseIsValid  ( response ) ;  IOSample  ioSample ;  try  {   ioSample =  new IOSample  (  response . getResponse  ( ) ) ; }  catch (   IllegalArgumentException e )  {  throw  new XBeeException  ( "Couldn't create the IO sample." , e ) ; }  catch (   NullPointerException e )  {  throw  new XBeeException  ( "Couldn't create the IO sample." , e ) ; }  return ioSample ; }    @ Override public String toString  ( )  {  return  connectionInterface . toString  ( ) ; } 
<<<<<<<
=======
  private IPacketReceiveListener  IOPacketReceiveListener =  new IPacketReceiveListener  ( )  {   public void packetReceived  (  XBeePacket receivedPacket )  {  if  (  !  (  receivedPacket instanceof XBeeAPIPacket ) )  return ;  if  ( ioPacketReceived )  return ;  switch  (   (  ( XBeeAPIPacket ) receivedPacket ) . getFrameType  ( ) )  {   case IO_DATA_SAMPLE_RX_INDICATOR :   ioPacketPayload =   (  ( IODataSampleRxIndicatorPacket ) receivedPacket ) . getRFData  ( ) ;  break ;   case RX_IO_16 :   ioPacketPayload =   (  ( RX16IOPacket ) receivedPacket ) . getRFData  ( ) ;  break ;   case RX_IO_64 :   ioPacketPayload =   (  ( RX64IOPacket ) receivedPacket ) . getRFData  ( ) ;  break ;   default :  return ; }   ioPacketReceived = true ;  synchronized  ( ioLock )  {   ioLock . notify  ( ) ; } } } ;
>>>>>>>
 }