  package   com . mercadopago . core ;   import    com . google . gson . JsonObject ;  import    com . google . gson . JsonParser ;  import    com . mercadopago . exceptions . MPException ;  import    org . apache . http . Header ;  import    org . apache . http . HttpEntity ;  import    org . apache . http . HttpResponse ;  import    com . google . gson . JsonParseException ;   public class MPBaseResponse  {   private HttpResponse  _httpResponse ;   private  int  statusCode ;   private String  reasonPhrase ;   private String  stringResponse ;   private JsonObject  jsonResponse ;   private JsonObject  jsonEntity ;   public MPBaseResponse  (  HttpResponse response )  throws MPException  {    this . _httpResponse = response ;   parseResponse  ( response ) ; }   public  int getStatusCode  ( )  {  return  this . statusCode ; }   public String getReasonPhrase  ( )  {  return  this . reasonPhrase ; }   public String getStringResponse  ( )  {  return  this . stringResponse ; }   public JsonObject getJsonResponse  ( )  {  return  this . jsonResponse ; }   public JsonObject getJsonEntity  ( )  {  return  this . jsonEntity ; }   public  Header  [ ] getHeaders  (  String headerName )  {  return   this . _httpResponse . getHeaders  ( headerName ) ; }   private void parseResponse  (  HttpResponse response )  throws MPException  {    this . statusCode =   response . getStatusLine  ( ) . getStatusCode  ( ) ;    this . reasonPhrase =   response . getStatusLine  ( ) . getReasonPhrase  ( ) ;  if  (    this . statusCode == 200 &&   response . getEntity  ( ) != null )  {  HttpEntity  respEntity =  response . getEntity  ( ) ;  try  {    this . stringResponse =  MPCoreUtils . inputStreamToString  (  respEntity . getContent  ( ) ) ; }  catch (   Exception ex )  {  throw  new MPException  ( ex ) ; }  try  {    this . jsonResponse =    new JsonParser  ( ) . parse  (  this . stringResponse ) . getAsJsonObject  ( ) ;  if  (    this . jsonResponse . has  ( "json" ) &&    this . jsonResponse . get  ( "json" ) . isJsonObject  ( ) )    this . jsonEntity =   this . jsonResponse . getAsJsonObject  ( "json" ) ; }  catch (   JsonParseException jsonParseException )  { } 
<<<<<<<
 if  (    this . jsonResponse . has  ( "json" ) &&    this . jsonResponse . get  ( "json" ) . isJsonObject  ( ) )  {    this . jsonEntity =   this . jsonResponse . getAsJsonObject  ( "json" ) ; }
=======
>>>>>>>
 } } }