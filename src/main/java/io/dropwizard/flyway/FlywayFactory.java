  package   io . dropwizard . flyway ;   import     com . fasterxml . jackson . annotation . JsonIgnore ;  import     com . fasterxml . jackson . annotation . JsonProperty ;  import    org . flywaydb . core . Flyway ;  import      org . flywaydb . core . api . configuration . FluentConfiguration ;  import     org . hibernate . validator . constraints . NotBlank ;  import     org . hibernate . validator . constraints . NotEmpty ;  import   javax . annotation . Nullable ;  import   javax . sql . DataSource ;  import    javax . validation . constraints . NotNull ;  import   java . io . File ;  import    java . nio . charset . StandardCharsets ;  import   java . util . Collections ;  import   java . util . List ;  import   java . util . Map ;   public class FlywayFactory  {    @ JsonProperty  @ NotEmpty private String  encoding =   StandardCharsets . UTF_8 . name  ( ) ;    @ JsonProperty  @ NotNull private  List  < String >  schemas =  Collections . emptyList  ( ) ;    @ JsonProperty  @ NotNull private  List  < String >  callbacks =  Collections . emptyList  ( ) ;    @ JsonProperty  @ NotEmpty private String  metaDataTableName = "flyway_schema_history" ;    @ JsonProperty  @ NotEmpty private String  sqlMigrationPrefix = "V" ;    @ JsonProperty  @ NotEmpty private String  sqlMigrationSeparator = "__" ;    @ JsonProperty  @ NotNull private  List  < String >  sqlMigrationSuffixes =  Collections . singletonList  ( ".sql" ) ;    @ JsonProperty  @ NotEmpty private String  placeholderPrefix = "${" ;    @ JsonProperty  @ NotEmpty private String  placeholderSuffix = "}" ;    @ JsonProperty  @ NotNull private  Map  < String , String >  placeholders =  Collections . emptyMap  ( ) ;    @ JsonProperty  @ NotEmpty private  List  < String >  locations =  Collections . singletonList  ( "db/migration" ) ;    @ JsonProperty  @ NotNull private  List  < String >  resolvers =  Collections . emptyList  ( ) ;    @ JsonIgnore private ClassLoader  classLoader = null ;    @ JsonProperty private boolean  outOfOrder = false ;    @ JsonProperty  @ NotNull private String  baselineDescription = "<< Flyway Baseline >>" ;    @ JsonProperty private boolean  baselineOnMigrate = false ;    @ JsonProperty private boolean  validateOnMigrate = true ;    @ JsonProperty  @ NotBlank private String  baseLineVersion = "1" ;    @ JsonProperty private boolean  cleanDisabled = false ;    @ JsonProperty private boolean  group = false ;    @ JsonProperty private boolean  ignoreFutureMigrations = true ;    @ JsonProperty private boolean  ignoreIgnoredMigrations = false ;    @ JsonProperty private boolean  ignoreMissingMigrations = false ;    @ JsonProperty  @ NotNull private String  installedBy = "" ;    @ JsonProperty private boolean  mixed = false ;    @ JsonProperty private boolean  placeholderReplacement = true ;    @ JsonProperty private boolean  skipDefaultCallbacks = false ;    @ JsonProperty private boolean  skipDefaultResolvers = false ;    @ JsonProperty  @ Nullable private Boolean  batch ;    @ JsonProperty  @ Nullable private File  dryRunOutputFile ;    @ JsonProperty  @ Nullable private  List  < String >  errorOverrides ;    @ JsonProperty  @ Nullable private Boolean  oracleSqlPlus ;    @ JsonProperty  @ Nullable private Boolean  stream ;    @ JsonProperty  @ Nullable private String  target ;    @ JsonProperty  @ Nullable private String  undoSqlMigrationPrefix ;   public String getEncoding  ( )  {  return encoding ; }   public void setEncoding  (   final String encoding )  {    this . encoding = encoding ; }   public  List  < String > getSchemas  ( )  {  return schemas ; }   public void setSchemas  (   final  List  < String > schemas )  {    this . schemas = schemas ; }   public  List  < String > getCallbacks  ( )  {  return callbacks ; }   public void setCallbacks  (   final  List  < String > callbacks )  {    this . callbacks = callbacks ; }   public String getMetaDataTableName  ( )  {  return metaDataTableName ; }   public void setMetaDataTableName  (   final String metaDataTableName )  {    this . metaDataTableName = metaDataTableName ; }   public String getSqlMigrationPrefix  ( )  {  return sqlMigrationPrefix ; }   public void setSqlMigrationPrefix  (   final String sqlMigrationPrefix )  {    this . sqlMigrationPrefix = sqlMigrationPrefix ; }   public  List  < String > getSqlMigrationSuffixes  ( )  {  return sqlMigrationSuffixes ; }   public void setSqlMigrationSuffixes  (   final  List  < String > sqlMigrationSuffixes )  {    this . sqlMigrationSuffixes = sqlMigrationSuffixes ; }   public String getSqlMigrationSeparator  ( )  {  return sqlMigrationSeparator ; }   public void setSqlMigrationSeparator  (   final String sqlMigrationSeparator )  {    this . sqlMigrationSeparator = sqlMigrationSeparator ; }   public String getPlaceholderPrefix  ( )  {  return placeholderPrefix ; }   public void setPlaceholderPrefix  (   final String placeholderPrefix )  {    this . placeholderPrefix = placeholderPrefix ; }   public String getPlaceholderSuffix  ( )  {  return placeholderSuffix ; }   public void setPlaceholderSuffix  (   final String placeholderSuffix )  {    this . placeholderSuffix = placeholderSuffix ; }   public  Map  < String , String > getPlaceholders  ( )  {  return placeholders ; }   public void setPlaceholders  (   final  Map  < String , String > placeholders )  {    this . placeholders = placeholders ; }   public  List  < String > getLocations  ( )  {  return locations ; }   public void setLocations  (   final  List  < String > locations )  {    this . locations = locations ; }   public  List  < String > getResolvers  ( )  {  return resolvers ; }   public void setResolvers  (   final  List  < String > resolvers )  {    this . resolvers = resolvers ; }   public ClassLoader getClassLoader  ( )  {  return classLoader ; }   public void setClassLoader  (  ClassLoader classLoader )  {    this . classLoader = classLoader ; }   public boolean isOutOfOrder  ( )  {  return outOfOrder ; }   public void setOutOfOrder  (  boolean outOfOrder )  {    this . outOfOrder = outOfOrder ; }   public String getBaselineDescription  ( )  {  return baselineDescription ; }   public void setBaselineDescription  (  String baselineDescription )  {    this . baselineDescription = baselineDescription ; }   public boolean isBaselineOnMigrate  ( )  {  return baselineOnMigrate ; }   public void setBaselineOnMigrate  (  boolean baselineOnMigrate )  {    this . baselineOnMigrate = baselineOnMigrate ; }   public boolean isValidateOnMigrate  ( )  {  return validateOnMigrate ; }   public void setValidateOnMigrate  (  boolean validateOnMigrate )  {    this . validateOnMigrate = validateOnMigrate ; }   public String getBaseLineVersion  ( )  {  return baseLineVersion ; }   public void setBaseLineVersion  (  String baseLineVersion )  {    this . baseLineVersion = baseLineVersion ; }   public boolean isCleanDisabled  ( )  {  return cleanDisabled ; }   public void setCleanDisabled  (  boolean cleanDisabled )  {    this . cleanDisabled = cleanDisabled ; }   public boolean isGroup  ( )  {  return group ; }   public void setGroup  (  boolean group )  {    this . group = group ; }   public boolean isIgnoreFutureMigrations  ( )  {  return ignoreFutureMigrations ; }   public void setIgnoreFutureMigrations  (  boolean ignoreFutureMigrations )  {    this . ignoreFutureMigrations = ignoreFutureMigrations ; }   public boolean isIgnoreIgnoredMigrations  ( )  {  return ignoreIgnoredMigrations ; }   public void setIgnoreIgnoredMigrations  (  boolean ignoreIgnoredMigrations )  {    this . ignoreIgnoredMigrations = ignoreIgnoredMigrations ; }   public boolean isIgnoreMissingMigrations  ( )  {  return ignoreMissingMigrations ; }   public void setIgnoreMissingMigrations  (  boolean ignoreMissingMigrations )  {    this . ignoreMissingMigrations = ignoreMissingMigrations ; }   public String getInstalledBy  ( )  {  return installedBy ; }   public void setInstalledBy  (  String installedBy )  {    this . installedBy = installedBy ; }   public boolean isMixed  ( )  {  return mixed ; }   public void setMixed  (  boolean mixed )  {    this . mixed = mixed ; }   public boolean isPlaceholderReplacement  ( )  {  return placeholderReplacement ; }   public void setPlaceholderReplacement  (  boolean placeholderReplacement )  {    this . placeholderReplacement = placeholderReplacement ; }   public boolean isSkipDefaultCallbacks  ( )  {  return skipDefaultCallbacks ; }   public void setSkipDefaultCallbacks  (  boolean skipDefaultCallbacks )  {    this . skipDefaultCallbacks = skipDefaultCallbacks ; }   public boolean isSkipDefaultResolvers  ( )  {  return skipDefaultResolvers ; }   public void setSkipDefaultResolvers  (  boolean skipDefaultResolvers )  {    this . skipDefaultResolvers = skipDefaultResolvers ; }    @ Nullable public Boolean isBatch  ( )  {  return batch ; }   public void setBatch  (    @ Nullable Boolean batch )  {    this . batch = batch ; }    @ Nullable public File getDryRunOutputFile  ( )  {  return dryRunOutputFile ; }   public void setDryRunOutputFile  (    @ Nullable File dryRunOutputFile )  {    this . dryRunOutputFile = dryRunOutputFile ; }    @ Nullable public  List  < String > getErrorOverrides  ( )  {  return errorOverrides ; }   public void setErrorOverrides  (    @ Nullable  List  < String > errorOverrides )  {    this . errorOverrides = errorOverrides ; }    @ Nullable public Boolean isOracleSqlPlus  ( )  {  return oracleSqlPlus ; }   public void setOracleSqlPlus  (    @ Nullable Boolean oracleSqlPlus )  {    this . oracleSqlPlus = oracleSqlPlus ; }    @ Nullable public Boolean isStream  ( )  {  return stream ; }   public void setStream  (    @ Nullable Boolean stream )  {    this . stream = stream ; }    @ Nullable public String getTarget  ( )  {  return target ; }   public void setTarget  (    @ Nullable String target )  {    this . target = target ; }    @ Nullable public String getUndoSqlMigrationPrefix  ( )  {  return undoSqlMigrationPrefix ; }   public void setUndoSqlMigrationPrefix  (    @ Nullable String undoSqlMigrationPrefix )  {    this . undoSqlMigrationPrefix = undoSqlMigrationPrefix ; }   public Flyway build  (   final String url ,   final String user ,   final String password )  {  return    createConfiguration  ( ) . dataSource  ( url , user , password ) . load  ( ) ; }   public Flyway build  (   final DataSource dataSource )  { 
<<<<<<<
=======
  flyway =                              flyway . dataSource  ( dataSource ) . baselineDescription  ( baselineDescription ) . baselineOnMigrate  ( baselineOnMigrate ) . baselineVersion  ( baseLineVersion ) . callbacks  (  callbacks . toArray  ( emptyStringArray ) ) . cleanDisabled  ( cleanDisabled ) . encoding  ( encoding ) . group  ( group ) . ignoreFutureMigrations  ( ignoreFutureMigrations ) . ignoreIgnoredMigrations  ( ignoreIgnoredMigrations ) . ignoreMissingMigrations  ( ignoreMissingMigrations ) . installedBy  ( installedBy ) . locations  (  locations . toArray  ( emptyStringArray ) ) . mixed  ( mixed ) . outOfOrder  ( outOfOrder ) . placeholderPrefix  ( placeholderPrefix ) . placeholderReplacement  ( placeholderReplacement ) . placeholderSuffix  ( placeholderSuffix ) . placeholders  ( placeholders ) . resolvers  (  resolvers . toArray  ( emptyStringArray ) ) . initSql  ( initSql ) . schemas  (  schemas . toArray  ( emptyStringArray ) ) . skipDefaultCallbacks  ( skipDefaultCallbacks ) . skipDefaultResolvers  ( skipDefaultResolvers ) . sqlMigrationPrefix  ( sqlMigrationPrefix ) . sqlMigrationSeparator  ( sqlMigrationSeparator ) . sqlMigrationSuffixes  (  sqlMigrationSuffixes . toArray  ( emptyStringArray ) ) . table  ( metaDataTableName ) . validateOnMigrate  ( validateOnMigrate ) ;
>>>>>>>
  return    createConfiguration  ( ) . dataSource  ( dataSource ) . load  ( ) ; }   private FluentConfiguration createConfiguration  ( )  {  FluentConfiguration  flyway =   classLoader == null ?  Flyway . configure  ( ) :  Flyway . configure  ( classLoader ) ;   final  String  [ ]  emptyStringArray =  new String  [ 0 ] ;   flyway =                            flyway . baselineDescription  ( baselineDescription ) . baselineOnMigrate  ( baselineOnMigrate ) . baselineVersion  ( baseLineVersion ) . callbacks  (  callbacks . toArray  ( emptyStringArray ) ) . cleanDisabled  ( cleanDisabled ) . encoding  ( encoding ) . group  ( group ) . ignoreFutureMigrations  ( ignoreFutureMigrations ) . ignoreIgnoredMigrations  ( ignoreIgnoredMigrations ) . ignoreMissingMigrations  ( ignoreMissingMigrations ) . installedBy  ( installedBy ) . locations  (  locations . toArray  ( emptyStringArray ) ) . mixed  ( mixed ) . outOfOrder  ( outOfOrder ) . placeholderPrefix  ( placeholderPrefix ) . placeholderReplacement  ( placeholderReplacement ) . placeholderSuffix  ( placeholderSuffix ) . placeholders  ( placeholders ) . resolvers  (  resolvers . toArray  ( emptyStringArray ) ) . schemas  (  schemas . toArray  ( emptyStringArray ) ) . skipDefaultCallbacks  ( skipDefaultCallbacks ) . skipDefaultResolvers  ( skipDefaultResolvers ) . sqlMigrationPrefix  ( sqlMigrationPrefix ) . sqlMigrationSeparator  ( sqlMigrationSeparator ) . sqlMigrationSuffixes  (  sqlMigrationSuffixes . toArray  ( emptyStringArray ) ) . table  ( metaDataTableName ) . validateOnMigrate  ( validateOnMigrate ) ;  if  (  batch != null )  {   flyway . batch  ( batch ) ; }  if  (  dryRunOutputFile != null )  {   flyway . dryRunOutput  ( dryRunOutputFile ) ; }  if  (  errorOverrides != null )  {   flyway . errorOverrides  (  errorOverrides . toArray  ( emptyStringArray ) ) ; }  if  (  oracleSqlPlus != null )  {   flyway . oracleSqlplus  ( oracleSqlPlus ) ; }  if  (  stream != null )  {   flyway . stream  ( stream ) ; }  if  (  target != null )  {   flyway . target  ( target ) ; }  if  (  undoSqlMigrationPrefix != null )  {   flyway . undoSqlMigrationPrefix  ( undoSqlMigrationPrefix ) ; }  return flyway ; }    @ JsonProperty private String  initSql = null ;   public String getInitSql  ( )  {  return initSql ; }   public void setInitSql  (  String initSql )  {    this . initSql = initSql ; } }