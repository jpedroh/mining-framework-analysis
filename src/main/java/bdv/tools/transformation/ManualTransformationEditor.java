  package   bdv . tools . transformation ;   import   bdv . viewer . SourceAndConverter ;  import   bdv . viewer . ViewerPanel ;  import   bdv . viewer . ViewerState ;  import    java . awt . event . KeyEvent ;  import   java . util . ArrayList ;  import   java . util . List ;  import   javax . swing . Action ;  import   javax . swing . ActionMap ;  import   javax . swing . InputMap ;  import   javax . swing . KeyStroke ;  import    net . imglib2 . realtransform . AffineTransform3D ;  import    net . imglib2 . ui . TransformListener ;  import    org . scijava . listeners . Listeners ;  import      org . scijava . ui . behaviour . util . InputActionBindings ;  import      org . scijava . ui . behaviour . util . RunnableAction ;   public class ManualTransformationEditor  implements   TransformListener  < AffineTransform3D >  {   private boolean  active = false ;   private final InputActionBindings  bindings ;   private final ViewerPanel  viewer ;   private final AffineTransform3D  frozenTransform ;   private final AffineTransform3D  liveTransform ;   private final  ArrayList  <  TransformedSource  <  ? > >  sourcesToModify ;   private final  ArrayList  <  TransformedSource  <  ? > >  sourcesToFix ;   private final ActionMap  actionMap ;   private final InputMap  inputMap ;   private final   Listeners . List  < ManualTransformActiveListener >  manualTransformActiveListeners ;   public ManualTransformationEditor  (   final ViewerPanel viewer ,   final InputActionBindings inputActionBindings )  {    this . viewer = viewer ;   bindings = inputActionBindings ;   frozenTransform =  new AffineTransform3D  ( ) ;   liveTransform =  new AffineTransform3D  ( ) ;   sourcesToModify =  new  ArrayList  < >  ( ) ;   sourcesToFix =  new  ArrayList  < >  ( ) ;   manualTransformActiveListeners =  new   Listeners . SynchronizedList  < >  ( ) ;   final KeyStroke  abortKey =  KeyStroke . getKeyStroke  (  KeyEvent . VK_ESCAPE , 0 ) ;   final Action  abortAction =  new RunnableAction  ( "abort manual transformation" ,  this :: abort ) ;   final KeyStroke  resetKey =  KeyStroke . getKeyStroke  (  KeyEvent . VK_R , 0 ) ;   final Action  resetAction =  new RunnableAction  ( "reset manual transformation" ,  this :: reset ) ;   actionMap =  new ActionMap  ( ) ;   inputMap =  new InputMap  ( ) ;   actionMap . put  ( "abort manual transformation" , abortAction ) ;   inputMap . put  ( abortKey , "abort manual transformation" ) ;   actionMap . put  ( "reset manual transformation" , resetAction ) ;   inputMap . put  ( resetKey , "reset manual transformation" ) ;   bindings . addActionMap  ( "manual transform" , actionMap ) ; }   public synchronized void abort  ( )  {  if  ( active )  {   final AffineTransform3D  identity =  new AffineTransform3D  ( ) ;  for (  final  TransformedSource  <  ? > source : sourcesToModify )   source . setIncrementalTransform  ( identity ) ;   viewer . setCurrentViewerTransform  ( frozenTransform ) ;   viewer . showMessage  ( "aborted manual transform" ) ;   active = false ;    manualTransformActiveListeners . list . forEach  (  l ->  l . manualTransformActiveChanged  ( active ) ) ; } }   public synchronized void reset  ( )  {  if  ( active )  {   final AffineTransform3D  identity =  new AffineTransform3D  ( ) ;  for (  final  TransformedSource  <  ? > source : sourcesToModify )  {   source . setIncrementalTransform  ( identity ) ;   source . setFixedTransform  ( identity ) ; }  for (  final  TransformedSource  <  ? > source : sourcesToFix )  {   source . setIncrementalTransform  ( identity ) ; }   viewer . setCurrentViewerTransform  ( frozenTransform ) ;   viewer . showMessage  ( "reset manual transform" ) ; } }   public synchronized void setActive  (   final boolean a )  {  if  (   this . active == a )  return ;  if  ( a )  { 
<<<<<<<
  active = true ;
=======
>>>>>>>
   final ViewerState  state =   viewer . state  ( ) . snapshot  ( ) ;   final  List  <  SourceAndConverter  <  ? > >  currentSources =  new  ArrayList  < >  ( ) ;  switch  (  state . getDisplayMode  ( ) )  {   case FUSED :   currentSources . add  (  state . getCurrentSource  ( ) ) ;  break ;   case FUSEDGROUP :   currentSources . addAll  (  state . getSourcesInGroup  (  state . getCurrentGroup  ( ) ) ) ;  break ;   default :   viewer . showMessage  ( "Can only do manual transformation when in FUSED mode." ) ;  return ; }   state . getViewerTransform  ( frozenTransform ) ;   sourcesToModify . clear  ( ) ;   sourcesToFix . clear  ( ) ;  for (  SourceAndConverter  <  ? > source :  state . getSources  ( ) )  {  if  (   source . getSpimSource  ( ) instanceof TransformedSource )  {  if  (  currentSources . contains  ( source ) )   sourcesToModify . add  (  (  TransformedSource  <  ? > )  source . getSpimSource  ( ) ) ; else   sourcesToFix . add  (  (  TransformedSource  <  ? > )  source . getSpimSource  ( ) ) ; } }   active = true ;   viewer . addTransformListener  ( this ) ;   bindings . addInputMap  ( "manual transform" , inputMap ) ;   viewer . showMessage  ( "starting manual transform" ) ; } else  {   active = false ;   viewer . removeTransformListener  ( this ) ;   bindings . removeInputMap  ( "manual transform" ) ;   final AffineTransform3D  tmp =  new AffineTransform3D  ( ) ;  for (  final  TransformedSource  <  ? > source : sourcesToModify )  {   tmp . identity  ( ) ;   source . setIncrementalTransform  ( tmp ) ;   source . getFixedTransform  ( tmp ) ;   tmp . preConcatenate  ( liveTransform ) ;   source . setFixedTransform  ( tmp ) ; }   tmp . identity  ( ) ;  for (  final  TransformedSource  <  ? > source : sourcesToFix )   source . setIncrementalTransform  ( tmp ) ;   viewer . setCurrentViewerTransform  ( frozenTransform ) ;   viewer . showMessage  ( "fixed manual transform" ) ; }    manualTransformActiveListeners . list . forEach  (  l ->  l . manualTransformActiveChanged  ( active ) ) ; }   public synchronized void toggle  ( )  {   setActive  (  ! active ) ; }    @ Override public void transformChanged  (   final AffineTransform3D transform )  {  if  (  ! active )  {  return ; }   liveTransform . set  ( transform ) ;   liveTransform . preConcatenate  (  frozenTransform . inverse  ( ) ) ;  for (  final  TransformedSource  <  ? > source : sourcesToFix )   source . setIncrementalTransform  (  liveTransform . inverse  ( ) ) ; }   public  Listeners  < ManualTransformActiveListener > manualTransformActiveListeners  ( )  {  return manualTransformActiveListeners ; } }