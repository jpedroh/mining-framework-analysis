  package   ezvcard . io . json ;   import static    ezvcard . util . IOUtils . utf8Reader ;  import   java . io . BufferedReader ;  import   java . io . File ;  import   java . io . FileNotFoundException ;  import   java . io . IOException ;  import   java . io . InputStream ;  import   java . io . Reader ;  import   java . io . StringReader ;  import  ezvcard . VCard ;  import  ezvcard . VCardDataType ;  import  ezvcard . VCardVersion ;  import   ezvcard . io . CannotParseException ;  import   ezvcard . io . EmbeddedVCardException ;  import   ezvcard . io . SkipMeException ;  import   ezvcard . io . StreamReader ;  import     ezvcard . io . json . JCardRawReader . JCardDataStreamListener ;  import    ezvcard . io . scribe . RawPropertyScribe ;  import    ezvcard . io . scribe . VCardPropertyScribe ;  import     ezvcard . io . scribe . VCardPropertyScribe . Result ;  import   ezvcard . parameter . VCardParameters ;  import   ezvcard . property . RawProperty ;  import   ezvcard . property . VCardProperty ;  import     com . fasterxml . jackson . core . JsonParser ;   public class JCardReader  extends StreamReader  {   private final JCardRawReader  reader ;   public JCardReader  (  String json )  {  this  (  new StringReader  ( json ) ) ; }   public JCardReader  (  InputStream in )  {  this  (  utf8Reader  ( in ) ) ; }   public JCardReader  (  File file )  throws FileNotFoundException  {  this  (  new BufferedReader  (  utf8Reader  ( file ) ) ) ; }   public JCardReader  (  Reader reader )  {    this . reader =  new JCardRawReader  ( reader ) ; }    @ Override protected VCard _readNext  ( )  throws IOException  {  if  (  reader . eof  ( ) )  {  return null ; }   warnings . clear  ( ) ;  JCardDataStreamListenerImpl  listener =  new JCardDataStreamListenerImpl  ( ) ;   reader . readNext  ( listener ) ;  VCard  vcard =  listener . vcard ;  if  (   vcard != null &&  !  listener . versionFound )  {   warnings . add  (  reader . getLineNum  ( ) , null , 29 ) ; }  return vcard ; }   public void close  ( )  throws IOException  {   reader . close  ( ) ; }   private class JCardDataStreamListenerImpl  implements  JCardDataStreamListener  {   private VCard  vcard = null ;   private boolean  versionFound = false ;   public void beginVCard  ( )  {   vcard =  new VCard  ( ) ;   vcard . setVersion  (  VCardVersion . V4_0 ) ; }   public void readProperty  (  String group ,  String propertyName ,  VCardParameters parameters ,  VCardDataType dataType ,  JCardValue value )  {  if  (  "version" . equalsIgnoreCase  ( propertyName ) )  {   versionFound = true ;  VCardVersion  version =  VCardVersion . valueOfByStr  (  value . asSingle  ( ) ) ;  if  (  version !=  VCardVersion . V4_0 )  {   warnings . add  (  reader . getLineNum  ( ) , propertyName , 30 ) ; }  return ; }   VCardPropertyScribe  <  ? extends VCardProperty >  scribe =  index . getPropertyScribe  ( propertyName ) ;  if  (  scribe == null )  {   scribe =  new RawPropertyScribe  ( propertyName ) ; }   Result  <  ? extends VCardProperty >  result ;  try  {   result =  scribe . parseJson  ( value , dataType , parameters ) ;  for ( String warning :  result . getWarnings  ( ) )  {   warnings . add  (  reader . getLineNum  ( ) , warning , propertyName ) ; } }  catch (   SkipMeException e )  {   warnings . add  (  reader . getLineNum  ( ) , propertyName , 22 ,  e . getMessage  ( ) ) ;  return ; }  catch (   CannotParseException e )  {   scribe =  new RawPropertyScribe  ( propertyName ) ;   result =  scribe . parseJson  ( value , dataType , parameters ) ;  VCardProperty  property =  result . getProperty  ( ) ;  String  valueStr =   (  ( RawProperty ) property ) . getValue  ( ) ;   warnings . add  (  reader . getLineNum  ( ) , propertyName , 25 , valueStr ,  e . getMessage  ( ) ) ; }  catch (   EmbeddedVCardException e )  {   warnings . add  (  reader . getLineNum  ( ) , propertyName , 31 ) ;  return ; }  VCardProperty  property =  result . getProperty  ( ) ;   property . setGroup  ( group ) ;   vcard . addProperty  ( property ) ; } }   public JCardReader  (  JsonParser parser )  {    this . reader =  new JCardRawReader  ( parser , true ) ; } }