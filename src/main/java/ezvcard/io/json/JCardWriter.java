  package   ezvcard . io . json ;   import static    ezvcard . util . IOUtils . utf8Writer ;  import   java . io . File ;  import   java . io . Flushable ;  import   java . io . IOException ;  import   java . io . OutputStream ;  import   java . io . Writer ;  import   java . util . List ;  import  ezvcard . VCard ;  import  ezvcard . VCardDataType ;  import  ezvcard . VCardVersion ;  import   ezvcard . io . EmbeddedVCardException ;  import   ezvcard . io . SkipMeException ;  import   ezvcard . io . StreamWriter ;  import    ezvcard . io . scribe . VCardPropertyScribe ;  import   ezvcard . parameter . VCardParameters ;  import   ezvcard . property . VCardProperty ;  import     com . fasterxml . jackson . core . JsonGenerator ;   public class JCardWriter  extends StreamWriter  implements  Flushable  {   private final JCardRawWriter  writer ;   private final VCardVersion  targetVersion =  VCardVersion . V4_0 ;   public JCardWriter  (  OutputStream out )  {  this  (  utf8Writer  ( out ) ) ; }   public JCardWriter  (  OutputStream out ,  boolean wrapInArray )  {  this  (  utf8Writer  ( out ) , wrapInArray ) ; }   public JCardWriter  (  File file )  throws IOException  {  this  (  utf8Writer  ( file ) ) ; }   public JCardWriter  (  File file ,  boolean wrapInArray )  throws IOException  {  this  (  utf8Writer  ( file ) , wrapInArray ) ; }   public JCardWriter  (  Writer writer )  {  this  ( writer , false ) ; }   public JCardWriter  (  Writer writer ,  boolean wrapInArray )  {    this . writer =  new JCardRawWriter  ( writer , wrapInArray ) ; }    @ Override  @ SuppressWarnings  (  { "rawtypes" , "unchecked" } ) protected void _write  (  VCard vcard ,   List  < VCardProperty > properties )  throws IOException  {   writer . writeStartVCard  ( ) ;   writer . writeProperty  ( "version" ,  VCardDataType . TEXT ,  JCardValue . single  (  targetVersion . getVersion  ( ) ) ) ;  for ( VCardProperty property : properties )  {  VCardPropertyScribe  scribe =  index . getPropertyScribe  ( property ) ;  JCardValue  value ;  try  {   value =  scribe . writeJson  ( property ) ; }  catch (   SkipMeException e )  {  continue ; }  catch (   EmbeddedVCardException e )  {  continue ; }  String  group =  property . getGroup  ( ) ;  String  name =   scribe . getPropertyName  ( ) . toLowerCase  ( ) ;  VCardParameters  parameters =  scribe . prepareParameters  ( property , targetVersion , vcard ) ;  VCardDataType  dataType =  scribe . dataType  ( property , targetVersion ) ;   writer . writeProperty  ( group , name , parameters , dataType , value ) ; }   writer . writeEndVCard  ( ) ; }    @ Override protected VCardVersion getTargetVersion  ( )  {  return targetVersion ; }   public boolean isIndent  ( )  {  return  writer . isIndent  ( ) ; }   public void setIndent  (  boolean indent )  {   writer . setIndent  ( indent ) ; }   public void flush  ( )  throws IOException  {   writer . flush  ( ) ; }   public void closeJsonStream  ( )  throws IOException  {   writer . closeJsonStream  ( ) ; }   public void close  ( )  throws IOException  {   writer . close  ( ) ; }   public JCardWriter  (  JsonGenerator generator )  {    this . writer =  new JCardRawWriter  ( generator ) ; } }