  package   ezvcard . io . json ;   import   java . io . Closeable ;  import   java . io . IOException ;  import   java . io . Reader ;  import   java . util . ArrayList ;  import   java . util . HashMap ;  import   java . util . List ;  import   java . util . Map ;  import     com . fasterxml . jackson . core . JsonFactory ;  import     com . fasterxml . jackson . core . JsonParseException ;  import     com . fasterxml . jackson . core . JsonParser ;  import     com . fasterxml . jackson . core . JsonToken ;  import  ezvcard . VCardDataType ;  import   ezvcard . parameter . VCardParameters ;   public class JCardRawReader  implements  Closeable  {   private final Reader  reader ;   private JsonParser  parser ;   private boolean  eof = false ;   private JCardDataStreamListener  listener ;   public JCardRawReader  (  Reader reader )  {    this . reader = reader ; }   public  int getLineNum  ( )  {  return   (  parser == null ) ? 0 :   parser . getCurrentLocation  ( ) . getLineNr  ( ) ; }   public void readNext  (  JCardDataStreamListener listener )  throws IOException  {  if  (  parser == null )  {  JsonFactory  factory =  new JsonFactory  ( ) ;   parser =  factory . createParser  ( reader ) ; } else  if  (  parser . isClosed  ( ) )  {  return ; }    this . listener = listener ;  JsonToken  prev =  parser . getCurrentToken  ( ) ;  JsonToken  cur ;  while  (   (  cur =  parser . nextToken  ( ) ) != null )  {  if  (    prev ==  JsonToken . START_ARRAY &&  cur ==  JsonToken . VALUE_STRING &&  "vcard" . equals  (  parser . getValueAsString  ( ) ) )  {  break ; } else  if  ( strict )  {  if  (  prev !=  JsonToken . START_ARRAY )  {  throw  new JCardParseException  (  JsonToken . START_ARRAY , prev ) ; } else  if  (  cur !=  JsonToken . VALUE_STRING )  {  throw  new JCardParseException  (  JsonToken . VALUE_STRING , cur ) ; } else  {  throw  new JCardParseException  (   "Invalid value for first token: expected \"vcard\" , was \"" +  parser . getValueAsString  ( ) + "\"" ,  JsonToken . VALUE_STRING , cur ) ; } }   prev = cur ; }  if  (  cur == null )  {   eof = true ;  return ; }   listener . beginVCard  ( ) ;   parseProperties  ( ) ;   check  (  JsonToken . END_ARRAY ,  parser . nextToken  ( ) ) ; }   private void parseProperties  ( )  throws IOException  {   checkNext  (  JsonToken . START_ARRAY ) ;  while  (   parser . nextToken  ( ) !=  JsonToken . END_ARRAY )  {   checkCurrent  (  JsonToken . START_ARRAY ) ;   parser . nextToken  ( ) ;   parseProperty  ( ) ; } }   private void parseProperty  ( )  throws IOException  {   checkCurrent  (  JsonToken . VALUE_STRING ) ;  String  propertyName =   parser . getValueAsString  ( ) . toLowerCase  ( ) ;  VCardParameters  parameters =  parseParameters  ( ) ;   List  < String >  removed =  parameters . removeAll  ( "group" ) ;  String  group =   removed . isEmpty  ( ) ? null :  removed . get  ( 0 ) ;   checkNext  (  JsonToken . VALUE_STRING ) ;  String  dataTypeStr =   parser . getText  ( ) . toLowerCase  ( ) ;  VCardDataType  dataType =   "unknown" . equals  ( dataTypeStr ) ? null :  VCardDataType . get  ( dataTypeStr ) ;   List  < JsonValue >  values =  parseValues  ( ) ;  JCardValue  value =  new JCardValue  ( values ) ;   listener . readProperty  ( group , propertyName , parameters , dataType , value ) ; }   private VCardParameters parseParameters  ( )  throws IOException  {   checkNext  (  JsonToken . START_OBJECT ) ;  VCardParameters  parameters =  new VCardParameters  ( ) ;  while  (   parser . nextToken  ( ) !=  JsonToken . END_OBJECT )  {  String  parameterName =  parser . getText  ( ) ;  if  (   parser . nextToken  ( ) ==  JsonToken . START_ARRAY )  {  while  (   parser . nextToken  ( ) !=  JsonToken . END_ARRAY )  {   parameters . put  ( parameterName ,  parser . getText  ( ) ) ; } } else  {   parameters . put  ( parameterName ,  parser . getValueAsString  ( ) ) ; } }  return parameters ; }   private  List  < JsonValue > parseValues  ( )  throws IOException  {   List  < JsonValue >  values =  new  ArrayList  < JsonValue >  ( ) ;  while  (   parser . nextToken  ( ) !=  JsonToken . END_ARRAY )  {  JsonValue  value =  parseValue  ( ) ;   values . add  ( value ) ; }  return values ; }   private Object parseValueElement  ( )  throws IOException  {  switch  (  parser . getCurrentToken  ( ) )  {   case VALUE_FALSE :   case VALUE_TRUE :  return  parser . getBooleanValue  ( ) ;   case VALUE_NUMBER_FLOAT :  return  parser . getDoubleValue  ( ) ;   case VALUE_NUMBER_INT :  return  parser . getLongValue  ( ) ;   case VALUE_NULL :  return null ;   default :  return  parser . getText  ( ) ; } }   private  List  < JsonValue > parseValueArray  ( )  throws IOException  {   List  < JsonValue >  array =  new  ArrayList  < JsonValue >  ( ) ;  while  (   parser . nextToken  ( ) !=  JsonToken . END_ARRAY )  {  JsonValue  value =  parseValue  ( ) ;   array . add  ( value ) ; }  return array ; }   private  Map  < String , JsonValue > parseValueObject  ( )  throws IOException  {   Map  < String , JsonValue >  object =  new  HashMap  < String , JsonValue >  ( ) ;  while  (   parser . nextToken  ( ) !=  JsonToken . END_OBJECT )  {   checkCurrent  (  JsonToken . FIELD_NAME ) ;  String  key =  parser . getText  ( ) ;   parser . nextToken  ( ) ;  JsonValue  value =  parseValue  ( ) ;   object . put  ( key , value ) ; }  return object ; }   private JsonValue parseValue  ( )  throws IOException  {  switch  (  parser . getCurrentToken  ( ) )  {   case START_ARRAY :  return  new JsonValue  (  parseValueArray  ( ) ) ;   case START_OBJECT :  return  new JsonValue  (  parseValueObject  ( ) ) ;   default :  return  new JsonValue  (  parseValueElement  ( ) ) ; } }   private void checkNext  (  JsonToken expected )  throws IOException  {  JsonToken  actual =  parser . nextToken  ( ) ;   check  ( expected , actual ) ; }   private void checkCurrent  (  JsonToken expected )  throws JCardParseException  {  JsonToken  actual =  parser . getCurrentToken  ( ) ;   check  ( expected , actual ) ; }   private void check  (  JsonToken expected ,  JsonToken actual )  throws JCardParseException  {  if  (  actual != expected )  {  throw  new JCardParseException  ( expected , actual ) ; } }   public boolean eof  ( )  {  return eof ; }   public interface JCardDataStreamListener  {  void beginVCard  ( ) ;  void readProperty  (  String group ,  String propertyName ,  VCardParameters parameters ,  VCardDataType dataType ,  JCardValue value ) ; }   public void close  ( )  throws IOException  {  if  (  parser != null )  {   parser . close  ( ) ; }  if  (  reader != null )  {   reader . close  ( ) ; } }   private boolean  strict = false ;   public JCardRawReader  (  JsonParser parser ,  boolean strict )  {   reader = null ;    this . parser = parser ;    this . strict = strict ; } }