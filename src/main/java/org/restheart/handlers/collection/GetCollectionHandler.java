  package    org . restheart . handlers . collection ;   import   com . mongodb . DBCollection ;  import   com . mongodb . DBObject ;  import   com . mongodb . MongoException ;  import    com . mongodb . util . JSONParseException ;  import    org . restheart . db . CollectionDAO ;  import    org . restheart . utils . HttpStatus ;  import    org . restheart . handlers . IllegalQueryParamenterException ;  import    org . restheart . handlers . PipedHttpHandler ;  import    org . restheart . handlers . RequestContext ;  import    org . restheart . utils . ResponseHelper ;  import    io . undertow . server . HttpServerExchange ;  import   java . util . ArrayList ;  import   org . slf4j . Logger ;  import   org . slf4j . LoggerFactory ;   public class GetCollectionHandler  extends PipedHttpHandler  {   private static final Logger  LOGGER =  LoggerFactory . getLogger  (  GetCollectionHandler . class ) ;   public GetCollectionHandler  ( )  {  super  ( null ) ; }    @ Override public void handleRequest  (  HttpServerExchange exchange ,  RequestContext context )  throws Exception  {   final CollectionDAO  collectionDAO =  new CollectionDAO  ( ) ;  DBCollection  coll =  collectionDAO . getCollection  (  context . getDBName  ( ) ,  context . getCollectionName  ( ) ) ;   long  size =  - 1 ;  if  (  context . isCount  ( ) )  {   size =  collectionDAO . getCollectionSize  ( coll ,   exchange . getQueryParameters  ( ) . get  ( "filter" ) ) ; }   ArrayList  < DBObject >  data = null ;  try  {   data =  collectionDAO . getCollectionData  ( coll ,  context . getPage  ( ) ,  context . getPagesize  ( ) ,  context . getSortBy  ( ) ,  context . getFilter  ( ) ,  context . getCursorAllocationPolicy  ( ) ) ; }  catch (   JSONParseException jpe )  {   LOGGER . error  ( "invalid filter expression {}" ,  context . getFilter  ( ) , jpe ) ;   ResponseHelper . endExchangeWithMessage  ( exchange ,  HttpStatus . SC_BAD_REQUEST , "wrong request, filter expression is invalid" , jpe ) ;  return ; }  catch (   MongoException me )  {  if  (   me . getMessage  ( ) . matches  ( ".*Can't canonicalize query.*" ) )  {   LOGGER . error  ( "invalid filter expression {}" ,  context . getFilter  ( ) , me ) ;   ResponseHelper . endExchangeWithMessage  ( exchange ,  HttpStatus . SC_BAD_REQUEST , "wrong request, filter expression is invalid" , me ) ;  return ; } else  {  throw me ; } }  if  (  exchange . isComplete  ( ) )  {  return ; }  if  (   data . isEmpty  ( ) &&  (    context . getCollectionProps  ( ) == null ||    context . getCollectionProps  ( ) . keySet  ( ) . isEmpty  ( ) ) )  {   ResponseHelper . endExchange  ( exchange ,  HttpStatus . SC_NOT_FOUND ) ;  return ; }  try  {   exchange . setResponseCode  (  HttpStatus . SC_OK ) ;    new CollectionRepresentationFactory  ( ) . sendHal  ( exchange , context , data , size ) ;   exchange . endExchange  ( ) ; }  catch (   IllegalQueryParamenterException ex )  {   ResponseHelper . endExchangeWithMessage  ( exchange ,  HttpStatus . SC_BAD_REQUEST ,  ex . getMessage  ( ) , ex ) ; } } }