  package    org . restheart . handlers . collection ;   import   com . mongodb . BasicDBList ;  import   com . mongodb . BasicDBObject ;  import   com . mongodb . DBObject ;  import    org . restheart . db . DocumentDAO ;  import    org . restheart . handlers . RequestContext ;  import    org . restheart . utils . HttpStatus ;  import    org . restheart . utils . RequestHelper ;  import    org . restheart . utils . ResponseHelper ;  import    io . undertow . server . HttpServerExchange ;  import    org . bson . types . ObjectId ;   public class PostCollectionHandler  extends PutCollectionHandler  {   public PostCollectionHandler  ( )  { }    @ Override public void handleRequest  (  HttpServerExchange exchange ,  RequestContext context )  throws Exception  {  DBObject  content =  context . getContent  ( ) ;  if  (  content == null )  {   content =  new BasicDBObject  ( ) ; }  if  (  content instanceof BasicDBList )  {   ResponseHelper . endExchangeWithMessage  ( exchange ,  HttpStatus . SC_NOT_ACCEPTABLE , "data cannot be an array" ) ;  return ; }  ObjectId  etag =  RequestHelper . getWriteEtag  ( exchange ) ;  if  (     content . get  ( "_id" ) != null &&   content . get  ( "_id" ) instanceof String &&  RequestContext . isReservedResourceDocument  (  ( String )  content . get  ( "_id" ) ) )  {   ResponseHelper . endExchangeWithMessage  ( exchange ,  HttpStatus . SC_FORBIDDEN , "reserved resource" ) ;  return ; }   int  httpCode =   new DocumentDAO  ( ) . upsertDocumentPost  ( exchange ,  context . getDBName  ( ) ,  context . getCollectionName  ( ) , content , etag ) ;  if  (    context . getWarnings  ( ) != null &&  !   context . getWarnings  ( ) . isEmpty  ( ) )  {   sendWarnings  ( httpCode , exchange , context ) ; } else  {   exchange . setResponseCode  ( httpCode ) ; }   exchange . endExchange  ( ) ; } }