  package   org . restheart . handlers ;   import     org . restheart . handlers . root . GetRootHandler ;  import     org . restheart . handlers . collection . DeleteCollectionHandler ;  import     org . restheart . handlers . collection . GetCollectionHandler ;  import     org . restheart . handlers . collection . PatchCollectionHandler ;  import     org . restheart . handlers . collection . PostCollectionHandler ;  import     org . restheart . handlers . collection . PutCollectionHandler ;  import     org . restheart . handlers . database . DeleteDBHandler ;  import     org . restheart . handlers . database . GetDBHandler ;  import     org . restheart . handlers . database . PatchDBHandler ;  import     org . restheart . handlers . database . PutDBHandler ;  import     org . restheart . handlers . document . DeleteDocumentHandler ;  import     org . restheart . handlers . document . GetDocumentHandler ;  import     org . restheart . handlers . document . PatchDocumentHandler ;  import     org . restheart . handlers . document . PutDocumentHandler ;  import     org . restheart . handlers . indexes . DeleteIndexHandler ;  import     org . restheart . handlers . indexes . GetIndexesHandler ;  import     org . restheart . handlers . indexes . PutIndexHandler ;  import    org . restheart . utils . HttpStatus ;  import    io . undertow . server . HttpServerExchange ;  import static     org . restheart . handlers . RequestContext . METHOD ;  import static     org . restheart . handlers . RequestContext . TYPE ;  import    org . restheart . utils . ResponseHelper ;  import     org . restheart . handlers . files . PutFileHandler ;   public class RequestDispacherHandler  extends PipedHttpHandler  {   private final GetRootHandler  rootGet ;   private final GetDBHandler  dbGet ;   private final PutDBHandler  dbPut ;   private final DeleteDBHandler  dbDelete ;   private final PatchDBHandler  dbPatch ;   private final GetCollectionHandler  collectionGet ;   private final PostCollectionHandler  collectionPost ;   private final PutCollectionHandler  collectionPut ;   private final DeleteCollectionHandler  collectionDelete ;   private final PatchCollectionHandler  collectionPatch ;   private final GetDocumentHandler  documentGet ;   private final PutDocumentHandler  documentPut ;   private final DeleteDocumentHandler  documentDelete ;   private final PatchDocumentHandler  documentPatch ;   private final GetIndexesHandler  indexesGet ;   private final PutIndexHandler  indexPut ;   private final DeleteIndexHandler  indexDelete ;   public RequestDispacherHandler  ( )  {  super  ( null ) ;    this . rootGet =  new GetRootHandler  ( ) ;    this . dbGet =  new GetDBHandler  ( ) ;    this . dbPut =  new PutDBHandler  ( ) ;    this . dbDelete =  new DeleteDBHandler  ( ) ;    this . dbPatch =  new PatchDBHandler  ( ) ;    this . collectionGet =  new GetCollectionHandler  ( ) ;    this . collectionPost =  new PostCollectionHandler  ( ) ;    this . collectionPut =  new PutCollectionHandler  ( ) ;    this . collectionDelete =  new DeleteCollectionHandler  ( ) ;    this . collectionPatch =  new PatchCollectionHandler  ( ) ;    this . documentGet =  new GetDocumentHandler  ( ) ;    this . documentPut =  new PutDocumentHandler  ( ) ;    this . documentDelete =  new DeleteDocumentHandler  ( ) ;    this . documentPatch =  new PatchDocumentHandler  ( ) ;    this . indexesGet =  new GetIndexesHandler  ( ) ;    this . indexPut =  new PutIndexHandler  ( ) ;    this . indexDelete =  new DeleteIndexHandler  ( ) ;    this . filePut =  new PutFileHandler  ( ) ; }    @ Override public void handleRequest  (  HttpServerExchange exchange ,  RequestContext context )  throws Exception  {  if  (   context . getType  ( ) ==  TYPE . ERROR )  {   ResponseHelper . endExchange  ( exchange ,  HttpStatus . SC_BAD_REQUEST ) ;  return ; }  if  (   context . getMethod  ( ) ==  METHOD . OTHER )  {   ResponseHelper . endExchange  ( exchange ,  HttpStatus . SC_METHOD_NOT_ALLOWED ) ;  return ; }  if  (  context . isReservedResource  ( ) )  {   ResponseHelper . endExchangeWithMessage  ( exchange ,  HttpStatus . SC_FORBIDDEN , "reserved resource" ) ;  return ; }  if  (   context . getMethod  ( ) ==  METHOD . GET )  {  switch  (  context . getType  ( ) )  {   case ROOT :   rootGet . handleRequest  ( exchange , context ) ;  return ;   case DB :   dbGet . handleRequest  ( exchange , context ) ;  return ;   case COLLECTION :   collectionGet . handleRequest  ( exchange , context ) ;  return ;   case DOCUMENT :   documentGet . handleRequest  ( exchange , context ) ;  return ;   case COLLECTION_INDEXES :   indexesGet . handleRequest  ( exchange , context ) ;  return ;   default :   ResponseHelper . endExchange  ( exchange ,  HttpStatus . SC_METHOD_NOT_ALLOWED ) ; } } else  if  (   context . getMethod  ( ) ==  METHOD . POST )  {  switch  (  context . getType  ( ) )  {   case COLLECTION :   collectionPost . handleRequest  ( exchange , context ) ;  return ;   default :   ResponseHelper . endExchange  ( exchange ,  HttpStatus . SC_METHOD_NOT_ALLOWED ) ; } } else  if  (   context . getMethod  ( ) ==  METHOD . PUT )  {  switch  (  context . getType  ( ) )  {   case DB :   dbPut . handleRequest  ( exchange , context ) ;  return ;   case COLLECTION :   collectionPut . handleRequest  ( exchange , context ) ;  return ;   case DOCUMENT :   documentPut . handleRequest  ( exchange , context ) ;  return ;   case INDEX :   indexPut . handleRequest  ( exchange , context ) ;  return ;   default :   ResponseHelper . endExchange  ( exchange ,  HttpStatus . SC_METHOD_NOT_ALLOWED ) ; } } else  if  (   context . getMethod  ( ) ==  METHOD . DELETE )  {  switch  (  context . getType  ( ) )  {   case DB :   dbDelete . handleRequest  ( exchange , context ) ;  return ;   case COLLECTION :   collectionDelete . handleRequest  ( exchange , context ) ;  return ;   case DOCUMENT :   documentDelete . handleRequest  ( exchange , context ) ;  return ;   case INDEX :   indexDelete . handleRequest  ( exchange , context ) ;  return ;   default :   ResponseHelper . endExchange  ( exchange ,  HttpStatus . SC_METHOD_NOT_ALLOWED ) ; } } else  if  (   context . getMethod  ( ) ==  METHOD . PATCH )  {  switch  (  context . getType  ( ) )  {   case DB :   dbPatch . handleRequest  ( exchange , context ) ;  return ;   case COLLECTION :   collectionPatch . handleRequest  ( exchange , context ) ;  return ;   case DOCUMENT :   documentPatch . handleRequest  ( exchange , context ) ;  return ;   default :   ResponseHelper . endExchange  ( exchange ,  HttpStatus . SC_METHOD_NOT_ALLOWED ) ; } } else  {   ResponseHelper . endExchange  ( exchange ,  HttpStatus . SC_METHOD_NOT_ALLOWED ) ; } }   private final PutFileHandler  filePut ; }