  package    org . restheart . handlers . database ;   import     org . restheart . handlers . injectors . LocalCachesSingleton ;  import    org . restheart . handlers . PipedHttpHandler ;  import    org . restheart . utils . HttpStatus ;  import    org . restheart . handlers . RequestContext ;  import    org . restheart . utils . RequestHelper ;  import    org . restheart . utils . ResponseHelper ;  import    io . undertow . server . HttpServerExchange ;  import    io . undertow . util . Headers ;  import    org . bson . types . ObjectId ;  import    org . restheart . db . DbsDAO ;   public class DeleteDBHandler  extends PipedHttpHandler  {   public DeleteDBHandler  ( )  {  super  ( null ) ; }    @ Override public void handleRequest  (  HttpServerExchange exchange ,  RequestContext context )  throws Exception  {  ObjectId  etag =  RequestHelper . getWriteEtag  ( exchange ) ;  if  (  etag == null )  {   ResponseHelper . endExchangeWithMessage  ( exchange ,  HttpStatus . SC_CONFLICT ,   "the " +  Headers . ETAG + " header must be provided" ) ;  return ; }   final DbsDAO  dbsDAO =  new DbsDAO  ( ) ;   int  httpCode =  dbsDAO . deleteDB  (  context . getDBName  ( ) , etag ) ;   exchange . setResponseCode  ( httpCode ) ;  if  (    context . getWarnings  ( ) != null &&  !   context . getWarnings  ( ) . isEmpty  ( ) )  {   sendWarnings  ( httpCode , exchange , context ) ; } else  {   exchange . setResponseCode  ( httpCode ) ; }   exchange . endExchange  ( ) ;    LocalCachesSingleton . getInstance  ( ) . invalidateDb  (  context . getDBName  ( ) ) ; } }