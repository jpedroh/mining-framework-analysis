  package    org . restheart . handlers . document ;   import   com . mongodb . BasicDBObject ;  import   com . mongodb . DBObject ;  import    org . restheart . db . CollectionDAO ;  import    org . restheart . handlers . PipedHttpHandler ;  import    org . restheart . utils . HttpStatus ;  import    org . restheart . handlers . RequestContext ;  import    org . restheart . utils . RequestHelper ;  import    org . restheart . utils . ResponseHelper ;  import    org . restheart . utils . URLUtilis ;  import    io . undertow . server . HttpServerExchange ;  import   java . time . Instant ;  import    org . bson . types . ObjectId ;   public class GetDocumentHandler  extends PipedHttpHandler  {   public GetDocumentHandler  ( )  {  super  ( null ) ; }    @ Override public void handleRequest  (  HttpServerExchange exchange ,  RequestContext context )  throws Exception  {  ObjectId  oid ;  String  sid ;  if  (  ObjectId . isValid  (  context . getDocumentId  ( ) ) )  {   sid = null ;   oid =  new ObjectId  (  context . getDocumentId  ( ) ) ; } else  {   sid =  context . getDocumentId  ( ) ;   oid = null ; }  BasicDBObject  query ;  if  (  oid != null )  {   query =  new BasicDBObject  ( "_id" , oid ) ; } else  {   query =  new BasicDBObject  ( "_id" , sid ) ; }   final CollectionDAO  collectionDAO =  new CollectionDAO  ( ) ;  DBObject  document =   collectionDAO . getCollection  (  context . getDBName  ( ) ,  context . getCollectionName  ( ) ) . findOne  ( query ) ;  if  (  document == null )  {   ResponseHelper . endExchangeWithMessage  ( exchange ,  HttpStatus . SC_NOT_FOUND , "document does not exist" ) ;  return ; }  Object  etag =  document . get  ( "_etag" ) ;  if  (   etag != null &&  ObjectId . isValid  (  "" + etag ) )  {  ObjectId  _etag =  new ObjectId  (  "" + etag ) ;   document . put  ( "_lastupdated_on" ,   Instant . ofEpochSecond  (  _etag . getTimestamp  ( ) ) . toString  ( ) ) ;  if  (  RequestHelper . checkReadEtag  ( exchange ,  etag . toString  ( ) ) )  {   ResponseHelper . endExchange  ( exchange ,  HttpStatus . SC_NOT_MODIFIED ) ;  return ; } }  String  requestPath =  URLUtilis . removeTrailingSlashes  (  exchange . getRequestPath  ( ) ) ;   ResponseHelper . injectEtagHeader  ( exchange , document ) ;   exchange . setResponseCode  (  HttpStatus . SC_OK ) ;   DocumentRepresentationFactory . sendDocument  ( requestPath , exchange , context , document ) ;   exchange . endExchange  ( ) ; } }