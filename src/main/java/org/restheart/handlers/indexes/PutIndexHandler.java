  package    org . restheart . handlers . indexes ;   import   com . mongodb . BasicDBObject ;  import   com . mongodb . DBObject ;  import    org . restheart . db . IndexDAO ;  import    org . restheart . handlers . PipedHttpHandler ;  import    org . restheart . utils . HttpStatus ;  import    org . restheart . handlers . RequestContext ;  import     org . restheart . handlers . document . DocumentRepresentationFactory ;  import    org . restheart . utils . ResponseHelper ;  import    io . undertow . server . HttpServerExchange ;   public class PutIndexHandler  extends PipedHttpHandler  {   private static final BasicDBObject  fieldsToReturn ;  static  {   fieldsToReturn =  new BasicDBObject  ( ) ;   fieldsToReturn . put  ( "_id" , 1 ) ;   fieldsToReturn . put  ( "_created_on" , 1 ) ; }   public PutIndexHandler  ( )  {  super  ( null ) ; }    @ Override public void handleRequest  (  HttpServerExchange exchange ,  RequestContext context )  throws Exception  {  String  db =  context . getDBName  ( ) ;  String  co =  context . getCollectionName  ( ) ;  String  id =  context . getIndexId  ( ) ;  if  (  id . startsWith  ( "_" ) )  {   ResponseHelper . endExchangeWithMessage  ( exchange ,  HttpStatus . SC_NOT_ACCEPTABLE , "index name cannot start with _" ) ;  return ; }  DBObject  content =  context . getContent  ( ) ;  DBObject  keys =  ( DBObject )  content . get  ( "keys" ) ;  DBObject  ops =  ( DBObject )  content . get  ( "ops" ) ;  if  (  keys == null )  {   ResponseHelper . endExchangeWithMessage  ( exchange ,  HttpStatus . SC_NOT_ACCEPTABLE , "wrong request, content must include 'keys' object" , null ) ;  return ; }  if  (  ops == null )  {   ops =  new BasicDBObject  ( ) ; }   ops . put  ( "name" , id ) ;  try  {   final IndexDAO  indexDAO =  new IndexDAO  ( ) ;   indexDAO . createIndex  ( db , co , keys , ops ) ; }  catch (   Throwable t )  {   ResponseHelper . endExchangeWithMessage  ( exchange ,  HttpStatus . SC_NOT_ACCEPTABLE , "error creating the index" , t ) ;  return ; }   exchange . setResponseCode  (  HttpStatus . SC_CREATED ) ;  if  (    context . getWarnings  ( ) != null &&  !   context . getWarnings  ( ) . isEmpty  ( ) )  {   DocumentRepresentationFactory . sendDocument  (  exchange . getRequestPath  ( ) , exchange , context ,  new BasicDBObject  ( ) ) ; }   exchange . endExchange  ( ) ; } }