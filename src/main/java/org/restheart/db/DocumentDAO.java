  package   org . restheart . db ;   import   com . mongodb . BasicDBObject ;  import   com . mongodb . DB ;  import   com . mongodb . DBCollection ;  import   com . mongodb . DBObject ;  import   com . mongodb . MongoClient ;  import    org . restheart . utils . HttpStatus ;  import    org . restheart . utils . RequestHelper ;  import    org . restheart . utils . URLUtilis ;  import    io . undertow . server . HttpServerExchange ;  import    io . undertow . util . HttpString ;  import   java . net . URI ;  import   java . net . URISyntaxException ;  import   java . time . Instant ;  import    org . bson . types . ObjectId ;  import   org . slf4j . Logger ;  import   org . slf4j . LoggerFactory ;   public class DocumentDAO  implements  Repository  {   private final MongoClient  client =   MongoDBClientSingleton . getInstance  ( ) . getClient  ( ) ;   public DBCollection getCollection  (  String dbName ,  String collName )  {  return   client . getDB  ( dbName ) . getCollection  ( collName ) ; }   public  @ Override  int upsertDocument  (  String dbName ,  String collName ,  String documentId ,  DBObject content ,  ObjectId requestEtag ,  boolean patching )  {   final DbsDAO  dbsDAO =  new DbsDAO  ( ) ;  DB  db =  dbsDAO . getDB  ( dbName ) ;  DBCollection  coll =  db . getCollection  ( collName ) ;  ObjectId  timestamp =  new ObjectId  ( ) ;  Instant  now =  Instant . ofEpochSecond  (  timestamp . getTimestamp  ( ) ) ;  if  (  content == null )  {   content =  new BasicDBObject  ( ) ; }   content . put  ( "_etag" , timestamp ) ;  BasicDBObject  idQuery =  new BasicDBObject  ( "_id" ,  getId  ( documentId ) ) ;  if  ( patching )  {   content . removeField  ( "_created_on" ) ;  DBObject  oldDocument =  coll . findAndModify  ( idQuery , null , null , false ,  new BasicDBObject  ( "$set" , content ) , false , false ) ;  if  (  oldDocument == null )  {  return  HttpStatus . SC_NOT_FOUND ; } else  {  return  optimisticCheckEtag  ( coll , oldDocument , requestEtag ,  HttpStatus . SC_OK ) ; } } else  {   content . put  ( "_created_on" ,  now . toString  ( ) ) ;  DBObject  oldDocument =  coll . findAndModify  ( idQuery , null , null , false , content , false , true ) ;  if  (  oldDocument != null )  {  Object  oldTimestamp =  oldDocument . get  ( "_created_on" ) ;  if  (  oldTimestamp == null )  {   oldTimestamp =  now . toString  ( ) ;   LOGGER . warn  ( "properties of document /{}/{}/{} had no @created_on field. set to now" , dbName , collName , documentId ) ; }  BasicDBObject  created =  new BasicDBObject  ( "_created_on" ,  "" + oldTimestamp ) ;   created . markAsPartialObject  ( ) ;   coll . update  ( idQuery ,  new BasicDBObject  ( "$set" , created ) , true , false ) ;  return  optimisticCheckEtag  ( coll , oldDocument , requestEtag ,  HttpStatus . SC_OK ) ; } else  {  return  HttpStatus . SC_CREATED ; } } }   public  @ Override  int upsertDocumentPost  (  HttpServerExchange exchange ,  String dbName ,  String collName ,  DBObject content ,  ObjectId requestEtag )  {   final DbsDAO  dbsDAO =  new DbsDAO  ( ) ;  DB  db =  dbsDAO . getDB  ( dbName ) ;  DBCollection  coll =  db . getCollection  ( collName ) ;  ObjectId  timestamp =  new ObjectId  ( ) ;  Instant  now =  Instant . ofEpochSecond  (  timestamp . getTimestamp  ( ) ) ;  if  (  content == null )  {   content =  new BasicDBObject  ( ) ; }   content . put  ( "_etag" , timestamp ) ;   content . put  ( "_created_on" ,  now . toString  ( ) ) ;  Object  _id =  content . get  ( "_id" ) ;   content . removeField  ( "_id" ) ;  if  (  _id == null )  {  ObjectId  id =  new ObjectId  ( ) ;   content . put  ( "_id" , id ) ;   coll . insert  ( content ) ;    exchange . getResponseHeaders  ( ) . add  (  HttpString . tryFromString  ( "Location" ) ,   getReferenceLink  (  exchange . getRequestURL  ( ) ,  id . toString  ( ) ) . toString  ( ) ) ;  return  HttpStatus . SC_CREATED ; } else  {    exchange . getResponseHeaders  ( ) . add  (  HttpString . tryFromString  ( "Location" ) ,   getReferenceLink  (  exchange . getRequestURL  ( ) ,  _id . toString  ( ) ) . toString  ( ) ) ; }  BasicDBObject  idQuery =  new BasicDBObject  ( "_id" ,  getId  (  "" + _id ) ) ;  DBObject  oldDocument =  coll . findAndModify  ( idQuery , null , null , false , content , false , true ) ;  if  (  oldDocument != null )  {  Object  oldTimestamp =  oldDocument . get  ( "_created_on" ) ;  if  (  oldTimestamp == null )  {   oldTimestamp =  now . toString  ( ) ;   LOGGER . warn  ( "properties of document /{}/{}/{} had no @created_on field. set to now" , dbName , collName ,  _id . toString  ( ) ) ; }  BasicDBObject  createdContet =  new BasicDBObject  ( "_created_on" ,  "" + oldTimestamp ) ;   createdContet . markAsPartialObject  ( ) ;   coll . update  ( idQuery ,  new BasicDBObject  ( "$set" , createdContet ) , true , false ) ;  return  optimisticCheckEtag  ( coll , oldDocument , requestEtag ,  HttpStatus . SC_OK ) ; } else  {  return  HttpStatus . SC_CREATED ; } }   public  @ Override  int deleteDocument  (  String dbName ,  String collName ,  String documentId ,  ObjectId requestEtag )  {   final DbsDAO  dbsDAO =  new DbsDAO  ( ) ;  DB  db =  dbsDAO . getDB  ( dbName ) ;  DBCollection  coll =  db . getCollection  ( collName ) ;  BasicDBObject  idQuery =  new BasicDBObject  ( "_id" ,  getId  ( documentId ) ) ;  DBObject  oldDocument =  coll . findAndModify  ( idQuery , null , null , true , null , false , false ) ;  if  (  oldDocument == null )  {  return  HttpStatus . SC_NOT_FOUND ; } else  {  return  optimisticCheckEtag  ( coll , oldDocument , requestEtag ,  HttpStatus . SC_NO_CONTENT ) ; } }   private Object getId  (  String id )  {  if  (  id == null )  {  return  new ObjectId  ( ) ; }  if  (  ObjectId . isValid  ( id ) )  {  return  new ObjectId  ( id ) ; } else  {  return id ; } }   private  int optimisticCheckEtag  (  DBCollection coll ,  DBObject oldDocument ,  ObjectId requestEtag ,   int httpStatusIfOk )  {  if  (  requestEtag == null )  {   coll . save  ( oldDocument ) ;  return  HttpStatus . SC_CONFLICT ; }  Object  oldEtag =  RequestHelper . getEtagAsObjectId  (  oldDocument . get  ( "_etag" ) ) ;  if  (  oldEtag == null )  {  return  HttpStatus . SC_NO_CONTENT ; } else  {  if  (  oldEtag . equals  ( requestEtag ) )  {  return httpStatusIfOk ; } else  {   coll . save  ( oldDocument ) ;  return  HttpStatus . SC_PRECONDITION_FAILED ; } } }   private URI getReferenceLink  (  String parentUrl ,  String referencedName )  {  try  {  return  new URI  (    URLUtilis . removeTrailingSlashes  ( parentUrl ) + "/" + referencedName ) ; }  catch (   URISyntaxException ex )  {   LOGGER . error  ( "error creating URI from {} + / + {}" , parentUrl , referencedName , ex ) ; }  return null ; }   private static final Logger  LOGGER =  LoggerFactory . getLogger  (  DocumentDAO . class ) ;   public DocumentDAO  ( )  {   client =   MongoDBClientSingleton . getInstance  ( ) . getClient  ( ) ; } }