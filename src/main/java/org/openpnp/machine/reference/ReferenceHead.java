  package    org . openpnp . machine . reference ;   import   java . util . ArrayList ;  import   javax . swing . Action ;  import     org . openpnp . gui . support . PropertySheetWizardAdapter ;  import     org . openpnp . gui . support . Wizard ;  import      org . openpnp . machine . reference . psh . ActuatorsPropertySheetHolder ;  import      org . openpnp . machine . reference . psh . CamerasPropertySheetHolder ;  import      org . openpnp . machine . reference . psh . NozzlesPropertySheetHolder ;  import      org . openpnp . machine . reference . wizards . ReferenceHeadConfigurationWizard ;  import    org . openpnp . model . AxesLocation ;  import    org . openpnp . model . Configuration ;  import    org . openpnp . model . Location ;  import     org . openpnp . model . Motion . MotionOption ;  import    org . openpnp . model . Part ;  import    org . openpnp . model . Solutions ;  import    org . openpnp . spi . Axis ;  import    org . openpnp . spi . HeadMountable ;  import    org . openpnp . spi . PropertySheetHolder ;  import     org . openpnp . spi . base . AbstractHead ;  import     org . openpnp . spi . base . AbstractHeadMountable ;  import    org . pmw . tinylog . Logger ;  import    org . simpleframework . xml . Attribute ;   public class ReferenceHead  extends AbstractHead  {    @ Override public void home  ( )  throws Exception  {   Logger . debug  ( "{}.home()" ,  getName  ( ) ) ;  ReferenceMachine  machine =  getMachine  ( ) ;   visualHome  ( machine , true ) ;   super . home  ( ) ;    getMachine  ( ) . fireMachineHeadActivity  ( this ) ; }    @ Override public Wizard getConfigurationWizard  ( )  {  return  new ReferenceHeadConfigurationWizard  ( this ) ; }    @ Override public String getPropertySheetHolderTitle  ( )  {  return     getClass  ( ) . getSimpleName  ( ) + " " +  getName  ( ) ; }    @ Override public  PropertySheetHolder  [ ] getChildPropertySheetHolders  ( )  {   ArrayList  < PropertySheetHolder >  children =  new  ArrayList  < >  ( ) ;   children . add  (  new NozzlesPropertySheetHolder  ( this , "Nozzles" ,  getNozzles  ( ) , null ) ) ;   children . add  (  new CamerasPropertySheetHolder  ( this , "Cameras" ,  getCameras  ( ) , null ) ) ;   children . add  (  new ActuatorsPropertySheetHolder  ( this , "Actuators" ,  getActuators  ( ) , null ) ) ;  return  children . toArray  (  new PropertySheetHolder  [ ]  { } ) ; }    @ Override public  PropertySheet  [ ] getPropertySheets  ( )  {  return  new PropertySheet  [ ]  {  new PropertySheetWizardAdapter  (  getConfigurationWizard  ( ) ) } ; }    @ Override public  Action  [ ] getPropertySheetHolderActions  ( )  {  return null ; }    @ Override public void moveToSafeZ  (   double speed )  throws Exception  {   Logger . debug  ( "{}.moveToSafeZ({})" ,  getName  ( ) , speed ) ;   super . moveToSafeZ  ( speed ) ; }    @ Override public boolean isInsideSoftLimits  (  HeadMountable hm ,  Location location )  throws Exception  {  if  (  hm instanceof ReferenceHeadMountable )  {  Location  headLocation =   (  ( AbstractHeadMountable ) hm ) . toHeadLocation  ( location ) ;  AxesLocation  axesLocation =   (  ( AbstractHeadMountable ) hm ) . toRaw  ( headLocation ) ;  return  (    getMachine  ( ) . getMotionPlanner  ( ) . isValidLocation  ( axesLocation ) ) ; }  return true ; }    @ Override public void moveTo  (  HeadMountable hm ,  Location location ,   double speed ,  MotionOption ...  options )  throws Exception  {  ReferenceMachine  machine =  getMachine  ( ) ;  AxesLocation  mappedAxes =  hm . getMappedAxes  ( machine ) ;  if  (  !  mappedAxes . isEmpty  ( ) )  {  AxesLocation  axesLocation =  hm . toRaw  ( location ) ;    machine . getMotionPlanner  ( ) . moveTo  ( hm , axesLocation , speed , options ) ; } }    @ Override public String toString  ( )  {  return  getName  ( ) ; }   public ReferenceMachine getMachine  ( )  {  return  ( ReferenceMachine )   Configuration . get  ( ) . getMachine  ( ) ; }  enum NozzleSolution  {  Standalone ,  DualNegated ,  DualCam }    @ Attribute  (  required = false ) private NozzleSolution  nozzleSolution ;    @ Attribute  (  required = false )  int  nozzleSolutionsMultiplier = 1 ;  NozzleSolution getNozzleSolution  ( )  {  return nozzleSolution ; }  void setNozzleSolution  (  NozzleSolution nozzleSolution )  {    this . nozzleSolution = nozzleSolution ; }   int getNozzleSolutionsMultiplier  ( )  {  return nozzleSolutionsMultiplier ; }  void setNozzleSolutionsMultiplier  (   int nozzleSolutionsMultiplier )  {    this . nozzleSolutionsMultiplier = nozzleSolutionsMultiplier ; }    @ Override public void findIssues  (  Solutions solutions )  {    new HeadSolutions  ( this ) . findIssues  ( solutions ) ;   super . findIssues  ( solutions ) ; }   public void visualHome  (  ReferenceMachine machine ,  boolean apply )  throws Exception  {  if  (   getVisualHomingMethod  ( ) !=  VisualHomingMethod . None )  {  HeadMountable  hm =  getDefaultCamera  ( ) ;  Part  homePart =   Configuration . get  ( ) . getPart  ( "FIDUCIAL-HOME" ) ;  if  (  homePart == null )  {  throw  new Exception  ( "Visual homing is missing the FIDUCIAL-HOME part. Please create it." ) ; }  Location  homingLocation =     Configuration . get  ( ) . getMachine  ( ) . getFiducialLocator  ( ) . getHomeFiducialLocation  (  getHomingFiducialLocation  ( ) , homePart ) ;  if  (  homingLocation == null )  {  throw  new Exception  ( "Visual homing failed" ) ; }  if  ( apply )  {  AxesLocation  axesHomingLocation ;  if  (   getVisualHomingMethod  ( ) ==  VisualHomingMethod . ResetToFiducialLocation )  {   axesHomingLocation =  hm . toRaw  (  hm . toHeadLocation  (  getHomingFiducialLocation  ( ) ) ) ; } else  {   axesHomingLocation =  new AxesLocation  ( machine ,   ( axis ) ->  (  axis . getHomeCoordinate  ( ) ) ) ; }   axesHomingLocation =  axesHomingLocation . byType  (   Axis . Type . X ,   Axis . Type . Y ) ;    machine . getMotionPlanner  ( ) . setGlobalOffsets  ( axesHomingLocation ) ; } } } }