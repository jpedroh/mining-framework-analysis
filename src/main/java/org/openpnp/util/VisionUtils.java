  package   org . openpnp . util ;   import    java . awt . image . BufferedImage ;  import   java . util . Collections ;  import   java . util . Comparator ;  import   java . util . HashMap ;  import   java . util . List ;  import   java . util . Map ;  import    org . openpnp . model . BoardLocation ;  import    org . openpnp . model . Configuration ;  import    org . openpnp . model . Length ;  import    org . openpnp . model . Location ;  import    org . openpnp . model . Part ;  import    org . openpnp . model . Point ;  import    org . openpnp . spi . Camera ;  import    org . openpnp . spi . HeadMountable ;  import    org . openpnp . spi . Nozzle ;  import    org . openpnp . spi . PartAlignment ;  import    org . pmw . tinylog . Logger ;  import    com . google . zxing . BinaryBitmap ;  import    com . google . zxing . MultiFormatReader ;  import    com . google . zxing . Result ;  import      com . google . zxing . client . j2se . BufferedImageLuminanceSource ;  import     com . google . zxing . common . HybridBinarizer ;   public class VisionUtils  {   public static String  PIPELINE_RESULTS_NAME = "results" ;   public static Location getPixelCenterOffsets  (  Camera camera ,   double x ,   double y )  {   double  imageWidth =  camera . getWidth  ( ) ;   double  imageHeight =  camera . getHeight  ( ) ;   double  offsetX =  x -  (  imageWidth / 2 ) ;   double  offsetY =   (  imageHeight / 2 ) - y ;  Location  unitsPerPixel =  camera . getUnitsPerPixel  ( ) ;   offsetX *=  unitsPerPixel . getX  ( ) ;   offsetY *=  unitsPerPixel . getY  ( ) ;  return  new Location  (   camera . getUnitsPerPixel  ( ) . getUnits  ( ) , offsetX , offsetY , 0 , 0 ) ; }   public static Location getPixelLocation  (  Camera camera ,   double x ,   double y )  {  return   camera . getLocation  ( ) . add  (  getPixelCenterOffsets  ( camera , x , y ) ) ; }   public static Location getPixelLocation  (  Camera camera ,  HeadMountable tool ,   double x ,   double y )  {  return   camera . getLocation  ( tool ) . add  (  getPixelCenterOffsets  ( camera , x , y ) ) ; }   public static  double getPixelAngle  (  Camera camera ,   double angle )  {  return  - angle ; }   public static  List  < Location > sortLocationsByDistance  (   final Location origin ,   List  < Location > locations )  {   Collections . sort  ( locations ,  new  Comparator  < Location >  ( )  {   public  int compare  (  Location o1 ,  Location o2 )  {  Double  o1d =  origin . getLinearDistanceTo  ( o1 ) ;  Double  o2d =  origin . getLinearDistanceTo  ( o2 ) ;  return  o1d . compareTo  ( o2d ) ; } } ) ;  return locations ; }   public static Camera getBottomVisionCamera  ( )  throws Exception  {  for ( Camera camera :    Configuration . get  ( ) . getMachine  ( ) . getCameras  ( ) )  {  if  (   camera . getLooking  ( ) ==   Camera . Looking . Up )  {  return camera ; } }  throw  new Exception  ( "No up-looking camera found on the machine to use for bottom vision." ) ; }   public static  double toPixels  (  Length length ,  Camera camera )  {  Location  unitsPerPixel =  camera . getUnitsPerPixel  ( ) ;   length =  length . convertToUnits  (  unitsPerPixel . getUnits  ( ) ) ;   double  avgUnitsPerPixel =   (   unitsPerPixel . getX  ( ) +  unitsPerPixel . getY  ( ) ) / 2 ;  return   length . getValue  ( ) / avgUnitsPerPixel ; }   public static Point getLocationPixels  (  Camera camera ,  Location location )  {  return  getLocationPixels  ( camera , null , location ) ; }   public static Point getLocationPixels  (  Camera camera ,  HeadMountable tool ,  Location location )  {  Location  unitsPerPixel =  camera . getUnitsPerPixel  ( ) ;   location =    location . convertToUnits  (  unitsPerPixel . getUnits  ( ) ) . subtract  (  camera . getLocation  ( tool ) ) . multiply  (  1. /  unitsPerPixel . getX  ( ) ,   - 1. /  unitsPerPixel . getY  ( ) , 0. , 0. ) ;  return  new Point  (   location . getX  ( ) +   camera . getWidth  ( ) / 2 ,   location . getY  ( ) +   camera . getHeight  ( ) / 2 ) ; }   public static String readQrCode  (  Camera camera )  {  return  scanBarcode  ( camera ) ; }   public static String scanBarcode  (  Camera camera )  {  BufferedImage  image =  camera . settleAndCapture  ( ) ;  BinaryBitmap  binaryBitmap =  new BinaryBitmap  (  new HybridBinarizer  (  new BufferedImageLuminanceSource  ( image ) ) ) ;  try  {  Result  qrCodeResult =   new MultiFormatReader  ( ) . decode  ( binaryBitmap ) ;  return  qrCodeResult . getText  ( ) ; }  catch (   Exception e )  {  return null ; } }   public static  PartAlignment . PartAlignmentOffset findPartAlignmentOffsets  (  PartAlignment p ,  Part part ,  BoardLocation boardLocation ,  Location placementLocation ,  Nozzle nozzle )  throws Exception  {  try  {   Map  < String , Object >  globals =  new  HashMap  < >  ( ) ;   globals . put  ( "part" , part ) ;   globals . put  ( "nozzle" , nozzle ) ;     Configuration . get  ( ) . getScripting  ( ) . on  ( "Vision.PartAlignment.Before" , globals ) ; }  catch (   Exception e )  {   Logger . warn  ( e ) ; }  try  {  return  p . findOffsets  ( part , boardLocation , placementLocation , nozzle ) ; }  finally  {  try  {   Map  < String , Object >  globals =  new  HashMap  < >  ( ) ;   globals . put  ( "part" , part ) ;   globals . put  ( "nozzle" , nozzle ) ;     Configuration . get  ( ) . getScripting  ( ) . on  ( "Vision.PartAlignment.After" , globals ) ; }  catch (   Exception e )  {   Logger . warn  ( e ) ; } } } }