  package   org . owasp . esapi ;   public interface Logger  {  EventType  SECURITY_SUCCESS =  new EventType  ( "SECURITY SUCCESS" , true ) ;  EventType  SECURITY_FAILURE =  new EventType  ( "SECURITY FAILURE" , false ) ;  EventType  SECURITY_AUDIT =  new EventType  ( "SECURITY AUDIT" , null ) ;  EventType  EVENT_SUCCESS =  new EventType  ( "EVENT SUCCESS" , true ) ;  EventType  EVENT_FAILURE =  new EventType  ( "EVENT FAILURE" , false ) ;  EventType  EVENT_UNSPECIFIED =  new EventType  ( "EVENT UNSPECIFIED" , null ) ;  class EventType  {   private String  type ;   private Boolean  success = null ;   public EventType  (  String name ,  Boolean newSuccess )  {    this . type = name ;    this . success = newSuccess ; }   public Boolean isSuccess  ( )  {  return success ; }    @ Override public String toString  ( )  {  return  this . type ; } }   int  OFF =  Integer . MAX_VALUE ;   int  FATAL = 1000 ;   int  ERROR = 800 ;   int  WARNING = 600 ;   int  INFO = 400 ;   int  DEBUG = 200 ;   int  TRACE = 100 ;   int  ALL =  Integer . MIN_VALUE ;  void setLevel  (   int level ) ;   int getESAPILevel  ( ) ;  void fatal  (  EventType type ,  String message ) ;  void fatal  (  EventType type ,  String message ,  Throwable throwable ) ;  boolean isFatalEnabled  ( ) ;  void error  (  EventType type ,  String message ) ;  void error  (  EventType type ,  String message ,  Throwable throwable ) ;  boolean isErrorEnabled  ( ) ;  void warning  (  EventType type ,  String message ) ;  void warning  (  EventType type ,  String message ,  Throwable throwable ) ;  boolean isWarningEnabled  ( ) ;  void info  (  EventType type ,  String message ) ;  void info  (  EventType type ,  String message ,  Throwable throwable ) ;  boolean isInfoEnabled  ( ) ;  void debug  (  EventType type ,  String message ) ;  void debug  (  EventType type ,  String message ,  Throwable throwable ) ;  boolean isDebugEnabled  ( ) ;  void trace  (  EventType type ,  String message ) ;  void trace  (  EventType type ,  String message ,  Throwable throwable ) ;  boolean isTraceEnabled  ( ) ;  void always  (  EventType type ,  String message ) ;  void always  (  EventType type ,  String message ,  Throwable throwable ) ; }