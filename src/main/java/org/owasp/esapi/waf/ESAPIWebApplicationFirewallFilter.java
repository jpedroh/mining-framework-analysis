  package    org . owasp . esapi . waf ;   import   java . io . File ;  import   java . io . FileInputStream ;  import   java . io . FileNotFoundException ;  import   java . io . IOException ;  import   java . util . List ;  import   javax . servlet . Filter ;  import   javax . servlet . FilterChain ;  import   javax . servlet . FilterConfig ;  import   javax . servlet . ServletException ;  import   javax . servlet . ServletRequest ;  import   javax . servlet . ServletResponse ;  import    javax . servlet . http . HttpServletRequest ;  import    javax . servlet . http . HttpServletResponse ;  import     org . apache . commons . fileupload . FileUploadException ;  import    org . owasp . esapi . ESAPI ;  import    org . owasp . esapi . Logger ;  import      org . owasp . esapi . waf . actions . Action ;  import      org . owasp . esapi . waf . actions . BlockAction ;  import      org . owasp . esapi . waf . actions . DefaultAction ;  import      org . owasp . esapi . waf . actions . RedirectAction ;  import      org . owasp . esapi . waf . configuration . AppGuardianConfiguration ;  import      org . owasp . esapi . waf . configuration . ConfigurationParser ;  import      org . owasp . esapi . waf . internal . InterceptingHTTPServletRequest ;  import      org . owasp . esapi . waf . internal . InterceptingHTTPServletResponse ;  import      org . owasp . esapi . waf . rules . Rule ;   public class ESAPIWebApplicationFirewallFilter  implements  Filter  {   private AppGuardianConfiguration  appGuardConfig ;   private static final String  CONFIGURATION_FILE_PARAM = "configuration" ;   private static final String  LOGGING_FILE_PARAM = "log_settings" ;   private static final String  POLLING_TIME_PARAM = "polling_time" ;   private static final  int  DEFAULT_POLLING_TIME = 30000 ;   private String  configurationFilename = null ;   private  long  pollingTime ;   private  long  lastConfigReadTime ;   private FilterConfig  fc ;   private final Logger  logger =  ESAPI . getLogger  (  ESAPIWebApplicationFirewallFilter . class ) ;   public void setConfiguration  (  String policyFilePath ,  String webRootDir )  throws FileNotFoundException  {  FileInputStream  inputStream = null ;  try  {   inputStream =  new FileInputStream  (  new File  ( policyFilePath ) ) ;   appGuardConfig =  ConfigurationParser . readConfigurationFile  ( inputStream , webRootDir ) ;   lastConfigReadTime =  System . currentTimeMillis  ( ) ;   configurationFilename = policyFilePath ; }  catch (   ConfigurationException e )  {   e . printStackTrace  ( ) ; }  finally  {  if  (  inputStream != null )  {  try  {   inputStream . close  ( ) ; }  catch (   IOException e )  {   e . printStackTrace  ( ) ; } } } }   public AppGuardianConfiguration getConfiguration  ( )  {  return appGuardConfig ; }   public void init  (  FilterConfig fc )  throws ServletException  {    this . fc = fc ;   logger . debug  (  Logger . EVENT_SUCCESS , ">> Initializing WAF" ) ;   configurationFilename =  fc . getInitParameter  ( CONFIGURATION_FILE_PARAM ) ;   configurationFilename =   fc . getServletContext  ( ) . getRealPath  ( configurationFilename ) ;  if  (   configurationFilename == null ||  !   new File  ( configurationFilename ) . exists  ( ) )  {  throw  new ServletException  (  "[ESAPI WAF] Could not find configuration file at resolved path: " + configurationFilename ) ; }  String  sPollingTime =  fc . getInitParameter  ( POLLING_TIME_PARAM ) ;  if  (  sPollingTime != null )  {   pollingTime =  Long . parseLong  ( sPollingTime ) ; } else  {   pollingTime = DEFAULT_POLLING_TIME ; }  FileInputStream  inputStream = null ;  try  {  String  webRootDir =   fc . getServletContext  ( ) . getRealPath  ( "/" ) ;   inputStream =  new FileInputStream  ( configurationFilename ) ;   appGuardConfig =  ConfigurationParser . readConfigurationFile  ( inputStream , webRootDir ) ;   lastConfigReadTime =  System . currentTimeMillis  ( ) ; }  catch (   FileNotFoundException e )  {  throw  new ServletException  ( e ) ; }  catch (   ConfigurationException e )  {  throw  new ServletException  ( e ) ; }  finally  {  if  (  inputStream != null )  {  try  {   inputStream . close  ( ) ; }  catch (   IOException e )  {   e . printStackTrace  ( ) ; } } } }   public void doFilter  (  ServletRequest servletRequest ,  ServletResponse servletResponse ,  FilterChain chain )  throws IOException , ServletException  {  if  (   (   System . currentTimeMillis  ( ) - lastConfigReadTime ) > pollingTime )  {  File  f =  new File  ( configurationFilename ) ;   long  lastModified =  f . lastModified  ( ) ;  if  (  lastModified > lastConfigReadTime )  {   logger . debug  (  Logger . EVENT_SUCCESS , ">> Re-reading WAF policy" ) ;   init  ( fc ) ; } }   logger . debug  (  Logger . EVENT_SUCCESS , ">>In WAF doFilter" ) ;  HttpServletRequest  httpRequest =  ( HttpServletRequest ) servletRequest ;  HttpServletResponse  httpResponse =  ( HttpServletResponse ) servletResponse ;  InterceptingHTTPServletRequest  request = null ;  InterceptingHTTPServletResponse  response = null ;  if  (     appGuardConfig . getCookieRules  ( ) . size  ( ) +   appGuardConfig . getBeforeResponseRules  ( ) . size  ( ) > 0 )  {   response =  new InterceptingHTTPServletResponse  ( httpResponse , true ,  appGuardConfig . getCookieRules  ( ) ) ; }   logger . debug  (  Logger . EVENT_SUCCESS , ">> Starting stage 1" ) ;   List  < Rule >  rules =   this . appGuardConfig . getBeforeBodyRules  ( ) ;  for (   int  i = 0 ;  i <  rules . size  ( ) ;  i ++ )  {  Rule  rule =  rules . get  ( i ) ;   logger . debug  (  Logger . EVENT_SUCCESS ,  "  Applying BEFORE rule:  " +   rule . getClass  ( ) . getName  ( ) ) ;  Action  action =  rule . check  ( httpRequest , response , httpResponse ) ;  if  (  action . isActionNecessary  ( ) )  {  if  (  action instanceof BlockAction )  {  if  (  response != null )  {   response . setStatus  (  appGuardConfig . getDefaultResponseCode  ( ) ) ; } else  {   httpResponse . setStatus  (  appGuardConfig . getDefaultResponseCode  ( ) ) ; }  return ; } else  if  (  action instanceof RedirectAction )  {   sendRedirect  ( response , httpResponse ,   (  ( RedirectAction ) action ) . getRedirectURL  ( ) ) ;  return ; } else  if  (  action instanceof DefaultAction )  {  switch  (  AppGuardianConfiguration . DEFAULT_FAIL_ACTION )  {   case  AppGuardianConfiguration . BLOCK :  if  (  response != null )  {   response . setStatus  (  appGuardConfig . getDefaultResponseCode  ( ) ) ; } else  {   httpResponse . setStatus  (  appGuardConfig . getDefaultResponseCode  ( ) ) ; }  return ;   case  AppGuardianConfiguration . REDIRECT :   sendRedirect  ( response , httpResponse ) ;  return ; } } } }  try  {   request =  new InterceptingHTTPServletRequest  (  ( HttpServletRequest ) servletRequest ) ; }  catch (   FileUploadException fue )  {   logger . error  (  Logger . EVENT_SUCCESS , "Error Wrapping Request" , fue ) ; }   logger . debug  (  Logger . EVENT_SUCCESS , ">> Starting Stage 2" ) ;   rules =   this . appGuardConfig . getAfterBodyRules  ( ) ;  for (   int  i = 0 ;  i <  rules . size  ( ) ;  i ++ )  {  Rule  rule =  rules . get  ( i ) ;   logger . debug  (  Logger . EVENT_SUCCESS ,  "  Applying BEFORE CHAIN rule:  " +   rule . getClass  ( ) . getName  ( ) ) ;  Action  action =  rule . check  ( request , response , httpResponse ) ;  if  (  action . isActionNecessary  ( ) )  {  if  (  action instanceof BlockAction )  {  if  (  response != null )  {   response . setStatus  (  appGuardConfig . getDefaultResponseCode  ( ) ) ; } else  {   httpResponse . setStatus  (  appGuardConfig . getDefaultResponseCode  ( ) ) ; }  return ; } else  if  (  action instanceof RedirectAction )  {   sendRedirect  ( response , httpResponse ,   (  ( RedirectAction ) action ) . getRedirectURL  ( ) ) ;  return ; } else  if  (  action instanceof DefaultAction )  {  switch  (  AppGuardianConfiguration . DEFAULT_FAIL_ACTION )  {   case  AppGuardianConfiguration . BLOCK :  if  (  response != null )  {   response . setStatus  (  appGuardConfig . getDefaultResponseCode  ( ) ) ; } else  {   httpResponse . setStatus  (  appGuardConfig . getDefaultResponseCode  ( ) ) ; }  return ;   case  AppGuardianConfiguration . REDIRECT :   sendRedirect  ( response , httpResponse ) ;  return ; } } } }   logger . debug  (  Logger . EVENT_SUCCESS ,  ">> Calling the FilterChain: " + chain ) ;   chain . doFilter  ( request ,   response != null ? response : httpResponse ) ;   logger . debug  (  Logger . EVENT_SUCCESS , ">> Starting Stage 3" ) ;   rules =   this . appGuardConfig . getBeforeResponseRules  ( ) ;  for (   int  i = 0 ;  i <  rules . size  ( ) ;  i ++ )  {  Rule  rule =  rules . get  ( i ) ;   logger . debug  (  Logger . EVENT_SUCCESS ,  "  Applying AFTER CHAIN rule:  " +   rule . getClass  ( ) . getName  ( ) ) ;  Action  action =  rule . check  ( request , response , httpResponse ) ;  if  (  action . isActionNecessary  ( ) )  {  if  (  action instanceof BlockAction )  {  if  (  response != null )  {   response . setStatus  (  appGuardConfig . getDefaultResponseCode  ( ) ) ; } else  {   httpResponse . setStatus  (  appGuardConfig . getDefaultResponseCode  ( ) ) ; }  return ; } else  if  (  action instanceof RedirectAction )  {   sendRedirect  ( response , httpResponse ,   (  ( RedirectAction ) action ) . getRedirectURL  ( ) ) ;  return ; } else  if  (  action instanceof DefaultAction )  {  switch  (  AppGuardianConfiguration . DEFAULT_FAIL_ACTION )  {   case  AppGuardianConfiguration . BLOCK :  if  (  response != null )  {   response . setStatus  (  appGuardConfig . getDefaultResponseCode  ( ) ) ; } else  {   httpResponse . setStatus  (  appGuardConfig . getDefaultResponseCode  ( ) ) ; }  return ;   case  AppGuardianConfiguration . REDIRECT :   sendRedirect  ( response , httpResponse ) ;  return ; } } } }  if  (  response != null )  {   logger . debug  (  Logger . EVENT_SUCCESS , ">>> committing reponse" ) ;   response . commit  ( ) ; } }   private void sendRedirect  (  InterceptingHTTPServletResponse response ,  HttpServletResponse httpResponse ,  String redirectURL )  throws IOException  {  if  (  response != null )  {   response . reset  ( ) ;   response . resetBuffer  ( ) ;   response . sendRedirect  ( redirectURL ) ;   response . commit  ( ) ; } else  {   httpResponse . sendRedirect  ( redirectURL ) ; } }   public void destroy  ( )  { }   private void sendRedirect  (  InterceptingHTTPServletResponse response ,  HttpServletResponse httpResponse )  throws IOException  {  if  (  response != null )  {   response . reset  ( ) ;   response . resetBuffer  ( ) ;   response . sendRedirect  (  appGuardConfig . getDefaultErrorPage  ( ) ) ; } else  {  if  (  !  httpResponse . isCommitted  ( ) )  {   httpResponse . sendRedirect  (  appGuardConfig . getDefaultErrorPage  ( ) ) ; } else  { } } } }