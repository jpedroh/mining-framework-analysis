  package   org . jvnet . libpam ;   import     org . jvnet . libpam . impl . PAMLibrary .  * ;  import static     org . jvnet . libpam . impl . PAMLibrary .  * ;  import       org . jvnet . libpam . impl . PAMLibrary . pam_conv . PamCallback ;  import      org . jvnet . libpam . impl . CLibrary . passwd ;  import static      org . jvnet . libpam . impl . CLibrary . libc ;  import    com . sun . jna . Pointer ;  import static     com . sun . jna . Native . POINTER_SIZE ;  import     com . sun . jna . ptr . PointerByReference ;  import   java . util . Set ;  import    java . util . logging . Logger ;   public class PAM  {   private pam_handle_t  pht ;   private  int  ret ;   private String  password ;   public PAM  (  String serviceName )  throws PAMException  { 
<<<<<<<
 pam_conv  conv =  new pam_conv  (  new PamCallback  ( )  {   public  int callback  (   int num_msg ,  Pointer msg ,  Pointer resp ,  Pointer __ )  {   LOGGER . fine  (  "pam_conv num_msg=" + num_msg ) ;  if  (  password == null )  return PAM_CONV_ERR ;  Pointer  m =  libc . calloc  (  pam_response . SIZE , num_msg ) ;   resp . setPointer  ( 0 , m ) ;  for (   int  i = 0 ;  i < num_msg ;  i ++ )  {  pam_message  pm =  new pam_message  (  msg . getPointer  (  POINTER_SIZE * i ) ) ;   LOGGER . fine  (    pm . msg_style + ":" +  pm . msg ) ;  if  (   pm . msg_style == PAM_PROMPT_ECHO_OFF )  {  pam_response  r =  new pam_response  (  m . share  (   pam_response . SIZE * i ) ) ;   r . setResp  ( password ) ;   r . write  ( ) ; } }  return PAM_SUCCESS ; } } ) ;
=======
  conv =  new pam_conv  (  new PamCallback  ( )  {   public  int callback  (   int num_msg ,  Pointer msg ,  Pointer resp ,  Pointer _ )  {   LOGGER . fine  (  "pam_conv num_msg=" + num_msg ) ;  if  (  password == null )  return PAM_CONV_ERR ;  Pointer  m =  libc . calloc  (  pam_response . SIZE , num_msg ) ;   resp . setPointer  ( 0 , m ) ;  for (   int  i = 0 ;  i < num_msg ;  i ++ )  {  pam_message  pm =  new pam_message  (  msg . getPointer  (  POINTER_SIZE * i ) ) ;   LOGGER . fine  (    pm . msg_style + ":" +  pm . msg ) ;  if  (   pm . msg_style == PAM_PROMPT_ECHO_OFF )  {  pam_response  r =  new pam_response  (  m . share  (   pam_response . SIZE * i ) ) ;   r . setResp  ( password ) ;   r . write  ( ) ; } }  return PAM_SUCCESS ; } } ) ;
>>>>>>>
  PointerByReference  phtr =  new PointerByReference  ( ) ;   check  (  libpam . pam_start  ( serviceName , null , conv , phtr ) , "pam_start failed" ) ;   pht =  new pam_handle_t  (  phtr . getValue  ( ) ) ; }   private void check  (   int ret ,  String msg )  throws PAMException  {    this . ret = ret ;  if  (  ret != 0 )  {  if  (  pht != null )  throw  new PAMException  (   msg + " : " +  libpam . pam_strerror  ( pht , ret ) ) ; else  throw  new PAMException  ( msg ) ; } }   public UnixUser authenticate  (  String username ,  String password )  throws PAMException  {    this . password = password ;  try  {   check  (  libpam . pam_set_item  ( pht , PAM_USER , username ) , "pam_set_item failed" ) ;   check  (  libpam . pam_authenticate  ( pht , 0 ) , "pam_authenticate failed" ) ;   check  (  libpam . pam_setcred  ( pht , 0 ) , "pam_setcred failed" ) ;   check  (  libpam . pam_acct_mgmt  ( pht , 0 ) , "pam_acct_mgmt failed" ) ;  PointerByReference  r =  new PointerByReference  ( ) ;   check  (  libpam . pam_get_item  ( pht , PAM_USER , r ) , "pam_get_item failed" ) ;  String  userName =   r . getValue  ( ) . getString  ( 0 ) ;  passwd  pwd =  libc . getpwnam  ( userName ) ;  if  (  pwd == null )  throw  new PAMException  ( "Authentication succeeded but no user information is available" ) ;  return  new UnixUser  ( userName , pwd ) ; }  finally  {    this . password = null ; } }   public  Set  < String > getGroupsOfUser  (  String username )  throws PAMException  {  return   new UnixUser  ( username ) . getGroups  ( ) ; }   public void dispose  ( )  {  if  (  pht != null )  {   libpam . pam_end  ( pht , ret ) ;   pht = null ; } }    @ Override protected void finalize  ( )  throws Throwable  {   super . finalize  ( ) ;   dispose  ( ) ; }   private static final Logger  LOGGER =  Logger . getLogger  (   PAM . class . getName  ( ) ) ;   private pam_conv  conv ; }