/*
 * BioJava development code
 *
 * This code may be freely distributed and modified under the
 * terms of the GNU Lesser General Public Licence. This should
 * be distributed with the code. If you do not have a copy,
 * see:
 *
 * http://www.gnu.org/copyleft/lesser.html
 *
 * Copyright for this code is held jointly by the individual
 * authors. These should be listed in @author doc comments.
 *
 * For more information on the BioJava project and its aims,
 * or to join the biojava-l mailing list, visit the home page
 * at:
 *
 * http://www.biojava.org/
 *
 * This code was contributed from the Molecular Biology Toolkit
 * (MBT) project at the University of California San Diego.
 *
 * Please reference J.L. Moreland, A.Gramada, O.V. Buzko, Qing
 * Zhang and P.E. Bourne 2005 The Molecular Biology Toolkit (MBT):
 * A Modular Platform for Developing Molecular Visualization
 * Applications. BMC Bioinformatics, 6:21.
 *
 * The MBT project was funded as part of the National Institutes
 * of Health PPG grant number 1-P01-GM63208 and its National
 * Institute of General Medical Sciences (NIGMS) division. Ongoing
 * development for the MBT project is managed by the RCSB
 * Protein Data Bank(http://www.pdb.org) and supported by funds
 * from the National Science Foundation (NSF), the National
 * Institute of General Medical Sciences (NIGMS), the Office of
 * Science, Department of Energy (DOE), the National Library of
 * Medicine (NLM), the National Cancer Institute (NCI), the
 * National Center for Research Resources (NCRR), the National
 * Institute of Biomedical Imaging and Bioengineering (NIBIB),
 * the National Institute of Neurological Disorders and Stroke
 * (NINDS), and the National Institute of Diabetes and Digestive
 * and Kidney Diseases (NIDDK).
 *
 * Created on 2011/11/08
 *
 */
package org.jcolorbrewer;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;


/**
 * The data values were extracted from the RColorBrewer R package.
 * See http://www.datavis.ca/sas/macros/color/brewer.sas
 * @author Peter Rose
 *
 */
public enum ColorBrewer {

	BrBG(1, "Brown-Blue-Green", true, new int[][]{ new int[]{ 0xd8b365 }, new int[]{ 0xd8b365, 0x5ab4ac }, new int[]{ 0xd8b365, 0xf5f5f5, 0x5ab4ac }, new int[]{ 0xa6611a, 0xdfc27d, 0x80cdc1, 0x18571 }, new int[]{ 0xa6611a, 0xdfc27d, 0xf5f5f5, 0x80cdc1, 0x18571 }, new int[]{ 0x8c510a, 0xd8b365, 0xf6e8c3, 0xc7eae5, 0x5ab4ac, 0x1665e }, new int[]{ 0x8c510a, 0xd8b365, 0xf6e8c3, 0xf5f5f5, 0xc7eae5, 0x5ab4ac, 0x1665e }, new int[]{ 0x8c510a, 0xbf812d, 0xdfc27d, 0xf6e8c3, 0xc7eae5, 0x80cdc1, 0x35978f, 0x1665e }, new int[]{ 0x8c510a, 0xbf812d, 0xdfc27d, 0xf6e8c3, 0xf5f5f5, 0xc7eae5, 0x80cdc1, 0x35978f, 0x1665e }, new int[]{ 0x543005, 0x8c510a, 0xbf812d, 0xdfc27d, 0xf6e8c3, 0xc7eae5, 0x80cdc1, 0x35978f, 0x1665e, 0x3c30 }, new int[]{ 0x543005, 0x8c510a, 0xbf812d, 0xdfc27d, 0xf6e8c3, 0xf5f5f5, 0xc7eae5, 0x80cdc1, 0x35978f, 0x1665e, 0x3c30 } }),
	PiYG(1, "Magenta-Yellow-Green", true, new int[][]{ new int[]{ 0xe9a3c9 }, new int[]{ 0xe9a3c9, 0xa1d76a }, new int[]{ 0xe9a3c9, 0xf7f7f7, 0xa1d76a }, new int[]{ 0xd01c8b, 0xf1b6da, 0xb8e186, 0x4dac26 }, new int[]{ 0xd01c8b, 0xf1b6da, 0xf7f7f7, 0xb8e186, 0x4dac26 }, new int[]{ 0xc51b7d, 0xe9a3c9, 0xfde0ef, 0xe6f5d0, 0xa1d76a, 0x4d9221 }, new int[]{ 0xc51b7d, 0xe9a3c9, 0xfde0ef, 0xf7f7f7, 0xe6f5d0, 0xa1d76a, 0x4d9221 }, new int[]{ 0xc51b7d, 0xde77ae, 0xf1b6da, 0xfde0ef, 0xe6f5d0, 0xb8e186, 0x7fbc41, 0x4d9221 }, new int[]{ 0xc51b7d, 0xde77ae, 0xf1b6da, 0xfde0ef, 0xf7f7f7, 0xe6f5d0, 0xb8e186, 0x7fbc41, 0x4d9221 }, new int[]{ 0x8e0152, 0xc51b7d, 0xde77ae, 0xf1b6da, 0xfde0ef, 0xe6f5d0, 0xb8e186, 0x7fbc41, 0x4d9221, 0x276419 }, new int[]{ 0x8e0152, 0xc51b7d, 0xde77ae, 0xf1b6da, 0xfde0ef, 0xf7f7f7, 0xe6f5d0, 0xb8e186, 0x7fbc41, 0x4d9221, 0x276419 } }),
	PRGn(1, "Purple-Red-Green", true, new int[][]{ new int[]{ 0xaf8dc3 }, new int[]{ 0xaf8dc3, 0x7fbf7b }, new int[]{ 0xaf8dc3, 0xf7f7f7, 0x7fbf7b }, new int[]{ 0x7b3294, 0xc2a5cf, 0xa6dba0, 0x8837 }, new int[]{ 0x7b3294, 0xc2a5cf, 0xf7f7f7, 0xa6dba0, 0x8837 }, new int[]{ 0x762a83, 0xaf8dc3, 0xe7d4e8, 0xd9f0d3, 0x7fbf7b, 0x1b7837 }, new int[]{ 0x762a83, 0xaf8dc3, 0xe7d4e8, 0xf7f7f7, 0xd9f0d3, 0x7fbf7b, 0x1b7837 }, new int[]{ 0x762a83, 0x9970ab, 0xc2a5cf, 0xe7d4e8, 0xd9f0d3, 0xa6dba0, 0x5aae61, 0x1b7837 }, new int[]{ 0x762a83, 0x9970ab, 0xc2a5cf, 0xe7d4e8, 0xf7f7f7, 0xd9f0d3, 0xa6dba0, 0x5aae61, 0x1b7837 }, new int[]{ 0x40004b, 0x762a83, 0x9970ab, 0xc2a5cf, 0xe7d4e8, 0xd9f0d3, 0xa6dba0, 0x5aae61, 0x1b7837, 0x441b }, new int[]{ 0x40004b, 0x762a83, 0x9970ab, 0xc2a5cf, 0xe7d4e8, 0xf7f7f7, 0xd9f0d3, 0xa6dba0, 0x5aae61, 0x1b7837, 0x441b } }),
	PuOr(1, "Purple-Orange", true, new int[][]{ new int[]{ 0xf1a340 }, new int[]{ 0xf1a340, 0x998ec3 }, new int[]{ 0xf1a340, 0xf7f7f7, 0x998ec3 }, new int[]{ 0xe66101, 0xfdb863, 0xb2abd2, 0x5e3c99 }, new int[]{ 0xe66101, 0xfdb863, 0xf7f7f7, 0xb2abd2, 0x5e3c99 }, new int[]{ 0xb35806, 0xf1a340, 0xfee0b6, 0xd8daeb, 0x998ec3, 0x542788 }, new int[]{ 0xb35806, 0xf1a340, 0xfee0b6, 0xf7f7f7, 0xd8daeb, 0x998ec3, 0x542788 }, new int[]{ 0xb35806, 0xe08214, 0xfdb863, 0xfee0b6, 0xd8daeb, 0xb2abd2, 0x8073ac, 0x542788 }, new int[]{ 0xb35806, 0xe08214, 0xfdb863, 0xfee0b6, 0xf7f7f7, 0xd8daeb, 0xb2abd2, 0x8073ac, 0x542788 }, new int[]{ 0x7f3b08, 0xb35806, 0xe08214, 0xfdb863, 0xfee0b6, 0xd8daeb, 0xb2abd2, 0x8073ac, 0x542788, 0x2d004b }, new int[]{ 0x7f3b08, 0xb35806, 0xe08214, 0xfdb863, 0xfee0b6, 0xf7f7f7, 0xd8daeb, 0xb2abd2, 0x8073ac, 0x542788, 0x2d004b } }),
	RdBu(1, "Red-Blue", true, new int[][]{ new int[]{ 0xef8a62 }, new int[]{ 0xef8a62, 0x67a9cf }, new int[]{ 0xef8a62, 0xf7f7f7, 0x67a9cf }, new int[]{ 0xca0020, 0xf4a582, 0x92c5de, 0x571b0 }, new int[]{ 0xca0020, 0xf4a582, 0xf7f7f7, 0x92c5de, 0x571b0 }, new int[]{ 0xb2182b, 0xef8a62, 0xfddbc7, 0xd1e5f0, 0x67a9cf, 0x2166ac }, new int[]{ 0xb2182b, 0xef8a62, 0xfddbc7, 0xf7f7f7, 0xd1e5f0, 0x67a9cf, 0x2166ac }, new int[]{ 0xb2182b, 0xd6604d, 0xf4a582, 0xfddbc7, 0xd1e5f0, 0x92c5de, 0x4393c3, 0x2166ac }, new int[]{ 0xb2182b, 0xd6604d, 0xf4a582, 0xfddbc7, 0xf7f7f7, 0xd1e5f0, 0x92c5de, 0x4393c3, 0x2166ac }, new int[]{ 0x67001f, 0xb2182b, 0xd6604d, 0xf4a582, 0xfddbc7, 0xd1e5f0, 0x92c5de, 0x4393c3, 0x2166ac, 0x53061 }, new int[]{ 0x67001f, 0xb2182b, 0xd6604d, 0xf4a582, 0xfddbc7, 0xf7f7f7, 0xd1e5f0, 0x92c5de, 0x4393c3, 0x2166ac, 0x53061 } }),
	RdGy(1, "Red-Grey", false, new int[][]{ new int[]{ 0xef8a62 }, new int[]{ 0xef8a62, 0x999999 }, new int[]{ 0xef8a62, 0xffffff, 0x999999 }, new int[]{ 0xca0020, 0xf4a582, 0xbababa, 0x404040 }, new int[]{ 0xca0020, 0xf4a582, 0xffffff, 0xbababa, 0x404040 }, new int[]{ 0xb2182b, 0xef8a62, 0xfddbc7, 0xe0e0e0, 0x999999, 0x4d4d4d }, new int[]{ 0xb2182b, 0xef8a62, 0xfddbc7, 0xffffff, 0xe0e0e0, 0x999999, 0x4d4d4d }, new int[]{ 0xb2182b, 0xd6604d, 0xf4a582, 0xfddbc7, 0xe0e0e0, 0xbababa, 0x878787, 0x4d4d4d }, new int[]{ 0xb2182b, 0xd6604d, 0xf4a582, 0xfddbc7, 0xffffff, 0xe0e0e0, 0xbababa, 0x878787, 0x4d4d4d }, new int[]{ 0x67001f, 0xb2182b, 0xd6604d, 0xf4a582, 0xfddbc7, 0xe0e0e0, 0xbababa, 0x878787, 0x4d4d4d, 0x1a1a1a }, new int[]{ 0x67001f, 0xb2182b, 0xd6604d, 0xf4a582, 0xfddbc7, 0xffffff, 0xe0e0e0, 0xbababa, 0x878787, 0x4d4d4d, 0x1a1a1a } }),
	RdYlBu(1, "Red-Yellow-Blue", true, new int[][]{ new int[]{ 0xfc8d59 }, new int[]{ 0xfc8d59, 0x91bfdb }, new int[]{ 0xfc8d59, 0xffffbf, 0x91bfdb }, new int[]{ 0xd7191c, 0xfdae61, 0xabd9e9, 0x2c7bb6 }, new int[]{ 0xd7191c, 0xfdae61, 0xffffbf, 0xabd9e9, 0x2c7bb6 }, new int[]{ 0xd73027, 0xfc8d59, 0xfee090, 0xe0f3f8, 0x91bfdb, 0x4575b4 }, new int[]{ 0xd73027, 0xfc8d59, 0xfee090, 0xffffbf, 0xe0f3f8, 0x91bfdb, 0x4575b4 }, new int[]{ 0xd73027, 0xf46d43, 0xfdae61, 0xfee090, 0xe0f3f8, 0xabd9e9, 0x74add1, 0x4575b4 }, new int[]{ 0xd73027, 0xf46d43, 0xfdae61, 0xfee090, 0xffffbf, 0xe0f3f8, 0xabd9e9, 0x74add1, 0x4575b4 }, new int[]{ 0xa50026, 0xd73027, 0xf46d43, 0xfdae61, 0xfee090, 0xe0f3f8, 0xabd9e9, 0x74add1, 0x4575b4, 0x313695 }, new int[]{ 0xa50026, 0xd73027, 0xf46d43, 0xfdae61, 0xfee090, 0xffffbf, 0xe0f3f8, 0xabd9e9, 0x74add1, 0x4575b4, 0x313695 } }),
	RdYlGn(1, "Red-Yellow-Green", false, new int[][]{ new int[]{ 0xfc8d59 }, new int[]{ 0xfc8d59, 0x91cf60 }, new int[]{ 0xfc8d59, 0xffffbf, 0x91cf60 }, new int[]{ 0xd7191c, 0xfdae61, 0xa6d96a, 0x1a9641 }, new int[]{ 0xd7191c, 0xfdae61, 0xffffbf, 0xa6d96a, 0x1a9641 }, new int[]{ 0xd73027, 0xfc8d59, 0xfee08b, 0xd9ef8b, 0x91cf60, 0x1a9850 }, new int[]{ 0xd73027, 0xfc8d59, 0xfee08b, 0xffffbf, 0xd9ef8b, 0x91cf60, 0x1a9850 }, new int[]{ 0xd73027, 0xf46d43, 0xfdae61, 0xfee08b, 0xd9ef8b, 0xa6d96a, 0x66bd63, 0x1a9850 }, new int[]{ 0xd73027, 0xf46d43, 0xfdae61, 0xfee08b, 0xffffbf, 0xd9ef8b, 0xa6d96a, 0x66bd63, 0x1a9850 }, new int[]{ 0xa50026, 0xd73027, 0xf46d43, 0xfdae61, 0xfee08b, 0xd9ef8b, 0xa6d96a, 0x66bd63, 0x1a9850, 0x6837 }, new int[]{ 0xa50026, 0xd73027, 0xf46d43, 0xfdae61, 0xfee08b, 0xffffbf, 0xd9ef8b, 0xa6d96a, 0x66bd63, 0x1a9850, 0x6837 } }),
	Spectral(1, "Spectral colors", false, new int[][]{ new int[]{ 0xfc8d59 }, new int[]{ 0xfc8d59, 0x99d594 }, new int[]{ 0xfc8d59, 0xffffbf, 0x99d594 }, new int[]{ 0xd7191c, 0xfdae61, 0xabdda4, 0x2b83ba }, new int[]{ 0xd7191c, 0xfdae61, 0xffffbf, 0xabdda4, 0x2b83ba }, new int[]{ 0xd53e4f, 0xfc8d59, 0xfee08b, 0xe6f598, 0x99d594, 0x3288bd }, new int[]{ 0xd53e4f, 0xfc8d59, 0xfee08b, 0xffffbf, 0xe6f598, 0x99d594, 0x3288bd }, new int[]{ 0xd53e4f, 0xf46d43, 0xfdae61, 0xfee08b, 0xe6f598, 0xabdda4, 0x66c2a5, 0x3288bd }, new int[]{ 0xd53e4f, 0xf46d43, 0xfdae61, 0xfee08b, 0xffffbf, 0xe6f598, 0xabdda4, 0x66c2a5, 0x3288bd }, new int[]{ 0x9e0142, 0xd53e4f, 0xf46d43, 0xfdae61, 0xfee08b, 0xe6f598, 0xabdda4, 0x66c2a5, 0x3288bd, 0x5e4fa2 }, new int[]{ 0x9e0142, 0xd53e4f, 0xf46d43, 0xfdae61, 0xfee08b, 0xffffbf, 0xe6f598, 0xabdda4, 0x66c2a5, 0x3288bd, 0x5e4fa2 } }),
	/* qualitative colors */
	Accent(2, "Accents", false, new int[][]{ new int[]{ 0x7fc97f }, new int[]{ 0x7fc97f, 0xfdc086 }, new int[]{ 0x7fc97f, 0xbeaed4, 0xfdc086 }, new int[]{ 0x7fc97f, 0xbeaed4, 0xfdc086, 0xffff99 }, new int[]{ 0x7fc97f, 0xbeaed4, 0xfdc086, 0xffff99, 0x386cb0 }, new int[]{ 0x7fc97f, 0xbeaed4, 0xfdc086, 0xffff99, 0x386cb0, 0xf0027f }, new int[]{ 0x7fc97f, 0xbeaed4, 0xfdc086, 0xffff99, 0x386cb0, 0xf0027f, 0xbf5b17 }, new int[]{ 0x7fc97f, 0xbeaed4, 0xfdc086, 0xffff99, 0x386cb0, 0xf0027f, 0xbf5b17, 0x666666 } }),
	Dark2(2, "Dark colors", false, new int[][]{ new int[]{ 0x1b9e77 }, new int[]{ 0x1b9e77, 0x7570b3 }, new int[]{ 0x1b9e77, 0xd95f02, 0x7570b3 }, new int[]{ 0x1b9e77, 0xd95f02, 0x7570b3, 0xe7298a }, new int[]{ 0x1b9e77, 0xd95f02, 0x7570b3, 0xe7298a, 0x66a61e }, new int[]{ 0x1b9e77, 0xd95f02, 0x7570b3, 0xe7298a, 0x66a61e, 0xe6ab02 }, new int[]{ 0x1b9e77, 0xd95f02, 0x7570b3, 0xe7298a, 0x66a61e, 0xe6ab02, 0xa6761d }, new int[]{ 0x1b9e77, 0xd95f02, 0x7570b3, 0xe7298a, 0x66a61e, 0xe6ab02, 0xa6761d, 0x666666 } }),
	Paired(2, "Paired colors", true, new int[][]{ new int[]{ 0xa6cee3 }, new int[]{ 0xa6cee3, 0xb2df8a }, new int[]{ 0xa6cee3, 0x1f78b4, 0xb2df8a }, new int[]{ 0xa6cee3, 0x1f78b4, 0xb2df8a, 0x33a02c }, new int[]{ 0xa6cee3, 0x1f78b4, 0xb2df8a, 0x33a02c, 0xfb9a99 }, new int[]{ 0xa6cee3, 0x1f78b4, 0xb2df8a, 0x33a02c, 0xfb9a99, 0xe31a1c }, new int[]{ 0xa6cee3, 0x1f78b4, 0xb2df8a, 0x33a02c, 0xfb9a99, 0xe31a1c, 0xfdbf6f }, new int[]{ 0xa6cee3, 0x1f78b4, 0xb2df8a, 0x33a02c, 0xfb9a99, 0xe31a1c, 0xfdbf6f, 0xff7f00 }, new int[]{ 0xa6cee3, 0x1f78b4, 0xb2df8a, 0x33a02c, 0xfb9a99, 0xe31a1c, 0xfdbf6f, 0xff7f00, 0xcab2d6 }, new int[]{ 0xa6cee3, 0x1f78b4, 0xb2df8a, 0x33a02c, 0xfb9a99, 0xe31a1c, 0xfdbf6f, 0xff7f00, 0xcab2d6, 0x6a3d9a }, new int[]{ 0xa6cee3, 0x1f78b4, 0xb2df8a, 0x33a02c, 0xfb9a99, 0xe31a1c, 0xfdbf6f, 0xff7f00, 0xcab2d6, 0x6a3d9a, 0xffff99 } }),
	Pastel1(2, "Pastel1 colors", false, new int[][]{ new int[]{ 0xfbb4ae }, new int[]{ 0xfbb4ae, 0xccebc5 }, new int[]{ 0xfbb4ae, 0xb3cde3, 0xccebc5 }, new int[]{ 0xfbb4ae, 0xb3cde3, 0xccebc5, 0xdecbe4 }, new int[]{ 0xfbb4ae, 0xb3cde3, 0xccebc5, 0xdecbe4, 0xfed9a6 }, new int[]{ 0xfbb4ae, 0xb3cde3, 0xccebc5, 0xdecbe4, 0xfed9a6, 0xffffcc }, new int[]{ 0xfbb4ae, 0xb3cde3, 0xccebc5, 0xdecbe4, 0xfed9a6, 0xffffcc, 0xe5d8bd }, new int[]{ 0xfbb4ae, 0xb3cde3, 0xccebc5, 0xdecbe4, 0xfed9a6, 0xffffcc, 0xe5d8bd, 0xfddaec }, new int[]{ 0xfbb4ae, 0xb3cde3, 0xccebc5, 0xdecbe4, 0xfed9a6, 0xffffcc, 0xe5d8bd, 0xfddaec, 0xf2f2f2 } }),
	Pastel2(2, "Pastel2 colors", false, new int[][]{ new int[]{ 0xb3e2cd }, new int[]{ 0xb3e2cd, 0xcbd5e8 }, new int[]{ 0xb3e2cd, 0xfdcdac, 0xcbd5e8 }, new int[]{ 0xb3e2cd, 0xfdcdac, 0xcbd5e8, 0xf4cae4 }, new int[]{ 0xb3e2cd, 0xfdcdac, 0xcbd5e8, 0xf4cae4, 0xe6f5c9 }, new int[]{ 0xb3e2cd, 0xfdcdac, 0xcbd5e8, 0xf4cae4, 0xe6f5c9, 0xfff2ae }, new int[]{ 0xb3e2cd, 0xfdcdac, 0xcbd5e8, 0xf4cae4, 0xe6f5c9, 0xfff2ae, 0xf1e2cc }, new int[]{ 0xb3e2cd, 0xfdcdac, 0xcbd5e8, 0xf4cae4, 0xe6f5c9, 0xfff2ae, 0xf1e2cc, 0xcccccc } }),
	Set1(2, "Set1 colors", false, new int[][]{ new int[]{ 0xe41a1c }, new int[]{ 0xe41a1c, 0x4daf4a }, new int[]{ 0xe41a1c, 0x377eb8, 0x4daf4a }, new int[]{ 0xe41a1c, 0x377eb8, 0x4daf4a, 0x984ea3 }, new int[]{ 0xe41a1c, 0x377eb8, 0x4daf4a, 0x984ea3, 0xff7f00 }, new int[]{ 0xe41a1c, 0x377eb8, 0x4daf4a, 0x984ea3, 0xff7f00, 0xffff33 }, new int[]{ 0xe41a1c, 0x377eb8, 0x4daf4a, 0x984ea3, 0xff7f00, 0xffff33, 0xa65628 }, new int[]{ 0xe41a1c, 0x377eb8, 0x4daf4a, 0x984ea3, 0xff7f00, 0xffff33, 0xa65628, 0xf781bf }, new int[]{ 0xe41a1c, 0x377eb8, 0x4daf4a, 0x984ea3, 0xff7f00, 0xffff33, 0xa65628, 0xf781bf, 0x999999 } }),
	Set2(2, "Set2 colors", false, new int[][]{ new int[]{ 0x66c2a5 }, new int[]{ 0x66c2a5, 0x8da0cb }, new int[]{ 0x66c2a5, 0xfc8d62, 0x8da0cb }, new int[]{ 0x66c2a5, 0xfc8d62, 0x8da0cb, 0xe78ac3 }, new int[]{ 0x66c2a5, 0xfc8d62, 0x8da0cb, 0xe78ac3, 0xa6d854 }, new int[]{ 0x66c2a5, 0xfc8d62, 0x8da0cb, 0xe78ac3, 0xa6d854, 0xffd92f }, new int[]{ 0x66c2a5, 0xfc8d62, 0x8da0cb, 0xe78ac3, 0xa6d854, 0xffd92f, 0xe5c494 }, new int[]{ 0x66c2a5, 0xfc8d62, 0x8da0cb, 0xe78ac3, 0xa6d854, 0xffd92f, 0xe5c494, 0xb3b3b } }),
	Set3(2, "Set3 colors", false, new int[][]{ new int[]{ 0x8dd3c7 }, new int[]{ 0x8dd3c7, 0xbebada }, new int[]{ 0x8dd3c7, 0xffffb3, 0xbebada }, new int[]{ 0x8dd3c7, 0xffffb3, 0xbebada, 0xfb8072 }, new int[]{ 0x8dd3c7, 0xffffb3, 0xbebada, 0xfb8072, 0x80b1d3 }, new int[]{ 0x8dd3c7, 0xffffb3, 0xbebada, 0xfb8072, 0x80b1d3, 0xfdb462 }, new int[]{ 0x8dd3c7, 0xffffb3, 0xbebada, 0xfb8072, 0x80b1d3, 0xfdb462, 0xb3de69 }, new int[]{ 0x8dd3c7, 0xffffb3, 0xbebada, 0xfb8072, 0x80b1d3, 0xfdb462, 0xb3de69, 0xfccde5 }, new int[]{ 0x8dd3c7, 0xffffb3, 0xbebada, 0xfb8072, 0x80b1d3, 0xfdb462, 0xb3de69, 0xfccde5, 0xd9d9d9 }, new int[]{ 0x8dd3c7, 0xffffb3, 0xbebada, 0xfb8072, 0x80b1d3, 0xfdb462, 0xb3de69, 0xfccde5, 0xd9d9d9, 0xbc80bd }, new int[]{ 0x8dd3c7, 0xffffb3, 0xbebada, 0xfb8072, 0x80b1d3, 0xfdb462, 0xb3de69, 0xfccde5, 0xd9d9d9, 0xbc80bd, 0xccebc5 } }),
	/* sequential colors */
	Blues(3, "Blue shades", true, new int[][]{ new int[]{ 0xdeebf7 }, new int[]{ 0xdeebf7, 0x3182bd }, new int[]{ 0xdeebf7, 0x9ecae1, 0x3182bd }, new int[]{ 0xeff3ff, 0xbdd7e7, 0x6baed6, 0x2171b5 }, new int[]{ 0xeff3ff, 0xbdd7e7, 0x6baed6, 0x3182bd, 0x8519c }, new int[]{ 0xeff3ff, 0xc6dbef, 0x9ecae1, 0x6baed6, 0x3182bd, 0x8519c }, new int[]{ 0xeff3ff, 0xc6dbef, 0x9ecae1, 0x6baed6, 0x4292c6, 0x2171b5, 0x84594 }, new int[]{ 0xf7fbff, 0xdeebf7, 0xc6dbef, 0x9ecae1, 0x6baed6, 0x4292c6, 0x2171b5, 0x84594 }, new int[]{ 0xf7fbff, 0xdeebf7, 0xc6dbef, 0x9ecae1, 0x6baed6, 0x4292c6, 0x2171b5, 0x8519c, 0x8306b } }),
	BuGn(3, "Blue-Green shades", true, new int[][]{ new int[]{ 0xe5f5f9 }, new int[]{ 0xe5f5f9, 0x2ca25f }, new int[]{ 0xe5f5f9, 0x99d8c9, 0x2ca25f }, new int[]{ 0xedf8fb, 0xb2e2e2, 0x66c2a4, 0x238b45 }, new int[]{ 0xedf8fb, 0xb2e2e2, 0x66c2a4, 0x2ca25f, 0x6d2c }, new int[]{ 0xedf8fb, 0xccece6, 0x99d8c9, 0x66c2a4, 0x2ca25f, 0x6d2c }, new int[]{ 0xedf8fb, 0xccece6, 0x99d8c9, 0x66c2a4, 0x41ae76, 0x238b45, 0x5824 }, new int[]{ 0xf7fcfd, 0xe5f5f9, 0xccece6, 0x99d8c9, 0x66c2a4, 0x41ae76, 0x238b45, 0x5824 }, new int[]{ 0xf7fcfd, 0xe5f5f9, 0xccece6, 0x99d8c9, 0x66c2a4, 0x41ae76, 0x238b45, 0x6d2c, 0x441b } }),
	BuPu(3, "Blue-Purple shades", true, new int[][]{ new int[]{ 0xe0ecf4 }, new int[]{ 0xe0ecf4, 0x8856a7 }, new int[]{ 0xe0ecf4, 0x9ebcda, 0x8856a7 }, new int[]{ 0xedf8fb, 0xb3cde3, 0x8c96c6, 0x88419d }, new int[]{ 0xedf8fb, 0xb3cde3, 0x8c96c6, 0x8856a7, 0x810f7c }, new int[]{ 0xedf8fb, 0xbfd3e6, 0x9ebcda, 0x8c96c6, 0x8856a7, 0x810f7c }, new int[]{ 0xedf8fb, 0xbfd3e6, 0x9ebcda, 0x8c96c6, 0x8c6bb1, 0x88419d, 0x6e016b }, new int[]{ 0xf7fcfd, 0xe0ecf4, 0xbfd3e6, 0x9ebcda, 0x8c96c6, 0x8c6bb1, 0x88419d, 0x6e016b }, new int[]{ 0xf7fcfd, 0xe0ecf4, 0xbfd3e6, 0x9ebcda, 0x8c96c6, 0x8c6bb1, 0x88419d, 0x810f7c, 0x4d004b } }),
	GnBu(3, "Green-Blue shades", true, new int[][]{ new int[]{ 0xe0f3db }, new int[]{ 0xe0f3db, 0x43a2ca }, new int[]{ 0xe0f3db, 0xa8ddb5, 0x43a2ca }, new int[]{ 0xf0f9e8, 0xbae4bc, 0x7bccc4, 0x2b8cbe }, new int[]{ 0xf0f9e8, 0xbae4bc, 0x7bccc4, 0x43a2ca, 0x868ac }, new int[]{ 0xf0f9e8, 0xccebc5, 0xa8ddb5, 0x7bccc4, 0x43a2ca, 0x868ac }, new int[]{ 0xf0f9e8, 0xccebc5, 0xa8ddb5, 0x7bccc4, 0x4eb3d3, 0x2b8cbe, 0x8589e }, new int[]{ 0xf7fcf0, 0xe0f3db, 0xccebc5, 0xa8ddb5, 0x7bccc4, 0x4eb3d3, 0x2b8cbe, 0x8589e }, new int[]{ 0xf7fcf0, 0xe0f3db, 0xccebc5, 0xa8ddb5, 0x7bccc4, 0x4eb3d3, 0x2b8cbe, 0x868ac, 0x84081 } }),
	Greens(3, "Green shades", true, new int[][]{ new int[]{ 0xe5f5e0 }, new int[]{ 0xe5f5e0, 0x31a354 }, new int[]{ 0xe5f5e0, 0xa1d99b, 0x31a354 }, new int[]{ 0xedf8e9, 0xbae4b3, 0x74c476, 0x238b45 }, new int[]{ 0xedf8e9, 0xbae4b3, 0x74c476, 0x31a354, 0x6d2c }, new int[]{ 0xedf8e9, 0xc7e9c0, 0xa1d99b, 0x74c476, 0x31a354, 0x6d2c }, new int[]{ 0xedf8e9, 0xc7e9c0, 0xa1d99b, 0x74c476, 0x41ab5d, 0x238b45, 0x5a32 }, new int[]{ 0xf7fcf5, 0xe5f5e0, 0xc7e9c0, 0xa1d99b, 0x74c476, 0x41ab5d, 0x238b45, 0x5a32 }, new int[]{ 0xf7fcf5, 0xe5f5e0, 0xc7e9c0, 0xa1d99b, 0x74c476, 0x41ab5d, 0x238b45, 0x6d2c, 0x441b } }),
	Greys(3, "Grey shades", true, new int[][]{ new int[]{ 0xf0f0f0 }, new int[]{ 0xf0f0f0, 0x636363 }, new int[]{ 0xf0f0f0, 0xbdbdbd, 0x636363 }, new int[]{ 0xf7f7f7, 0xcccccc, 0x969696, 0x525252 }, new int[]{ 0xf7f7f7, 0xcccccc, 0x969696, 0x636363, 0x252525 }, new int[]{ 0xf7f7f7, 0xd9d9d9, 0xbdbdbd, 0x969696, 0x636363, 0x252525 }, new int[]{ 0xf7f7f7, 0xd9d9d9, 0xbdbdbd, 0x969696, 0x737373, 0x525252, 0x252525 }, new int[]{ 0xffffff, 0xf0f0f0, 0xd9d9d9, 0xbdbdbd, 0x969696, 0x737373, 0x525252, 0x252525 }, new int[]{ 0xffffff, 0xf0f0f0, 0xd9d9d9, 0xbdbdbd, 0x969696, 0x737373, 0x525252, 0x252525, 0x0 } }),
	Oranges(3, "Orange shades", true, new int[][]{ new int[]{ 0xfee6ce }, new int[]{ 0xfee6ce, 0xe6550d }, new int[]{ 0xfee6ce, 0xfdae6b, 0xe6550d }, new int[]{ 0xfeedde, 0xfdbe85, 0xfd8d3c, 0xd94701 }, new int[]{ 0xfeedde, 0xfdbe85, 0xfd8d3c, 0xe6550d, 0xa63603 }, new int[]{ 0xfeedde, 0xfdd0a2, 0xfdae6b, 0xfd8d3c, 0xe6550d, 0xa63603 }, new int[]{ 0xfeedde, 0xfdd0a2, 0xfdae6b, 0xfd8d3c, 0xf16913, 0xd94801, 0x8c2d04 }, new int[]{ 0xfff5eb, 0xfee6ce, 0xfdd0a2, 0xfdae6b, 0xfd8d3c, 0xf16913, 0xd94801, 0x8c2d04 }, new int[]{ 0xfff5eb, 0xfee6ce, 0xfdd0a2, 0xfdae6b, 0xfd8d3c, 0xf16913, 0xd94801, 0xa63603, 0x7f2704 } }),
	OrRd(3, "Orange-Red shades", true, new int[][]{ new int[]{ 0xfee8c8 }, new int[]{ 0xfee8c8, 0xe34a33 }, new int[]{ 0xfee8c8, 0xfdbb84, 0xe34a33 }, new int[]{ 0xfef0d9, 0xfdcc8a, 0xfc8d59, 0xd7301f }, new int[]{ 0xfef0d9, 0xfdcc8a, 0xfc8d59, 0xe34a33, 0xb30000 }, new int[]{ 0xfef0d9, 0xfdd49e, 0xfdbb84, 0xfc8d59, 0xe34a33, 0xb30000 }, new int[]{ 0xfef0d9, 0xfdd49e, 0xfdbb84, 0xfc8d59, 0xef6548, 0xd7301f, 0x990000 }, new int[]{ 0xfff7ec, 0xfee8c8, 0xfdd49e, 0xfdbb84, 0xfc8d59, 0xef6548, 0xd7301f, 0x990000 }, new int[]{ 0xfff7ec, 0xfee8c8, 0xfdd49e, 0xfdbb84, 0xfc8d59, 0xef6548, 0xd7301f, 0xb30000, 0x7f0000 } }),
	PuBu(3, "Purple-Blue shades", true, new int[][]{ new int[]{ 0xece7f2 }, new int[]{ 0xece7f2, 0x2b8cbe }, new int[]{ 0xece7f2, 0xa6bddb, 0x2b8cbe }, new int[]{ 0xf1eef6, 0xbdc9e1, 0x74a9cf, 0x570b0 }, new int[]{ 0xf1eef6, 0xbdc9e1, 0x74a9cf, 0x2b8cbe, 0x45a8d }, new int[]{ 0xf1eef6, 0xd0d1e6, 0xa6bddb, 0x74a9cf, 0x2b8cbe, 0x45a8d }, new int[]{ 0xf1eef6, 0xd0d1e6, 0xa6bddb, 0x74a9cf, 0x3690c0, 0x570b0, 0x34e7b }, new int[]{ 0xfff7fb, 0xece7f2, 0xd0d1e6, 0xa6bddb, 0x74a9cf, 0x3690c0, 0x570b0, 0x34e7b }, new int[]{ 0xfff7fb, 0xece7f2, 0xd0d1e6, 0xa6bddb, 0x74a9cf, 0x3690c0, 0x570b0, 0x45a8d, 0x23858 } }),
	PuBuGn(3, "Purple-Blue-Green shades", true, new int[][]{ new int[]{ 0xece2f0 }, new int[]{ 0xece2f0, 0x1c9099 }, new int[]{ 0xece2f0, 0xa6bddb, 0x1c9099 }, new int[]{ 0xf6eff7, 0xbdc9e1, 0x67a9cf, 0x2818a }, new int[]{ 0xf6eff7, 0xbdc9e1, 0x67a9cf, 0x1c9099, 0x16c59 }, new int[]{ 0xf6eff7, 0xd0d1e6, 0xa6bddb, 0x67a9cf, 0x1c9099, 0x16c59 }, new int[]{ 0xf6eff7, 0xd0d1e6, 0xa6bddb, 0x67a9cf, 0x3690c0, 0x2818a, 0x16450 }, new int[]{ 0xfff7fb, 0xece2f0, 0xd0d1e6, 0xa6bddb, 0x67a9cf, 0x3690c0, 0x2818a, 0x16450 }, new int[]{ 0xfff7fb, 0xece2f0, 0xd0d1e6, 0xa6bddb, 0x67a9cf, 0x3690c0, 0x2818a, 0x16c59, 0x14636 } }),
	PuRd(3, "Purple-Red shades", true, new int[][]{ new int[]{ 0xe7e1ef }, new int[]{ 0xe7e1ef, 0xdd1c77 }, new int[]{ 0xe7e1ef, 0xc994c7, 0xdd1c77 }, new int[]{ 0xf1eef6, 0xd7b5d8, 0xdf65b0, 0xce1256 }, new int[]{ 0xf1eef6, 0xd7b5d8, 0xdf65b0, 0xdd1c77, 0x980043 }, new int[]{ 0xf1eef6, 0xd4b9da, 0xc994c7, 0xdf65b0, 0xdd1c77, 0x980043 }, new int[]{ 0xf1eef6, 0xd4b9da, 0xc994c7, 0xdf65b0, 0xe7298a, 0xce1256, 0x91003f }, new int[]{ 0xf7f4f9, 0xe7e1ef, 0xd4b9da, 0xc994c7, 0xdf65b0, 0xe7298a, 0xce1256, 0x91003f }, new int[]{ 0xf7f4f9, 0xe7e1ef, 0xd4b9da, 0xc994c7, 0xdf65b0, 0xe7298a, 0xce1256, 0x980043, 0x67001f } }),
	Purples(3, "Purple shades", true, new int[][]{ new int[]{ 0xefedf5 }, new int[]{ 0xefedf5, 0x756bb1 }, new int[]{ 0xefedf5, 0xbcbddc, 0x756bb1 }, new int[]{ 0xf2f0f7, 0xcbc9e2, 0x9e9ac8, 0x6a51a3 }, new int[]{ 0xf2f0f7, 0xcbc9e2, 0x9e9ac8, 0x756bb1, 0x54278f }, new int[]{ 0xf2f0f7, 0xdadaeb, 0xbcbddc, 0x9e9ac8, 0x756bb1, 0x54278f }, new int[]{ 0xf2f0f7, 0xdadaeb, 0xbcbddc, 0x9e9ac8, 0x807dba, 0x6a51a3, 0x4a1486 }, new int[]{ 0xfcfbfd, 0xefedf5, 0xdadaeb, 0xbcbddc, 0x9e9ac8, 0x807dba, 0x6a51a3, 0x4a1486 }, new int[]{ 0xfcfbfd, 0xefedf5, 0xdadaeb, 0xbcbddc, 0x9e9ac8, 0x807dba, 0x6a51a3, 0x54278f, 0x3f007d } }),
	RdPu(3, "Red-Purple shades", true, new int[][]{ new int[]{ 0xfde0dd }, new int[]{ 0xfde0dd, 0xc51b8a }, new int[]{ 0xfde0dd, 0xfa9fb5, 0xc51b8a }, new int[]{ 0xfeebe2, 0xfbb4b9, 0xf768a1, 0xae017e }, new int[]{ 0xfeebe2, 0xfbb4b9, 0xf768a1, 0xc51b8a, 0x7a0177 }, new int[]{ 0xfeebe2, 0xfcc5c0, 0xfa9fb5, 0xf768a1, 0xc51b8a, 0x7a0177 }, new int[]{ 0xfeebe2, 0xfcc5c0, 0xfa9fb5, 0xf768a1, 0xdd3497, 0xae017e, 0x7a0177 }, new int[]{ 0xfff7f3, 0xfde0dd, 0xfcc5c0, 0xfa9fb5, 0xf768a1, 0xdd3497, 0xae017e, 0x7a0177 }, new int[]{ 0xfff7f3, 0xfde0dd, 0xfcc5c0, 0xfa9fb5, 0xf768a1, 0xdd3497, 0xae017e, 0x7a0177, 0x49006a } }),
	Reds(3, "Red shades", true, new int[][]{ new int[]{ 0xfee0d2 }, new int[]{ 0xfee0d2, 0xde2d26 }, new int[]{ 0xfee0d2, 0xfc9272, 0xde2d26 }, new int[]{ 0xfee5d9, 0xfcae91, 0xfb6a4a, 0xcb181d }, new int[]{ 0xfee5d9, 0xfcae91, 0xfb6a4a, 0xde2d26, 0xa50f15 }, new int[]{ 0xfee5d9, 0xfcbba1, 0xfc9272, 0xfb6a4a, 0xde2d26, 0xa50f15 }, new int[]{ 0xfee5d9, 0xfcbba1, 0xfc9272, 0xfb6a4a, 0xef3b2c, 0xcb181d, 0x99000d }, new int[]{ 0xfff5f0, 0xfee0d2, 0xfcbba1, 0xfc9272, 0xfb6a4a, 0xef3b2c, 0xcb181d, 0x99000d }, new int[]{ 0xfff5f0, 0xfee0d2, 0xfcbba1, 0xfc9272, 0xfb6a4a, 0xef3b2c, 0xcb181d, 0xa50f15, 0x67000d } }),
	YlGn(3, "Yellow-Green shades", true, new int[][]{ new int[]{ 0xf7fcb9 }, new int[]{ 0xf7fcb9, 0x31a354 }, new int[]{ 0xf7fcb9, 0xaddd8e, 0x31a354 }, new int[]{ 0xffffcc, 0xc2e699, 0x78c679, 0x238443 }, new int[]{ 0xffffcc, 0xc2e699, 0x78c679, 0x31a354, 0x6837 }, new int[]{ 0xffffcc, 0xd9f0a3, 0xaddd8e, 0x78c679, 0x31a354, 0x6837 }, new int[]{ 0xffffcc, 0xd9f0a3, 0xaddd8e, 0x78c679, 0x41ab5d, 0x238443, 0x5a32 }, new int[]{ 0xffffe5, 0xf7fcb9, 0xd9f0a3, 0xaddd8e, 0x78c679, 0x41ab5d, 0x238443, 0x5a32 }, new int[]{ 0xffffe5, 0xf7fcb9, 0xd9f0a3, 0xaddd8e, 0x78c679, 0x41ab5d, 0x238443, 0x6837, 0x4529 } }),
	YlGnBu(3, "Yellow-Green-Blue shades", true, new int[][]{ new int[]{ 0xedf8b1 }, new int[]{ 0xedf8b1, 0x2c7fb8 }, new int[]{ 0xedf8b1, 0x7fcdbb, 0x2c7fb8 }, new int[]{ 0xffffcc, 0xa1dab4, 0x41b6c4, 0x225ea8 }, new int[]{ 0xffffcc, 0xa1dab4, 0x41b6c4, 0x2c7fb8, 0x253494 }, new int[]{ 0xffffcc, 0xc7e9b4, 0x7fcdbb, 0x41b6c4, 0x2c7fb8, 0x253494 }, new int[]{ 0xffffcc, 0xc7e9b4, 0x7fcdbb, 0x41b6c4, 0x1d91c0, 0x225ea8, 0xc2c84 }, new int[]{ 0xffffd9, 0xedf8b1, 0xc7e9b4, 0x7fcdbb, 0x41b6c4, 0x1d91c0, 0x225ea8, 0xc2c84 }, new int[]{ 0xffffd9, 0xedf8b1, 0xc7e9b4, 0x7fcdbb, 0x41b6c4, 0x1d91c0, 0x225ea8, 0x253494, 0x81d58 } }),
	YlOrBr(3, "Yellow-Orange-Brown shades", true, new int[][]{ new int[]{ 0xfff7bc }, new int[]{ 0xfff7bc, 0xd95f0e }, new int[]{ 0xfff7bc, 0xfec44f, 0xd95f0e }, new int[]{ 0xffffd4, 0xfed98e, 0xfe9929, 0xcc4c02 }, new int[]{ 0xffffd4, 0xfed98e, 0xfe9929, 0xd95f0e, 0x993404 }, new int[]{ 0xffffd4, 0xfee391, 0xfec44f, 0xfe9929, 0xd95f0e, 0x993404 }, new int[]{ 0xffffd4, 0xfee391, 0xfec44f, 0xfe9929, 0xec7014, 0xcc4c02, 0x8c2d04 }, new int[]{ 0xffffe5, 0xfff7bc, 0xfee391, 0xfec44f, 0xfe9929, 0xec7014, 0xcc4c02, 0x8c2d04 }, new int[]{ 0xffffe5, 0xfff7bc, 0xfee391, 0xfec44f, 0xfe9929, 0xec7014, 0xcc4c02, 0x993404, 0x662506 } }),
	YlOrRd(3, "Yellow-Orange-Red shades", true, new int[][]{ new int[]{ 0xffeda0 }, new int[]{ 0xffeda0, 0xf03b20 }, new int[]{ 0xffeda0, 0xfeb24c, 0xf03b20 }, new int[]{ 0xffffb2, 0xfecc5c, 0xfd8d3c, 0xe31a1c }, new int[]{ 0xffffb2, 0xfecc5c, 0xfd8d3c, 0xf03b20, 0xbd0026 }, new int[]{ 0xffffb2, 0xfed976, 0xfeb24c, 0xfd8d3c, 0xf03b20, 0xbd0026 }, new int[]{ 0xffffb2, 0xfed976, 0xfeb24c, 0xfd8d3c, 0xfc4e2a, 0xe31a1c, 0xb10026 }, new int[]{ 0xffffcc, 0xffeda0, 0xfed976, 0xfeb24c, 0xfd8d3c, 0xfc4e2a, 0xe31a1c, 0xb10026 }, new int[]{ 0xffffcc, 0xffeda0, 0xfed976, 0xfeb24c, 0xfd8d3c, 0xfc4e2a, 0xe31a1c, 0xbd0026, 0x800026 } }),
	hsvRdBl(1, "HSV Red-Blue", true, new int[][]{ new int[]{ 0xff0000 }, new int[]{ 0xff0000, 0xff }, new int[]{ 0xff0000, 0xffffff, 0xff }, new int[]{ 0xff0000, 0xffaaaa, 0xaaaaff, 0xff }, new int[]{ 0xff0000, 0xff8080, 0xffffff, 0x8080ff, 0xff }, new int[]{ 0xff0000, 0xff6666, 0xffcccc, 0xccccff, 0x6666ff, 0xff }, new int[]{ 0xff0000, 0xff5555, 0xffaaaa, 0xffffff, 0xaaaaff, 0x5555ff, 0xff }, new int[]{ 0xff0000, 0xff4949, 0xff9292, 0xffdbdb, 0xdbdbff, 0x9292ff, 0x4949ff, 0xff }, new int[]{ 0xff0000, 0xff4040, 0xff8080, 0xffbfbf, 0xffffff, 0xbfbfff, 0x8080ff, 0x4040ff, 0xff }, new int[]{ 0xff0000, 0xff3939, 0xff7171, 0xffaaaa, 0xffe3e3, 0xe3e3ff, 0xaaaaff, 0x7171ff, 0x3939ff, 0xff }, new int[]{ 0xff0000, 0xff3333, 0xff6666, 0xff9999, 0xffcccc, 0xffffff, 0xccccff, 0x9999ff, 0x6666ff, 0x3333ff, 0xff } }),
	hsvCyMg(1, "HSV Cy-Mg", true, new int[][]{ new int[]{ 0xffff }, new int[]{ 0xffff, 0xff00ff }, new int[]{ 0xffff, 0xffffff, 0xff00ff }, new int[]{ 0xffff, 0xaaffff, 0xffaaff, 0xff00ff }, new int[]{ 0xffff, 0x80ffff, 0xffffff, 0xff80ff, 0xff00ff }, new int[]{ 0xffff, 0x66ffff, 0xccffff, 0xffccff, 0xff66ff, 0xff00ff }, new int[]{ 0xffff, 0x55ffff, 0xaaffff, 0xffffff, 0xffaaff, 0xff55ff, 0xff00ff }, new int[]{ 0xffff, 0x49ffff, 0x92ffff, 0xdbffff, 0xffdbff, 0xff92ff, 0xff49ff, 0xff00ff }, new int[]{ 0xffff, 0x40ffff, 0x80ffff, 0xbfffff, 0xffffff, 0xffbfff, 0xff80ff, 0xff40ff, 0xff00ff }, new int[]{ 0xffff, 0x39ffff, 0x71ffff, 0xaaffff, 0xe3ffff, 0xffe3ff, 0xffaaff, 0xff71ff, 0xff39ff, 0xff00ff }, new int[]{ 0xffff, 0x33ffff, 0x66ffff, 0x99ffff, 0xccffff, 0xffffff, 0xffccff, 0xff99ff, 0xff66ff, 0xff33ff, 0xff00ff } });
	private final int paletteType;

	private final String paletteDescription;

	private final int[][] hexColors;

	private boolean colorBlindSave;

	private ColorBrewer(int paletteType, String paletteDescription, boolean colorBlindSave, int[][] hexColors) {
		this.paletteType = paletteType;
		this.paletteDescription = paletteDescription;
		this.colorBlindSave = colorBlindSave;
		this.hexColors = hexColors;
	}

	public String getPaletteDescription() {
	 return paletteDescription;
	}

	public int getMaximumColorCount() {
	 return hexColors.length;
	}

	public boolean isColorBlindSave() {
	 return colorBlindSave;
	}

	public Color[] getColorPalette(int colorCount) {
	 if (colorCount < getMaximumColorCount()) {
		 return toColor(colorCount);
	 } else {
		 // if the color count exceeds the number of a
		 // available in a palette, interpolate between
		 // colors to create an extended color palette
		 return interpolatedColors(colorCount);
	 }
	}

	public static ColorBrewer[] getSequentialColorPalettes(boolean colorBlindSave) {
	 return getPalettes(3, colorBlindSave);
	}

	public static ColorBrewer[] getDivergingColorPalettes(boolean colorBlindSave) {
	 return getPalettes(1, colorBlindSave);
	}

	public static ColorBrewer[] getQualitativeColorPalettes(boolean colorBlindSave) {
	 return getPalettes(2, colorBlindSave);
	}

	private static ColorBrewer[] getPalettes(int paletteType, boolean colorBlindSave) {
	 List<ColorBrewer> palettes = new ArrayList<ColorBrewer>();
	 
	 if (colorBlindSave) {
		 for (ColorBrewer palette: values()) {
			 if (palette.paletteType == paletteType && palette.colorBlindSave) {
				 palettes.add(palette);
			 }
		 }
	 } else {
		 for (ColorBrewer palette: values()) {
			 if (palette.paletteType == paletteType) {
				 palettes.add(palette);
			 }
		 }
	 }
	 
	 return palettes.toArray(new ColorBrewer[palettes.size()]);
	}

	private Color[] interpolatedColors(int colorCount) {
	 Color[] colors = new Color[colorCount];
	 int maxIndex = getMaximumColorCount()-1;
	 float scale = maxIndex/(float)(colorCount-1);
		//	 System.out.println("scale: " + scale);

	 for (int i = 0; i < colorCount; i++) {
		 float value = scale * i;
		 int index = (int)Math.floor(value);
		 
		 Color c1 = new Color(hexColors[maxIndex][index]);
		 float remainder = 0.0f;
		 Color c2 = null;
		 if (index+1 < hexColors.length) {
			 c2 = new Color(hexColors[maxIndex][index+1]);
			 remainder = value - index;
		 } else {
			 c2 = new Color(hexColors[maxIndex][index]);
		 }
		//		 System.out.println("value: " + value + " index: " + index + " remainder: " + remainder);
		 int red   = Math.round((1 - remainder) * c1.getRed()    + (remainder) * c2.getRed());
		 int green = Math.round((1 - remainder) * c1.getGreen()  + (remainder) * c2.getGreen());
		 int blue  = Math.round((1 - remainder) * c1.getBlue()   + (remainder) * c2.getBlue());

		 colors[i] = new Color(red, green, blue);
	 }
	 return colors;
	}

	private Color[] toColor(int numberOfColors) {
		Color[] colors = new Color[numberOfColors];
		for (int i = 0; i < numberOfColors; i++) {
			int hex = hexColors[numberOfColors - 1][i];
			colors[i] = new Color(hex);
		}
		return colors;
	}
}