  package   org . organicdesign . fp ;   import   java . util . Arrays ;  import   java . util . Comparator ;  import   java . util . Map ;  import     org . organicdesign . fp . collections . ImList ;  import     org . organicdesign . fp . collections . ImMap ;  import     org . organicdesign . fp . collections . ImSet ;  import     org . organicdesign . fp . collections . ImSortedMap ;  import     org . organicdesign . fp . collections . ImSortedSet ;  import     org . organicdesign . fp . collections . PersistentHashMap ;  import     org . organicdesign . fp . collections . PersistentHashSet ;  import     org . organicdesign . fp . collections . PersistentTreeMap ;  import     org . organicdesign . fp . collections . PersistentTreeSet ;  import     org . organicdesign . fp . collections . PersistentVector ;  import     org . organicdesign . fp . tuple . Tuple2 ;  import     org . organicdesign . fp . tuple . Tuple3 ;  import     org . organicdesign . fp . xform . Transformable ;  import     org . organicdesign . fp . xform . Xform ;    @ SuppressWarnings  ( "UnusedDeclaration" ) public final class StaticImports  {   private StaticImports  ( )  {  throw  new UnsupportedOperationException  ( "No instantiation" ) ; }    @ SafeVarargs public static  <  K ,  V >  ImMap  < K , V > map  (    Map . Entry  < K , V > ...  kvPairs )  {  if  (   (  kvPairs == null ) ||  (   kvPairs . length < 1 ) )  {  return  PersistentHashMap . empty  ( ) ; }  return  PersistentHashMap . of  (  Arrays . asList  ( kvPairs ) ) ; }    @ SafeVarargs public static  <  T >  ImSet  < T > set  (  T ...  items )  {  if  (   (  items == null ) ||  (   items . length < 1 ) )  {  return  PersistentHashSet . empty  ( ) ; }  return  PersistentHashSet . of  (  Arrays . asList  ( items ) ) ; }   public static  <  K ,  V >  ImSortedMap  < K , V > sortedMap  (   Comparator  <  ? super K > comp ,   Iterable  <   Map . Entry  < K , V > > kvPairs )  {  return  PersistentTreeMap . ofComp  ( comp , kvPairs ) ; }   public static  <  K  extends  Comparable  < K > ,  V >  ImSortedMap  < K , V > sortedMap  (   Iterable  <   Map . Entry  < K , V > > kvPairs )  {  return  PersistentTreeMap . of  ( kvPairs ) ; }   public static  <  T >  ImSortedSet  < T > sortedSet  (   Comparator  <  ? super T > comp ,   Iterable  < T > elements )  {  return   Xform . of  ( elements ) . toImSortedSet  ( comp ) ; }   public static  <  T  extends  Comparable  < T > >  ImSortedSet  < T > sortedSet  (   Iterable  < T > items )  {  return  PersistentTreeSet . of  ( items ) ; }   public static  <  T ,  U >  Tuple2  < T , U > tup  (  T t ,  U u )  {  return  Tuple2 . of  ( t , u ) ; }   public static  <  T ,  U ,  V >  Tuple3  < T , U , V > tup  (  T t ,  U u ,  V v )  {  return  Tuple3 . of  ( t , u , v ) ; }    @ SafeVarargs static public  <  T >  ImList  < T > vec  (  T ...  items )  {  if  (   (  items == null ) ||  (   items . length < 1 ) )  {  return  PersistentVector . empty  ( ) ; }  return  PersistentVector . ofIter  (  Arrays . asList  ( items ) ) ; }   public static  <  T >  Transformable  < T > xform  (   Iterable  < T > iterable )  {  return  Xform . of  ( iterable ) ; }    @ Deprecated public static  <  K ,  V >  Tuple2  < K , V > kv  (  K t ,  V u )  {  return  Tuple2 . of  ( t , u ) ; } }