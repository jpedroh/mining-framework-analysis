  package   org . qlrm . mapper ;   import    java . lang . reflect . Constructor ;  import   java . util . ArrayList ;  import   java . util . List ;  import   javax . persistence . Query ;  import   java . util . HashMap ;  import   java . util . Map ;   public class JpaResultMapper  extends ResultMapper  {    @ SuppressWarnings  ( "unchecked" ) public  <  T >  List  < T > list  (   final Query q ,   final  Class  < T > clazz )  throws IllegalArgumentException  {   List  < T >  result =  new  ArrayList  < T >  ( ) ;   List  <  Object  [ ] >  list =  postProcessResultList  (  q . getResultList  ( ) ) ;   Constructor  <  ? >  ctor = null ;  if  (   list != null &&  !  list . isEmpty  ( ) )  {   ctor =  findConstructor  ( clazz ,  list . get  ( 0 ) ) ; }  for (  Object  [ ] obj : list )  {   result . add  (  ( T )  createInstance  ( ctor , obj ) ) ; }  return result ; }   public  <  T > T uniqueResult  (   final Query q ,   final  Class  < T > clazz )  {   Object  [ ]  rec =  postProcessSingleResult  (  q . getSingleResult  ( ) ) ;   Constructor  <  ? >  ctor =  findConstructor  ( clazz , rec ) ;  return  createInstance  ( ctor , rec ) ; } 
<<<<<<<
  private  Constructor  <  ? > findConstructor  (   final  Class  <  ? > clazz ,   final  Object  [ ] args )  {   Constructor  <  ? >  ctor = null ;   final   Constructor  <  ? >  [ ]  ctors =  clazz . getDeclaredConstructors  ( ) ;  if  (    ctors . length == 1 &&     ctors [ 0 ] . getParameterTypes  ( ) . length ==  args . length )  {   ctor =  ctors [ 0 ] ; }  if  (   ctors . length > 1 )  {  for (  Constructor  <  ? > ctor2 : ctors )  {   final   Class  <  ? >  [ ]  parameterTypes =  ctor2 . getParameterTypes  ( ) ;  if  (   parameterTypes . length !=  args . length )  {  continue ; }  boolean  signatureCheckFailed = false ;  for (   int  i = 0 ;  i <  parameterTypes . length ;  i ++ )  {  if  (    args [ i ] != null &&  !   parameterTypes [ i ] . isAssignableFrom  (   args [ i ] . getClass  ( ) ) )  {   signatureCheckFailed = false ;  break ; } }  if  (  ! signatureCheckFailed )  {   ctor = ctor2 ;  break ; } } }  if  (  null == ctor )  {  StringBuilder  sb =  new StringBuilder  ( "No constructor taking:\n" ) ;  for ( Object object : args )  {     sb . append  ( "\t" ) . append  (   object != null ?   object . getClass  ( ) . getName  ( ) : null ) . append  ( "\n" ) ; }  throw  new RuntimeException  (  sb . toString  ( ) ) ; }  return ctor ; }
=======
>>>>>>>
   private static final  Map  <  Class  <  ? > ,  Class  <  ? > >  PRIMITIVE_TO_BOX_TYPE_MAP =  new  HashMap  < >  ( ) ;  {   PRIMITIVE_TO_BOX_TYPE_MAP . put  (   int . class ,  Integer . class ) ;   PRIMITIVE_TO_BOX_TYPE_MAP . put  (   long . class ,  Long . class ) ;   PRIMITIVE_TO_BOX_TYPE_MAP . put  (   byte . class ,  Byte . class ) ;   PRIMITIVE_TO_BOX_TYPE_MAP . put  (  boolean . class ,  Boolean . class ) ;   PRIMITIVE_TO_BOX_TYPE_MAP . put  (   char . class ,  Character . class ) ;   PRIMITIVE_TO_BOX_TYPE_MAP . put  (   float . class ,  Float . class ) ;   PRIMITIVE_TO_BOX_TYPE_MAP . put  (   double . class ,  Double . class ) ; }   private  List  <  Object  [ ] > postProcessResultList  (   List  <  ? > rawResults )  {   List  <  Object  [ ] >  result =  new  ArrayList  < >  ( ) ;  for ( Object rawResult : rawResults )  {   result . add  (  postProcessSingleResult  ( rawResult ) ) ; }  return result ; }   private  Object  [ ] postProcessSingleResult  (  Object rawResult )  {  return   rawResult instanceof  Object  [ ] ?  (  Object  [ ] ) rawResult :  new Object  [ ]  { rawResult } ; }   private  Constructor  <  ? > findConstructor  (   Class  <  ? > clazz ,  Object ...  args )  {   Constructor  <  ? >  result = null ;   final   Constructor  <  ? >  [ ]  ctors =  clazz . getDeclaredConstructors  ( ) ;  if  (    ctors . length == 1 &&     ctors [ 0 ] . getParameterTypes  ( ) . length ==  args . length )  {   result =  ctors [ 0 ] ; }  if  (   ctors . length > 1 )  {  NEXT_CONSTRUCTOR :  for (  Constructor  <  ? > ctor : ctors )  {   final   Class  <  ? >  [ ]  parameterTypes =  postProcessConstructorParameterTypes  (  ctor . getParameterTypes  ( ) ) ;  if  (   parameterTypes . length !=  args . length )  {  continue NEXT_CONSTRUCTOR ; }  for (   int  i = 0 ;  i <  parameterTypes . length ;  i ++ )  {  if  (   args [ i ] != null )  {   Class  <  ? >  argType =  convertToBoxTypeIfPrimitive  (   args [ i ] . getClass  ( ) ) ;  if  (  !   parameterTypes [ i ] . isAssignableFrom  ( argType ) )  {  continue NEXT_CONSTRUCTOR ; } } }   result = ctor ;  break ; } }  if  (  null == result )  {  StringBuilder  sb =  new StringBuilder  ( "No constructor taking:\n" ) ;  for ( Object object : args )  {     sb . append  ( "\t" ) . append  (   object . getClass  ( ) . getName  ( ) ) . append  ( "\n" ) ; }  throw  new RuntimeException  (  sb . toString  ( ) ) ; }  return result ; }   private   Class  <  ? >  [ ] postProcessConstructorParameterTypes  (    Class  <  ? >  [ ] rawParameterTypes )  {    Class  <  ? >  [ ]  result =  new  Class  <  ? >  [  rawParameterTypes . length ] ;  for (   int  i = 0 ;  i <  rawParameterTypes . length ;  i ++ )  {   Class  <  ? >  currentType =  rawParameterTypes [ i ] ;    result [ i ] =  convertToBoxTypeIfPrimitive  ( currentType ) ; }  return result ; }   private  Class  <  ? > convertToBoxTypeIfPrimitive  (   Class  <  ? > primitiveType )  {  return  PRIMITIVE_TO_BOX_TYPE_MAP . getOrDefault  ( primitiveType , primitiveType ) ; } }