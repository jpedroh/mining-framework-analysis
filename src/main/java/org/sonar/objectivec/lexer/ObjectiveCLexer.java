  package    org . sonar . objectivec . lexer ;   import static       com . sonar . sslr . impl . channel . RegexpChannelBuilder . commentRegexp ;  import static       com . sonar . sslr . impl . channel . RegexpChannelBuilder . regexp ;  import    org . sonar . objectivec . ObjectiveCConfiguration ;  import     com . sonar . sslr . impl . Lexer ;  import      com . sonar . sslr . impl . channel . BlackHoleChannel ;  import static       com . sonar . sslr . impl . channel . RegexpChannelBuilder . o2n ;  import static       com . sonar . sslr . impl . channel . RegexpChannelBuilder . and ;  import     org . sonar . objectivec . api . ObjectiveCKeyword ;  import     org . sonar . objectivec . api . ObjectiveCTokenType ;  import     org . sonar . objectivec . api . ObjectiveCPunctuator ;  import      com . sonar . sslr . impl . channel . PunctuatorChannel ;  import      com . sonar . sslr . impl . channel . IdentifierAndKeywordChannel ;   public class ObjectiveCLexer  {   private ObjectiveCLexer  ( )  { }   public static Lexer create  ( )  {  return  create  (  new ObjectiveCConfiguration  ( ) ) ; }   public static Lexer create  (  ObjectiveCConfiguration conf )  {  return              Lexer . builder  ( ) . withCharset  (  conf . getCharset  ( ) ) . withFailIfNoChannelToConsumeOneCharacter  ( true ) . withChannel  (  commentRegexp  ( "//[^\\n\\r]*+" ) ) . withChannel  (  commentRegexp  ( "/\\*[\\s\\S]*?\\*/" ) ) . withChannel  (  regexp  (  ObjectiveCTokenType . STRING_LITERAL , "\"([^\"\\\\]*+(\\\\[\\s\\S])?+)*+\"" ) ) . withChannel  (  regexp  (  ObjectiveCTokenType . NUMERIC_LITERAL , "[0-9]++[lL]?+" ) ) . withChannel  (  regexp  (  ObjectiveCTokenType . NUMERIC_LITERAL , "0[xX][0-9A-Fa-f]++[lL]?+" ) ) . withChannel  (  regexp  (  ObjectiveCTokenType . NUMERIC_LITERAL , "[0-9]++[fFdD]" ) ) . withChannel  (  new IdentifierAndKeywordChannel  (  and  ( "[a-zA-Z_]" ,  o2n  ( "\\w" ) ) , true ,  ObjectiveCKeyword . values  ( ) ) ) . withChannel  (  new PunctuatorChannel  (  ObjectiveCPunctuator . values  ( ) ) ) . withChannel  (  new BlackHoleChannel  ( "[\\s]" ) ) . build  ( ) ; } }