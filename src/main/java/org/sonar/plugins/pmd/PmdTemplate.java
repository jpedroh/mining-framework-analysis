  package    org . sonar . plugins . pmd ;   import    net . sourceforge . pmd . PMDConfiguration ;  import    net . sourceforge . pmd . RuleContext ;  import    net . sourceforge . pmd . RuleSets ;  import    net . sourceforge . pmd . SourceCodeProcessor ;  import     net . sourceforge . pmd . lang . LanguageVersion ;  import      net . sourceforge . pmd . lang . java . JavaLanguageModule ;  import   java . io . InputStream ;  import    java . nio . charset . Charset ;  import   java . util . Map ;  import   java . io . IOException ;  import   java . util . HashMap ;  import    net . sourceforge . pmd . PMDException ;  import      org . sonar . api . batch . fs . InputFile ;  import      org . sonar . api . utils . log . Logger ;  import      org . sonar . api . utils . log . Loggers ;   public class PmdTemplate  {   private static final Logger  LOG =  Loggers . get  (  PmdTemplate . class ) ;   private static final  Map  < String , String >  JAVA_VERSIONS =  
<<<<<<<
          ImmutableMap .  < String , String > builder  ( ) . put  ( "1.1" , "1.3" ) . put  ( "1.2" , "1.3" ) . put  ( "5" , "1.5" ) . put  ( "6" , "1.6" ) . put  ( "7" , "1.7" ) . put  ( "8" , "1.8" ) . put  ( "9" , "9" ) . put  ( "10" , "10" ) . put  ( "11" , "11" )
=======
prepareVersions
>>>>>>>
  ( ) ;   private SourceCodeProcessor  processor ;   private PMDConfiguration  configuration ;   public static PmdTemplate create  (  String javaVersion ,  ClassLoader classloader ,  Charset charset )  {  PMDConfiguration  configuration =  new PMDConfiguration  ( ) ;   configuration . setDefaultLanguageVersion  (  languageVersion  ( javaVersion ) ) ;   configuration . setClassLoader  ( classloader ) ;   configuration . setSourceEncoding  (  charset . name  ( ) ) ;  SourceCodeProcessor  processor =  new SourceCodeProcessor  ( configuration ) ;  return  new PmdTemplate  ( configuration , processor ) ; }  PmdTemplate  (  PMDConfiguration configuration ,  SourceCodeProcessor processor )  {    this . configuration = configuration ;    this . processor = processor ; }  PMDConfiguration configuration  ( )  {  return configuration ; }   static LanguageVersion languageVersion  (  String javaVersion )  {  String  version =  normalize  ( javaVersion ) ;  LanguageVersion  languageVersion =   new JavaLanguageModule  ( ) . getVersion  ( version ) ;  if  (  languageVersion == null )  {  throw  new IllegalArgumentException  (  "Unsupported Java version for PMD: " + version ) ; }   LOG . info  (  "Java version: " + version ) ;  return languageVersion ; }   private static String normalize  (  String version )  {  return  JAVA_VERSIONS . getOrDefault  ( version , version ) ; }   private static  Map  < String , String > prepareVersions  ( )  {   final  Map  < String , String >  versions =  new  HashMap  < >  ( ) ;   versions . put  ( "1.1" , "1.3" ) ;   versions . put  ( "1.2" , "1.3" ) ;   versions . put  ( "5" , "1.5" ) ;   versions . put  ( "6" , "1.6" ) ;   versions . put  ( "7" , "1.7" ) ;   versions . put  ( "8" , "1.8" ) ;  return versions ; }   public void process  (  InputFile file ,  RuleSets rulesets ,  RuleContext ruleContext )  {   ruleContext . setSourceCodeFilename  (   file . uri  ( ) . toString  ( ) ) ;  try  (  InputStream inputStream =  file . inputStream  ( ) )  {   processor . processSourceCode  ( inputStream , rulesets , ruleContext ) ; }  catch (   RuntimeException | IOException | PMDException e )  {   LOG . error  (  "Fail to execute PMD. Following file is ignored: " + file , e ) ; } } }