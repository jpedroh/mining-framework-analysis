  package    org . fest . assertions . api ;   import   java . io . File ;  import    java . nio . charset . Charset ;  import     org . fest . assertions . internal . Files ;  import    org . fest . util . FilesException ;  import    org . fest . util . VisibleForTesting ;   public class FileAssert  extends  AbstractAssert  < FileAssert , File >  {    @ VisibleForTesting Files  files =  Files . instance  ( ) ;    @ VisibleForTesting Charset  charset =  Charset . defaultCharset  ( ) ;   protected FileAssert  (  File actual )  {  super  ( actual ,  FileAssert . class ) ; }   public FileAssert exists  ( )  {   files . assertExists  ( info , actual ) ;  return this ; }   public FileAssert doesNotExist  ( )  {   files . assertDoesNotExist  ( info , actual ) ;  return this ; }   public FileAssert isFile  ( )  {   files . assertIsFile  ( info , actual ) ;  return this ; }   public FileAssert isDirectory  ( )  {   files . assertIsDirectory  ( info , actual ) ;  return this ; }   public FileAssert isAbsolute  ( )  {   files . assertIsAbsolute  ( info , actual ) ;  return this ; }   public FileAssert isRelative  ( )  {   files . assertIsRelative  ( info , actual ) ;  return this ; }   public FileAssert hasContentEqualTo  (  File expected )  {   files . assertEqualContent  ( info , actual , expected ) ;  return this ; }   public FileAssert hasBinaryContent  (    byte  [ ] expected )  {   files . assertHasBinaryContent  ( info , actual , expected ) ;  return this ; }   public FileAssert usingCharset  (  String charsetName )  {  if  (  !  Charset . isSupported  ( charsetName ) )  throw  new IllegalArgumentException  (  String . format  ( "Charset:<'%s'> is not supported on this system" , charsetName ) ) ;  return  usingCharset  (  Charset . forName  ( charsetName ) ) ; }   public FileAssert usingCharset  (  Charset charset )  {  if  (  charset == null )  throw  new NullPointerException  ( "The charset should not be null" ) ;    this . charset = charset ;  return this ; }   public FileAssert hasContent  (  String expected )  {   files . assertHasContent  ( info , actual , expected , charset ) ;  return this ; }   public FileAssert canWrite  ( )  {   files . assertCanWrite  ( info , actual ) ;  return this ; }   public FileAssert canRead  ( )  {   files . assertCanRead  ( info , actual ) ;  return this ; }   public FileAssert canExecute  ( )  {   files . assertCanExecute  ( info , actual ) ;  return this ; } }