  package    org . fest . assertions . internal ;   import static      org . fest . assertions . error . ShouldBeAbsolutePath . shouldBeAbsolutePath ;  import static      org . fest . assertions . error . ShouldBeDirectory . shouldBeDirectory ;  import static      org . fest . assertions . error . ShouldBeFile . shouldBeFile ;  import static      org . fest . assertions . error . ShouldBeRelativePath . shouldBeRelativePath ;  import static      org . fest . assertions . error . ShouldExist . shouldExist ;  import static      org . fest . assertions . error . ShouldHaveBinaryContent . shouldHaveBinaryContent ;  import static      org . fest . assertions . error . ShouldHaveContent . shouldHaveContent ;  import static      org . fest . assertions . error . ShouldHaveEqualContent . shouldHaveEqualContent ;  import static      org . fest . assertions . error . ShouldNotExist . shouldNotExist ;  import   java . io . File ;  import   java . io . IOException ;  import    java . nio . charset . Charset ;  import   java . util . List ;  import     org . fest . assertions . core . AssertionInfo ;  import    org . fest . util . FilesException ;  import    org . fest . util . VisibleForTesting ;  import static      org . fest . assertions . error . ShouldBeExecutable . shouldBeExecutable ;  import static      org . fest . assertions . error . ShouldBeReadable . shouldBeReadable ;  import static      org . fest . assertions . error . ShouldBeWritable . shouldBeWritable ;   public class Files  {   private static final Files  INSTANCE =  new Files  ( ) ;   public static Files instance  ( )  {  return INSTANCE ; }    @ VisibleForTesting Diff  diff =  new Diff  ( ) ;    @ VisibleForTesting BinaryDiff  binaryDiff =  new BinaryDiff  ( ) ;    @ VisibleForTesting Failures  failures =  Failures . instance  ( ) ;    @ VisibleForTesting Files  ( )  { }   public void assertEqualContent  (  AssertionInfo info ,  File actual ,  File expected )  {   verifyIsFile  ( expected ) ;   assertIsFile  ( info , actual ) ;  try  {   List  < String >  diffs =  diff . diff  ( actual , expected ) ;  if  (  diffs . isEmpty  ( ) )  return ;  throw  failures . failure  ( info ,  shouldHaveEqualContent  ( actual , expected , diffs ) ) ; }  catch (   IOException e )  {  String  msg =  String . format  ( "Unable to compare contents of files:<%s> and:<%s>" , actual , expected ) ;  throw  new FilesException  ( msg , e ) ; } }   public void assertHasBinaryContent  (  AssertionInfo info ,  File actual ,    byte  [ ] expected )  {  if  (  expected == null )  throw  new NullPointerException  ( "The binary content to compare to should not be null" ) ;   assertIsFile  ( info , actual ) ;  try  {  BinaryDiffResult  result =  binaryDiff . diff  ( actual , expected ) ;  if  (  result . hasNoDiff  ( ) )  return ;  throw  failures . failure  ( info ,  shouldHaveBinaryContent  ( actual , result ) ) ; }  catch (   IOException e )  {  String  msg =  String . format  ( "Unable to verify binary contents of file:<%s>" , actual ) ;  throw  new FilesException  ( msg , e ) ; } }   public void assertHasContent  (  AssertionInfo info ,  File actual ,  String expected ,  Charset charset )  {  if  (  expected == null )  throw  new NullPointerException  ( "The text to compare to should not be null" ) ;   assertIsFile  ( info , actual ) ;  try  {   List  < String >  diffs =  diff . diff  ( actual , expected , charset ) ;  if  (  diffs . isEmpty  ( ) )  return ;  throw  failures . failure  ( info ,  shouldHaveContent  ( actual , charset , diffs ) ) ; }  catch (   IOException e )  {  String  msg =  String . format  ( "Unable to verify text contents of file:<%s>" , actual ) ;  throw  new FilesException  ( msg , e ) ; } }   private void verifyIsFile  (  File expected )  {  if  (  expected == null )  throw  new NullPointerException  ( "The file to compare to should not be null" ) ;  if  (  expected . isFile  ( ) )  return ;  throw  new IllegalArgumentException  (  String . format  ( "Expected file:<'%s'> should be an existing file" , expected ) ) ; }   public void assertIsFile  (  AssertionInfo info ,  File actual )  {   assertNotNull  ( info , actual ) ;  if  (  actual . isFile  ( ) )  return ;  throw  failures . failure  ( info ,  shouldBeFile  ( actual ) ) ; }   public void assertIsDirectory  (  AssertionInfo info ,  File actual )  {   assertNotNull  ( info , actual ) ;  if  (  actual . isDirectory  ( ) )  return ;  throw  failures . failure  ( info ,  shouldBeDirectory  ( actual ) ) ; }   public void assertIsAbsolute  (  AssertionInfo info ,  File actual )  {  if  (  isAbsolutePath  ( info , actual ) )  return ;  throw  failures . failure  ( info ,  shouldBeAbsolutePath  ( actual ) ) ; }   public void assertIsRelative  (  AssertionInfo info ,  File actual )  {  if  (  !  isAbsolutePath  ( info , actual ) )  return ;  throw  failures . failure  ( info ,  shouldBeRelativePath  ( actual ) ) ; }   private boolean isAbsolutePath  (  AssertionInfo info ,  File actual )  {   assertNotNull  ( info , actual ) ;  return  actual . isAbsolute  ( ) ; }   public void assertExists  (  AssertionInfo info ,  File actual )  {   assertNotNull  ( info , actual ) ;  if  (  actual . exists  ( ) )  return ;  throw  failures . failure  ( info ,  shouldExist  ( actual ) ) ; }   public void assertDoesNotExist  (  AssertionInfo info ,  File actual )  {   assertNotNull  ( info , actual ) ;  if  (  !  actual . exists  ( ) )  return ;  throw  failures . failure  ( info ,  shouldNotExist  ( actual ) ) ; }   private static void assertNotNull  (  AssertionInfo info ,  File actual )  {    Objects . instance  ( ) . assertNotNull  ( info , actual ) ; }   public void assertCanWrite  (  AssertionInfo info ,  File actual )  {   assertNotNull  ( info , actual ) ;  if  (  actual . canWrite  ( ) )  return ;  throw  failures . failure  ( info ,  shouldBeWritable  ( actual ) ) ; }   public void assertCanRead  (  AssertionInfo info ,  File actual )  {   assertNotNull  ( info , actual ) ;  if  (  actual . canRead  ( ) )  return ;  throw  failures . failure  ( info ,  shouldBeReadable  ( actual ) ) ; }   public void assertCanExecute  (  AssertionInfo info ,  File actual )  {   assertNotNull  ( info , actual ) ;  if  (  actual . canExecute  ( ) )  return ;  throw  failures . failure  ( info ,  shouldBeExecutable  ( actual ) ) ; } }