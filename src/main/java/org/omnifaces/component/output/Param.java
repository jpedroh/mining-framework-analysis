  package    org . omnifaces . component . output ;   import static     org . omnifaces . util . FacesLocal . createConverter ;  import   java . io . IOException ;  import   java . io . StringWriter ;  import   javax . faces . FacesException ;  import    javax . faces . component . FacesComponent ;  import    javax . faces . component . UIParameter ;  import    javax . faces . component . ValueHolder ;  import    javax . faces . context . FacesContext ;  import    javax . faces . context . ResponseWriter ;  import    javax . faces . convert . Converter ;  import    org . omnifaces . component . ParamHolder ;    @ FacesComponent  (  Param . COMPONENT_TYPE ) public class Param  <  T >  extends UIParameter  implements   ParamHolder  < T >  {   public static final String  COMPONENT_TYPE = "org.omnifaces.component.output.Param" ;   private enum PropertyKeys  {  converter  ; } 
<<<<<<<
  private  Converter  < T >  localConverter ;
=======
>>>>>>>
    @ Override  @ SuppressWarnings  ( "unchecked" ) public  Converter  < T > getConverter  ( )  {  return 
<<<<<<<
  localConverter != null ? localConverter :  (  Converter  < T > )   getStateHelper  ( ) . eval  (  PropertyKeys . converter )
=======
 ( Converter )   getStateHelper  ( ) . eval  (  PropertyKeys . converter )
>>>>>>>
 ; }    @ Override  @ SuppressWarnings  (  { "unchecked" , "rawtypes" } ) public void setConverter  (  Converter converter )  {    getStateHelper  ( ) . put  (  PropertyKeys . converter , converter ) ; }    @ Override  @ SuppressWarnings  ( "unchecked" ) public T getLocalValue  ( )  {  return  ( T )  super . getValue  ( ) ; }    @ Override  @ SuppressWarnings  ( "unchecked" ) public String getValue  ( )  {  FacesContext  context =  getFacesContext  ( ) ;   Converter  < T >  converter =  getConverter  ( ) ;  Object  value =  getLocalValue  ( ) ;  if  (   value == null &&   getChildCount  ( ) > 0 )  {  ResponseWriter  originalResponseWriter =  context . getResponseWriter  ( ) ;  StringWriter  output =  new StringWriter  ( ) ;   context . setResponseWriter  (  originalResponseWriter . cloneWithWriter  ( output ) ) ;  try  {   super . encodeChildren  ( context ) ; }  catch (   IOException e )  {  throw  new FacesException  ( e ) ; }  finally  {   context . setResponseWriter  ( originalResponseWriter ) ; }   value =  output . toString  ( ) ; }  if  (   converter == null &&  value != null )  {   converter =  createConverter  ( context ,  value . getClass  ( ) ) ; }  if  (  converter != null )  {  return  converter . getAsString  ( context , this ,  ( T ) value ) ; } else  {  return   value != null ?  value . toString  ( ) : null ; } }    @ Override public boolean getRendersChildren  ( )  {  return true ; }    @ Override public void encodeChildren  (  FacesContext context )  throws IOException  { } }