  package    org . omnifaces . component . output ;   import static    java . lang . Boolean . FALSE ;  import static    java . lang . Boolean . TRUE ;  import static     javax . faces . event . PhaseId . RENDER_RESPONSE ;  import static       org . omnifaces . component . output . Cache . PropertyKeys . disabled ;  import static       org . omnifaces . component . output . Cache . PropertyKeys . key ;  import static       org . omnifaces . component . output . Cache . PropertyKeys . reset ;  import static       org . omnifaces . component . output . Cache . PropertyKeys . scope ;  import static       org . omnifaces . component . output . Cache . PropertyKeys . time ;  import static       org . omnifaces . component . output . Cache . PropertyKeys . useBuffer ;  import static     org . omnifaces . filter . OnDemandResponseBufferFilter . BUFFERED_RESPONSE ;  import static     org . omnifaces . util . Events . subscribeToRequestAfterPhase ;  import static     org . omnifaces . util . Events . subscribeToViewEvent ;  import static     org . omnifaces . util . Faces . getRequestAttribute ;  import   java . io . IOException ;  import   java . io . StringWriter ;  import   java . io . Writer ;  import    javax . faces . component . FacesComponent ;  import     javax . faces . component . visit . VisitContext ;  import    javax . faces . context . FacesContext ;  import    javax . faces . context . ResponseWriter ;  import    javax . faces . event . PreRenderViewEvent ;  import    javax . faces . event . SystemEvent ;  import      org . omnifaces . component . output . cache . CacheFactory ;  import      org . omnifaces . component . output . cache . CacheInitializerListener ;  import       org . omnifaces . component . output . cache . el . CacheValue ;  import    org . omnifaces . filter . OnDemandResponseBufferFilter ;  import    org . omnifaces . servlet . BufferedHttpServletResponse ;  import    org . omnifaces . util . Callback ;  import    org . omnifaces . util . State ;    @ FacesComponent  (  Cache . COMPONENT_TYPE ) public class Cache  extends OutputFamily  {   public static final String  COMPONENT_TYPE = "org.omnifaces.component.output.Cache" ;   public static final String  VALUE_SET = "org.omnifaces.cache.VALUE_SET" ;   public static final String  DEFAULT_SCOPE = "session" ;   public static final String  START_CONTENT_MARKER = "<!-- START CACHE FOR %s -->" ;   public static final String  END_CONTENT_MARKER = "<!-- END CACHE FOR %s -->" ;   private static final String  ERROR_NO_BUFFERED_RESPONSE =  String . format  ( "No buffered response found in request, but 'useBuffer' set to true. Check setting the '%s' context parameter or installing the '%s' filter manually." ,  CacheInitializerListener . CACHE_INSTALL_BUFFER_FILTER ,  OnDemandResponseBufferFilter . class ) ;   private static final  Class  <  ? extends SystemEvent >  PRE_RENDER =  PreRenderViewEvent . class ;   private final State  state =  new State  (  getStateHelper  ( ) ) ;  enum PropertyKeys  {  key ,  scope ,  time ,  useBuffer ,  reset ,  disabled }   public Cache  ( )  {   final FacesContext  context =  FacesContext . getCurrentInstance  ( ) ;   subscribeToViewEvent  ( PRE_RENDER ,  new  Callback . SerializableVoid  ( )  {   private static final  long  serialVersionUID = 1L ;    @ Override public void invoke  ( )  {  if  (    !  isDisabled  ( ) &&  isUseBuffer  ( ) &&  !  hasCachedValue  ( context ) )  {   final BufferedHttpServletResponse  bufferedHttpServletResponse =  getRequestAttribute  ( BUFFERED_RESPONSE ) ;  if  (  bufferedHttpServletResponse == null )  {  throw  new IllegalStateException  ( ERROR_NO_BUFFERED_RESPONSE ) ; }   bufferedHttpServletResponse . setPassThrough  ( false ) ;   subscribeToRequestAfterPhase  ( RENDER_RESPONSE ,  new  Callback . Void  ( )  {    @ Override public void invoke  ( )  {  String  content = null ;  try  {   content =  getContentFromBuffer  (  bufferedHttpServletResponse . getBufferAsString  ( ) ) ; }  catch (   IOException e )  {  throw  new IllegalStateException  ( e ) ; }  if  (  content != null )  {   cacheContent  ( context , content ) ; } } } ) ; } } } ) ; }    @ Override public void encodeChildren  (  FacesContext context )  throws IOException  {  if  (  isDisabled  ( ) )  {   super . encodeChildren  ( context ) ;  return ; }  String  key =  getKeyWithDefault  ( context ) ;  ResponseWriter  responseWriter =  context . getResponseWriter  ( ) ;       org . omnifaces . component . output . cache . Cache  scopedCache =  getCacheImpl  ( context ) ;  if  (  isReset  ( ) )  {   scopedCache . remove  ( key ) ; }  String  childRendering =  scopedCache . get  ( key ) ;  if  (  childRendering == null )  {  Writer  bufferWriter =  new StringWriter  ( ) ;  ResponseWriter  bufferedResponseWriter =  responseWriter . cloneWithWriter  ( bufferWriter ) ;   context . setResponseWriter  ( bufferedResponseWriter ) ;  try  {  if  (  isUseBuffer  ( ) )  {   bufferedResponseWriter . write  (  getStartContentMarker  ( ) ) ; }   super . encodeChildren  ( context ) ;  if  (  isUseBuffer  ( ) )  {   bufferedResponseWriter . write  (  getEndContentMarker  ( ) ) ; } }  finally  {   context . setResponseWriter  ( responseWriter ) ; }   childRendering =  bufferWriter . toString  ( ) ;   cacheContent  ( context , scopedCache , key , childRendering ) ; }   responseWriter . write  ( childRendering ) ; }   public Object getCacheAttribute  (  FacesContext context ,  String name )  {  return   getCacheImpl  ( context ) . getAttribute  (  getKeyWithDefault  ( context ) , name ) ; }   public void setCacheAttribute  (  FacesContext context ,  String name ,  Object value )  {    getCacheImpl  ( context ) . putAttribute  (  getKeyWithDefault  ( context ) , name , value ,  getTime  ( ) ) ; }    @ Override protected boolean isVisitable  (  VisitContext visitContext )  {  FacesContext  context =  visitContext . getFacesContext  ( ) ;  return    isDisabled  ( ) ||  isCachedValueJustSet  ( context ) ||  !  hasCachedValue  ( context ) ; }   private void cacheContent  (  FacesContext context ,  String content )  {   cacheContent  ( context ,  CacheFactory . getCache  ( context ,  getScope  ( ) ) ,  getKeyWithDefault  ( context ) , content ) ; }   private void cacheContent  (  FacesContext context ,       org . omnifaces . component . output . cache . Cache scopedCache ,  String key ,  String content )  {   int  time =  getTime  ( ) ;  if  (  time > 0 )  {   scopedCache . put  ( key , content , time ) ; } else  {   scopedCache . put  ( key , content ) ; }     context . getExternalContext  ( ) . getRequestMap  ( ) . put  ( VALUE_SET , TRUE ) ; }   private String getKeyWithDefault  (  FacesContext context )  {  String  key =  getKey  ( ) ;  if  (  key == null )  {   key =     context . getViewRoot  ( ) . getViewId  ( ) + "_" +  this . getClientId  ( context ) ; }  return key ; }   private      org . omnifaces . component . output . cache . Cache getCacheImpl  (  FacesContext context )  {  return  CacheFactory . getCache  ( context ,  getScope  ( ) ) ; }   private boolean isCachedValueJustSet  (  FacesContext context )  {  return  TRUE . equals  (    context . getExternalContext  ( ) . getRequestMap  ( ) . get  ( VALUE_SET ) ) ; }   private boolean hasCachedValue  (  FacesContext context )  {  return    CacheFactory . getCache  ( context ,  getScope  ( ) ) . get  (  getKeyWithDefault  ( context ) ) != null ; }   private String getStartContentMarker  ( )  {  return  String . format  ( START_CONTENT_MARKER ,  getClientId  ( ) ) ; }   private String getEndContentMarker  ( )  {  return  String . format  ( END_CONTENT_MARKER ,  getClientId  ( ) ) ; }   private String getContentFromBuffer  (  String buffer )  {  String  startMarker =  getStartContentMarker  ( ) ;   int  startIndex =  buffer . indexOf  ( startMarker ) ;  if  (  startIndex !=  - 1 )  {  String  endMarker =  getEndContentMarker  ( ) ;   int  endIndex =  buffer . indexOf  ( endMarker ) ;  if  (  endIndex !=  - 1 )  {  return  buffer . substring  (  startIndex +  startMarker . length  ( ) , endIndex ) ; } }  return null ; }   public String getKey  ( )  {  return  state . get  ( key ) ; }   public void setKey  (  String keyValue )  {   state . put  ( key , keyValue ) ; }   public String getScope  ( )  {  return  state . get  ( scope , DEFAULT_SCOPE ) ; }   public void setScope  (  String scopeValue )  {   state . put  ( scope , scopeValue ) ; }   public Integer getTime  ( )  {  return  state . get  ( time ,  - 1 ) ; }   public void setTime  (  Integer timeValue )  {   state . put  ( time , timeValue ) ; }   public Boolean isUseBuffer  ( )  {  return  state . get  ( useBuffer , FALSE ) ; }   public void setUseBuffer  (  Boolean useBufferValue )  {   state . put  ( useBuffer , useBufferValue ) ; }   public Boolean isReset  ( )  {  return  state . get  ( reset , FALSE ) ; }   public void setReset  (  Boolean resetValue )  {   state . put  ( reset , resetValue ) ; }   public Boolean isDisabled  ( )  {  return  state . get  ( disabled , FALSE ) ; }   public void setDisabled  (  Boolean disabledValue )  {   state . put  ( disabled , disabledValue ) ; } }