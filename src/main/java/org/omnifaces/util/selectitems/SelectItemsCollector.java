  package    org . omnifaces . util . selectitems ;   import static     org . omnifaces . util . Utils . isEmpty ;  import   java . util . ArrayList ;  import   java . util . Arrays ;  import   java . util . List ;  import   java . util . Map ;  import    javax . faces . component . UIComponent ;  import    javax . faces . component . UISelectItem ;  import    javax . faces . component . UISelectItems ;  import    javax . faces . context . FacesContext ;  import    javax . faces . model . SelectItem ;  import    javax . faces . model . SelectItemGroup ;  import    org . omnifaces . el . ScopedRunner ;  import    org . omnifaces . model . ExtendedSelectItem ;  import    org . omnifaces . util . Callback ;   public final class SelectItemsCollector  {   private SelectItemsCollector  ( )  { }   private static final String  ERROR_UNKNOWN_SELECT_TYPE = "A value expression of type '%s' is disallowed for a select item" ;   public static  List  < SelectItem > collectFromParent  (  FacesContext context ,  UIComponent parent )  {   List  < SelectItem >  selectItems =  new  ArrayList  < SelectItem >  ( ) ;  for ( UIComponent child :  parent . getChildren  ( ) )  {  if  (  child instanceof UISelectItem )  {  UISelectItem  uiSelectItem =  ( UISelectItem ) child ;  Object  value =  uiSelectItem . getValue  ( ) ;  if  (  value instanceof SelectItem )  {   selectItems . add  (  ( SelectItem ) value ) ; } else  if  (   uiSelectItem . getValue  ( ) == null )  {   selectItems . add  (  new ExtendedSelectItem  ( uiSelectItem ) ) ; } else  {  throw  new IllegalArgumentException  (  String . format  ( ERROR_UNKNOWN_SELECT_TYPE ,   value . getClass  ( ) . toString  ( ) ) ) ; } } else  if  (  child instanceof UISelectItems )  {  UISelectItems  uiSelectItems =  ( UISelectItems ) child ;  Object  value =  uiSelectItems . getValue  ( ) ;  if  (  value instanceof SelectItem )  {   selectItems . add  (  ( SelectItem ) value ) ; } else  if  (  value instanceof  Object  [ ] )  {   selectItems . addAll  (  collectFromUISelectItemsIterator  ( context , uiSelectItems ,  Arrays . asList  (  (  Object  [ ] ) value ) ) ) ; } else  if  (  value instanceof Iterable )  {   selectItems . addAll  (  collectFromUISelectItemsIterator  ( context , uiSelectItems ,  (  Iterable  <  ? > ) value ) ) ; } else  if  (  value instanceof Map )  {   selectItems . addAll  (  SelectItemsBuilder . fromMap  (  (  Map  <  ? ,  ? > ) value ) ) ; } else  {  throw  new IllegalArgumentException  (  String . format  ( ERROR_UNKNOWN_SELECT_TYPE ,   value . getClass  ( ) . toString  ( ) ) ) ; } } }  return selectItems ; }   public static  List  < SelectItem > collectFromUISelectItemsIterator  (  FacesContext facesContext ,  UISelectItems uiSelectItems ,   Iterable  <  ? > items )  {   final  List  < SelectItem >  selectItems =  new  ArrayList  < SelectItem >  ( ) ;   final  Map  < String , Object >  attributes =  uiSelectItems . getAttributes  ( ) ;  String  var =  ( String )  attributes . get  ( "var" ) ;  ScopedRunner  scopedRunner =  new ScopedRunner  ( facesContext ) ;  for (  final Object item : items )  {  if  (  item instanceof SelectItem )  {   selectItems . add  (  ( SelectItem ) item ) ;  continue ; }  if  (  !  isEmpty  ( var ) )  {   scopedRunner . with  ( var , item ) ; }   scopedRunner . invoke  (  new  Callback . Void  ( )  {    @ Override public void invoke  ( )  {  Object  itemValue =  getItemValue  ( attributes , item ) ;  Object  noSelectionValue =  attributes . get  ( "noSelectionValue" ) ;  boolean  itemValueIsNoSelectionValue =   noSelectionValue != null &&  noSelectionValue . equals  ( itemValue ) ;   selectItems . add  (  new SelectItem  ( itemValue ,  getItemLabel  ( attributes , itemValue ) ,  getItemDescription  ( attributes ) ,  getBooleanAttribute  ( attributes , "itemDisabled" , false ) ,  getBooleanAttribute  ( attributes , "itemLabelEscaped" , true ) ,   getBooleanAttribute  ( attributes , "noSelectionOption" , false ) || itemValueIsNoSelectionValue ) ) ; } } ) ; }  return selectItems ; }   private static Object getItemValue  (   Map  < String , Object > attributes ,  Object item )  {  Object  itemValue =  attributes . get  ( "itemValue" ) ;  if  (  itemValue == null )  {   itemValue = item ; }  return itemValue ; }   private static String getItemLabel  (   Map  < String , Object > attributes ,  Object itemValue )  {  Object  itemLabelObj =  attributes . get  ( "itemLabel" ) ;  String  itemLabel = null ;  if  (  itemLabelObj != null )  {   itemLabel =  itemLabelObj . toString  ( ) ; } else  {   itemLabel =  itemValue . toString  ( ) ; }  return itemLabel ; }   private static String getItemDescription  (   Map  < String , Object > attributes )  {  Object  itemDescriptionObj =  attributes . get  ( "itemDescription" ) ;  String  itemDescription = null ;  if  (  itemDescriptionObj != null )  {   itemDescription =  itemDescriptionObj . toString  ( ) ; }  return itemDescription ; }   private static boolean getBooleanAttribute  (   Map  < String , Object > attributes ,  String key ,  boolean defaultValue )  {  Object  valueObj =  attributes . get  ( key ) ;  boolean  value = defaultValue ;  if  (  valueObj != null )  {   value =  Boolean . parseBoolean  (  valueObj . toString  ( ) ) ; }  return value ; } }