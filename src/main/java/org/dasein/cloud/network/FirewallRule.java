  package    org . dasein . cloud . network ;   import   javax . annotation . Nonnegative ;  import   javax . annotation . Nonnull ;  import   javax . annotation . Nullable ;    @ SuppressWarnings  ( "UnusedDeclaration" ) public class FirewallRule  implements   Comparable  < FirewallRule >  {   static private  @ Nonnull RuleTarget toSourceDestination  (    @ Nonnull String source )  {   String  [ ]  parts =  source . split  ( "\\." ) ;  if  (   parts . length == 4 )  {   int  idx =   parts [ 3 ] . indexOf  ( "/" ) ;  boolean  num = true ;  if  (  idx > 0 )  {    parts [ 3 ] =   parts [ 3 ] . substring  ( 0 , idx ) ; }  for ( String p : parts )  {  try  {   Integer . parseInt  ( p ) ; }  catch (   NumberFormatException ignore )  {   num = false ;  break ; } }  if  ( num )  {  return  RuleTarget . getCIDR  ( source ) ; } }  return  RuleTarget . getGlobal  ( source ) ; }   static public  @ Nonnull FirewallRule getInstance  (    @ Nullable String firewallRuleId ,    @ Nonnull String providerFirewallId ,    @ Nonnull String source ,    @ Nonnull Protocol protocol ,   int port )  {  FirewallRule  rule =  new FirewallRule  ( ) ;    rule . sourceEndpoint =  toSourceDestination  ( source ) ;    rule . destinationEndpoint =  RuleTarget . getGlobal  ( providerFirewallId ) ;    rule . direction =  Direction . INGRESS ;    rule . endPort = port ;    rule . firewallId = providerFirewallId ;    rule . permission =  Permission . ALLOW ;    rule . protocol = protocol ;    rule . startPort = port ;    rule . precedence = 0 ;    rule . providerRuleId =  (   firewallRuleId == null ?  getRuleId  (  rule . firewallId ,  rule . sourceEndpoint ,  rule . direction ,  rule . protocol ,  rule . permission ,  rule . destinationEndpoint ,  rule . startPort ,  rule . endPort ) : firewallRuleId ) ;  return rule ; }   static public  @ Nonnull FirewallRule getInstance  (    @ Nullable String firewallRuleId ,    @ Nonnull String providerFirewallId ,    @ Nonnull String source ,    @ Nonnull Protocol protocol ,    @ Nonnull RuleTarget target ,   int port )  {  FirewallRule  rule =  new FirewallRule  ( ) ;    rule . sourceEndpoint =  toSourceDestination  ( source ) ;    rule . destinationEndpoint = target ;    rule . direction =  Direction . INGRESS ;    rule . endPort = port ;    rule . firewallId = providerFirewallId ;    rule . permission =  Permission . ALLOW ;    rule . protocol = protocol ;    rule . startPort = port ;    rule . precedence = 0 ;    rule . providerRuleId =  (   firewallRuleId == null ?  getRuleId  (  rule . firewallId ,  rule . sourceEndpoint ,  rule . direction ,  rule . protocol ,  rule . permission ,  rule . destinationEndpoint ,  rule . startPort ,  rule . endPort ) : firewallRuleId ) ;  return rule ; }   static public  @ Nonnull FirewallRule getInstance  (    @ Nullable String firewallRuleId ,    @ Nonnull String providerFirewallId ,    @ Nonnull String source ,    @ Nonnull Direction direction ,    @ Nonnull Protocol protocol ,    @ Nonnull Permission permission ,    @ Nonnull RuleTarget target ,   int port )  {  FirewallRule  rule =  new FirewallRule  ( ) ;  if  (  direction . equals  (  Direction . INGRESS ) )  {    rule . sourceEndpoint =  toSourceDestination  ( source ) ;    rule . destinationEndpoint = target ; } else  {    rule . sourceEndpoint = target ;    rule . destinationEndpoint =  toSourceDestination  ( source ) ; }    rule . direction = direction ;    rule . endPort = port ;    rule . firewallId = providerFirewallId ;    rule . permission = permission ;    rule . protocol = protocol ;    rule . startPort = port ;    rule . precedence = 0 ;    rule . providerRuleId =  (   firewallRuleId == null ?  getRuleId  (  rule . firewallId ,  rule . sourceEndpoint ,  rule . direction ,  rule . protocol ,  rule . permission ,  rule . destinationEndpoint ,  rule . startPort ,  rule . endPort ) : firewallRuleId ) ;  return rule ; }   static public  @ Nonnull FirewallRule getInstance  (    @ Nullable String firewallRuleId ,    @ Nonnull String providerFirewallId ,    @ Nonnull String source ,    @ Nonnull Direction direction ,    @ Nonnull Protocol protocol ,    @ Nonnull Permission permission ,    @ Nonnull RuleTarget target ,   int startPort ,   int endPort )  {  FirewallRule  rule =  new FirewallRule  ( ) ;  if  (  direction . equals  (  Direction . INGRESS ) )  {    rule . sourceEndpoint =  toSourceDestination  ( source ) ;    rule . destinationEndpoint = target ; } else  {    rule . sourceEndpoint = target ;    rule . destinationEndpoint =  toSourceDestination  ( source ) ; }    rule . direction = direction ;    rule . endPort = endPort ;    rule . firewallId = providerFirewallId ;    rule . permission = permission ;    rule . protocol = protocol ;    rule . precedence = 0 ;    rule . startPort = startPort ;    rule . providerRuleId =  (   firewallRuleId == null ?  getRuleId  (  rule . firewallId ,  rule . sourceEndpoint ,  rule . direction ,  rule . protocol ,  rule . permission ,  rule . destinationEndpoint ,  rule . startPort ,  rule . endPort ) : firewallRuleId ) ;  return rule ; }   static public  @ Nonnull FirewallRule getInstance  (    @ Nullable String firewallRuleId ,    @ Nonnull String providerFirewallId ,    @ Nonnull RuleTarget sourceEndpoint ,    @ Nonnull Direction direction ,    @ Nonnull Protocol protocol ,    @ Nonnull Permission permission ,    @ Nonnull RuleTarget destinationEndpoint ,   int startPort ,   int endPort )  {  FirewallRule  rule =  new FirewallRule  ( ) ;    rule . sourceEndpoint = sourceEndpoint ;    rule . destinationEndpoint = destinationEndpoint ;    rule . direction = direction ;    rule . endPort = endPort ;    rule . firewallId = providerFirewallId ;    rule . permission = permission ;    rule . protocol = protocol ;    rule . precedence = 0 ;    rule . startPort = startPort ;    rule . providerRuleId =  (   firewallRuleId == null ?  getRuleId  (  rule . firewallId ,  rule . sourceEndpoint ,  rule . direction ,  rule . protocol ,  rule . permission ,  rule . destinationEndpoint ,  rule . startPort ,  rule . endPort ) : firewallRuleId ) ;  return rule ; }   static public  @ Nonnull String getRuleId  (    @ Nonnull String providerFirewallId ,    @ Nonnull String source ,    @ Nonnull Direction direction ,    @ Nonnull Protocol protocol ,    @ Nonnull Permission permission ,    @ Nullable RuleTarget target ,   int startPort ,   int endPort )  {  if  (  target == null )  {  if  (   Permission . ALLOW . equals  ( permission ) )  {  return           providerFirewallId + ":" + source + ":" + direction + ":" + protocol + ":" + startPort + ":" + endPort ; } else  {  return              Permission . DENY + ":" + providerFirewallId + ":" + source + ":" + direction + ":" + protocol + ":" + startPort + ":" + endPort ; } } else  {  return               permission + ":" + providerFirewallId + ":" + source + ":" + direction + ":" + protocol + ":" + startPort + ":" + endPort + ":" + target ; } }   static public  @ Nonnull String getRuleId  (    @ Nonnull String providerFirewallId ,    @ Nonnull RuleTarget sourceEndpoint ,    @ Nonnull Direction direction ,    @ Nonnull Protocol protocol ,    @ Nonnull Permission permission ,    @ Nullable RuleTarget destinationEndpoint ,   int startPort ,   int endPort )  {  if  (  destinationEndpoint == null )  {  if  (   Permission . ALLOW . equals  ( permission ) )  {  return           providerFirewallId + ":" + sourceEndpoint + ":" + direction + ":" + protocol + ":" + startPort + ":" + endPort ; } else  {  return              Permission . DENY + ":" + providerFirewallId + ":" + sourceEndpoint + ":" + direction + ":" + protocol + ":" + startPort + ":" + endPort ; } } else  {  return               permission + ":" + providerFirewallId + ":" + sourceEndpoint + ":" + direction + ":" + protocol + ":" + startPort + ":" + endPort + ":" + destinationEndpoint ; } }   static public  @ Nullable FirewallRule parseId  (    @ Nonnull String id )  {   String  [ ]  parts =  id . split  ( ":" ) ;  if  (   parts . length < 2 )  {  return null ; }  Permission  permission =  Permission . ALLOW ;   int  i = 0 ;  if  (   parts [ i ] . equalsIgnoreCase  ( "DENY" ) )  {   permission =  Permission . DENY ;   i ++ ; } else  if  (   parts [ i ] . equalsIgnoreCase  ( "ALLOW" ) )  {   i ++ ; }  if  (   parts . length <  i + 1 )  {  return null ; }  String  providerFirewallId =  parts [  i ++ ] ;  if  (   parts . length <  i + 1 )  {  return null ; }  Direction  direction = null ;  RuleTarget  source ;  String  tname =  parts [  i ++ ] ;  if  (   parts . length <  i + 1 )  {  return null ; } else  {  try  {  RuleTargetType  t =  RuleTargetType . valueOf  ( tname ) ;  String  tmp =  parts [  i ++ ] ;   direction =  Direction . valueOf  (  tmp . toUpperCase  ( ) ) ;  switch  ( t )  {   case GLOBAL :   source =  RuleTarget . getGlobal  ( tmp ) ;  break ;   case VM :   source =  RuleTarget . getVirtualMachine  ( tmp ) ;  break ;   case VLAN :   source =  RuleTarget . getVlan  ( tmp ) ;  break ;   case CIDR :   source =  RuleTarget . getCIDR  ( tmp ) ;  break ;   default :  return null ; } }  catch (   Throwable ignore )  {   source =  RuleTarget . getGlobal  ( providerFirewallId ) ; } }  if  (  direction == null )  {  try  {   direction =  Direction . valueOf  (   parts [  i ++ ] . toUpperCase  ( ) ) ; }  catch (   Throwable ignore )  {  return null ; } }  if  (   parts . length <  i + 1 )  {  return null ; }  Protocol  protocol ;  try  {   protocol =  Protocol . valueOf  (   parts [  i ++ ] . toUpperCase  ( ) ) ; }  catch (   Throwable ignore )  {  return null ; }  if  (   parts . length <  i + 1 )  {  return null ; }   int  startPort ;  try  {   startPort =  Integer . parseInt  (  parts [  i ++ ] ) ; }  catch (   NumberFormatException ignore )  {  return null ; }  if  (   parts . length <  i + 1 )  {  return null ; }   int  endPort ;  try  {   endPort =  Integer . parseInt  (  parts [  i ++ ] ) ; }  catch (   NumberFormatException ignore )  {  return null ; }  RuleTarget  target ;  if  (   parts . length <  i + 1 )  {   target =  RuleTarget . getGlobal  ( providerFirewallId ) ; } else  {   tname =  parts [  i ++ ] ;  if  (   parts . length <  i + 1 )  {   target =  RuleTarget . getGlobal  ( providerFirewallId ) ; } else  {  try  {  RuleTargetType  t =  RuleTargetType . valueOf  ( tname ) ;  switch  ( t )  {   case GLOBAL :   target =  RuleTarget . getGlobal  (  parts [ i ] ) ;  break ;   case VM :   target =  RuleTarget . getVirtualMachine  (  parts [ i ] ) ;  break ;   case VLAN :   target =  RuleTarget . getVlan  (  parts [ i ] ) ;  break ;   case CIDR :   target =  RuleTarget . getCIDR  (  parts [ i ] ) ;  break ;   default :  return null ; } }  catch (   Throwable ignore )  {   target =  RuleTarget . getGlobal  ( providerFirewallId ) ; } } }  return  FirewallRule . getInstance  ( null , providerFirewallId , source , direction , protocol , permission , target , startPort , endPort ) ; }   private RuleTarget  destinationEndpoint ;   private Direction  direction ;   private  int  endPort ;   private String  firewallId ;   private Permission  permission ;   private  int  precedence ;   private Protocol  protocol ;   private String  providerRuleId ;   private RuleTarget  sourceEndpoint ;   private  int  startPort ;   private FirewallRule  ( )  { }    @ Override public  int compareTo  (  FirewallRule other )  {  if  (  other == null )  {  return  - 1 ; }  if  (  other == this )  {  return 0 ; }  if  (  direction . equals  (  other . direction ) )  {  if  (  precedence ==  other . precedence )  {  return  providerRuleId . compareTo  (  other . providerRuleId ) ; }  if  (  precedence ==  - 1 )  {  return 1 ; } else  if  (   other . precedence ==  - 1 )  {  return  - 1 ; }  return   (  new Integer  ( precedence ) ) . compareTo  ( precedence ) ; }  return  direction . compareTo  (  other . direction ) ; }    @ Override public boolean equals  (  Object other )  {  if  (  other == null )  {  return false ; }  if  (  other == this )  {  return true ; }  if  (  !    getClass  ( ) . getName  ( ) . equals  (   other . getClass  ( ) . getName  ( ) ) )  {  return false ; }  return   getProviderRuleId  ( ) . equals  (   (  ( FirewallRule ) other ) . getProviderRuleId  ( ) ) ; }   public  @ Nullable String getCidr  ( )  {  return  getSource  ( ) ; }   public  @ Nonnull RuleTarget getDestinationEndpoint  ( )  {  return destinationEndpoint ; }   public  @ Nonnull RuleTarget getTarget  ( )  {  if  (  destinationEndpoint == null )  {  return  RuleTarget . getGlobal  ( firewallId ) ; }  return destinationEndpoint ; }   public  @ Nonnull Direction getDirection  ( )  {  return  (   direction == null ?  Direction . INGRESS : direction ) ; }   public  int getEndPort  ( )  {  return endPort ; }   public  @ Nonnull String getFirewallId  ( )  {  return firewallId ; }   public  @ Nonnull Permission getPermission  ( )  {  return  (   permission == null ?  Permission . ALLOW : permission ) ; }   public  @ Nonnegative  int getPrecedence  ( )  {  return precedence ; }   public  @ Nonnull Protocol getProtocol  ( )  {  return protocol ; }   public  @ Nonnull String getProviderRuleId  ( )  {  return providerRuleId ; }   public  @ Nonnull String getSource  ( )  {  String  source ;  switch  (  sourceEndpoint . getRuleTargetType  ( ) )  {   case GLOBAL :   source =  sourceEndpoint . getProviderFirewallId  ( ) ;  if  (  source == null )  {   source = firewallId ; }  return source ;   case CIDR :  return  sourceEndpoint . getCidr  ( ) ;   case VM :  return  sourceEndpoint . getProviderVirtualMachineId  ( ) ;   case VLAN :  return  sourceEndpoint . getProviderVlanId  ( ) ; }  throw  new RuntimeException  (  "Invalid rule target type: " +  sourceEndpoint . getRuleTargetType  ( ) ) ; }   public  @ Nonnull RuleTarget getSourceEndpoint  ( )  {  return sourceEndpoint ; }   public  int getStartPort  ( )  {  return startPort ; }    @ Override public  @ Nonnull String toString  ( )  {  return  (              direction + "/" + permission + ": " + sourceEndpoint + "->" + protocol + ":" + destinationEndpoint + " [" + startPort + "-" + endPort + "]" ) ; }   public  @ Nonnull FirewallRule withPrecedence  (    @ Nonnegative  int precedence )  {    this . precedence = precedence ;  return this ; } }