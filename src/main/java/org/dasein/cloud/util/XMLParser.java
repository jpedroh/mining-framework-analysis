  package    org . dasein . cloud . util ;   import    org . w3c . dom . Document ;  import    org . xml . sax . SAXException ;  import   javax . annotation . Nonnull ;  import    javax . xml . parsers . DocumentBuilder ;  import    javax . xml . parsers . DocumentBuilderFactory ;  import    javax . xml . parsers . ParserConfigurationException ;  import   java . io . IOException ;  import   java . io . InputStream ;  import   java . util . Stack ;   public class XMLParser  {   static public class DBPair  {   public DocumentBuilderFactory  factory ;   public DocumentBuilder  builder ;   public void release  ( )  {   builder . reset  ( ) ;  synchronized  ( xercesSucksWorkaround )  {   xercesSucksWorkaround . push  ( this ) ; } } }   static private final  Stack  < DBPair >  xercesSucksWorkaround =  new  Stack  < DBPair >  ( ) ;   static public  @ Nonnull DBPair getCachedDocumentBuilder  ( )  throws ParserConfigurationException  {  synchronized  ( xercesSucksWorkaround )  {  if  (  !  xercesSucksWorkaround . isEmpty  ( ) )  {  return  xercesSucksWorkaround . pop  ( ) ; } }  DocumentBuilderFactory  dbf =  DocumentBuilderFactory . newInstance  ( ) ;  DocumentBuilder  builder =  dbf . newDocumentBuilder  ( ) ;  DBPair  pair =  new DBPair  ( ) ;    pair . factory = dbf ;    pair . builder = builder ;  return pair ; }   static public Document parse  (    @ Nonnull InputStream input )  throws ParserConfigurationException , IOException , SAXException  {  DBPair  pair =  getCachedDocumentBuilder  ( ) ;  try  {  Document  doc =   pair . builder . parse  ( input ) ;   input . close  ( ) ;  return doc ; }  finally  {   pair . release  ( ) ; } } }