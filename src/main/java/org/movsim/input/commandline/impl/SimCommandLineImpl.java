  package     org . movsim . input . commandline . impl ;   import     org . apache . commons . cli . CommandLine ;  import     org . apache . commons . cli . CommandLineParser ;  import     org . apache . commons . cli . GnuParser ;  import     org . apache . commons . cli . HelpFormatter ;  import     org . apache . commons . cli . Option ;  import     org . apache . commons . cli . OptionBuilder ;  import     org . apache . commons . cli . Options ;  import     org . apache . commons . cli . ParseException ;  import     org . movsim . input . commandline . SimCommandLine ;  import     org . movsim . utilities . impl . FileUtils ;  import   org . slf4j . Logger ;  import   org . slf4j . LoggerFactory ;   public class SimCommandLineImpl  implements  SimCommandLine  {   private static Logger  logger =  LoggerFactory . getLogger  (  SimCommandLineImpl . class ) ;   private Options  options ;   private String  simulationFilename ;   private boolean  withXmlSimulationConfigFile = false ;   private boolean  gui = false ;   private boolean  onlyValidation = false ;   private boolean  writeInternalXml ;   public SimCommandLineImpl  (   String  [ ] args )  {   logger . debug  ( "Begin CommandLine Parser" ) ;   createOptions  ( ) ;   createParserAndParse  ( args ) ;   logger . debug  ( "End CommandLine Parser" ) ; }   private void createOptions  ( )  {   options =  new Options  ( ) ;   options . addOption  ( "h" , "help" , false , "print this message" ) ;   options . addOption  ( "g" , "gui" , false , "start a Desktop GUI" ) ;   options . addOption  ( "v" , "validate" , false , "parse xml input file for validation (without simulation)" ) ;   options . addOption  ( "i" , "internal_xml" , false , "Writes internal xml (the simulation configuration) after validation from dtd. No simulation" ) ;   options . addOption  ( "w" , "write dtd" , false , "Writes dtd file to filesystem." ) ;   options . addOption  ( "l" , "logproperties" , false , "Writes log4f.properties to file. You can adjust the logging properties to your needs. Just place the file in calling directory of MovSim." ) ;   options . addOption  ( "s" , "scenarios" , false , "Writes example scenarios as xml for simulation to folder 'sim'." ) ;   OptionBuilder . withArgName  ( "file" ) ;   OptionBuilder . hasArg  ( ) ;   OptionBuilder . withDescription  ( "argument has to be a xml file specifing the configuration of the simulation" ) ;   final Option  xmlSimFile =  OptionBuilder . create  ( "f" ) ;   options . addOption  ( xmlSimFile ) ; }   private void createParserAndParse  (   String  [ ] args )  {   final CommandLineParser  parser =  new GnuParser  ( ) ;  try  {   final CommandLine  cmdline =  parser . parse  ( options , args ) ;   parse  ( cmdline ) ; }  catch (   final  ParseException exp )  {   logger . error  ( "Parsing failed.  Reason: {}" ,  exp . getMessage  ( ) ) ;    System . out . printf  ( "Parsing failed.  Reason: %s %n" ,  exp . getMessage  ( ) ) ;   optHelp  ( ) ; } }   private void parse  (  CommandLine cmdline )  {  if  (  cmdline . hasOption  ( "h" ) )  {   optHelp  ( ) ; }  if  (  cmdline . hasOption  ( "f" ) )  {   optSimulation  ( cmdline ) ; }  if  (  cmdline . hasOption  ( "g" ) )  {   optGUI  ( ) ; }  if  (  cmdline . hasOption  ( "v" ) )  {   optValidation  ( ) ; }  if  (  cmdline . hasOption  ( "i" ) )  {   optInternalXml  ( ) ; }  if  (  cmdline . hasOption  ( "w" ) )  {   optWriteDtd  ( ) ; }  if  (  cmdline . hasOption  ( "l" ) )  {   optWriteLoggingProperties  ( ) ; }  if  (  cmdline . hasOption  ( "s" ) )  {   optWriteScenarios  ( ) ; } }   private void optWriteScenarios  ( )  {  try  {  InputStreamReader  isr =  new InputStreamReader  (  System . in ) ;  BufferedReader  br =  new BufferedReader  ( isr ) ;    System . out . println  ( "Writing scenarios to folder 'sim'" ) ;    System . out . println  ( "Overrides existing filenames. Do you want to proceed? <y/n>" ) ;  String  proceed =  br . readLine  ( ) ; ;  if  (  !  (   proceed . equals  ( "yes" ) ||  (  proceed . equals  ( "y" ) ) ) )  {    System . out . println  ( "Exit. Nothing written." ) ;   System . exit  ( 0 ) ; } }  catch (   IOException e )  {   e . printStackTrace  ( ) ; }   FileUtils . createDir  ( "sim" , "" ) ;   String  [ ]  models =  { "IDM" , "IIDM" , "ACC" , "OVM" , "VDIFF" , "BARL" , "GIPPS" , "KCA" , "NSM" } ;   String  [ ]  scenario =  { "onramp" , "startStop" } ;  for ( String sce : scenario )  {  for ( String model : models )  {   FileUtils . resourceToFile  (     "/sim/" + sce + "_" + model + ".xml" ,     "sim/" + sce + "_" + model + ".xml" ) ; } }   logger . info  ( "Example scenarios written to folder 'sim'. Exit." ) ;   System . exit  ( 0 ) ; }   private void optWriteLoggingProperties  ( )  {  String  resource = "/sim/log4j.properties" ;  String  filename = "log4j.properties" ;   FileUtils . resourceToFile  ( resource , filename ) ; }   private void optWriteDtd  ( )  {  String  resource = "/sim/multiModelTrafficSimulatorInput.dtd" ;  String  filename = "multiModelTrafficSimulatorInput.dtd" ;   FileUtils . resourceToFile  ( resource , filename ) ; }   private void optInternalXml  ( )  {   writeInternalXml = true ; }   private void optValidation  ( )  {   onlyValidation = true ; }   private void optGUI  ( )  {   gui = true ; }   private void optSimulation  (  CommandLine cmdline )  {   simulationFilename =  cmdline . getOptionValue  ( 'f' ) ;  if  (  simulationFilename == null )  {   logger . warn  ( "No configfile as option passed. Start Simulation with default." ) ; } else  {   withXmlSimulationConfigFile =  validateSimulationFileName  ( simulationFilename ) ; } }   private void optHelp  ( )  {   logger . debug  ( "option -h. Exit Programm" ) ;   final HelpFormatter  formatter =  new HelpFormatter  ( ) ;   formatter . printHelp  ( "App" , options ) ;   System . exit  ( 0 ) ; }   private boolean validateSimulationFileName  (  String filename )  {   final  int  i =  filename . lastIndexOf  ( ".xml" ) ;  if  (  i < 0 )  {   logger . error  ( "Please provide simulation file with ending \".xml\" as argument with option -s, exit. " ) ;   System . exit  ( 1 ) ; }   logger . info  (  "projectName = " +  filename . substring  ( 0 , i ) ) ;  return true ; }    @ Override public boolean isWithXmlSimulationConfigFile  ( )  {  return withXmlSimulationConfigFile ; }    @ Override public String getSimulationFilename  ( )  {  return simulationFilename ; }    @ Override public boolean isGui  ( )  {  return gui ; }   public boolean isOnlyValidation  ( )  {  return onlyValidation ; }   public boolean isWriteInternalXml  ( )  {  return writeInternalXml ; } }