  package   net . tridentsdk . base ;   import    net . tridentsdk . doc . Internal ;  import    net . tridentsdk . doc . Policy ;  import    net . tridentsdk . world . World ;  import    javax . annotation . concurrent . GuardedBy ;  import    javax . annotation . concurrent . ThreadSafe ;  import   java . io . Serializable ;    @ ThreadSafe  @ Internal  ( "public access for convenience only" ) public class AbstractVector  <  T  extends  AbstractVector  < T > >  implements  Serializable  {   private static final  long  serialVersionUID = 218773668333902972L ;   protected static boolean eq  (   double d0 ,   double d1 )  {  return   Double . compare  ( d0 , d1 ) == 0 ; }   protected static  double square  (   double d )  {  return  d * d ; }    @ GuardedBy  ( "lock" ) protected  double  x ;    @ GuardedBy  ( "lock" ) protected  double  y ;    @ GuardedBy  ( "lock" ) protected  double  z ;   protected final Object  lock =  new Object  ( ) ;   protected void writeFields  (  T vector )  { }   public AbstractVector  ( )  {  this  ( 0D , 0D , 0D ) ; }   public AbstractVector  (   int x ,   int y ,   int z )  {  this  (  (  double ) x ,  (  double ) y ,  (  double ) z ) ; }   public AbstractVector  (   double x ,   double y ,   double z )  {    this . x = x ;    this . y = y ;    this . z = z ; }   public void setX  (   int x )  {  synchronized  (  this . lock )  {    this . x = x ; } }   public void setX  (   double x )  {  synchronized  (  this . lock )  {    this . x = x ; } }   public void setY  (   int y )  {  synchronized  (  this . lock )  {    this . y = y ; } }   public void setY  (   double y )  {  synchronized  (  this . lock )  {    this . y = y ; } }   public void setZ  (   int z )  {  synchronized  (  this . lock )  {    this . z = z ; } }   public void setZ  (   double z )  {  synchronized  (  this . lock )  {    this . z = z ; } }   public void set  (   int x ,   int y ,   int z )  {  synchronized  (  this . lock )  {    this . x = x ;    this . y = y ;    this . z = z ; } }   public void set  (   double x ,   double y ,   double z )  {  synchronized  (  this . lock )  {    this . x = x ;    this . y = y ;    this . z = z ; } }   public T add  (  T vector )  {  synchronized  (  this . lock )  {  synchronized  (  vector . lock )  {   this . addImpl  (  vector . x ,  vector . y ,  vector . z ) ; } }  return  ( T ) this ; }   public T add  (   int x ,   int y ,   int z )  {  synchronized  (  this . lock )  {   this . addImpl  (  (  double ) x ,  (  double ) y ,  (  double ) z ) ; }  return  ( T ) this ; }   public T add  (   double x ,   double y ,   double z )  {  synchronized  (  this . lock )  {   this . addImpl  ( x , y , z ) ; }  return  ( T ) this ; }    @ Internal  @ Policy  ( "GuardedBy this.lock" ) private void addImpl  (   double x ,   double y ,   double z )  {    this . x += x ;    this . y += y ;    this . z += z ; }   public T subtract  (  T vector )  {  synchronized  (  this . lock )  {  synchronized  (  vector . lock )  {   this . subImpl  (  vector . x ,  vector . y ,  vector . z ) ; } }  return  ( T ) this ; }   public T subtract  (   int x ,   int y ,   int z )  {  synchronized  (  this . lock )  {   this . subImpl  (  (  double ) x ,  (  double ) y ,  (  double ) z ) ; }  return  ( T ) this ; }   public T subtract  (   double x ,   double y ,   double z )  {  synchronized  (  this . lock )  {   this . subImpl  ( x , y , z ) ; }  return  ( T ) this ; }    @ Internal  @ Policy  ( "GuardedBy this.lock" ) private void subImpl  (   double x ,   double y ,   double z )  {    this . x -= x ;    this . y -= y ;    this . z -= z ; }   public T multiply  (  T vector )  {  synchronized  (  this . lock )  {  synchronized  (  vector . lock )  {   this . mulImpl  (  vector . x ,  vector . y ,  vector . z ) ; } }  return  ( T ) this ; }   public T multiply  (   int x ,   int y ,   int z )  {  synchronized  (  this . lock )  {   this . mulImpl  (  (  double ) x ,  (  double ) y ,  (  double ) z ) ; }  return  ( T ) this ; }   public T multiply  (   double x ,   double y ,   double z )  {  synchronized  (  this . lock )  {   this . mulImpl  ( x , y , z ) ; }  return  ( T ) this ; }    @ Internal  @ Policy  ( "GuardedBy this.lock" ) private void mulImpl  (   double x ,   double y ,   double z )  {    this . x *= x ;    this . y *= y ;    this . z *= z ; }   public T divide  (  T vector )  {  synchronized  (  this . lock )  {  synchronized  (  vector . lock )  {   this . divImpl  (  vector . x ,  vector . y ,  vector . z ) ; } }  return  ( T ) this ; }   public T divide  (   int x ,   int y ,   int z )  {  synchronized  (  this . lock )  {   this . divImpl  (  (  double ) x ,  (  double ) y ,  (  double ) z ) ; }  return  ( T ) this ; }   public T divide  (   double x ,   double y ,   double z )  {  synchronized  (  this . lock )  {   this . divImpl  ( x , y , z ) ; }  return  ( T ) this ; }    @ Internal  @ Policy  ( "GuardedBy this.lock" ) private void divImpl  (   double x ,   double y ,   double z )  {    this . x /= x ;    this . y /= y ;    this . z /= z ; }   public void vecWrite  (   AbstractVector  <  ? > vector )  {  synchronized  (  this . lock )  {    vector . x =  this . x ;    vector . y =  this . y ;    vector . z =  this . z ; } }   public Position toPosition  (  World world )  {  synchronized  (  this . lock )  {  return  new Position  ( world ,  this . x ,  this . y ,  this . z ) ; } }   public void write  (  T vector )  {  synchronized  (  this . lock )  {    vector . x =  this . x ;    vector . y =  this . y ;    vector . z =  this . z ;   this . writeFields  ( vector ) ; } }    @ Override public boolean equals  (  Object obj )  {  if  (  obj instanceof AbstractVector )  {  AbstractVector  v =  ( AbstractVector ) obj ;  synchronized  (  this . lock )  {  return    eq  (  this . x ,  v . x ) &&  eq  (  this . y ,  v . y ) &&  eq  (  this . z ,  v . z ) ; } }  return false ; }    @ Override public  int hashCode  ( )  {  synchronized  (  this . lock )  {   int  hash = 1 ;   hash =   31 * hash +  Long . hashCode  (  Double . doubleToLongBits  (  this . x ) ) ;   hash =   31 * hash +  Long . hashCode  (  Double . doubleToLongBits  (  this . y ) ) ;   hash =   31 * hash +  Long . hashCode  (  Double . doubleToLongBits  (  this . z ) ) ;  return hash ; } }    @ Override public String toString  ( )  {  synchronized  (  this . lock )  {  return       "Vector{" +  this . x + ',' +  this . y + ',' +  this . z + '}' ; } }   public  double getX  ( )  {  synchronized  (  this . lock )  {  return  this . x ; } }   public  int getIntX  ( )  {  synchronized  (  this . lock )  {  return  (  int )  this . x ; } }   public  double getY  ( )  {  synchronized  (  this . lock )  {  return  this . y ; } }   public  int getIntY  ( )  {  synchronized  (  this . lock )  {  return  (  int )  this . y ; } }   public  double getZ  ( )  {  synchronized  (  this . lock )  {  return  this . z ; } }   public  int getIntZ  ( )  {  synchronized  (  this . lock )  {  return  (  int )  this . z ; } } }