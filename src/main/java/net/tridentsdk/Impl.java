  package  net . tridentsdk ;   import    net . tridentsdk . base . Substance ;  import     net . tridentsdk . command . logger . LogHandler ;  import     net . tridentsdk . command . logger . Logger ;  import    net . tridentsdk . config . Config ;  import    net . tridentsdk . doc . Internal ;  import    net . tridentsdk . doc . Policy ;  import    net . tridentsdk . inventory . Inventory ;  import    net . tridentsdk . inventory . InventoryType ;  import    net . tridentsdk . inventory . Item ;  import    net . tridentsdk . meta . ItemMeta ;  import     net . tridentsdk . ui . bossbar . BossBar ;  import     net . tridentsdk . ui . tablist . TabList ;  import   javax . annotation . Nonnull ;  import    javax . annotation . concurrent . ThreadSafe ;  import    java . nio . file . Path ;  import    java . util . concurrent . CountDownLatch ;    @ Internal  @ ThreadSafe public final class Impl  {   private static final CountDownLatch  IMPL_LATCH =  new CountDownLatch  ( 1 ) ;    @ Policy  ( "Sync writes" ) private static ImplementationProvider  impl ;   private static final Object  lock =  new Object  ( ) ;   private Impl  ( )  { }   public static void setImpl  (  ImplementationProvider i )  {  synchronized  ( lock )  {  if  (   Impl . impl == null )  {    Impl . impl = i ;   IMPL_LATCH . countDown  ( ) ; } } }    @ Nonnull public static ImplementationProvider get  ( )  {  try  {   IMPL_LATCH . await  ( ) ;  return impl ; }  catch (   InterruptedException e )  {  throw  new RuntimeException  ( e ) ; } }    @ Internal public interface ImplementationProvider  {  Config newCfg  (  Path p ) ;  Logger newLogger  (  String s ) ;  void attachHandler  (  Logger logger ,  LogHandler handler ) ;  boolean removeHandler  (  Logger logger ,  LogHandler handler ) ;  TabList newTabList  ( ) ;  BossBar newBossBar  ( ) ;  Item newItem  (  Substance substance ,   int count ,   byte damage ,  ItemMeta meta ) ;  Server getServer  ( ) ;  TabList getGlobalTabList  ( ) ;  Inventory newInventory  (  InventoryType type ,   int slots ) ; } }