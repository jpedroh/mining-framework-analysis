  package    net . technicpack . launchercore . install ;   import     net . technicpack . launchercore . exception . PackNotAvailableOfflineException ;  import     net . technicpack . launchercore . install . tasks .  * ;  import     net . technicpack . launchercore . util . DownloadListener ;  import     net . technicpack . launchercore . util . Utils ;  import     net . technicpack . launchercore . util . ZipUtils ;  import     org . apache . commons . io . FileUtils ;  import  javax . swing .  * ;  import  java . awt .  * ;  import   java . io . File ;  import   java . io . IOException ;  import    java . nio . charset . Charset ;  import     net . technicpack . launchercore . modpacks . ModpackModel ;  import    net . technicpack . platform . IPlatformApi ;  import    net . technicpack . utilslib . Utils ;  import    net . technicpack . utilslib . ZipUtils ;   public class ModpackInstaller  <  VersionData >  {   private final IPlatformApi  platformApi ;   private final String  clientId ;   public ModpackInstaller  (  IPlatformApi platformApi ,  String clientId )  {    this . clientId = clientId ;    this . platformApi = platformApi ; }   public VersionData installPack  (   InstallTasksQueue  < VersionData > tasksQueue ,  ModpackModel modpack ,  String build )  throws IOException , InterruptedException  {   modpack . save  ( ) ;   modpack . initDirectories  ( ) ;   tasksQueue . runAllTasks  ( ) ;  Version  versionFile =  new Version  ( build , false ) ;   versionFile . save  (  modpack . getBinDir  ( ) ) ;  Version  installedVersion =  modpack . getInstalledVersion  ( ) ;  if  (  installedVersion == null )  {   platformApi . incrementPackInstalls  (  modpack . getName  ( ) ) ;   Utils . sendTracking  ( "installModpack" ,  modpack . getName  ( ) ,  modpack . getBuild  ( ) , clientId ) ; }  return  tasksQueue . getCompleteVersion  ( ) ; } }