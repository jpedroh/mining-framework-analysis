  package    net . logstash . logback . layout ;   import   java . io . IOException ;  import   java . io . OutputStreamWriter ;  import   java . io . Writer ;  import     net . logstash . logback . composite . CompositeJsonFormatter ;  import     net . logstash . logback . composite . JsonProviders ;  import     net . logstash . logback . decorate . JsonFactoryDecorator ;  import     net . logstash . logback . decorate . JsonGeneratorDecorator ;  import     net . logstash . logback . encoder . CompositeJsonEncoder ;  import     net . logstash . logback . encoder . SeparatorParser ;  import     net . logstash . logback . util . ReusableByteBuffer ;  import     net . logstash . logback . util . ReusableByteBuffers ;  import     ch . qos . logback . core . Layout ;  import     ch . qos . logback . core . LayoutBase ;  import      ch . qos . logback . core . pattern . PatternLayoutBase ;  import      ch . qos . logback . core . spi . DeferredProcessingAware ;   public abstract class CompositeJsonLayout  <  Event  extends DeferredProcessingAware >  extends  LayoutBase  < Event >  {   private boolean  immediateFlush = true ;   private  Layout  < Event >  prefix ;   private  Layout  < Event >  suffix ;   private String  lineSeparator ;   private  int  minBufferSize = 1024 ;   private ReusableByteBuffers  bufferPool ;   private final  CompositeJsonFormatter  < Event >  formatter ;   public CompositeJsonLayout  ( )  {  super  ( ) ;    this . formatter =  createFormatter  ( ) ; }   protected abstract  CompositeJsonFormatter  < Event > createFormatter  ( ) ;    @ Override public String doLayout  (  Event event )  {  if  (  !  isStarted  ( ) )  {  throw  new IllegalStateException  ( "Layout is not started" ) ; }  ReusableByteBuffer  buffer =   this . bufferPool . getBuffer  ( ) ;  try  (  OutputStreamWriter writer =  new OutputStreamWriter  ( buffer ) )  {   writeLayout  ( prefix , writer , event ) ;   writeFormatter  ( writer , event ) ;   writeLayout  ( suffix , writer , event ) ;  if  (  lineSeparator != null )  {   writer . write  ( lineSeparator ) ; }   writer . flush  ( ) ;  return  new String  (  buffer . toByteArray  ( ) ) ; }  catch (   IOException e )  {   addWarn  ( "Error formatting logging event" , e ) ;  return null ; }  finally  {   bufferPool . releaseBuffer  ( buffer ) ; } }   private void writeLayout  (   Layout  < Event > wrapped ,  Writer writer ,  Event event )  throws IOException  {  if  (  wrapped == null )  {  return ; }  String  str =  wrapped . doLayout  ( event ) ;  if  (  str != null )  {   writer . write  ( str ) ; } }   private void writeFormatter  (  Writer writer ,  Event event )  throws IOException  {    this . formatter . writeEventToWriter  ( event , writer ) ; }    @ Override public void start  ( )  {   super . start  ( ) ;    this . bufferPool =  new ReusableByteBuffers  (  this . minBufferSize ) ;   formatter . setContext  (  getContext  ( ) ) ;   formatter . start  ( ) ;   startWrapped  ( prefix ) ;   startWrapped  ( suffix ) ; }   private void startWrapped  (   Layout  < Event > wrapped )  {  if  (  wrapped instanceof PatternLayoutBase )  {   PatternLayoutBase  < Event >  layout =  (  PatternLayoutBase  < Event > ) wrapped ;   layout . setPostCompileProcessor  ( null ) ;   layout . start  ( ) ; }  if  (   wrapped != null &&  !  wrapped . isStarted  ( ) )  {   wrapped . start  ( ) ; } }    @ Override public void stop  ( )  {   super . stop  ( ) ;   formatter . stop  ( ) ;   stopWrapped  ( prefix ) ;   stopWrapped  ( suffix ) ; }   private void stopWrapped  (   Layout  < Event > wrapped )  {  if  (   wrapped != null &&  !  wrapped . isStarted  ( ) )  {   wrapped . stop  ( ) ; } }   public  JsonProviders  < Event > getProviders  ( )  {  return  formatter . getProviders  ( ) ; }   public void setProviders  (   JsonProviders  < Event > jsonProviders )  {   formatter . setProviders  ( jsonProviders ) ; }   public boolean isImmediateFlush  ( )  {  return immediateFlush ; }   public void setImmediateFlush  (  boolean immediateFlush )  {    this . immediateFlush = immediateFlush ; }   public JsonFactoryDecorator getJsonFactoryDecorator  ( )  {  return  formatter . getJsonFactoryDecorator  ( ) ; }   public void setJsonFactoryDecorator  (  JsonFactoryDecorator jsonFactoryDecorator )  {   formatter . setJsonFactoryDecorator  ( jsonFactoryDecorator ) ; }   public JsonGeneratorDecorator getJsonGeneratorDecorator  ( )  {  return  formatter . getJsonGeneratorDecorator  ( ) ; }   public void setJsonGeneratorDecorator  (  JsonGeneratorDecorator jsonGeneratorDecorator )  {   formatter . setJsonGeneratorDecorator  ( jsonGeneratorDecorator ) ; }   public void setFindAndRegisterJacksonModules  (  boolean findAndRegisterJacksonModules )  {   formatter . setFindAndRegisterJacksonModules  ( findAndRegisterJacksonModules ) ; }   protected  CompositeJsonFormatter  < Event > getFormatter  ( )  {  return formatter ; }   public  Layout  < Event > getPrefix  ( )  {  return prefix ; }   public void setPrefix  (   Layout  < Event > prefix )  {    this . prefix = prefix ; }   public  Layout  < Event > getSuffix  ( )  {  return suffix ; }   public void setSuffix  (   Layout  < Event > suffix )  {    this . suffix = suffix ; }   public String getLineSeparator  ( )  {  return lineSeparator ; }   public void setLineSeparator  (  String lineSeparator )  {    this . lineSeparator =  SeparatorParser . parseSeparator  ( lineSeparator ) ; }   public  int getMinBufferSize  ( )  {  return minBufferSize ; }   public void setMinBufferSize  (   int minBufferSize )  {    this . minBufferSize = minBufferSize ; } }