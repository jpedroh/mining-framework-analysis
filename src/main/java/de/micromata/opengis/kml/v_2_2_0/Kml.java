  package     de . micromata . opengis . kml . v_2_2_0 ;   import   java . net . URLDecoder ;  import   java . net . URLEncoder ;  import   java . util . ArrayList ;  import   java . util . Enumeration ;  import   java . util . List ;  import    java . util . zip . ZipEntry ;  import    java . util . zip . ZipFile ;  import    java . util . zip . ZipOutputStream ;  import   javax . xml . XMLConstants ;  import    jakarta . xml . bind . JAXBContext ;  import    jakarta . xml . bind . JAXBException ;  import    jakarta . xml . bind . Marshaller ;  import    jakarta . xml . bind . Unmarshaller ;  import    javax . xml . parsers . ParserConfigurationException ;  import     javax . xml . transform . sax . SAXSource ;  import    javax . xml . validation . Schema ;  import    javax . xml . validation . SchemaFactory ;  import       de . micromata . opengis . kml . v_2_2_0 . gx . Tour ;  import    org . xml . sax . ContentHandler ;  import    org . xml . sax . InputSource ;  import    org . xml . sax . SAXException ;  import    jakarta . xml . bind . annotation .  * ;  import    org . jetbrains . annotations . NotNull ;  import  java . io .  * ;    @ XmlAccessorType  (  XmlAccessType . FIELD )  @ XmlType  (  name = "KmlType" ,  propOrder =  { "networkLinkControl" , "feature" , "kmlSimpleExtension" , "kmlObjectExtension" } )  @ XmlRootElement  (  name = "kml" ,  namespace = "http://www.opengis.net/kml/2.2" ) public class Kml  implements  Cloneable  {    @ XmlElement  (  name = "NetworkLinkControl" ) protected NetworkLinkControl  networkLinkControl ;    @ XmlElementRef  (  name = "AbstractFeatureGroup" ,  namespace = "http://www.opengis.net/kml/2.2" ,  required = false ) protected Feature  feature ;    @ XmlElement  (  name = "KmlSimpleExtensionGroup" )  @ XmlSchemaType  (  name = "anySimpleType" ) protected  List  < Object >  kmlSimpleExtension ;    @ XmlElement  (  name = "KmlObjectExtensionGroup" ) protected  List  < AbstractObject >  kmlObjectExtension ;    @ XmlAttribute  (  name = "hint" ) protected String  hint ;   private transient Marshaller  marshaller = null ;   private transient  int  missingNameCounter =  ( 1 ) ;   private static JAXBContext  jaxbContext = null ;   private final static String  SCHEMA_LOCATION = "src/main/resources/schema/ogckml/ogckml22.xsd" ;   public Kml  ( )  {  super  ( ) ; }   public NetworkLinkControl getNetworkLinkControl  ( )  {  return networkLinkControl ; }   public void setNetworkLinkControl  (  NetworkLinkControl value )  {    this . networkLinkControl = value ; }   public Feature getFeature  ( )  {  return feature ; }   public void setFeature  (  Feature value )  {    this . feature =  (  ( Feature ) value ) ; }   public  List  < Object > getKmlSimpleExtension  ( )  {  if  (  kmlSimpleExtension == null )  {   kmlSimpleExtension =  new  ArrayList  < Object >  ( ) ; }  return  this . kmlSimpleExtension ; }   public  List  < AbstractObject > getKmlObjectExtension  ( )  {  if  (  kmlObjectExtension == null )  {   kmlObjectExtension =  new  ArrayList  < AbstractObject >  ( ) ; }  return  this . kmlObjectExtension ; }   public String getHint  ( )  {  return hint ; }   public void setHint  (  String value )  {    this . hint = value ; }    @ Override public  int hashCode  ( )  {   final  int  prime = 31 ;   int  result = 1 ;   result =  (   (  prime * result ) +  (   (  networkLinkControl == null ) ? 0 :  networkLinkControl . hashCode  ( ) ) ) ;   result =  (   (  prime * result ) +  (   (  feature == null ) ? 0 :  feature . hashCode  ( ) ) ) ;   result =  (   (  prime * result ) +  (   (  kmlSimpleExtension == null ) ? 0 :  kmlSimpleExtension . hashCode  ( ) ) ) ;   result =  (   (  prime * result ) +  (   (  kmlObjectExtension == null ) ? 0 :  kmlObjectExtension . hashCode  ( ) ) ) ;   result =  (   (  prime * result ) +  (   (  hint == null ) ? 0 :  hint . hashCode  ( ) ) ) ;  return result ; }    @ Override public boolean equals  (  Object obj )  {  if  (  this == obj )  {  return true ; }  if  (  obj == null )  {  return false ; }  if  (   (  obj instanceof Kml ) == false )  {  return false ; }  Kml  other =  (  ( Kml ) obj ) ;  if  (  networkLinkControl == null )  {  if  (   other . networkLinkControl != null )  {  return false ; } } else  {  if  (   networkLinkControl . equals  (  other . networkLinkControl ) == false )  {  return false ; } }  if  (  feature == null )  {  if  (   other . feature != null )  {  return false ; } } else  {  if  (   feature . equals  (  other . feature ) == false )  {  return false ; } }  if  (  kmlSimpleExtension == null )  {  if  (   other . kmlSimpleExtension != null )  {  return false ; } } else  {  if  (   kmlSimpleExtension . equals  (  other . kmlSimpleExtension ) == false )  {  return false ; } }  if  (  kmlObjectExtension == null )  {  if  (   other . kmlObjectExtension != null )  {  return false ; } } else  {  if  (   kmlObjectExtension . equals  (  other . kmlObjectExtension ) == false )  {  return false ; } }  if  (  hint == null )  {  if  (   other . hint != null )  {  return false ; } } else  {  if  (   hint . equals  (  other . hint ) == false )  {  return false ; } }  return true ; }   public NetworkLinkControl createAndSetNetworkLinkControl  ( )  {  NetworkLinkControl  newValue =  new NetworkLinkControl  ( ) ;   this . setNetworkLinkControl  ( newValue ) ;  return newValue ; }   public Tour createAndSetTour  ( )  {  Tour  newValue =  new Tour  ( ) ;   this . setFeature  ( newValue ) ;  return newValue ; }   public ScreenOverlay createAndSetScreenOverlay  ( )  {  ScreenOverlay  newValue =  new ScreenOverlay  ( ) ;   this . setFeature  ( newValue ) ;  return newValue ; }   public PhotoOverlay createAndSetPhotoOverlay  ( )  {  PhotoOverlay  newValue =  new PhotoOverlay  ( ) ;   this . setFeature  ( newValue ) ;  return newValue ; }   public GroundOverlay createAndSetGroundOverlay  ( )  {  GroundOverlay  newValue =  new GroundOverlay  ( ) ;   this . setFeature  ( newValue ) ;  return newValue ; }   public NetworkLink createAndSetNetworkLink  ( )  {  NetworkLink  newValue =  new NetworkLink  ( ) ;   this . setFeature  ( newValue ) ;  return newValue ; }   public Folder createAndSetFolder  ( )  {  Folder  newValue =  new Folder  ( ) ;   this . setFeature  ( newValue ) ;  return newValue ; }   public Document createAndSetDocument  ( )  {  Document  newValue =  new Document  ( ) ;   this . setFeature  ( newValue ) ;  return newValue ; }   public Placemark createAndSetPlacemark  ( )  {  Placemark  newValue =  new Placemark  ( ) ;   this . setFeature  ( newValue ) ;  return newValue ; }   public void setKmlSimpleExtension  (   final  List  < Object > kmlSimpleExtension )  {    this . kmlSimpleExtension = kmlSimpleExtension ; }   public Kml addToKmlSimpleExtension  (   final Object kmlSimpleExtension )  {    this . getKmlSimpleExtension  ( ) . add  ( kmlSimpleExtension ) ;  return this ; }   public void setKmlObjectExtension  (   final  List  < AbstractObject > kmlObjectExtension )  {    this . kmlObjectExtension = kmlObjectExtension ; }   public Kml addToKmlObjectExtension  (   final AbstractObject kmlObjectExtension )  {    this . getKmlObjectExtension  ( ) . add  ( kmlObjectExtension ) ;  return this ; }   public Kml withNetworkLinkControl  (   final NetworkLinkControl networkLinkControl )  {   this . setNetworkLinkControl  ( networkLinkControl ) ;  return this ; }   public Kml withFeature  (   final Feature feature )  {   this . setFeature  ( feature ) ;  return this ; }   public Kml withKmlSimpleExtension  (   final  List  < Object > kmlSimpleExtension )  {   this . setKmlSimpleExtension  ( kmlSimpleExtension ) ;  return this ; }   public Kml withKmlObjectExtension  (   final  List  < AbstractObject > kmlObjectExtension )  {   this . setKmlObjectExtension  ( kmlObjectExtension ) ;  return this ; }   public Kml withHint  (   final String hint )  {   this . setHint  ( hint ) ;  return this ; }   private static JAXBContext getJaxbContext  ( )  throws JAXBException  {  if  (  jaxbContext == null )  {   jaxbContext =  JAXBContext . newInstance  (  (  Kml . class ) ) ; }  return jaxbContext ; }   private Marshaller createMarshaller  ( )  throws JAXBException  {  if  (  marshaller == null )  {   marshaller =   getJaxbContext  ( ) . createMarshaller  ( ) ;   marshaller . setProperty  (  Marshaller . JAXB_FORMATTED_OUTPUT , true ) ; 
<<<<<<<
  marshaller . setProperty  ( "org.glassfish.jaxb.namespacePrefixMapper" ,  new  Kml . NameSpaceBeautyfier  ( ) ) ;
=======
>>>>>>>
 }  return marshaller ; }   private void addKmzFile  (  Kml kmzFile ,  ZipOutputStream out ,  boolean mainfile )  throws IOException  {  String  fileName = null ;  if  (   (   (   kmzFile . getFeature  ( ) == null ) ||  (    kmzFile . getFeature  ( ) . getName  ( ) == null ) ) ||  (     kmzFile . getFeature  ( ) . getName  ( ) . length  ( ) == 0 ) )  {   fileName =  (   (  "noFeatureNameSet" +  missingNameCounter ++ ) + ".kml" ) ; } else  {   fileName =   kmzFile . getFeature  ( ) . getName  ( ) ;  if  (  !  fileName . endsWith  ( ".kml" ) )  {   fileName += ".kml" ; } }  if  ( mainfile )  {   fileName = "doc.kml" ; }   out . putNextEntry  (  new ZipEntry  (  URLEncoder . encode  ( fileName , "UTF-8" ) ) ) ;   kmzFile . marshal  ( out ) ;   out . closeEntry  ( ) ; }   public boolean marshal  (   final OutputStream outputstream )  throws FileNotFoundException  {  try  {   marshaller =  this . createMarshaller  ( ) ;   marshaller . marshal  ( this , outputstream ) ;  return true ; }  catch (   JAXBException _x )  {   _x . printStackTrace  ( ) ;  return false ; } }   public boolean marshal  (   final Writer writer )  {  try  {   marshaller =  this . createMarshaller  ( ) ;   marshaller . marshal  ( this , writer ) ;  return true ; }  catch (   JAXBException _x )  {   _x . printStackTrace  ( ) ;  return false ; } }   public boolean marshal  (   final ContentHandler contenthandler )  {  try  {   marshaller =  this . createMarshaller  ( ) ;   marshaller . marshal  ( this , contenthandler ) ;  return true ; }  catch (   JAXBException _x )  {   _x . printStackTrace  ( ) ;  return false ; } }   public boolean marshal  ( )  {  try  {   marshaller =  this . createMarshaller  ( ) ;   marshaller . marshal  ( this ,  System . out ) ;  return true ; }  catch (   JAXBException _x )  {   _x . printStackTrace  ( ) ;  return false ; } }   public boolean marshal  (   final File filename )  throws FileNotFoundException  {  OutputStream  out =  new FileOutputStream  ( filename ) ;  return  this . marshal  ( out ) ; }   public boolean marshalAsKmz  (    @ NotNull String name ,  Kml ...  additionalFiles )  throws IOException  {  ZipOutputStream  out =  new ZipOutputStream  (  new FileOutputStream  ( name ) ) ;   out . setComment  ( "KMZ-file created with Java API for KML. Visit us: https://github.com/micromata/javaapiforkml" ) ;   this . addKmzFile  ( this , out , true ) ;  for ( Kml kml : additionalFiles )  {   this . addKmzFile  ( kml , out , false ) ; }   out . close  ( ) ;   missingNameCounter = 1 ;  return false ; }   private static boolean validate  (   final Unmarshaller unmarshaller )  {  try  {  SchemaFactory  sf =  SchemaFactory . newInstance  (  XMLConstants . W3C_XML_SCHEMA_NS_URI ) ;  File  schemaFile =  new File  ( SCHEMA_LOCATION ) ;  Schema  schema =  sf . newSchema  ( schemaFile ) ;   unmarshaller . setSchema  ( schema ) ;  return true ; }  catch (   SAXException _x )  {   _x . printStackTrace  ( ) ; }  return false ; }   public static Kml unmarshal  (   final File file ,   final boolean validate )  {  try  {  Unmarshaller  unmarshaller =   JAXBContext . newInstance  (  (  Kml . class ) ) . createUnmarshaller  ( ) ;  if  (  validate == true )  {   Kml . validate  ( unmarshaller ) ; }  InputSource  input =  new InputSource  (  new FileReader  ( file ) ) ;  SAXSource  saxSource =  new SAXSource  (  new NamespaceFilterXMLReader  ( validate ) , input ) ;  Kml  jaxbRootElement =  (  ( Kml )  unmarshaller . unmarshal  ( saxSource ) ) ;  return jaxbRootElement ; }  catch (   SAXException _x )  {   _x . printStackTrace  ( ) ; }  catch (   ParserConfigurationException _x )  {   _x . printStackTrace  ( ) ; }  catch (   JAXBException _x )  {   _x . printStackTrace  ( ) ; }  catch (   FileNotFoundException _x )  {   _x . printStackTrace  ( ) ; }  return null ; }   public static Kml unmarshal  (   final File file )  {  return  Kml . unmarshal  ( file , false ) ; }   public static Kml unmarshal  (   final String content )  {  try  {  Unmarshaller  unmarshaller =   JAXBContext . newInstance  (  (  Kml . class ) ) . createUnmarshaller  ( ) ;  InputSource  input =  new InputSource  (  new StringReader  ( content ) ) ;  SAXSource  saxSource =  new SAXSource  (  new NamespaceFilterXMLReader  ( false ) , input ) ;  Kml  jaxbRootElement =  (  ( Kml )  unmarshaller . unmarshal  ( saxSource ) ) ;  return jaxbRootElement ; }  catch (   SAXException _x )  {   _x . printStackTrace  ( ) ; }  catch (   ParserConfigurationException _x )  {   _x . printStackTrace  ( ) ; }  catch (   JAXBException _x )  {   _x . printStackTrace  ( ) ; }  return null ; }   public static Kml unmarshal  (   final InputStream content )  {  try  {  Unmarshaller  unmarshaller =   JAXBContext . newInstance  (  (  Kml . class ) ) . createUnmarshaller  ( ) ;  InputSource  input =  new InputSource  ( content ) ;  SAXSource  saxSource =  new SAXSource  (  new NamespaceFilterXMLReader  ( false ) , input ) ;  Kml  jaxbRootElement =  (  ( Kml )  unmarshaller . unmarshal  ( saxSource ) ) ;  return jaxbRootElement ; }  catch (   SAXException _x )  {   _x . printStackTrace  ( ) ; }  catch (   ParserConfigurationException _x )  {   _x . printStackTrace  ( ) ; }  catch (   JAXBException _x )  {   _x . printStackTrace  ( ) ; }  return null ; }   public static  Kml  [ ] unmarshalFromKmz  (    @ NotNull File file )  throws IOException  {   Kml  [ ]  EMPTY_KML_ARRAY =  (  new Kml  [ 0 ] ) ;  if  (  !   file . getName  ( ) . endsWith  ( ".kmz" ) )  {  return EMPTY_KML_ARRAY ; }  ZipFile  zip =  new ZipFile  ( file ) ;   Enumeration  <  ? extends ZipEntry >  entries =  zip . entries  ( ) ;  if  (  !  file . exists  ( ) )  {  return EMPTY_KML_ARRAY ; }   ArrayList  < Kml >  kmlfiles =  new  ArrayList  < Kml >  ( ) ;  while  (  entries . hasMoreElements  ( ) )  {  ZipEntry  entry =  (  ( ZipEntry )  entries . nextElement  ( ) ) ;  if  (    entry . getName  ( ) . contains  ( "__MACOSX" ) ||   entry . getName  ( ) . contains  ( ".DS_STORE" ) )  {  continue ; }  String  entryName =  URLDecoder . decode  (  entry . getName  ( ) , "UTF-8" ) ;  if  (  !  entryName . endsWith  ( ".kml" ) )  {  continue ; }  InputStream  in =  zip . getInputStream  ( entry ) ;  Kml  unmarshal =  Kml . unmarshal  ( in ) ;   kmlfiles . add  ( unmarshal ) ; }   zip . close  ( ) ;  return  kmlfiles . toArray  ( EMPTY_KML_ARRAY ) ; }    @ Override public Kml clone  ( )  {  Kml  copy ;  try  {   copy =  (  ( Kml )  super . clone  ( ) ) ; }  catch (   CloneNotSupportedException _x )  {  throw  new InternalError  (  (  _x . toString  ( ) ) ) ; }    copy . networkLinkControl =  (   (  networkLinkControl == null ) ? null :  (  ( NetworkLinkControl )  networkLinkControl . clone  ( ) ) ) ;    copy . feature =  (   (  feature == null ) ? null :  (  ( Feature )  feature . clone  ( ) ) ) ;    copy . kmlSimpleExtension =  new  ArrayList  < Object >  (  (   getKmlSimpleExtension  ( ) . size  ( ) ) ) ;  for ( Object iter : kmlSimpleExtension )  {    copy . kmlSimpleExtension . add  ( iter ) ; }    copy . kmlObjectExtension =  new  ArrayList  < AbstractObject >  (  (   getKmlObjectExtension  ( ) . size  ( ) ) ) ;  for ( AbstractObject iter : kmlObjectExtension )  {    copy . kmlObjectExtension . add  (  iter . clone  ( ) ) ; }  return copy ; } 
<<<<<<<
  private final static class NameSpaceBeautyfier  extends NamespacePrefixMapper  {    @ Override public String getPreferredPrefix  (  String namespaceUri ,  String suggestion ,  boolean requirePrefix )  {  if  (  namespaceUri . matches  ( "http://www.opengis.net/kml/.*?" ) )  {  return "" ; }  if  (  namespaceUri . matches  ( "http://www.w3.org/\\d{4}/Atom" ) )  {  return "atom" ; }  if  (  namespaceUri . matches  ( "urn:oasis:names:tc:ciq:xsdschema:xAL:.*?" ) )  {  return "xal" ; }  if  (  namespaceUri . matches  ( "http://www.google.com/kml/ext/.*?" ) )  {  return "gx" ; }  return null ; } }
=======
>>>>>>>
 }