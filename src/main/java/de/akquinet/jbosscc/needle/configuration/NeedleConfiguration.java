  package     de . akquinet . jbosscc . needle . configuration ;   import    java . lang . annotation . Annotation ;  import   java . util . Set ;  import      de . akquinet . jbosscc . needle . injection . InjectionProvider ;  import      de . akquinet . jbosscc . needle . mock . MockProvider ;  import      de . akquinet . jbosscc . needle . injection . InjectionProviderInstancesSupplier ;   public final class NeedleConfiguration  {   private  Set  <  Class  < Annotation > >  customInjectionAnnotations ;   private  Set  <  Class  <  InjectionProvider  <  ? > > >  customInjectionProviderClasses ;   private String  persistenceunitName ;   private String  hibernateCfgFilename ;   private  Class  <  ? extends MockProvider >  mockProviderClass ;   private String  dbOperationClassName ;   private String  jdbcUrl ;   private String  jdbcDriver ;   private String  jdbcUser ;   private String  jdbcPassword ;   public  Set  <  Class  < Annotation > > getCustomInjectionAnnotations  ( )  {  return customInjectionAnnotations ; }   public void setCustomInjectionAnnotations  (   final  Set  <  Class  < Annotation > > customInjectionAnnotations )  {    this . customInjectionAnnotations = customInjectionAnnotations ; }   public  Set  <  Class  <  InjectionProvider  <  ? > > > getCustomInjectionProviderClasses  ( )  {  return customInjectionProviderClasses ; }   public void setCustomInjectionProviderClasses  (   final  Set  <  Class  <  InjectionProvider  <  ? > > > customInjectionProviderClasses )  {    this . customInjectionProviderClasses = customInjectionProviderClasses ; }   public String getDBOperationClassName  ( )  {  return dbOperationClassName ; }   public void setDBOperationClassName  (   final String dbOperationClassName )  {    this . dbOperationClassName = dbOperationClassName ; }   public String getJdbcUrl  ( )  {  return jdbcUrl ; }   public void setJdbcUrl  (   final String jdbcUrl )  {    this . jdbcUrl = jdbcUrl ; }   public String getJdbcDriver  ( )  {  return jdbcDriver ; }   public void setJdbcDriver  (   final String jdbcDriver )  {    this . jdbcDriver = jdbcDriver ; }   public String getJdbcUser  ( )  {  return jdbcUser ; }   public void setJdbcUser  (   final String jdbcUser )  {    this . jdbcUser = jdbcUser ; }   public String getJdbcPassword  ( )  {  return jdbcPassword ; }   public void setJdbcPassword  (   final String jdbcPassword )  {    this . jdbcPassword = jdbcPassword ; }   public  Class  <  ? extends MockProvider > getMockProviderClass  ( )  {  return mockProviderClass ; }   public void setMockProviderClass  (   final  Class  <  ? extends MockProvider > mockProviderClass )  {    this . mockProviderClass = mockProviderClass ; }   public String getPersistenceunitName  ( )  {  return persistenceunitName ; }   public void setPersistenceunitName  (   final String persistenceunitName )  {    this . persistenceunitName = persistenceunitName ; }   public String getHibernateCfgFilename  ( )  {  return hibernateCfgFilename ; }   public void setHibernateCfgFilename  (   final String hibernateCfgFilename )  {    this . hibernateCfgFilename = hibernateCfgFilename ; }    @ Override public String toString  ( )  {   final StringBuilder  builder =  new StringBuilder  ( ) ;    builder . append  ( "\nPU_NAME=" ) . append  (  getPersistenceunitName  ( ) ) ;    builder . append  ( "\nCFG_FILE=" ) . append  (  getHibernateCfgFilename  ( ) ) ;    builder . append  ( "\nDB_OPERATION=" ) . append  (  getDBOperationClassName  ( ) ) ;    builder . append  ( "\nMOCK_PROVIDER=" ) . append  (   mockProviderClass != null ?  mockProviderClass . getName  ( ) : null ) ;  return  builder . toString  ( ) ; }   public static final String  CUSTOM_INSTANCES_SUPPLIER_CLASSES_KEY = "custom.instances.supplier.classes" ;   private final  Set  <  Class  < InjectionProviderInstancesSupplier > >  customInjectionProviderInstancesSupplierClasses ; 
<<<<<<<
=======
  private NeedleConfiguration  (   final  Map  < String , String > configurationProperties )  {    this . configurationProperties = configurationProperties ;   final LookupCustomClasses  lookupCustomClasses =  new LookupCustomClasses  ( configurationProperties ) ;    this . customInjectionAnnotations =  lookupCustomClasses . apply  ( CUSTOM_INJECTION_ANNOTATIONS_KEY ) ;    this . customInjectionProviderClasses =  lookupCustomClasses . apply  ( CUSTOM_INJECTION_PROVIDER_CLASSES_KEY ) ;    this . customInjectionProviderInstancesSupplierClasses =  lookupCustomClasses . apply  ( CUSTOM_INSTANCES_SUPPLIER_CLASSES_KEY ) ;   LOG . info  ( "Needle Configuration: {}" ,  toString  ( ) ) ; }
>>>>>>>
   public  Set  <  Class  < InjectionProviderInstancesSupplier > > getCustomInjectionProviderInstancesSupplierClasses  ( )  {  return customInjectionProviderInstancesSupplierClasses ; } }