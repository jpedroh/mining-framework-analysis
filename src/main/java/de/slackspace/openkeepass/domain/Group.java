  package    de . slackspace . openkeepass . domain ;   import   java . util . ArrayList ;  import   java . util . List ;  import   java . util . UUID ;  import     javax . xml . bind . annotation . XmlAccessType ;  import     javax . xml . bind . annotation . XmlAccessorType ;  import     javax . xml . bind . annotation . XmlElement ;  import     javax . xml . bind . annotation . XmlRootElement ;  import      javax . xml . bind . annotation . adapters . XmlJavaTypeAdapter ;  import       de . slackspace . openkeepass . domain . xml . adapter . BooleanXmlAdapter ;  import       de . slackspace . openkeepass . domain . xml . adapter . UUIDXmlAdapter ;    @ XmlRootElement  @ XmlAccessorType  (  XmlAccessType . FIELD ) public class Group  implements  KeePassFileElement  {    @ XmlElement  (  name = "UUID" )  @ XmlJavaTypeAdapter  (  UUIDXmlAdapter . class ) private UUID  uuid ;    @ XmlElement  (  name = "Name" ) private String  name ;    @ XmlElement  (  name = "IconID" ) private  int  iconId = 49 ;   private transient   byte  [ ]  iconData ;    @ XmlElement  (  name = "CustomIconUUID" )  @ XmlJavaTypeAdapter  (  UUIDXmlAdapter . class ) private UUID  customIconUUID ;    @ XmlElement  (  name = "Times" ) private Times  times ;    @ XmlElement  (  name = "IsExpanded" )  @ XmlJavaTypeAdapter  (  BooleanXmlAdapter . class ) private Boolean  isExpanded ;    @ XmlElement  (  name = "Entry" ) private  List  < Entry >  entries =  new  ArrayList  < Entry >  ( ) ;    @ XmlElement  (  name = "Group" ) private  List  < Group >  groups =  new  ArrayList  < Group >  ( ) ;  Group  ( )  {   uuid =  UUID . randomUUID  ( ) ; }   public UUID getUuid  ( )  {  return uuid ; }   public String getName  ( )  {  return name ; }   public  List  < Group > getGroups  ( )  {  return groups ; }   public  List  < Entry > getEntries  ( )  {  return entries ; }   public Entry getEntryByTitle  (  String title )  {  for ( Entry entry : entries )  {  if  (   entry . getTitle  ( ) . equalsIgnoreCase  ( title ) )  {  return entry ; } }  return null ; }    @ Override public String toString  ( )  {  return name ; }   public  int getIconId  ( )  {  return iconId ; }   public UUID getCustomIconUuid  ( )  {  return customIconUUID ; }   public   byte  [ ] getIconData  ( )  {  return iconData ; }   public Times getTimes  ( )  {  return times ; }   public boolean isExpanded  ( )  {  if  (  isExpanded == null )  {  return false ; }  return  isExpanded . booleanValue  ( ) ; }    @ Override public final  int hashCode  ( )  {   final  int  prime = 31 ;   int  result = 1 ;   result =   prime * result +  (   (  customIconUUID == null ) ? 0 :  customIconUUID . hashCode  ( ) ) ;   result =   prime * result +  (   (  entries == null ) ? 0 :  entries . hashCode  ( ) ) ;   result =   prime * result +  (   (  groups == null ) ? 0 :  groups . hashCode  ( ) ) ;   result =   prime * result + iconId ;   result =   prime * result +  (   (  isExpanded == null ) ? 0 :  isExpanded . hashCode  ( ) ) ;   result =   prime * result +  (   (  name == null ) ? 0 :  name . hashCode  ( ) ) ;   result =   prime * result +  (   (  times == null ) ? 0 :  times . hashCode  ( ) ) ;   result =   prime * result +  (   (  uuid == null ) ? 0 :  uuid . hashCode  ( ) ) ;  return result ; }    @ Override public final boolean equals  (  Object obj )  {  if  (  this == obj )  return true ;  if  (  obj == null )  return false ;  if  (  !  (  obj instanceof Group ) )  return false ;  Group  other =  ( Group ) obj ;  if  (  customIconUUID == null )  {  if  (   other . customIconUUID != null )  return false ; } else  if  (  !  customIconUUID . equals  (  other . customIconUUID ) )  return false ;  if  (  entries == null )  {  if  (   other . entries != null )  return false ; } else  if  (  !  entries . equals  (  other . entries ) )  return false ;  if  (  groups == null )  {  if  (   other . groups != null )  return false ; } else  if  (  !  groups . equals  (  other . groups ) )  return false ;  if  (  iconId !=  other . iconId )  return false ;  if  (  isExpanded == null )  {  if  (   other . isExpanded != null )  return false ; } else  if  (  !  isExpanded . equals  (  other . isExpanded ) )  return false ;  if  (  name == null )  {  if  (   other . name != null )  return false ; } else  if  (  !  name . equals  (  other . name ) )  return false ;  if  (  times == null )  {  if  (   other . times != null )  return false ; } else  if  (  !  times . equals  (  other . times ) )  return false ;  if  (  uuid == null )  {  if  (   other . uuid != null )  return false ; } else  if  (  !  uuid . equals  (  other . uuid ) )  return false ;  return true ; }   public Group  (  GroupContract groupContract )  {   entries =  groupContract . getEntries  ( ) ;   groups =  groupContract . getGroups  ( ) ;   iconId =  groupContract . getIconId  ( ) ;   isExpanded =  groupContract . isExpanded  ( ) ;   name =  groupContract . getName  ( ) ;   times =  groupContract . getTimes  ( ) ;   uuid =  groupContract . getUuid  ( ) ;   iconData =  groupContract . getIconData  ( ) ;   customIconUUID =  groupContract . getCustomIconUuid  ( ) ; } }