  package     com . github . dakusui . jcunit . generators ;   import   java . util . HashMap ;  import   java . util . Map ;  import       com . github . dakusui . jcunit . generators . ipo . IPO ;  import       com . github . dakusui . jcunit . generators . ipo . TestRun ;  import       com . github . dakusui . jcunit . generators . ipo . TestRunSet ;  import       com . github . dakusui . jcunit . generators . ipo . TestSpace ;  import   java . util . LinkedHashMap ;  import      com . github . dakusui . jcunit . core . GeneratorParameters ;   public class PairwiseTestArrayGenerator  <  T ,  U >  extends  BaseTestArrayGenerator  < T , U >  {   private TestRunSet  testRunSet ;   private  Map  < Integer , T >  indexToKeyMap =  new  HashMap  < Integer , T >  ( ) ; 
<<<<<<<
   @ Override public void init  (   Map  < T ,  U  [ ] > domains )  {   super . init  ( domains ) ;    this . testRunSet =  this . composeTestRunSet  ( indexToKeyMap ) ;    this . size =   this . testRunSet . size  ( ) ;    this . cur = 0 ; }
=======
>>>>>>>
   protected TestRunSet composeTestRunSet  (   Map  < Integer , T > indexToKeyMap )  {   Object  [ ] [ ]  testSpaceDomains =  new Object  [   this . domains . size  ( ) ]  [ ] ;   int  i = 0 ;  for ( T cur :   this . domains . keySet  ( ) )  {    testSpaceDomains [  i ++ ] =   this . domains . get  ( cur ) ;   indexToKeyMap . put  ( i , cur ) ; }  TestSpace  space =  new TestSpace  ( testSpaceDomains ) ;  IPO  ipo =  new IPO  ( space ) ;  return  ipo . ipo  ( ) ; }    @ SuppressWarnings  ( "unchecked" )  @ Override public  int getIndex  (  T key ,   long cur )  {  TestRun  run =   this . testRunSet . get  (  (  int ) cur ) ;  for (   int  i = 1 ;  i <=  run . width  ( ) ;  i ++ )  {  T  k =  indexToKeyMap . get  ( i ) ;  if  (  key . equals  ( k ) )  {   U  [ ]  domainOf_i =  findDomain  ( k ) ;  return  indexOf  (  ( U )  run . get  ( i ) , domainOf_i ) ; } }  assert false ;  return  - 1 ; }   private  U  [ ] findDomain  (  T key )  {  return   this . domains . get  ( key ) ; }   private  int indexOf  (  U u ,   U  [ ] domain )  {   int  i = 0 ;  for ( Object obj : domain )  {  if  (  obj == u )  return i ;   i ++ ; }  return  - 1 ; }    @ Override public void init  (    GeneratorParameters . Value  [ ] params ,   LinkedHashMap  < T ,  U  [ ] > domains )  {   super . init  ( params , domains ) ;   Object  [ ] [ ]  testSpaceDomains =  new Object  [   this . domains . size  ( ) ]  [ ] ;   int  i = 0 ;  for ( T cur :   this . domains . keySet  ( ) )  {    testSpaceDomains [  i ++ ] =   this . domains . get  ( cur ) ;   indexToKeyMap . put  ( i , cur ) ; }    System . out . println  (  ArrayUtils . toString  ( testSpaceDomains ) ) ;  TestSpace  space =  new TestSpace  ( testSpaceDomains ) ;  IPO  ipo =  new IPO  ( space ) ;    this . testRunSet =  ipo . ipo  ( ) ;    this . size =   this . testRunSet . size  ( ) ;    this . cur = 0 ; } }