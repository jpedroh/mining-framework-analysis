  package    com . github . oxo42 . stateless4j ;   import     com . github . oxo42 . stateless4j . delegates .  * ;  import      com . github . oxo42 . stateless4j . transitions . Transition ;  import      com . github . oxo42 . stateless4j . transitions . TransitioningTriggerBehaviour ;  import     com . github . oxo42 . stateless4j . triggers .  * ;   public class StateConfiguration  <  TState ,  TTrigger >  {   private static final FuncBoolean  NO_GUARD =  new FuncBoolean  ( )  {    @ Override public boolean call  ( )  {  return true ; } } ;   private final  StateRepresentation  < TState , TTrigger >  representation ;   private final  Func2  < TState ,  StateRepresentation  < TState , TTrigger > >  lookup ;   public StateConfiguration  (   final  StateRepresentation  < TState , TTrigger > representation ,   final  Func2  < TState ,  StateRepresentation  < TState , TTrigger > > lookup )  {  assert  representation != null : "representation is null" ;  assert  lookup != null : "lookup is null" ;    this . representation = representation ;    this . lookup = lookup ; }   public  StateConfiguration  < TState , TTrigger > permit  (  TTrigger trigger ,  TState destinationState )  {   enforceNotIdentityTransition  ( destinationState ) ;  return  publicPermit  ( trigger , destinationState ) ; }   public  StateConfiguration  < TState , TTrigger > permitIf  (  TTrigger trigger ,  TState destinationState ,  FuncBoolean guard )  {   enforceNotIdentityTransition  ( destinationState ) ;  return  publicPermitIf  ( trigger , destinationState , guard ) ; }   public  StateConfiguration  < TState , TTrigger > permitReentry  (  TTrigger trigger )  {  return  publicPermit  ( trigger ,  representation . getUnderlyingState  ( ) ) ; }   public  StateConfiguration  < TState , TTrigger > permitReentryIf  (  TTrigger trigger ,  FuncBoolean guard )  {  return  publicPermitIf  ( trigger ,  representation . getUnderlyingState  ( ) , guard ) ; }   public  StateConfiguration  < TState , TTrigger > ignore  (  TTrigger trigger )  {  return  ignoreIf  ( trigger , NO_GUARD ) ; }   public  StateConfiguration  < TState , TTrigger > ignoreIf  (  TTrigger trigger ,  FuncBoolean guard )  {   Enforce . argumentNotNull  ( guard , "guard" ) ;   representation . addTriggerBehaviour  (  new  IgnoredTriggerBehaviour  < TState , TTrigger >  ( trigger , guard ) ) ;  return this ; }   public  StateConfiguration  < TState , TTrigger > onEntry  (   final Action entryAction )  {  assert  entryAction != null : "entryAction is null" ;  return  onEntry  (  new  Action1  <  Transition  < TState , TTrigger > >  ( )  {   public void doIt  (   Transition  < TState , TTrigger > t )  {   entryAction . doIt  ( ) ; } } ) ; }   public  StateConfiguration  < TState , TTrigger > onEntry  (   final  Action1  <  Transition  < TState , TTrigger > > entryAction )  {  assert  entryAction != null : "entryAction is null" ;   representation . addEntryAction  (  new  Action2  <  Transition  < TState , TTrigger > ,  Object  [ ] >  ( )  {   public void doIt  (   Transition  < TState , TTrigger > arg1 ,   Object  [ ] arg2 )  {   entryAction . doIt  ( arg1 ) ; } } ) ;  return this ; }   public  StateConfiguration  < TState , TTrigger > onEntryFrom  (  TTrigger trigger ,   final Action entryAction )  {  assert  entryAction != null : "entryAction is null" ;  return  onEntryFrom  ( trigger ,  new  Action1  <  Transition  < TState , TTrigger > >  ( )  {   public void doIt  (   Transition  < TState , TTrigger > arg1 )  {   entryAction . doIt  ( ) ; } } ) ; }   public  StateConfiguration  < TState , TTrigger > onEntryFrom  (  TTrigger trigger ,   final  Action1  <  Transition  < TState , TTrigger > > entryAction )  {  assert  entryAction != null : "entryAction is null" ;   representation . addEntryAction  ( trigger ,  new  Action2  <  Transition  < TState , TTrigger > ,  Object  [ ] >  ( )  {   public void doIt  (   Transition  < TState , TTrigger > arg1 ,   Object  [ ] arg2 )  {   entryAction . doIt  ( arg1 ) ; } } ) ;  return this ; }   public  <  TArg0 >  StateConfiguration  < TState , TTrigger > onEntryFrom  (   TriggerWithParameters1  < TArg0 , TState , TTrigger > trigger ,   final  Action1  < TArg0 > entryAction ,   final  Class  < TArg0 > classe0 )  {  assert  entryAction != null : "entryAction is null" ;  return  onEntryFrom  ( trigger ,  new  Action2  < TArg0 ,  Transition  < TState , TTrigger > >  ( )  {   public void doIt  (  TArg0 arg1 ,   Transition  < TState , TTrigger > arg2 )  {   entryAction . doIt  ( arg1 ) ; } } , classe0 ) ; }   public  <  TArg0 >  StateConfiguration  < TState , TTrigger > onEntryFrom  (   TriggerWithParameters1  < TArg0 , TState , TTrigger > trigger ,   final  Action2  < TArg0 ,  Transition  < TState , TTrigger > > entryAction ,   final  Class  < TArg0 > classe0 )  {  assert  trigger != null : "trigger is null" ;  assert  entryAction != null : "entryAction is null" ;   representation . addEntryAction  (  trigger . getTrigger  ( ) ,  new  Action2  <  Transition  < TState , TTrigger > ,  Object  [ ] >  ( )  {    @ SuppressWarnings  ( "unchecked" ) public void doIt  (   Transition  < TState , TTrigger > t ,   Object  [ ] arg2 )  {   entryAction . doIt  (  ( TArg0 )  arg2 [ 0 ] , t ) ; } } ) ;  return this ; }   public  <  TArg0 ,  TArg1 >  StateConfiguration  < TState , TTrigger > onEntryFrom  (   TriggerWithParameters2  < TArg0 , TArg1 , TState , TTrigger > trigger ,   final  Action2  < TArg0 , TArg1 > entryAction ,   final  Class  < TArg0 > classe0 ,   final  Class  < TArg1 > classe1 )  {  assert  entryAction != null : "entryAction is null" ;  return  onEntryFrom  ( trigger ,  new  Action3  < TArg0 , TArg1 ,  Transition  < TState , TTrigger > >  ( )  {   public void doIt  (  TArg0 a0 ,  TArg1 a1 ,   Transition  < TState , TTrigger > t )  {   entryAction . doIt  ( a0 , a1 ) ; } } , classe0 , classe1 ) ; }   public  <  TArg0 ,  TArg1 >  StateConfiguration  < TState , TTrigger > onEntryFrom  (   TriggerWithParameters2  < TArg0 , TArg1 , TState , TTrigger > trigger ,   final  Action3  < TArg0 , TArg1 ,  Transition  < TState , TTrigger > > entryAction ,   final  Class  < TArg0 > classe0 ,   final  Class  < TArg1 > classe1 )  {  assert  trigger != null : "trigger is null" ;  assert  entryAction != null : "entryAction is null" ;   representation . addEntryAction  (  trigger . getTrigger  ( ) ,  new  Action2  <  Transition  < TState , TTrigger > ,  Object  [ ] >  ( )  {    @ SuppressWarnings  ( "unchecked" ) public void doIt  (   Transition  < TState , TTrigger > t ,   Object  [ ] args )  {   entryAction . doIt  (  ( TArg0 )  args [ 0 ] ,  ( TArg1 )  args [ 1 ] , t ) ; } } ) ;  return this ; }   public  <  TArg0 ,  TArg1 ,  TArg2 >  StateConfiguration  < TState , TTrigger > onEntryFrom  (   TriggerWithParameters3  < TArg0 , TArg1 , TArg2 , TState , TTrigger > trigger ,   final  Action3  < TArg0 , TArg1 , TArg2 > entryAction ,   final  Class  < TArg0 > classe0 ,   final  Class  < TArg1 > classe1 ,   final  Class  < TArg2 > classe2 )  {  assert  entryAction != null : "entryAction is null" ;  return  onEntryFrom  ( trigger ,  new  Action4  < TArg0 , TArg1 , TArg2 ,  Transition  < TState , TTrigger > >  ( )  {   public void doIt  (  TArg0 a0 ,  TArg1 a1 ,  TArg2 a2 ,   Transition  < TState , TTrigger > t )  {   entryAction . doIt  ( a0 , a1 , a2 ) ; } } , classe0 , classe1 , classe2 ) ; }   public  <  TArg0 ,  TArg1 ,  TArg2 >  StateConfiguration  < TState , TTrigger > onEntryFrom  (   TriggerWithParameters3  < TArg0 , TArg1 , TArg2 , TState , TTrigger > trigger ,   final  Action4  < TArg0 , TArg1 , TArg2 ,  Transition  < TState , TTrigger > > entryAction ,   final  Class  < TArg0 > classe0 ,   final  Class  < TArg1 > classe1 ,   final  Class  < TArg2 > classe2 )  {  assert  trigger != null : "trigger is null" ;  assert  entryAction != null : "entryAction is null" ;   representation . addEntryAction  (  trigger . getTrigger  ( ) ,  new  Action2  <  Transition  < TState , TTrigger > ,  Object  [ ] >  ( )  {    @ SuppressWarnings  ( "unchecked" ) public void doIt  (   Transition  < TState , TTrigger > t ,   Object  [ ] args )  {   entryAction . doIt  (  ( TArg0 )  args [ 0 ] ,  ( TArg1 )  args [ 1 ] ,  ( TArg2 )  args [ 2 ] , t ) ; } } ) ;  return this ; }   public  StateConfiguration  < TState , TTrigger > onExit  (   final Action exitAction )  {  assert  exitAction != null : "exitAction is null" ;  return  onExit  (  new  Action1  <  Transition  < TState , TTrigger > >  ( )  {   public void doIt  (   Transition  < TState , TTrigger > arg1 )  {   exitAction . doIt  ( ) ; } } ) ; }   public  StateConfiguration  < TState , TTrigger > onExit  (   Action1  <  Transition  < TState , TTrigger > > exitAction )  {  assert  exitAction != null : "exitAction is null" ;   representation . addExitAction  ( exitAction ) ;  return this ; }   public  StateConfiguration  < TState , TTrigger > substateOf  (  TState superstate )  {   StateRepresentation  < TState , TTrigger >  superRepresentation =  lookup . call  ( superstate ) ;   representation . setSuperstate  ( superRepresentation ) ;   superRepresentation . addSubstate  ( representation ) ;  return this ; }   public  StateConfiguration  < TState , TTrigger > permitDynamic  (  TTrigger trigger ,   final  Func  < TState > destinationStateSelector )  {  return  permitDynamicIf  ( trigger , destinationStateSelector , NO_GUARD ) ; }   public  <  TArg0 >  StateConfiguration  < TState , TTrigger > permitDynamic  (   TriggerWithParameters1  < TArg0 , TState , TTrigger > trigger ,   Func2  < TArg0 , TState > destinationStateSelector )  {  return  permitDynamicIf  ( trigger , destinationStateSelector , NO_GUARD ) ; }   public  <  TArg0 ,  TArg1 >  StateConfiguration  < TState , TTrigger > permitDynamic  (   TriggerWithParameters2  < TArg0 , TArg1 , TState , TTrigger > trigger ,   Func3  < TArg0 , TArg1 , TState > destinationStateSelector )  {  return  permitDynamicIf  ( trigger , destinationStateSelector , NO_GUARD ) ; }   public  <  TArg0 ,  TArg1 ,  TArg2 >  StateConfiguration  < TState , TTrigger > permitDynamic  (   TriggerWithParameters3  < TArg0 , TArg1 , TArg2 , TState , TTrigger > trigger ,   final  Func4  < TArg0 , TArg1 , TArg2 , TState > destinationStateSelector )  {  return  permitDynamicIf  ( trigger , destinationStateSelector , NO_GUARD ) ; }   public  StateConfiguration  < TState , TTrigger > permitDynamicIf  (  TTrigger trigger ,   final  Func  < TState > destinationStateSelector ,  FuncBoolean guard )  {   Enforce . argumentNotNull  ( destinationStateSelector , "destinationStateSelector" ) ;  return  publicPermitDynamicIf  ( trigger ,  new  Func2  <  Object  [ ] , TState >  ( )  {   public TState call  (   Object  [ ] arg0 )  {  return  destinationStateSelector . call  ( ) ; } } , guard ) ; }   public  <  TArg0 >  StateConfiguration  < TState , TTrigger > permitDynamicIf  (   TriggerWithParameters1  < TArg0 , TState , TTrigger > trigger ,   final  Func2  < TArg0 , TState > destinationStateSelector ,  FuncBoolean guard )  {   Enforce . argumentNotNull  ( trigger , "trigger" ) ;   Enforce . argumentNotNull  ( destinationStateSelector , "destinationStateSelector" ) ;  return  publicPermitDynamicIf  (  trigger . getTrigger  ( ) ,  new  Func2  <  Object  [ ] , TState >  ( )  {    @ SuppressWarnings  ( "unchecked" ) public TState call  (   Object  [ ] args )  {  return  destinationStateSelector . call  (  ( TArg0 )  args [ 0 ] ) ; } } , guard ) ; }   public  <  TArg0 ,  TArg1 >  StateConfiguration  < TState , TTrigger > permitDynamicIf  (   TriggerWithParameters2  < TArg0 , TArg1 , TState , TTrigger > trigger ,   final  Func3  < TArg0 , TArg1 , TState > destinationStateSelector ,  FuncBoolean guard )  {   Enforce . argumentNotNull  ( trigger , "trigger" ) ;   Enforce . argumentNotNull  ( destinationStateSelector , "destinationStateSelector" ) ;  return  publicPermitDynamicIf  (  trigger . getTrigger  ( ) ,  new  Func2  <  Object  [ ] , TState >  ( )  {    @ SuppressWarnings  ( "unchecked" ) public TState call  (   Object  [ ] args )  {  return  destinationStateSelector . call  (  ( TArg0 )  args [ 0 ] ,  ( TArg1 )  args [ 1 ] ) ; } } , guard ) ; }   public  <  TArg0 ,  TArg1 ,  TArg2 >  StateConfiguration  < TState , TTrigger > permitDynamicIf  (   TriggerWithParameters3  < TArg0 , TArg1 , TArg2 , TState , TTrigger > trigger ,   final  Func4  < TArg0 , TArg1 , TArg2 , TState > destinationStateSelector ,  FuncBoolean guard )  {   Enforce . argumentNotNull  ( trigger , "trigger" ) ;   Enforce . argumentNotNull  ( destinationStateSelector , "destinationStateSelector" ) ;  return  publicPermitDynamicIf  (  trigger . getTrigger  ( ) ,  new  Func2  <  Object  [ ] , TState >  ( )  {    @ SuppressWarnings  ( "unchecked" ) public TState call  (   Object  [ ] args )  {  return  destinationStateSelector . call  (  ( TArg0 )  args [ 0 ] ,  ( TArg1 )  args [ 1 ] ,  ( TArg2 )  args [ 2 ] ) ; } } , guard ) ; }  void enforceNotIdentityTransition  (  TState destination )  {  if  (  destination . equals  (  representation . getUnderlyingState  ( ) ) )  {  throw  new IllegalStateException  ( "Permit() (and PermitIf()) require that the destination state is not equal to the source state. To accept a trigger without changing state, use either Ignore() or PermitReentry()." ) ; } }   StateConfiguration  < TState , TTrigger > publicPermit  (  TTrigger trigger ,  TState destinationState )  {  return  publicPermitIf  ( trigger , destinationState , NO_GUARD ) ; }   StateConfiguration  < TState , TTrigger > publicPermitIf  (  TTrigger trigger ,  TState destinationState ,  FuncBoolean guard )  {   Enforce . argumentNotNull  ( guard , "guard" ) ;   representation . addTriggerBehaviour  (  new  TransitioningTriggerBehaviour  < >  ( trigger , destinationState , guard ) ) ;  return this ; }   StateConfiguration  < TState , TTrigger > publicPermitDynamic  (  TTrigger trigger ,   Func2  <  Object  [ ] , TState > destinationStateSelector )  {  return  publicPermitDynamicIf  ( trigger , destinationStateSelector , NO_GUARD ) ; }   StateConfiguration  < TState , TTrigger > publicPermitDynamicIf  (  TTrigger trigger ,   Func2  <  Object  [ ] , TState > destinationStateSelector ,  FuncBoolean guard )  {   Enforce . argumentNotNull  ( destinationStateSelector , "destinationStateSelector" ) ;   Enforce . argumentNotNull  ( guard , "guard" ) ;   representation . addTriggerBehaviour  (  new  DynamicTriggerBehaviour  < >  ( trigger , destinationStateSelector , guard ) ) ;  return this ; } 
<<<<<<<
=======
  public  StateConfiguration  < TState , TTrigger > ignoreIf  (  TTrigger trigger ,   Func  < Boolean > guard )  {  assert  guard != null : "guard is null" ;   representation . addTriggerBehaviour  (  new  IgnoredTriggerBehaviour  < TState , TTrigger >  ( trigger , guard ) ) ;  return this ; }
>>>>>>>
 
<<<<<<<
=======
  public  StateConfiguration  < TState , TTrigger > permitDynamicIf  (  TTrigger trigger ,   final  Func  < TState > destinationStateSelector ,   Func  < Boolean > guard )  {  assert  destinationStateSelector != null : "destinationStateSelector is null" ;  return  publicPermitDynamicIf  ( trigger ,  new  Func2  <  Object  [ ] , TState >  ( )  {   public TState call  (   Object  [ ] arg0 )  {  return  destinationStateSelector . call  ( ) ; } } , guard ) ; }
>>>>>>>
 
<<<<<<<
=======
  public  <  TArg0 >  StateConfiguration  < TState , TTrigger > permitDynamicIf  (   TriggerWithParameters1  < TArg0 , TState , TTrigger > trigger ,   final  Func2  < TArg0 , TState > destinationStateSelector ,   Func  < Boolean > guard )  {  assert  trigger != null : "trigger is null" ;  assert  destinationStateSelector != null : "destinationStateSelector is null" ;  return  publicPermitDynamicIf  (  trigger . getTrigger  ( ) ,  new  Func2  <  Object  [ ] , TState >  ( )  {    @ SuppressWarnings  ( "unchecked" ) public TState call  (   Object  [ ] args )  {  return  destinationStateSelector . call  (  ( TArg0 )  args [ 0 ] ) ; } } , guard ) ; }
>>>>>>>
 
<<<<<<<
=======
  public  <  TArg0 ,  TArg1 >  StateConfiguration  < TState , TTrigger > permitDynamicIf  (   TriggerWithParameters2  < TArg0 , TArg1 , TState , TTrigger > trigger ,   final  Func3  < TArg0 , TArg1 , TState > destinationStateSelector ,   Func  < Boolean > guard )  {  assert  trigger != null : "trigger is null" ;  assert  destinationStateSelector != null : "destinationStateSelector is null" ;  return  publicPermitDynamicIf  (  trigger . getTrigger  ( ) ,  new  Func2  <  Object  [ ] , TState >  ( )  {    @ SuppressWarnings  ( "unchecked" ) public TState call  (   Object  [ ] args )  {  return  destinationStateSelector . call  (  ( TArg0 )  args [ 0 ] ,  ( TArg1 )  args [ 1 ] ) ; } } , guard ) ; }
>>>>>>>
 
<<<<<<<
=======
  public  <  TArg0 ,  TArg1 ,  TArg2 >  StateConfiguration  < TState , TTrigger > permitDynamicIf  (   TriggerWithParameters3  < TArg0 , TArg1 , TArg2 , TState , TTrigger > trigger ,   final  Func4  < TArg0 , TArg1 , TArg2 , TState > destinationStateSelector ,   Func  < Boolean > guard )  {  assert  trigger != null : "trigger is null" ;  assert  destinationStateSelector != null : "destinationStateSelector is null" ;  return  publicPermitDynamicIf  (  trigger . getTrigger  ( ) ,  new  Func2  <  Object  [ ] , TState >  ( )  {    @ SuppressWarnings  ( "unchecked" ) public TState call  (   Object  [ ] args )  {  return  destinationStateSelector . call  (  ( TArg0 )  args [ 0 ] ,  ( TArg1 )  args [ 1 ] ,  ( TArg2 )  args [ 2 ] ) ; } } , guard ) ; }
>>>>>>>
 
<<<<<<<
=======
  StateConfiguration  < TState , TTrigger > publicPermitIf  (  TTrigger trigger ,  TState destinationState ,   Func  < Boolean > guard )  {  assert  guard != null : "guard is null" ;   representation . addTriggerBehaviour  (  new  TransitioningTriggerBehaviour  < >  ( trigger , destinationState , guard ) ) ;  return this ; }
>>>>>>>
 
<<<<<<<
=======
  StateConfiguration  < TState , TTrigger > publicPermitDynamicIf  (  TTrigger trigger ,   Func2  <  Object  [ ] , TState > destinationStateSelector ,   Func  < Boolean > guard )  {  assert  destinationStateSelector != null : "destinationStateSelector is null" ;  assert  guard != null : "guard is null" ;   representation . addTriggerBehaviour  (  new  DynamicTriggerBehaviour  < >  ( trigger , destinationStateSelector , guard ) ) ;  return this ; }
>>>>>>>
 }