  package    com . akiban . sql . compiler ;   import    com . akiban . sql . parser .  * ;  import    com . akiban . sql . StandardException ;  import     com . akiban . sql . types . DataTypeDescriptor ;  import     com . akiban . sql . types . TypeId ;  import   java . sql . Types ;   public class IntervalTypeCompiler  extends TypeCompiler  {   protected IntervalTypeCompiler  (  TypeId typeId )  {  super  ( typeId ) ; }   public boolean convertible  (  TypeId otherType ,  boolean forDataTypeFunction )  {  if  (   otherType . isStringTypeId  ( ) &&  !  otherType . isLongConcatableTypeId  ( ) )  {  return true ; }  return  (   getStoredFormatIdFromTypeId  ( ) ==  otherType . getTypeFormatId  ( ) ) ; }   public boolean compatible  (  TypeId otherType )  {  return  convertible  ( otherType , false ) ; }   public String getCorrespondingPrimitiveTypeName  ( )  {  return null ; }   public String getPrimitiveMethodName  ( )  {  return null ; }   public  int getCastToCharWidth  (  DataTypeDescriptor dtd )  {  TypeId  typeId =  dtd . getTypeId  ( ) ;  if  (  typeId ==  TypeId . INTERVAL_YEAR_ID )  {  return  dtd . getPrecision  ( ) ; } else  if  (  typeId ==  TypeId . INTERVAL_MONTH_ID )  {  return  dtd . getPrecision  ( ) ; } else  if  (  typeId ==  TypeId . INTERVAL_YEAR_MONTH_ID )  {  return    dtd . getPrecision  ( ) + 1 + 2 ; } else  if  (  typeId ==  TypeId . INTERVAL_DAY_ID )  {  return  dtd . getPrecision  ( ) ; } else  if  (  typeId ==  TypeId . INTERVAL_HOUR_ID )  {  return  dtd . getPrecision  ( ) ; } else  if  (  typeId ==  TypeId . INTERVAL_MINUTE_ID )  {  return  dtd . getPrecision  ( ) ; } else  if  (  typeId ==  TypeId . INTERVAL_SECOND_ID )  {  if  (   dtd . getScale  ( ) > 0 )  return    dtd . getPrecision  ( ) + 1 +  dtd . getScale  ( ) ; else  return  dtd . getPrecision  ( ) ; } else  if  (  typeId ==  TypeId . INTERVAL_DAY_HOUR_ID )  {  return    dtd . getPrecision  ( ) + 1 + 2 ; } else  if  (  typeId ==  TypeId . INTERVAL_DAY_MINUTE_ID )  {  return      dtd . getPrecision  ( ) + 1 + 2 + 1 + 2 ; } else  if  (  typeId ==  TypeId . INTERVAL_DAY_SECOND_ID )  {  if  (   dtd . getScale  ( ) > 0 )  return          dtd . getPrecision  ( ) + 1 + 2 + 1 + 2 + 1 + 2 + 1 +  dtd . getScale  ( ) ; else  return        dtd . getPrecision  ( ) + 1 + 2 + 1 + 2 + 1 + 2 ; } else  if  (  typeId ==  TypeId . INTERVAL_HOUR_MINUTE_ID )  {  return    dtd . getPrecision  ( ) + 1 + 2 ; } else  if  (  typeId ==  TypeId . INTERVAL_HOUR_SECOND_ID )  {  if  (   dtd . getScale  ( ) > 0 )  return        dtd . getPrecision  ( ) + 1 + 2 + 1 + 2 + 1 +  dtd . getScale  ( ) ; else  return      dtd . getPrecision  ( ) + 1 + 2 + 1 + 2 ; } else  if  (  typeId ==  TypeId . INTERVAL_MINUTE_SECOND_ID )  {  if  (   dtd . getScale  ( ) > 0 )  return      dtd . getPrecision  ( ) + 1 + 2 + 1 +  dtd . getScale  ( ) ; else  return    dtd . getPrecision  ( ) + 1 + 2 ; }  assert false :  "unexpected typeId in getCastToCharWidth() - " + typeId ;  return 0 ; }   public DataTypeDescriptor resolveArithmeticOperation  (  DataTypeDescriptor leftType ,  DataTypeDescriptor rightType ,  String operator )  throws StandardException  {  TypeId  rightTypeId =  rightType . getTypeId  ( ) ;  TypeId  leftTypeId =  leftType . getTypeId  ( ) ;  boolean  nullable =   leftType . isNullable  ( ) ||  rightType . isNullable  ( ) ; 
<<<<<<<
=======
 if  (    rightTypeId . isIntervalTypeId  ( ) &&  (   operator . equals  (  TypeCompiler . PLUS_OP ) ||  operator . equals  (  TypeCompiler . MINUS_OP ) ) &&  (   getStoredFormatIdFromTypeId  ( ) ==  rightTypeId . getTypeFormatId  ( ) ) )  {  if  (   leftType . getTypeId  ( ) == rightTypeId )  return  leftType . getNullabilityType  ( nullable ) ; else  if  (   getStoredFormatIdFromTypeId  ( ) ==   TypeId . FormatIds . INTERVAL_YEAR_MONTH_ID )  return  new DataTypeDescriptor  (  TypeId . INTERVAL_MONTH_ID , nullable ) ; else  return  new DataTypeDescriptor  (  TypeId . INTERVAL_SECOND_ID , nullable ) ; }
>>>>>>>
  if  (   operator . equals  ( PLUS_OP ) ||  operator . equals  ( MINUS_OP ) )  {  TypeId  datetimeType ;  if  (     (  datetimeType = rightTypeId ) . isDateTimeTimeStampTypeId  ( ) &&  leftTypeId . isIntervalTypeId  ( ) ||    (  datetimeType = leftTypeId ) . isDateTimeTimeStampTypeID  ( ) &&  rightTypeId . isIntervalTypeId  ( ) )  return   getTypeCompiler  ( datetimeType ) . resolveArithmeticOperation  ( rightType , leftType , operator ) ;   int  typeFormatId = 0 ;  if  (   leftTypeId . isIntervalTypeId  ( ) &&  rightTypeId . isIntervalTypeId  ( ) )  if  (  leftTypeId == rightTypeId )  return  leftType . getNullabilityType  ( nullable ) ; else  if  (   (  typeFormatId =  leftTypeId . getTypeFormatId  ( ) ) ==  rightTypeId . getTypeFormatId  ( ) )  return  new DataTypeDescriptor  (   typeFormatId ==   TypeId . FormatIds . INTERVAL_DAY_SECOND_ID ?  TypeId . INTERVAL_SECOND_ID :  TypeId . INTERVAL_MONTH_ID , nullable ) ;  DataTypeDescriptor  varcharType ;  if  (      (  varcharType = leftType ) . getTypeId  ( ) . isStringTypeId  ( ) &&  rightTypeId . isIntervalTypeId  ( ) ||      (  varcharType = rightType ) . getTypeId  ( ) . isStringTypeId  ( ) &&  leftTypeId . isIntervalTypeId  ( ) &&  operator . equals  ( PLUS_OP ) )  return  new DataTypeDescriptor  ( 
<<<<<<<
   varcharType . getPrecision  ( ) > 10 ?  TypeId . DATETIME_ID :  TypeId . DATE_ID
=======
 TypeId . INTERVAL_SECOND_ID
>>>>>>>
 , nullable ) ; } else  if  (   operator . equals  ( TIMES_OP ) ||  operator . equals  ( DIVIDE_OP ) )  {  TypeId  intervalId = null ;  if  (     (  intervalId = leftTypeId ) . isIntervalTypeId  ( ) &&  (   rightTypeId . isNumericTypeId  ( ) ||  rightTypeId . isStringTypeId  ( ) ) ||     (  intervalId = rightTypeId ) . isIntervalTypeId  ( ) &&  (   leftTypeId . isNumericTypeId  ( ) ||  leftTypeId . isStringTypeId  ( ) ) &&  operator . equals  ( TIMES_OP ) )  return  new DataTypeDescriptor  ( intervalId , nullable ) ; }  return  super . resolveArithmeticOperation  ( leftType , rightType , operator ) ; } }