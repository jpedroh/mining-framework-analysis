  package    com . jcabi . github . mock ;   import    com . jcabi . aspects . Immutable ;  import    com . jcabi . aspects . Loggable ;  import    com . jcabi . github . Repo ;  import    com . jcabi . github . RepoCommit ;  import   java . io . IOException ;  import   javax . json . JsonObject ;  import  lombok . EqualsAndHashCode ;  import  lombok . ToString ;  import    javax . validation . constraints . NotNull ;    @ Immutable  @ Loggable  (  Loggable . DEBUG )  @ ToString  @ EqualsAndHashCode  (  of =  { "repository" , "hash" } ) final class MkRepoCommit  implements  RepoCommit  {   private final transient String  hash ;   private final transient MkStorage  storage ;   private final transient Repo  repository ;  MkRepoCommit  (   final MkStorage stg ,   final Repo repo ,   final String sha )  {    this . storage = stg ;    this . repository = repo ;    this . hash = sha ; }    @ Override public  int compareTo  (   final  @ NotNull  (  message = "other can't be NULL" ) RepoCommit other )  {  throw  new UnsupportedOperationException  ( "MkRepoCommit#compareTo()" ) ; }    @ Override public  @ NotNull  (  message = "JSON is never NULL" ) JsonObject json  ( )  throws IOException  {  return   new JsonNode  (     this . storage . xml  ( ) . nodes  (  String . format  ( "/github/repos/repo[@coords='%s']/commits/commit[sha='%s']" ,   this . repo  ( ) . coordinates  ( ) ,  this . hash ) ) . get  ( 0 ) ) . json  ( ) ; }    @ Override public  @ NotNull  (  message = "repository is never NULL" ) Repo repo  ( )  {  return  this . repository ; }    @ Override public  @ NotNull  (  message = "sha should no be NULL" ) String sha  ( )  {  return  this . hash ; } 
<<<<<<<
=======
 MkRepoCommit  (    @ NotNull  (  message = "repo is never NULL" ) final Repo repo ,    @ NotNull  (  message = "sha is never NULL" ) final String sha )  {    this . repository = repo ;    this . hash = sha ; }
>>>>>>>
 }