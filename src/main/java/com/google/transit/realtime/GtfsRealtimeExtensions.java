  package    com . google . transit . realtime ;   import    com . google . protobuf . ExtensionRegistry ;   public class GtfsRealtimeExtensions  { 
<<<<<<<
  public static void registerExtensions  (  ExtensionRegistry registry ,  boolean includeLIRR )  {   GtfsRealtimeNYCT . registerAllExtensions  ( registry ) ;   GtfsRealtimeOneBusAway . registerAllExtensions  ( registry ) ;  if  ( includeLIRR )  {   GtfsRealtimeLIRR . registerAllExtensions  ( registry ) ; } else  {   GtfsRealtimeMNR . registerAllExtensions  ( registry ) ; }   GtfsRealtimeServiceStatus . registerAllExtensions  ( registry ) ; }
=======
>>>>>>>
   public static void registerExtensions  (  ExtensionRegistry registry )  {   registry . add  (  GtfsRealtimeNYCT . nyctFeedHeader ) ;   registry . add  (  GtfsRealtimeNYCT . nyctStopTimeUpdate ) ;   registry . add  (  GtfsRealtimeNYCT . nyctTripDescriptor ) ;   registry . add  (  GtfsRealtimeOneBusAway . obaFeedHeader ) ;   registry . add  (  GtfsRealtimeOneBusAway . obaFeedEntity ) ;   registry . add  (  GtfsRealtimeOneBusAway . obaTripUpdate ) ;   registry . add  (  GtfsRealtimeOneBusAway . obaEntitySelector ) ;   registry . add  (  GtfsRealtimeOneBusAway . obaStopTimeUpdate ) ;   registry . add  (  GtfsRealtimeMTARR . mtaRailroadStopTimeUpdate ) ;   registry . add  (  GtfsRealtimeMTARR . carriageDescriptor ) ;   registry . add  (  GtfsRealtimeServiceStatus . mercuryFeedHeader ) ;   registry . add  (  GtfsRealtimeServiceStatus . mercuryEntitySelector ) ;   registry . add  (  GtfsRealtimeServiceStatus . mercuryAlert ) ; } }