  package   com . papercut . silken ;   import    java . lang . reflect . Method ;  import    java . lang . reflect . Modifier ;  import   java . util . HashMap ;  import   java . util . Iterator ;  import   java . util . List ;  import   java . util . Locale ;  import   java . util . Map ;  import     com . google . common . base . Preconditions ;  import     com . google . common . collect . Lists ;  import     com . google . common . primitives . Primitives ;  import      com . google . template . soy . data . SoyMapData ;  import      com . google . template . soy . msgs . SoyMsgBundle ;  import       com . google . template . soy . msgs . restricted . SoyMsg ;  import       com . google . template . soy . msgs . restricted . SoyMsgBundleImpl ;   public class Utils  {   private Utils  ( )  { }    @ SuppressWarnings  ( "unchecked" ) public static  Map  < String ,  ? > toSoyCompatibleMap  (  Object obj )  {  Object  ret =  toSoyCompatibleObjects  ( obj ) ;  if  (  !  (  ret instanceof Map ) )  {  throw  new IllegalArgumentException  ( "Input should be a Map or POJO." ) ; }  return  (  Map  < String ,  ? > ) ret ; }   private static Object toSoyCompatibleObjects  (  Object obj )  {  if  (  obj == null )  {  return obj ; }  if  (    Primitives . isWrapperType  (  obj . getClass  ( ) ) ||   obj . getClass  ( ) . isPrimitive  ( ) ||  obj instanceof String )  {  return obj ; }  if  (  obj instanceof Map )  {    @ SuppressWarnings  ( "unchecked" )  Map  < String , Object >  map =  (  Map  < String , Object > ) obj ;   Map  < String , Object >  newMap =  new  HashMap  < String , Object >  (  map . size  ( ) ) ;  for ( String key :  map . keySet  ( ) )  {   newMap . put  ( key ,  toSoyCompatibleObjects  (  map . get  ( key ) ) ) ; }  return newMap ; }  if  (  obj instanceof  Iterable  <  ? > )  {   List  < Object >  list =  Lists . newArrayList  ( ) ;  for ( Object subValue :  (  (  Iterable  <  ? > ) obj ) )  {   list . add  (  toSoyCompatibleObjects  ( subValue ) ) ; }  return list ; }  if  (   obj . getClass  ( ) . isArray  ( ) )  {  return obj ; }  {    @ SuppressWarnings  ( "unchecked" )  Map  < String , Object >  pojoMap =  (  Map  < String , Object > )  pojoToMap  ( obj ) ;   Map  < String , Object >  newMap =  new  HashMap  < String , Object >  (  pojoMap . size  ( ) ) ;  for ( String key :  pojoMap . keySet  ( ) )  {   newMap . put  ( key ,  toSoyCompatibleObjects  (  pojoMap . get  ( key ) ) ) ; }  return newMap ; } }   public static  Map  < String ,  ? > pojoToMap  (  Object pojo )  {   Map  < String , Object >  map =  new  HashMap  < String , Object >  ( ) ;  for ( Method method :   pojo . getClass  ( ) . getDeclaredMethods  ( ) )  {  if  (     Modifier . isPublic  (  method . getModifiers  ( ) ) &&    method . getParameterTypes  ( ) . length == 0 &&   method . getReturnType  ( ) !=  void . class &&   method . getName  ( ) . matches  ( "^(get|is).+" ) )  {  String  name =   method . getName  ( ) . replaceAll  ( "^(get|is)" , "" ) ;   name =   Character . toLowerCase  (  name . charAt  ( 0 ) ) +  (    name . length  ( ) > 1 ?  name . substring  ( 1 ) : "" ) ;  Object  value ;  try  {   value =  method . invoke  ( pojo ) ;   map . put  ( name , value ) ; }  catch (   Exception e )  {  throw  new RuntimeException  ( e ) ; } } }  return map ; }   public static SoyMapData objectToSoyDataMap  (  Object obj )  {  if  (  obj == null )  {  return  new SoyMapData  ( ) ; }  if  (  obj instanceof SoyMapData )  {  return  ( SoyMapData ) obj ; }  return  new SoyMapData  (  toSoyCompatibleMap  ( obj ) ) ; }   public static SoyMapData mergeSoyMapData  (  SoyMapData soyMap1 ,  SoyMapData soyMap2 )  {   Preconditions . checkNotNull  ( s1 ) ;   Preconditions . checkNotNull  ( s2 ) ;  SoyMapData  mergedMap =  new SoyMapData  ( ) ;  if  (  soyMap1 != null )  {   addSoyMapMapToSoyMapData  ( soyMap1 , mergedMap ) ; }  if  (  soyMap2 != null )  {   addSoyMapMapToSoyMapData  ( soyMap2 , mergedMap ) ; }  return mergedMap ; }   public static SoyMsgBundle mergeMsgBundles  (   List  < SoyMsgBundle > soyMsgBundles )  {   Preconditions . checkArgument  (   soyMsgBundles != null &&   soyMsgBundles . size  ( ) > 0 , "No MsgBundels defined" ) ;  String  localString = "" ;   List  < SoyMsg >  msgs =  Lists . newArrayList  ( ) ;  for ( SoyMsgBundle smb : soyMsgBundles )  {   localString =  smb . getLocaleString  ( ) ;   Iterator  < SoyMsg >  iter =  smb . iterator  ( ) ;  while  (  iter . hasNext  ( ) )  {   msgs . add  (  iter . next  ( ) ) ; } }  return  new SoyMsgBundleImpl  ( localString , msgs ) ; }   public static Locale stringToLocale  (  String str )  {  if  (  str == null )  {  return null ; }   int  len =  str . length  ( ) ;  if  (    len != 2 &&  len != 5 &&  len < 7 )  {  throw  new IllegalArgumentException  (  "Invalid locale format: " + str ) ; }   char  ch0 =  str . charAt  ( 0 ) ;   char  ch1 =  str . charAt  ( 1 ) ;  if  (     ch0 < 'a' ||  ch0 > 'z' ||  ch1 < 'a' ||  ch1 > 'z' )  {  throw  new IllegalArgumentException  (  "Invalid locale format: " + str ) ; }  if  (  len == 2 )  {  return  new Locale  ( str , "" ) ; } else  {  if  (   str . charAt  ( 2 ) != '_' )  {  throw  new IllegalArgumentException  (  "Invalid locale format: " + str ) ; }   char  ch3 =  str . charAt  ( 3 ) ;  if  (  ch3 == '_' )  {  return  new Locale  (  str . substring  ( 0 , 2 ) , "" ,  str . substring  ( 4 ) ) ; }   char  ch4 =  str . charAt  ( 4 ) ;  if  (     ch3 < 'A' ||  ch3 > 'Z' ||  ch4 < 'A' ||  ch4 > 'Z' )  {  throw  new IllegalArgumentException  (  "Invalid locale format: " + str ) ; }  if  (  len == 5 )  {  return  new Locale  (  str . substring  ( 0 , 2 ) ,  str . substring  ( 3 , 5 ) ) ; } else  {  if  (   str . charAt  ( 5 ) != '_' )  {  throw  new IllegalArgumentException  (  "Invalid locale format: " + str ) ; }  return  new Locale  (  str . substring  ( 0 , 2 ) ,  str . substring  ( 3 , 5 ) ,  str . substring  ( 6 ) ) ; } } }   private static void addSoyMapMapToSoyMapData  (  SoyMapData sourceMap ,  SoyMapData destinationMap )  {  for ( String key :  sourceMap . getKeys  ( ) )  {   destinationMap . putSingle  ( key ,  sourceMap . getSingle  ( key ) ) ; } } }