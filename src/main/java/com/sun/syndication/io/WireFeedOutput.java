  package    com . sun . syndication . io ;   import   java . io . File ;  import   java . io . FileWriter ;  import   java . io . IOException ;  import   java . io . Writer ;  import   java . util . List ;  import   java . util . Map ;  import   java . util . WeakHashMap ;  import   org . jdom2 . Document ;  import   org . jdom2 . JDOMException ;  import    org . jdom2 . output . DOMOutputter ;  import    org . jdom2 . output . Format ;  import    org . jdom2 . output . XMLOutputter ;  import     com . sun . syndication . feed . WireFeed ;  import      com . sun . syndication . io . impl . FeedGenerators ;   public class WireFeedOutput  {   private static  Map  < ClassLoader , FeedGenerators >  clMap =  new  WeakHashMap  < ClassLoader , FeedGenerators >  ( ) ;   private static FeedGenerators getFeedGenerators  ( )  {  synchronized  (  WireFeedOutput . class )  {  FeedGenerators  generators =  ( FeedGenerators )  clMap . get  (   Thread . currentThread  ( ) . getContextClassLoader  ( ) ) ;  if  (  generators == null )  {   generators =  new FeedGenerators  ( ) ;   clMap . put  (   Thread . currentThread  ( ) . getContextClassLoader  ( ) , generators ) ; }  return generators ; } }   public static  List  < String > getSupportedFeedTypes  ( )  {  return   getFeedGenerators  ( ) . getSupportedFeedTypes  ( ) ; }   public WireFeedOutput  ( )  { }   public String outputString  (   final WireFeed feed )  throws IllegalArgumentException , FeedException  {  return  this . outputString  ( feed , true ) ; }   public String outputString  (   final WireFeed feed ,   final boolean prettyPrint )  throws IllegalArgumentException , FeedException  {   final Document  doc =  outputJDom  ( feed ) ;   final String  encoding =  feed . getEncoding  ( ) ;  Format  format =  prettyPrint ?  Format . getPrettyFormat  ( ) :  Format . getCompactFormat  ( ) ;  if  ( prettyPrint )  {   format =  Format . getPrettyFormat  ( ) ; } else  {   format =  Format . getCompactFormat  ( ) ; }  if  (  encoding != null )  {   format . setEncoding  ( encoding ) ; }   final XMLOutputter  outputter =  new XMLOutputter  ( format ) ;  return  outputter . outputString  ( doc ) ; }   public void output  (   final WireFeed feed ,   final File file )  throws IllegalArgumentException , IOException , FeedException  {   this . output  ( feed , file , true ) ; }   public void output  (   final WireFeed feed ,   final File file ,   final boolean prettyPrint )  throws IllegalArgumentException , IOException , FeedException  {   final Writer  writer =  new FileWriter  ( file ) ;   this . output  ( feed , writer , prettyPrint ) ;   writer . close  ( ) ; }   public void output  (   final WireFeed feed ,   final Writer writer )  throws IllegalArgumentException , IOException , FeedException  {   this . output  ( feed , writer , true ) ; }   public void output  (   final WireFeed feed ,   final Writer writer ,   final boolean prettyPrint )  throws IllegalArgumentException , IOException , FeedException  {   final Document  doc =  outputJDom  ( feed ) ;   final String  encoding =  feed . getEncoding  ( ) ;  Format  format =  prettyPrint ?  Format . getPrettyFormat  ( ) :  Format . getCompactFormat  ( ) ;  if  ( prettyPrint )  {   format =  Format . getPrettyFormat  ( ) ; } else  {   format =  Format . getCompactFormat  ( ) ; }  if  (  encoding != null )  {   format . setEncoding  ( encoding ) ; }   final XMLOutputter  outputter =  new XMLOutputter  ( format ) ;   outputter . output  ( doc , writer ) ; }   public    org . w3c . dom . Document outputW3CDom  (   final WireFeed feed )  throws IllegalArgumentException , FeedException  {   final Document  doc =  outputJDom  ( feed ) ;   final DOMOutputter  outputter =  new DOMOutputter  ( ) ;  try  {  return  outputter . output  ( doc ) ; }  catch (   final  JDOMException jdomEx )  {  throw  new FeedException  ( "Could not create DOM" , jdomEx ) ; } }   public Document outputJDom  (   final WireFeed feed )  throws IllegalArgumentException , FeedException  {   final String  type =  feed . getFeedType  ( ) ;   final WireFeedGenerator  generator =   getFeedGenerators  ( ) . getGenerator  ( type ) ;  if  (  generator == null )  {  throw  new IllegalArgumentException  (   "Invalid feed type [" + type + "]" ) ; }  if  (  !   generator . getType  ( ) . equals  ( type ) )  {  throw  new IllegalArgumentException  (     "WireFeedOutput type[" + type + "] and WireFeed type [" + type + "] don't match" ) ; }  return  generator . generate  ( feed ) ; } }