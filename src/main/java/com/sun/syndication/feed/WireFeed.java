  package    com . sun . syndication . feed ;   import   java . io . Serializable ;  import   java . util . ArrayList ;  import   java . util . List ;  import   org . jdom2 . Element ;  import      com . sun . syndication . feed . impl . ObjectBean ;  import      com . sun . syndication . feed . module . Extendable ;  import      com . sun . syndication . feed . module . Module ;  import       com . sun . syndication . feed . module . impl . ModuleUtils ;   public abstract class WireFeed  implements  Cloneable , Serializable , Extendable  {   private static final  long  serialVersionUID =  - 3608120400805691829L ;   private final ObjectBean  objBean ;   private String  feedType ;   private String  encoding ;   private  List  < Module >  modules ;   private  List  < Element >  foreignMarkup ;   protected WireFeed  ( )  {   objBean =  new ObjectBean  (  this . getClass  ( ) , this ) ; }   protected WireFeed  (   final String type )  {  this  ( ) ;   feedType = type ; }    @ Override public Object clone  ( )  throws CloneNotSupportedException  {  return  objBean . clone  ( ) ; }    @ Override public boolean equals  (   final Object other )  {  if  (  other == null )  {  return false ; }  if  (  !  (  other instanceof WireFeed ) )  {  return false ; }   final  List  < Element >  fm =  getForeignMarkup  ( ) ;   setForeignMarkup  (   (  ( WireFeed ) other ) . getForeignMarkup  ( ) ) ;   final boolean  ret =  objBean . equals  ( other ) ;   setForeignMarkup  ( fm ) ;  return ret ; }    @ Override public  int hashCode  ( )  {  return  objBean . hashCode  ( ) ; }    @ Override public String toString  ( )  {  return  objBean . toString  ( ) ; }   public void setFeedType  (   final String feedType )  {    this . feedType = feedType ; }   public String getFeedType  ( )  {  return feedType ; }   public String getEncoding  ( )  {  return encoding ; }   public void setEncoding  (   final String encoding )  {    this . encoding = encoding ; }    @ Override public  List  < Module > getModules  ( )  {  if  (  modules == null )  {   modules =  new  ArrayList  < Module >  ( ) ; }  return modules ; }    @ Override public void setModules  (   final  List  < Module > modules )  {    this . modules = modules ; }    @ Override public Module getModule  (   final String uri )  {  return  ModuleUtils . getModule  ( modules , uri ) ; }   public  List  < Element > getForeignMarkup  ( )  {  if  (  foreignMarkup == null )  {   foreignMarkup =  new  ArrayList  < Element >  ( ) ; }  return foreignMarkup ; }   public void setForeignMarkup  (   final  List  < Element > foreignMarkup )  {    this . foreignMarkup = foreignMarkup ; } }