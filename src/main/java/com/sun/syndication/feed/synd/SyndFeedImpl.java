  package     com . sun . syndication . feed . synd ;   import   java . io . Serializable ;  import   java . util . ArrayList ;  import   java . util . Collections ;  import   java . util . Date ;  import   java . util . HashMap ;  import   java . util . HashSet ;  import   java . util . List ;  import   java . util . Map ;  import   java . util . Set ;  import   org . jdom2 . Element ;  import     com . sun . syndication . feed . CopyFrom ;  import     com . sun . syndication . feed . WireFeed ;  import      com . sun . syndication . feed . impl . CopyFromHelper ;  import      com . sun . syndication . feed . impl . ObjectBean ;  import      com . sun . syndication . feed . module . DCModule ;  import      com . sun . syndication . feed . module . DCModuleImpl ;  import      com . sun . syndication . feed . module . Module ;  import      com . sun . syndication . feed . module . SyModule ;  import      com . sun . syndication . feed . module . SyModuleImpl ;  import       com . sun . syndication . feed . module . impl . ModuleUtils ;  import       com . sun . syndication . feed . synd . impl . Converters ;  import       com . sun . syndication . feed . synd . impl . URINormalizer ;   public class SyndFeedImpl  implements  Serializable , SyndFeed  {   private static final  long  serialVersionUID =  - 2529165503200548045L ;   private final ObjectBean  objBean ;   private String  encoding ;   private String  uri ;   private SyndContent  title ;   private SyndContent  description ;   private String  feedType ;   private String  link ;   private  List  < SyndLink >  links ;   private SyndImage  image ;   private  List  < SyndEntry >  entries ;   private  List  < Module >  modules ;   private  List  < SyndPerson >  authors ;   private  List  < SyndPerson >  contributors ;   private  List  < Element >  foreignMarkup ;   private WireFeed  wireFeed = null ;   private boolean  preserveWireFeed = false ;   private static final Converters  CONVERTERS =  new Converters  ( ) ;   private static final  Set  < String >  IGNORE_PROPERTIES =  new  HashSet  < String >  ( ) ;   public static final  Set  < String >  CONVENIENCE_PROPERTIES =  Collections . unmodifiableSet  ( IGNORE_PROPERTIES ) ;  static  {   IGNORE_PROPERTIES . add  ( "publishedDate" ) ;   IGNORE_PROPERTIES . add  ( "author" ) ;   IGNORE_PROPERTIES . add  ( "copyright" ) ;   IGNORE_PROPERTIES . add  ( "categories" ) ;   IGNORE_PROPERTIES . add  ( "language" ) ; }    @ Override public  List  < String > getSupportedFeedTypes  ( )  {  return  CONVERTERS . getSupportedFeedTypes  ( ) ; }   protected SyndFeedImpl  (   final  Class  <  ? > beanClass ,   final  Set  < String > convenienceProperties )  {   objBean =  new ObjectBean  ( beanClass , this , convenienceProperties ) ; }   public SyndFeedImpl  ( )  {  this  ( null ) ; }   public SyndFeedImpl  (   final WireFeed feed )  {  this  ( feed , false ) ; }   public SyndFeedImpl  (   final WireFeed feed ,   final boolean preserveWireFeed )  {  this  (  SyndFeed . class , IGNORE_PROPERTIES ) ;  if  ( preserveWireFeed )  {   wireFeed = feed ;    this . preserveWireFeed = preserveWireFeed ; }  if  (  feed != null )  {   feedType =  feed . getFeedType  ( ) ;   final Converter  converter =  CONVERTERS . getConverter  ( feedType ) ;  if  (  converter == null )  {  throw  new IllegalArgumentException  (   "Invalid feed type [" + feedType + "]" ) ; }   converter . copyInto  ( feed , this ) ; } }    @ Override public Object clone  ( )  throws CloneNotSupportedException  {  return  objBean . clone  ( ) ; }    @ Override public boolean equals  (   final Object other )  {  if  (   other == null ||  !  (  other instanceof SyndFeedImpl ) )  {  return false ; }   final  List  < Element >  fm =  getForeignMarkup  ( ) ;   setForeignMarkup  (   (  ( SyndFeedImpl ) other ) . getForeignMarkup  ( ) ) ;   final boolean  ret =  objBean . equals  ( other ) ;   setForeignMarkup  ( fm ) ;  return ret ; }    @ Override public  int hashCode  ( )  {  return  objBean . hashCode  ( ) ; }    @ Override public String toString  ( )  {  return  objBean . toString  ( ) ; }    @ Override public WireFeed createWireFeed  ( )  {  return  this . createWireFeed  ( feedType ) ; }    @ Override public WireFeed createWireFeed  (   final String feedType )  {  if  (  feedType == null )  {  throw  new IllegalArgumentException  ( "Feed type cannot be null" ) ; }   final Converter  converter =  CONVERTERS . getConverter  ( feedType ) ;  if  (  converter == null )  {  throw  new IllegalArgumentException  (   "Invalid feed type [" + feedType + "]" ) ; }  return  converter . createRealFeed  ( this ) ; }    @ Override public WireFeed originalWireFeed  ( )  {  return wireFeed ; }    @ Override public String getFeedType  ( )  {  return feedType ; }    @ Override public void setFeedType  (   final String feedType )  {    this . feedType = feedType ; }    @ Override public String getEncoding  ( )  {  return encoding ; }    @ Override public void setEncoding  (   final String encoding )  {    this . encoding = encoding ; }    @ Override public String getUri  ( )  {  return uri ; }    @ Override public void setUri  (   final String uri )  {    this . uri =  URINormalizer . normalize  ( uri ) ; }    @ Override public String getTitle  ( )  {  if  (  title != null )  {  return  title . getValue  ( ) ; }  return null ; }    @ Override public void setTitle  (   final String title )  {  if  (   this . title == null )  {    this . title =  new SyndContentImpl  ( ) ; }    this . title . setValue  ( title ) ; }    @ Override public SyndContent getTitleEx  ( )  {  return title ; }    @ Override public void setTitleEx  (   final SyndContent title )  {    this . title = title ; }    @ Override public String getLink  ( )  {  return link ; }    @ Override public void setLink  (   final String link )  {    this . link = link ; }    @ Override public String getDescription  ( )  {  if  (  description != null )  {  return  description . getValue  ( ) ; }  return null ; }    @ Override public void setDescription  (   final String description )  {  if  (   this . description == null )  {    this . description =  new SyndContentImpl  ( ) ; }    this . description . setValue  ( description ) ; }    @ Override public SyndContent getDescriptionEx  ( )  {  return description ; }    @ Override public void setDescriptionEx  (   final SyndContent description )  {    this . description = description ; }    @ Override public Date getPublishedDate  ( )  {  return   getDCModule  ( ) . getDate  ( ) ; }    @ Override public void setPublishedDate  (   final Date publishedDate )  {    getDCModule  ( ) . setDate  ( publishedDate ) ; }    @ Override public String getCopyright  ( )  {  return   getDCModule  ( ) . getRights  ( ) ; }    @ Override public void setCopyright  (   final String copyright )  {    getDCModule  ( ) . setRights  ( copyright ) ; }    @ Override public SyndImage getImage  ( )  {  return image ; }    @ Override public void setImage  (   final SyndImage image )  {    this . image = image ; }    @ Override public  List  < SyndCategory > getCategories  ( )  {  return  new SyndCategoryListFacade  (   getDCModule  ( ) . getSubjects  ( ) ) ; }    @ Override public void setCategories  (   final  List  < SyndCategory > categories )  {    getDCModule  ( ) . setSubjects  (  SyndCategoryListFacade . convertElementsSyndCategoryToSubject  ( categories ) ) ; }    @ Override public  List  < SyndEntry > getEntries  ( )  {  if  (  entries == null )  {   entries =  new  ArrayList  < SyndEntry >  ( ) ; }  return entries ; }    @ Override public void setEntries  (   final  List  < SyndEntry > entries )  {    this . entries = entries ; }    @ Override public String getLanguage  ( )  {  return   getDCModule  ( ) . getLanguage  ( ) ; }    @ Override public void setLanguage  (   final String language )  {    getDCModule  ( ) . setLanguage  ( language ) ; }    @ Override public  List  < Module > getModules  ( )  {  if  (  modules == null )  {   modules =  new  ArrayList  < Module >  ( ) ; }  if  (   ModuleUtils . getModule  ( modules ,  DCModule . URI ) == null )  {   modules . add  (  new DCModuleImpl  ( ) ) ; }  return modules ; }    @ Override public void setModules  (   final  List  < Module > modules )  {    this . modules = modules ; }    @ Override public Module getModule  (   final String uri )  {  return  ModuleUtils . getModule  (  getModules  ( ) , uri ) ; }   private DCModule getDCModule  ( )  {  return  ( DCModule )  getModule  (  DCModule . URI ) ; }    @ Override public  Class  < SyndFeed > getInterface  ( )  {  return  SyndFeed . class ; }    @ Override public void copyFrom  (   final  CopyFrom  < SyndFeed > obj )  {   COPY_FROM_HELPER . copy  ( this , obj ) ; }   private static final CopyFromHelper  COPY_FROM_HELPER ;  static  {   final  Map  < String ,  Class  <  ? > >  basePropInterfaceMap =  new  HashMap  < String ,  Class  <  ? > >  ( ) ;   basePropInterfaceMap . put  ( "feedType" ,  String . class ) ;   basePropInterfaceMap . put  ( "encoding" ,  String . class ) ;   basePropInterfaceMap . put  ( "uri" ,  String . class ) ;   basePropInterfaceMap . put  ( "title" ,  String . class ) ;   basePropInterfaceMap . put  ( "link" ,  String . class ) ;   basePropInterfaceMap . put  ( "description" ,  String . class ) ;   basePropInterfaceMap . put  ( "image" ,  SyndImage . class ) ;   basePropInterfaceMap . put  ( "entries" ,  SyndEntry . class ) ;   basePropInterfaceMap . put  ( "modules" ,  Module . class ) ;   final  Map  <  Class  <  ? extends  CopyFrom  <  ? > > ,  Class  <  ? > >  basePropClassImplMap =  new  HashMap  <  Class  <  ? extends  CopyFrom  <  ? > > ,  Class  <  ? > >  ( ) ;   basePropClassImplMap . put  (  SyndEntry . class ,  SyndEntryImpl . class ) ;   basePropClassImplMap . put  (  SyndImage . class ,  SyndImageImpl . class ) ;   basePropClassImplMap . put  (  DCModule . class ,  DCModuleImpl . class ) ;   basePropClassImplMap . put  (  SyModule . class ,  SyModuleImpl . class ) ;   COPY_FROM_HELPER =  new CopyFromHelper  (  SyndFeed . class , basePropInterfaceMap , basePropClassImplMap ) ; }    @ Override public  List  < SyndLink > getLinks  ( )  {  if  (  links == null )  {   links =  new  ArrayList  < SyndLink >  ( ) ; }  return links ; }    @ Override public void setLinks  (   final  List  < SyndLink > links )  {    this . links = links ; }    @ Override public  List  < SyndPerson > getAuthors  ( )  {  if  (  authors == null )  {   authors =  new  ArrayList  < SyndPerson >  ( ) ; }  return authors ; }    @ Override public void setAuthors  (   final  List  < SyndPerson > authors )  {    this . authors = authors ; }    @ Override public String getAuthor  ( )  {  return   getDCModule  ( ) . getCreator  ( ) ; }    @ Override public void setAuthor  (   final String author )  {    getDCModule  ( ) . setCreator  ( author ) ; }    @ Override public  List  < SyndPerson > getContributors  ( )  {  if  (  contributors == null )  {   contributors =  new  ArrayList  < SyndPerson >  ( ) ; }  return contributors ; }    @ Override public void setContributors  (   final  List  < SyndPerson > contributors )  {    this . contributors = contributors ; }    @ Override public  List  < Element > getForeignMarkup  ( )  {  if  (  foreignMarkup == null )  {   foreignMarkup =  new  ArrayList  < Element >  ( ) ; }  return foreignMarkup ; }    @ Override public void setForeignMarkup  (   final  List  < Element > foreignMarkup )  {    this . foreignMarkup = foreignMarkup ; }    @ Override public boolean isPreservingWireFeed  ( )  {  return preserveWireFeed ; } }