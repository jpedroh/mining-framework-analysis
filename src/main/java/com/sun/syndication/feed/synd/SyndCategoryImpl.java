  package     com . sun . syndication . feed . synd ;   import   java . io . Serializable ;  import   java . util . AbstractList ;  import   java . util . ArrayList ;  import   java . util . List ;  import      com . sun . syndication . feed . impl . ObjectBean ;  import      com . sun . syndication . feed . module . DCSubject ;  import      com . sun . syndication . feed . module . DCSubjectImpl ;   public class SyndCategoryImpl  implements  Serializable , SyndCategory  {   private static final  long  serialVersionUID =  - 2151815243404151131L ;   private final ObjectBean  objBean ;   private final DCSubject  subject ;  SyndCategoryImpl  (   final DCSubject subject )  {   objBean =  new ObjectBean  (  SyndCategory . class , this ) ;    this . subject = subject ; }    @ Override public Object clone  ( )  throws CloneNotSupportedException  {  return  objBean . clone  ( ) ; }    @ Override public boolean equals  (   final Object other )  {  if  (  !  (  other instanceof SyndCategoryImpl ) )  {  return false ; }  return  objBean . equals  ( other ) ; }    @ Override public  int hashCode  ( )  {  return  objBean . hashCode  ( ) ; }    @ Override public String toString  ( )  {  return  objBean . toString  ( ) ; }  DCSubject getSubject  ( )  {  return subject ; }   public SyndCategoryImpl  ( )  {  this  (  new DCSubjectImpl  ( ) ) ; }    @ Override public String getName  ( )  {  return  subject . getValue  ( ) ; }    @ Override public void setName  (   final String name )  {   subject . setValue  ( name ) ; }    @ Override public String getTaxonomyUri  ( )  {  return  subject . getTaxonomyUri  ( ) ; }    @ Override public void setTaxonomyUri  (   final String taxonomyUri )  {   subject . setTaxonomyUri  ( taxonomyUri ) ; } }  class SyndCategoryListFacade  extends  AbstractList  < SyndCategory >  {   private final  List  < DCSubject >  subjects ;   public SyndCategoryListFacade  ( )  {  this  (  new  ArrayList  < DCSubject >  ( ) ) ; }   public SyndCategoryListFacade  (   final  List  < DCSubject > subjects )  {    this . subjects = subjects ; }    @ Override public SyndCategory get  (   final  int index )  {  return  new SyndCategoryImpl  (  subjects . get  ( index ) ) ; }    @ Override public  int size  ( )  {  return  subjects . size  ( ) ; }    @ Override public SyndCategory set  (   final  int index ,   final SyndCategory obj )  {   final SyndCategoryImpl  sCat =  ( SyndCategoryImpl ) obj ;  DCSubject  subject =   sCat != null ?  sCat . getSubject  ( ) : null ;  if  (  sCat != null )  {   subject =  sCat . getSubject  ( ) ; } else  {   subject = null ; }   subject =  subjects . set  ( index , subject ) ;  if  (  subject != null )  {  return  new SyndCategoryImpl  ( subject ) ; } else  {  return null ; } }    @ Override public void add  (   final  int index ,   final SyndCategory obj )  {   final SyndCategoryImpl  sCat =  ( SyndCategoryImpl ) obj ;  DCSubject  subject =   sCat != null ?  sCat . getSubject  ( ) : null ;  if  (  sCat != null )  {   subject =  sCat . getSubject  ( ) ; } else  {   subject = null ; }   subjects . add  ( index , subject ) ; }    @ Override public SyndCategory remove  (   final  int index )  {   final DCSubject  subject =  subjects . remove  ( index ) ;  if  (  subject != null )  {  return  new SyndCategoryImpl  ( subject ) ; } else  {  return null ; } }   public static  List  < DCSubject > convertElementsSyndCategoryToSubject  (   final  List  < SyndCategory > cList )  {   List  < DCSubject >  sList = null ;  if  (  cList != null )  {   sList =  new  ArrayList  < DCSubject >  ( ) ;  for (   int  i = 0 ;  i <  cList . size  ( ) ;  i ++ )  {   final SyndCategoryImpl  sCat =  ( SyndCategoryImpl )  cList . get  ( i ) ;  DCSubject  subject = null ;  if  (  sCat != null )  {   subject =  sCat . getSubject  ( ) ; }   sList . add  ( subject ) ; } }  return sList ; } }