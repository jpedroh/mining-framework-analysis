  package     com . sun . syndication . feed . module ;   import   java . util . ArrayList ;  import   java . util . Collections ;  import   java . util . Date ;  import   java . util . HashMap ;  import   java . util . HashSet ;  import   java . util . List ;  import   java . util . Map ;  import   java . util . Set ;  import     com . sun . syndication . feed . CopyFrom ;  import      com . sun . syndication . feed . impl . CopyFromHelper ;  import      com . sun . syndication . feed . impl . ObjectBean ;   public class DCModuleImpl  extends ModuleImpl  implements  DCModule  {   private static final  long  serialVersionUID =  - 6502372914221178645L ;   private final ObjectBean  objBean ;   private  List  < String >  title ;   private  List  < String >  creator ;   private  List  < DCSubject >  subject ;   private  List  < String >  description ;   private  List  < String >  publisher ;   private  List  < String >  contributors ;   private  List  < Date >  date ;   private  List  < String >  type ;   private  List  < String >  format ;   private  List  < String >  identifier ;   private  List  < String >  source ;   private  List  < String >  language ;   private  List  < String >  relation ;   private  List  < String >  coverage ;   private  List  < String >  rights ;   private static final  Set  < String >  IGNORE_PROPERTIES =  new  HashSet  < String >  ( ) ;   public static final  Set  < String >  CONVENIENCE_PROPERTIES =  Collections . unmodifiableSet  ( IGNORE_PROPERTIES ) ;  static  {   IGNORE_PROPERTIES . add  ( "title" ) ;   IGNORE_PROPERTIES . add  ( "creator" ) ;   IGNORE_PROPERTIES . add  ( "subject" ) ;   IGNORE_PROPERTIES . add  ( "description" ) ;   IGNORE_PROPERTIES . add  ( "publisher" ) ;   IGNORE_PROPERTIES . add  ( "contributor" ) ;   IGNORE_PROPERTIES . add  ( "date" ) ;   IGNORE_PROPERTIES . add  ( "type" ) ;   IGNORE_PROPERTIES . add  ( "format" ) ;   IGNORE_PROPERTIES . add  ( "identifier" ) ;   IGNORE_PROPERTIES . add  ( "source" ) ;   IGNORE_PROPERTIES . add  ( "language" ) ;   IGNORE_PROPERTIES . add  ( "relation" ) ;   IGNORE_PROPERTIES . add  ( "coverage" ) ;   IGNORE_PROPERTIES . add  ( "rights" ) ; }   public DCModuleImpl  ( )  {  super  (  DCModule . class , URI ) ;   objBean =  new ObjectBean  (  DCModule . class , this , CONVENIENCE_PROPERTIES ) ; }    @ Override public  List  < String > getTitles  ( )  {  if  (  title == null )  {   title =  new  ArrayList  < String >  ( ) ; }  return title ; }    @ Override public void setTitles  (   final  List  < String > titles )  {   title = titles ; }    @ Override public String getTitle  ( )  {  if  (   title != null &&   title . size  ( ) > 0 )  {  return  title . get  ( 0 ) ; } else  {  return null ; } }    @ Override public void setTitle  (   final String title )  {    this . title =  new  ArrayList  < String >  ( ) ;    this . title . add  ( title ) ; }    @ Override public  List  < String > getCreators  ( )  {  if  (  creator == null )  {   creator =  new  ArrayList  < String >  ( ) ; }  return creator ; }    @ Override public void setCreators  (   final  List  < String > creators )  {   creator = creators ; }    @ Override public String getCreator  ( )  {  if  (   creator != null &&   creator . size  ( ) > 0 )  {  return  creator . get  ( 0 ) ; } else  {  return null ; } }    @ Override public void setCreator  (   final String creator )  {    this . creator =  new  ArrayList  < String >  ( ) ;    this . creator . add  ( creator ) ; }    @ Override public  List  < DCSubject > getSubjects  ( )  {  if  (  subject == null )  {   subject =  new  ArrayList  < DCSubject >  ( ) ; }  return subject ; }    @ Override public void setSubjects  (   final  List  < DCSubject > subjects )  {   subject = subjects ; }    @ Override public DCSubject getSubject  ( )  {  if  (   subject != null &&   subject . size  ( ) > 0 )  {  return  subject . get  ( 0 ) ; } else  {  return null ; } }    @ Override public void setSubject  (   final DCSubject subject )  {    this . subject =  new  ArrayList  < DCSubject >  ( ) ;    this . subject . add  ( subject ) ; }    @ Override public  List  < String > getDescriptions  ( )  {  if  (  description == null )  {   description =  new  ArrayList  < String >  ( ) ; }  return description ; }    @ Override public void setDescriptions  (   final  List  < String > descriptions )  {   description = descriptions ; }    @ Override public String getDescription  ( )  {  if  (   description != null &&   description . size  ( ) > 0 )  {  return  description . get  ( 0 ) ; } else  {  return null ; } }    @ Override public void setDescription  (   final String description )  {    this . description =  new  ArrayList  < String >  ( ) ;    this . description . add  ( description ) ; }    @ Override public  List  < String > getPublishers  ( )  {  if  (  publisher == null )  {   publisher =  new  ArrayList  < String >  ( ) ; }  return publisher ; }    @ Override public void setPublishers  (   final  List  < String > publishers )  {   publisher = publishers ; }    @ Override public String getPublisher  ( )  {  if  (   publisher != null &&   publisher . size  ( ) > 0 )  {  return  publisher . get  ( 0 ) ; } else  {  return null ; } }    @ Override public void setPublisher  (   final String publisher )  {    this . publisher =  new  ArrayList  < String >  ( ) ;    this . publisher . add  ( publisher ) ; }    @ Override public  List  < String > getContributors  ( )  {  if  (  contributors == null )  {   contributors =  new  ArrayList  < String >  ( ) ; }  return contributors ; }    @ Override public void setContributors  (   final  List  < String > contributors )  {    this . contributors = contributors ; }    @ Override public String getContributor  ( )  {  if  (   contributors != null &&   contributors . size  ( ) > 0 )  {  return  contributors . get  ( 0 ) ; } else  {  return null ; } }    @ Override public void setContributor  (   final String contributor )  {   contributors =  new  ArrayList  < String >  ( ) ;   contributors . add  ( contributor ) ; }    @ Override public  List  < Date > getDates  ( )  {  if  (  date == null )  {   date =  new  ArrayList  < Date >  ( ) ; }  return date ; }    @ Override public void setDates  (   final  List  < Date > dates )  {   date = dates ; }    @ Override public Date getDate  ( )  {  if  (   date != null &&   date . size  ( ) > 0 )  {  return  date . get  ( 0 ) ; } else  {  return null ; } }    @ Override public void setDate  (   final Date date )  {    this . date =  new  ArrayList  < Date >  ( ) ;    this . date . add  ( date ) ; }    @ Override public  List  < String > getTypes  ( )  {  if  (  type == null )  {   type =  new  ArrayList  < String >  ( ) ; }  return type ; }    @ Override public void setTypes  (   final  List  < String > types )  {   type = types ; }    @ Override public String getType  ( )  {  if  (   type != null &&   type . size  ( ) > 0 )  {  return  type . get  ( 0 ) ; } else  {  return null ; } }    @ Override public void setType  (   final String type )  {    this . type =  new  ArrayList  < String >  ( ) ;    this . type . add  ( type ) ; }    @ Override public  List  < String > getFormats  ( )  {  if  (  format == null )  {   format =  new  ArrayList  < String >  ( ) ; }  return format ; }    @ Override public void setFormats  (   final  List  < String > formats )  {   format = formats ; }    @ Override public String getFormat  ( )  {  if  (   format != null &&   format . size  ( ) > 0 )  {  return  format . get  ( 0 ) ; } else  {  return null ; } }    @ Override public void setFormat  (   final String format )  {    this . format =  new  ArrayList  < String >  ( ) ;    this . format . add  ( format ) ; }    @ Override public  List  < String > getIdentifiers  ( )  {  if  (  identifier == null )  {   identifier =  new  ArrayList  < String >  ( ) ; }  return identifier ; }    @ Override public void setIdentifiers  (   final  List  < String > identifiers )  {   identifier = identifiers ; }    @ Override public String getIdentifier  ( )  {  if  (   identifier != null &&   identifier . size  ( ) > 0 )  {  return  identifier . get  ( 0 ) ; } else  {  return null ; } }    @ Override public void setIdentifier  (   final String identifier )  {    this . identifier =  new  ArrayList  < String >  ( ) ;    this . identifier . add  ( identifier ) ; }    @ Override public  List  < String > getSources  ( )  {  if  (  source == null )  {   source =  new  ArrayList  < String >  ( ) ; }  return source ; }    @ Override public void setSources  (   final  List  < String > sources )  {   source = sources ; }    @ Override public String getSource  ( )  {  if  (   source != null &&   source . size  ( ) > 0 )  {  return  source . get  ( 0 ) ; } else  {  return null ; } }    @ Override public void setSource  (   final String source )  {    this . source =  new  ArrayList  < String >  ( ) ;    this . source . add  ( source ) ; }    @ Override public  List  < String > getLanguages  ( )  {  if  (  language == null )  {   language =  new  ArrayList  < String >  ( ) ; }  return language ; }    @ Override public void setLanguages  (   final  List  < String > languages )  {   language = languages ; }    @ Override public String getLanguage  ( )  {  if  (   language != null &&   language . size  ( ) > 0 )  {  return  language . get  ( 0 ) ; } else  {  return null ; } }    @ Override public void setLanguage  (   final String language )  {    this . language =  new  ArrayList  < String >  ( ) ;    this . language . add  ( language ) ; }    @ Override public  List  < String > getRelations  ( )  {  if  (  relation == null )  {   relation =  new  ArrayList  < String >  ( ) ; }  return relation ; }    @ Override public void setRelations  (   final  List  < String > relations )  {   relation = relations ; }    @ Override public String getRelation  ( )  {  if  (   relation != null &&   relation . size  ( ) > 0 )  {  return  relation . get  ( 0 ) ; } else  {  return null ; } }    @ Override public void setRelation  (   final String relation )  {    this . relation =  new  ArrayList  < String >  ( ) ;    this . relation . add  ( relation ) ; }    @ Override public  List  < String > getCoverages  ( )  {  if  (  coverage == null )  {   coverage =  new  ArrayList  < String >  ( ) ; }  return coverage ; }    @ Override public void setCoverages  (   final  List  < String > coverages )  {   coverage = coverages ; }    @ Override public String getCoverage  ( )  {  if  (   coverage != null &&   coverage . size  ( ) > 0 )  {  return  coverage . get  ( 0 ) ; } else  {  return null ; } }    @ Override public void setCoverage  (   final String coverage )  {    this . coverage =  new  ArrayList  < String >  ( ) ;    this . coverage . add  ( coverage ) ; }    @ Override public  List  < String > getRightsList  ( )  {  if  (  rights == null )  {   rights =  new  ArrayList  < String >  ( ) ; }  return rights ; }    @ Override public void setRightsList  (   final  List  < String > rights )  {    this . rights = rights ; }    @ Override public String getRights  ( )  {  if  (   rights != null &&   rights . size  ( ) > 0 )  {  return  rights . get  ( 0 ) ; } else  {  return null ; } }    @ Override public void setRights  (   final String rights )  {    this . rights =  new  ArrayList  < String >  ( ) ;    this . rights . add  ( rights ) ; }    @ Override public final Object clone  ( )  throws CloneNotSupportedException  {  return  objBean . clone  ( ) ; }    @ Override public final boolean equals  (   final Object other )  {  return  objBean . equals  ( other ) ; }    @ Override public final  int hashCode  ( )  {  return  objBean . hashCode  ( ) ; }    @ Override public final String toString  ( )  {  return  objBean . toString  ( ) ; }    @ Override public final  Class  < DCModule > getInterface  ( )  {  return  DCModule . class ; }    @ Override public final void copyFrom  (   final  CopyFrom  < Module > obj )  {   COPY_FROM_HELPER . copy  ( this , obj ) ; }   private static final CopyFromHelper  COPY_FROM_HELPER ;  static  {   final  Map  < String ,  Class  <  ? > >  basePropInterfaceMap =  new  HashMap  < String ,  Class  <  ? > >  ( ) ;   basePropInterfaceMap . put  ( "titles" ,  String . class ) ;   basePropInterfaceMap . put  ( "creators" ,  String . class ) ;   basePropInterfaceMap . put  ( "subjects" ,  DCSubject . class ) ;   basePropInterfaceMap . put  ( "descriptions" ,  String . class ) ;   basePropInterfaceMap . put  ( "publishers" ,  String . class ) ;   basePropInterfaceMap . put  ( "contributors" ,  String . class ) ;   basePropInterfaceMap . put  ( "dates" ,  Date . class ) ;   basePropInterfaceMap . put  ( "types" ,  String . class ) ;   basePropInterfaceMap . put  ( "formats" ,  String . class ) ;   basePropInterfaceMap . put  ( "identifiers" ,  String . class ) ;   basePropInterfaceMap . put  ( "sources" ,  String . class ) ;   basePropInterfaceMap . put  ( "languages" ,  String . class ) ;   basePropInterfaceMap . put  ( "relations" ,  String . class ) ;   basePropInterfaceMap . put  ( "coverages" ,  String . class ) ;   basePropInterfaceMap . put  ( "rightsList" ,  String . class ) ;   final  Map  <  Class  <  ? extends  CopyFrom  <  ? > > ,  Class  <  ? > >  basePropClassImplMap =  new  HashMap  <  Class  <  ? extends  CopyFrom  <  ? > > ,  Class  <  ? > >  ( ) ;   basePropClassImplMap . put  (  DCSubject . class ,  DCSubjectImpl . class ) ;   COPY_FROM_HELPER =  new CopyFromHelper  (  DCModule . class , basePropInterfaceMap , basePropClassImplMap ) ; } }