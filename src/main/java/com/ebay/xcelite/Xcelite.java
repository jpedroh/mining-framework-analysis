  package   com . ebay . xcelite ;   import     com . ebay . xcelite . exceptions . XceliteException ;  import     com . ebay . xcelite . options . XceliteOptions ;  import  lombok . Getter ;  import  lombok . SneakyThrows ;  import      org . apache . poi . ss . usermodel . Workbook ;  import      org . apache . poi . xssf . usermodel . XSSFWorkbook ;  import  java . io .  * ;  import   java . util . ArrayList ;  import   java . util . List ;  import static    java . util . Optional . ofNullable ;  import     com . ebay . xcelite . sheet . XceliteSheet ;  import     com . ebay . xcelite . sheet . XceliteSheetImpl ;   public class Xcelite  {   private final Workbook  workbook ;   private File  file ;    @ Getter protected XceliteOptions  options ;   public Xcelite  ( )  {   workbook =  new XSSFWorkbook  ( ) ;   options =  new XceliteOptions  ( ) ; }   public Xcelite  (  XceliteOptions options )  {  this  ( ) ;    this . options = options ; }   public Xcelite  (  InputStream inputStream )  {  this  ( inputStream ,  new XceliteOptions  ( ) ) ; }    @ SneakyThrows public Xcelite  (  InputStream inputStream ,  XceliteOptions options )  {   workbook =  new XSSFWorkbook  ( inputStream ) ;    this . options = options ; }    @ SneakyThrows public Xcelite  (  File file )  {    this . file = file ;   workbook =  new XSSFWorkbook  (  new FileInputStream  ( file ) ) ; }   public XceliteSheet createSheet  ( )  {  return  new XceliteSheetImpl  (  workbook . createSheet  ( ) , options ) ; }   public XceliteSheet createSheet  (  String name )  {  return  new XceliteSheetImpl  (  workbook . createSheet  ( name ) , options ) ; }   public XceliteSheet getSheet  (   int sheetIndex )  {  return    ofNullable  (  workbook . getSheetAt  ( sheetIndex ) ) . map  (  s ->  new XceliteSheetImpl  ( s , options ) ) . orElseThrow  (   ( ) ->  new XceliteException  (  String . format  ( "Could not find sheet at index %s" , sheetIndex ) ) ) ; }   public XceliteSheet getSheet  (  String sheetName )  {  return    ofNullable  (  workbook . getSheet  ( sheetName ) ) . map  (  s ->  new XceliteSheetImpl  ( s , options ) ) . orElseThrow  (   ( ) ->  new XceliteException  (  String . format  ( "Could not find sheet named \"%s\"" , sheetName ) ) ) ; }   public  List  < XceliteSheet > getSheets  ( )  {  if  (   workbook . getNumberOfSheets  ( ) == 0 )  {  throw  new XceliteException  ( "Could not find any sheet" ) ; }   List  < XceliteSheet >  xceliteSheets =  new  ArrayList  < >  ( ) ;    workbook . sheetIterator  ( ) . forEachRemaining  (  sheet ->  xceliteSheets . add  (  new XceliteSheetImpl  ( sheet ) ) ) ;  return xceliteSheets ; }    @ SneakyThrows  @ Deprecated public void write  ( )  {   write  ( file ) ; }    @ SneakyThrows public void write  (  File file )  {  try  (  FileOutputStream out =  new FileOutputStream  ( file , false ) )  {   write  ( out ) ; } }    @ SneakyThrows public void write  (  OutputStream out )  {   workbook . write  ( out ) ; }    @ SneakyThrows public   byte  [ ] getBytes  ( )  {  try  (  ByteArrayOutputStream byteArrayOutputStream =  new ByteArrayOutputStream  ( ) )  {   write  ( byteArrayOutputStream ) ;  return  byteArrayOutputStream . toByteArray  ( ) ; } }   public void setOptions  (  XceliteOptions options )  {    this . options =  new XceliteOptions  ( options ) ; } }