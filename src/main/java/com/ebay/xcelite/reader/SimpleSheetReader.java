  package    com . ebay . xcelite . reader ;   import     com . ebay . xcelite . exceptions . EmptyRowException ;  import     com . ebay . xcelite . options . XceliteOptions ;  import     com . ebay . xcelite . sheet . XceliteSheet ;  import     com . ebay . xcelite . sheet . XceliteSheetImpl ;  import  lombok . SneakyThrows ;  import      org . apache . poi . ss . usermodel . Cell ;  import      org . apache . poi . ss . usermodel . Row ;  import   java . util . ArrayList ;  import   java . util . Collection ;  import   java . util . Iterator ;  import   java . util . List ;  import static      com . ebay . xcelite . policies . MissingRowPolicy . SKIP ;   public class SimpleSheetReader  extends  AbstractSheetReader  <  Collection  < Object > >  {   public  @ Override boolean expectsHeaderRow  ( )  {  return false ; }   public SimpleSheetReader  (  XceliteSheet sheet ,  XceliteOptions options )  {  super  ( sheet , options ) ; }   public SimpleSheetReader  (  XceliteSheet sheet )  {  this  ( sheet ,  sheet . getOptions  ( ) ) ; } 
<<<<<<<
   @ Override public  Collection  <  Collection  < Object > > read  ( )  {   List  <  Collection  < Object > >  rows =  new  ArrayList  < >  ( ) ;   int  lastNonEmptyRowId = 0 ;  boolean  firstIteration = true ;   Iterator  < Row >  rowIterator =  sheet . moveToFirstDataRow  ( this , false ) ;  if  (  !  rowIterator . hasNext  ( ) )  return rows ;  while  (  rowIterator . hasNext  ( ) )  {   Collection  < Object >  row ;  Row  excelRow =  rowIterator . next  ( ) ;  if  ( firstIteration )  {   int  rowNum =  excelRow . getRowNum  ( ) ;  if  (   rows . size  ( ) < rowNum )  {   int  firstDataRowIndex =  XceliteSheetImpl . getFirstDataRowIndex  ( this ) ;  for (   int  i = firstDataRowIndex ;  i < rowNum ;  i ++ )  {   rows . add  (  handleEmptyRow  (   sheet . getNativeSheet  ( ) . getRow  ( i ) ) ) ; } }   firstIteration = false ; }  if  (  isBlankRow  ( excelRow ) )  {   row =  handleEmptyRow  ( excelRow ) ;  if  (  !   options . getMissingRowPolicy  ( ) . equals  ( SKIP ) )  {  if  (  shouldKeepObject  ( row , rowPostProcessors ) )  {   rows . add  ( row ) ; } } } else  {   row =  fillObject  ( excelRow ) ;  if  (  shouldKeepObject  ( row , rowPostProcessors ) )  {   rows . add  ( row ) ;   lastNonEmptyRowId =  rows . size  ( ) ; } } }  return  applyTrailingEmptyRowPolicy  ( rows , lastNonEmptyRowId ) ; }
=======
>>>>>>>
    @ SneakyThrows  @ Override public  Collection  < Object > fillObject  (  Row excelRow )  {   Collection  < Object >  row =  getNewObject  ( ) ;   Iterator  < Cell >  cellIterator =  excelRow . cellIterator  ( ) ;  while  (  cellIterator . hasNext  ( ) )  {  Object  value =  readValueFromCell  (  cellIterator . next  ( ) ) ;   row . add  ( value ) ; }  return row ; }    @ SneakyThrows  @ Override  Collection  < Object > getNewObject  ( )  {  return  new  ArrayList  < >  ( ) ; }    @ Override void buildHeader  (  Row row )  { }    @ Override void validateColumns  ( )  { } }