  package   com . syncleus . ferma ;   import    com . tinkerpop . blueprints . TransactionalGraph ;  import   java . util . Collection ;  import     com . syncleus . ferma . framefactories . FrameFactory ;  import     com . syncleus . ferma . typeresolvers . TypeResolver ;   public class DelegatingFramedTransactionalGraph  <  G  extends TransactionalGraph >  extends  DelegatingFramedGraph  < G >  implements   WrapperFramedTransactionalGraph  < G >  {   public DelegatingFramedTransactionalGraph  (   final G delegate ,   final FrameFactory builder ,   final TypeResolver defaultResolver )  {  super  ( delegate , builder , defaultResolver ) ; }   public DelegatingFramedTransactionalGraph  (   final G delegate )  {  super  ( delegate ) ; }   public DelegatingFramedTransactionalGraph  (   final G delegate ,   final ReflectionCache reflections )  {  super  ( delegate , reflections ) ; }   public DelegatingFramedTransactionalGraph  (   final G delegate ,   final TypeResolver defaultResolver )  {  super  ( delegate , defaultResolver ) ; }   public DelegatingFramedTransactionalGraph  (   final G delegate ,   final boolean typeResolution ,   final boolean annotationsSupported )  {  super  ( delegate , typeResolution , annotationsSupported ) ; }   public DelegatingFramedTransactionalGraph  (   final G delegate ,   final ReflectionCache reflections ,   final boolean typeResolution ,   final boolean annotationsSupported )  {  super  ( delegate , reflections , typeResolution , annotationsSupported ) ; }   public DelegatingFramedTransactionalGraph  (   final G delegate ,   final  Collection  <  ? extends  Class  <  ? > > types )  {  super  ( delegate , types ) ; }   public DelegatingFramedTransactionalGraph  (   final G delegate ,   final boolean typeResolution ,   final  Collection  <  ? extends  Class  <  ? > > types )  {  super  ( delegate , typeResolution , types ) ; }    @ Override public void stopTransaction  (   final  TransactionalGraph . Conclusion conclusion )  {    (  ( TransactionalGraph )  this . getDelegate  ( ) ) . stopTransaction  ( conclusion ) ; }    @ Override public void commit  ( )  {    (  ( TransactionalGraph )  this . getDelegate  ( ) ) . commit  ( ) ; }    @ Override public void rollback  ( )  {    (  ( TransactionalGraph )  this . getDelegate  ( ) ) . rollback  ( ) ; } }