  package   com . fasterxml . uuid ;   import  java . io .  * ;  import   java . security . NoSuchAlgorithmException ;  import   java . security . MessageDigest ;  import  java . util .  * ;  import     com . fasterxml . uuid . impl . NameBasedGenerator ;  import     com . fasterxml . uuid . impl . RandomBasedGenerator ;  import     com . fasterxml . uuid . impl . TimeBasedEpochGenerator ;  import     com . fasterxml . uuid . impl . TimeBasedReorderedGenerator ;  import     com . fasterxml . uuid . impl . TimeBasedGenerator ;   public class Generators  {   protected static UUIDTimer  _sharedTimer ;   public static RandomBasedGenerator randomBasedGenerator  ( )  {  return  randomBasedGenerator  ( null ) ; }   public static RandomBasedGenerator randomBasedGenerator  (  Random rnd )  {  return  new RandomBasedGenerator  ( rnd ) ; }   public static NameBasedGenerator nameBasedGenerator  ( )  {  return  nameBasedGenerator  ( null ) ; }   public static NameBasedGenerator nameBasedGenerator  (  UUID namespace )  {  return  nameBasedGenerator  ( namespace , null ) ; }   public static NameBasedGenerator nameBasedGenerator  (  UUID namespace ,  MessageDigest digester )  {  UUIDType  type = null ;  if  (  digester == null )  {  try  {   digester =  MessageDigest . getInstance  ( "SHA-1" ) ;   type =  UUIDType . NAME_BASED_SHA1 ; }  catch (   NoSuchAlgorithmException nex )  {  throw  new IllegalArgumentException  (  "Couldn't instantiate SHA-1 MessageDigest instance: " +  nex . toString  ( ) ) ; } }  return  new NameBasedGenerator  ( namespace , digester , type ) ; }   public static TimeBasedEpochGenerator timeBasedEpochGenerator  ( )  {  return  timeBasedEpochGenerator  ( null ) ; }   public static TimeBasedEpochGenerator timeBasedEpochGenerator  (  Random random )  {  return  new TimeBasedEpochGenerator  ( random ) ; }   public static TimeBasedGenerator timeBasedGenerator  ( )  {  return  timeBasedGenerator  ( null ) ; }   public static TimeBasedGenerator timeBasedGenerator  (  EthernetAddress ethernetAddress )  {  return  timeBasedGenerator  ( ethernetAddress ,  ( UUIDTimer ) null ) ; }   public static TimeBasedGenerator timeBasedGenerator  (  EthernetAddress ethernetAddress ,  TimestampSynchronizer sync )  {  UUIDTimer  timer ;  try  {   timer =  new UUIDTimer  (  new Random  (  System . currentTimeMillis  ( ) ) , sync ) ; }  catch (   IOException e )  {  throw  new IllegalArgumentException  (  "Failed to create UUIDTimer with specified synchronizer: " +  e . getMessage  ( ) , e ) ; }  return  timeBasedGenerator  ( ethernetAddress , timer ) ; }   public static TimeBasedGenerator timeBasedGenerator  (  EthernetAddress ethernetAddress ,  UUIDTimer timer )  {  if  (  timer == null )  {   timer =  sharedTimer  ( ) ; }  return  new TimeBasedGenerator  ( ethernetAddress , timer ) ; }   public static TimeBasedReorderedGenerator timeBasedReorderedGenerator  ( )  {  return  timeBasedReorderedGenerator  ( null ) ; }   public static TimeBasedReorderedGenerator timeBasedReorderedGenerator  (  EthernetAddress ethernetAddress )  {  return  timeBasedReorderedGenerator  ( ethernetAddress ,  ( UUIDTimer ) null ) ; }   public static TimeBasedReorderedGenerator timeBasedReorderedGenerator  (  EthernetAddress ethernetAddress ,  UUIDTimer timer )  {  if  (  timer == null )  {   timer =  sharedTimer  ( ) ; }  return  new TimeBasedReorderedGenerator  ( ethernetAddress , timer ) ; }   private static synchronized UUIDTimer sharedTimer  ( )  {  if  (  _sharedTimer == null )  {  try  {   _sharedTimer =  new UUIDTimer  (  new   java . util . Random  (  System . currentTimeMillis  ( ) ) , null ) ; }  catch (   IOException e )  {  throw  new IllegalArgumentException  (  "Failed to create UUIDTimer with specified synchronizer: " +  e . getMessage  ( ) , e ) ; } }  return _sharedTimer ; } }