  package    com . fasterxml . jackson . annotation ;   import   java . lang . annotation .  * ;  import   java . util . Objects ;    @ Target  (  {  ElementType . ANNOTATION_TYPE ,  ElementType . TYPE ,  ElementType . FIELD ,  ElementType . METHOD ,  ElementType . PARAMETER } )  @ Retention  (  RetentionPolicy . RUNTIME )  @ JacksonAnnotation public @interface JsonTypeInfo  {   public enum Id  {  NONE  ( null ) ,  CLASS  ( "@class" ) ,  MINIMAL_CLASS  ( "@c" ) ,  NAME  ( "@type" ) ,  DEDUCTION  ( null ) ,  CUSTOM  ( null )  ;   private final String  _defaultPropertyName ;   private Id  (  String defProp )  {   _defaultPropertyName = defProp ; }   public String getDefaultPropertyName  ( )  {  return _defaultPropertyName ; } }   public enum As  {  PROPERTY ,  WRAPPER_OBJECT ,  WRAPPER_ARRAY ,  EXTERNAL_PROPERTY ,  EXISTING_PROPERTY  ; }   public Id use ( ) ;   public As include ( ) default  As . PROPERTY ;   public String property ( ) default "" ;   public  Class  <  ? > defaultImpl ( ) default  JsonTypeInfo . class ;   public boolean visible ( ) default false ;   public static class Value  implements   JacksonAnnotationValue  < JsonTypeInfo > ,   java . io . Serializable  {   private static final  long  serialVersionUID = 1L ;   protected final static Value  EMPTY =  new Value  (  Id . NONE ,  As . PROPERTY , null , null , false ) ;   protected final Id  _idType ;   protected final As  _inclusionType ;   protected final String  _propertyName ;   protected final  Class  <  ? >  _defaultImpl ;   protected final boolean  _idVisible ;   protected Value  (  Id idType ,  As inclusionType ,  String propertyName ,   Class  <  ? > defaultImpl ,  boolean idVisible )  {   _defaultImpl = defaultImpl ;   _idType = idType ;   _inclusionType = inclusionType ;   _propertyName = propertyName ;   _idVisible = idVisible ; }   public static Value construct  (  Id idType ,  As inclusionType ,  String propertyName ,   Class  <  ? > defaultImpl ,  boolean idVisible )  {  if  (   (  propertyName == null ) ||  propertyName . isEmpty  ( ) )  {  if  (  idType != null )  {   propertyName =  idType . getDefaultPropertyName  ( ) ; } else  {   propertyName = "" ; } }  if  (   (  defaultImpl == null ) ||  defaultImpl . isAnnotation  ( ) )  {   defaultImpl = null ; }  return  new Value  ( idType , inclusionType , propertyName , defaultImpl , idVisible ) ; }   public static Value from  (  JsonTypeInfo src )  {  if  (  src == null )  {  return null ; }  return  construct  (  src . use  ( ) ,  src . include  ( ) ,  src . property  ( ) ,  src . defaultImpl  ( ) ,  src . visible  ( ) ) ; }   public Value withDefaultImpl  (   Class  <  ? > impl )  {  return   (  impl == _defaultImpl ) ? this :  new Value  ( _idType , _inclusionType , _propertyName , impl , _idVisible ) ; }   public Value withIdType  (  Id idType )  {  return   (  idType == _idType ) ? this :  new Value  ( idType , _inclusionType , _propertyName , _defaultImpl , _idVisible ) ; }   public Value withInclusionType  (  As inclusionType )  {  return   (  inclusionType == _inclusionType ) ? this :  new Value  ( _idType , inclusionType , _propertyName , _defaultImpl , _idVisible ) ; }   public Value withPropertyName  (  String propName )  {  return   (  propName == _propertyName ) ? this :  new Value  ( _idType , _inclusionType , propName , _defaultImpl , _idVisible ) ; }   public Value withIdVisible  (  boolean visible )  {  return   (  visible == _idVisible ) ? this :  new Value  ( _idType , _inclusionType , _propertyName , _defaultImpl , visible ) ; }    @ Override public  Class  < JsonTypeInfo > valueFor  ( )  {  return  JsonTypeInfo . class ; }   public  Class  <  ? > getDefaultImpl  ( )  {  return _defaultImpl ; }   public Id getIdType  ( )  {  return _idType ; }   public As getInclusionType  ( )  {  return _inclusionType ; }   public String getPropertyName  ( )  {  return _propertyName ; }   public boolean getIdVisible  ( )  {  return _idVisible ; }   public static boolean isEnabled  (   JsonTypeInfo . Value v )  {  return    (  v != null ) &&  (   v . _idType != null ) &&  (   v . _idType !=  Id . NONE ) ; }    @ Override public String toString  ( )  {  return  String . format  ( "JsonTypeInfo.Value(idType=%s,includeAs=%s,propertyName=%s,defaultImpl=%s,idVisible=%s)" , _idType , _inclusionType , _propertyName ,  (   (  _defaultImpl == null ) ? "NULL" :  _defaultImpl . getName  ( ) ) , _idVisible ) ; }    @ Override public  int hashCode  ( )  {  return   Objects . hash  ( _idType , _inclusionType , _propertyName , _defaultImpl ) +  (  _idVisible ? 11 :  - 17 ) ; }    @ Override public boolean equals  (  Object o )  {  if  (  o == this )  return true ;  if  (  o == null )  return false ;  return   (   o . getClass  ( ) ==  getClass  ( ) ) &&  _equals  ( this ,  ( Value ) o ) ; }   private static boolean _equals  (  Value a ,  Value b )  {  return      (   a . _idType ==  b . _idType ) &&  (   a . _inclusionType ==  b . _inclusionType ) &&  (   a . _defaultImpl ==  b . _defaultImpl ) &&  (   a . _idVisible ==  b . _idVisible ) &&  Objects . equals  (  a . _propertyName ,  b . _propertyName ) ; } }   public OptBoolean requireTypeIdForSubtypes ( ) default  OptBoolean . DEFAULT ; }