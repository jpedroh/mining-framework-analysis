  package     com . fasterxml . jackson . core . json ;   import    com . fasterxml . jackson . core .  * ;   public class JsonWriteContext  extends TokenStreamContext  {   public final static  int  STATUS_OK_AS_IS = 0 ;   public final static  int  STATUS_OK_AFTER_COMMA = 1 ;   public final static  int  STATUS_OK_AFTER_COLON = 2 ;   public final static  int  STATUS_OK_AFTER_SPACE = 3 ;   public final static  int  STATUS_EXPECT_VALUE = 4 ;   public final static  int  STATUS_EXPECT_NAME = 5 ;   protected final JsonWriteContext  _parent ;   protected DupDetector  _dups ;   protected JsonWriteContext  _child ;   protected String  _currentName ;   protected Object  _currentValue ;   protected boolean  _gotName ;   protected JsonWriteContext  (   int type ,  JsonWriteContext parent ,  DupDetector dups )  {  super  ( ) ;   _type = type ;   _parent = parent ;   _dups = dups ;   _index =  - 1 ; }   protected JsonWriteContext  (   int type ,  JsonWriteContext parent ,  DupDetector dups ,  Object currValue )  {  super  ( ) ;   _type = type ;   _parent = parent ;   _dups = dups ;   _index =  - 1 ;   _currentValue = currValue ; }   protected JsonWriteContext reset  (   int type )  {   _type = type ;   _index =  - 1 ;   _currentName = null ;   _gotName = false ;   _currentValue = null ;  if  (  _dups != null )  {   _dups . reset  ( ) ; }  return this ; }   protected JsonWriteContext reset  (   int type ,  Object currValue )  {   _type = type ;   _index =  - 1 ;   _currentName = null ;   _gotName = false ;   _currentValue = currValue ;  if  (  _dups != null )  {   _dups . reset  ( ) ; }  return this ; }   public JsonWriteContext withDupDetector  (  DupDetector dups )  {   _dups = dups ;  return this ; }    @ Override public Object getCurrentValue  ( )  {  return _currentValue ; }    @ Override public void setCurrentValue  (  Object v )  {   _currentValue = v ; }   public static JsonWriteContext createRootContext  (  DupDetector dd )  {  return  new JsonWriteContext  ( TYPE_ROOT , null , dd ) ; }   public JsonWriteContext createChildArrayContext  ( )  {  JsonWriteContext  ctxt = _child ;  if  (  ctxt == null )  {   _child =  ctxt =  new JsonWriteContext  ( TYPE_ARRAY , this ,   (  _dups == null ) ? null :  _dups . child  ( ) ) ;  return ctxt ; }  return  ctxt . reset  ( TYPE_ARRAY ) ; }   public JsonWriteContext createChildArrayContext  (  Object currValue )  {  JsonWriteContext  ctxt = _child ;  if  (  ctxt == null )  {   _child =  ctxt =  new JsonWriteContext  ( TYPE_ARRAY , this ,   (  _dups == null ) ? null :  _dups . child  ( ) , currValue ) ;  return ctxt ; }  return  ctxt . reset  ( TYPE_ARRAY , currValue ) ; }   public JsonWriteContext createChildObjectContext  ( )  {  JsonWriteContext  ctxt = _child ;  if  (  ctxt == null )  {   _child =  ctxt =  new JsonWriteContext  ( TYPE_OBJECT , this ,   (  _dups == null ) ? null :  _dups . child  ( ) ) ;  return ctxt ; }  return  ctxt . reset  ( TYPE_OBJECT ) ; }   public JsonWriteContext createChildObjectContext  (  Object currValue )  {  JsonWriteContext  ctxt = _child ;  if  (  ctxt == null )  {   _child =  ctxt =  new JsonWriteContext  ( TYPE_OBJECT , this ,   (  _dups == null ) ? null :  _dups . child  ( ) , currValue ) ;  return ctxt ; }  return  ctxt . reset  ( TYPE_OBJECT , currValue ) ; }    @ Override public final JsonWriteContext getParent  ( )  {  return _parent ; }    @ Override public final String currentName  ( )  {  return _currentName ; }    @ Override public boolean hasCurrentName  ( )  {  return  _currentName != null ; }   public JsonWriteContext clearAndGetParent  ( )  {   _currentValue = null ;  return _parent ; }   public DupDetector getDupDetector  ( )  {  return _dups ; }   public  int writeFieldName  (  String name )  throws JsonProcessingException  {  if  (   (  _type != TYPE_OBJECT ) || _gotName )  {  return STATUS_EXPECT_VALUE ; }   _gotName = true ;   _currentName = name ;  if  (  _dups != null )  {   _checkDup  ( _dups , name ) ; }  return   (  _index < 0 ) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA ; }   private final void _checkDup  (  DupDetector dd ,  String name )  throws JsonProcessingException  {  if  (  dd . isDup  ( name ) )  {  Object  src =  dd . getSource  ( ) ;  throw  new JsonGenerationException  (   "Duplicate field '" + name + "'" ,  (   (  src instanceof JsonGenerator ) ?  (  ( JsonGenerator ) src ) : null ) ) ; } }   public  int writeValue  ( )  {  if  (  _type == TYPE_OBJECT )  {  if  (  ! _gotName )  {  return STATUS_EXPECT_NAME ; }   _gotName = false ;   ++ _index ;  return STATUS_OK_AFTER_COLON ; }  if  (  _type == TYPE_ARRAY )  {   int  ix = _index ;   ++ _index ;  return   (  ix < 0 ) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA ; }   ++ _index ;  return   (  _index == 0 ) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_SPACE ; } }