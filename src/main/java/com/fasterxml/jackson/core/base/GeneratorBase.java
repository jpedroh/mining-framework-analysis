  package     com . fasterxml . jackson . core . base ;   import    com . fasterxml . jackson . core .  * ;  import      com . fasterxml . jackson . core . json . DupDetector ;  import      com . fasterxml . jackson . core . json . JsonWriteContext ;  import      com . fasterxml . jackson . core . json . PackageVersion ;  import      com . fasterxml . jackson . core . util . DefaultPrettyPrinter ;  import   java . io . IOException ;  import   java . io . InputStream ;  import   java . math . BigDecimal ;   public abstract class GeneratorBase  extends JsonGenerator  {   public final static  int  SURR1_FIRST = 0xD800 ;   public final static  int  SURR1_LAST = 0xDBFF ;   public final static  int  SURR2_FIRST = 0xDC00 ;   public final static  int  SURR2_LAST = 0xDFFF ;   protected final static  int  DERIVED_FEATURES_MASK =    StreamWriteFeature . WRITE_NUMBERS_AS_STRINGS . getMask  ( ) |   StreamWriteFeature . STRICT_DUPLICATE_DETECTION . getMask  ( ) ;   protected final static String  WRITE_BINARY = "write a binary value" ;   protected final static String  WRITE_BOOLEAN = "write a boolean value" ;   protected final static String  WRITE_NULL = "write a null" ;   protected final static String  WRITE_NUMBER = "write a number" ;   protected final static String  WRITE_RAW = "write a raw (unencoded) value" ;   protected final static String  WRITE_STRING = "write a string" ;   protected final static  int  MAX_BIG_DECIMAL_SCALE = 9999 ;   protected final ObjectWriteContext  _objectWriteContext ;   protected  int  _streamWriteFeatures ;   protected boolean  _cfgNumbersAsStrings ;   protected JsonWriteContext  _outputContext ;   protected boolean  _closed ;   protected GeneratorBase  (  ObjectWriteContext writeCtxt ,   int features )  {  super  ( ) ;   _objectWriteContext = writeCtxt ;   _streamWriteFeatures = features ;  DupDetector  dups =    StreamWriteFeature . STRICT_DUPLICATE_DETECTION . enabledIn  ( features ) ?  DupDetector . rootDetector  ( this ) : null ;   _outputContext =  JsonWriteContext . createRootContext  ( dups ) ;   _cfgNumbersAsStrings =   StreamWriteFeature . WRITE_NUMBERS_AS_STRINGS . enabledIn  ( features ) ; }   protected GeneratorBase  (  ObjectWriteContext writeCtxt ,   int features ,  JsonWriteContext ctxt )  {  super  ( ) ;   _objectWriteContext = writeCtxt ;   _streamWriteFeatures = features ;   _outputContext = ctxt ;   _cfgNumbersAsStrings =   StreamWriteFeature . WRITE_NUMBERS_AS_STRINGS . enabledIn  ( features ) ; }    @ Override public Version version  ( )  {  return  PackageVersion . VERSION ; }    @ Override public Object getCurrentValue  ( )  {  return  _outputContext . getCurrentValue  ( ) ; }    @ Override public void setCurrentValue  (  Object v )  { 
<<<<<<<
  _outputContext . setCurrentValue  ( v ) ;
=======
 if  (  _writeContext != null )  {   _writeContext . setCurrentValue  ( v ) ; }
>>>>>>>
 }    @ Override public final boolean isEnabled  (  StreamWriteFeature f )  {  return   (  _streamWriteFeatures &  f . getMask  ( ) ) != 0 ; }    @ Override public  int streamWriteFeatures  ( )  {  return _streamWriteFeatures ; }    @ Override public  int formatWriteFeatures  ( )  {  return 0 ; }    @ Override public JsonGenerator enable  (  StreamWriteFeature f )  {   final  int  mask =  f . getMask  ( ) ;   _streamWriteFeatures |= mask ;  if  (   (  mask & DERIVED_FEATURES_MASK ) != 0 )  {  if  (  f ==  StreamWriteFeature . WRITE_NUMBERS_AS_STRINGS )  {   _cfgNumbersAsStrings = true ; } else  if  (  f ==  StreamWriteFeature . STRICT_DUPLICATE_DETECTION )  {  if  (   _outputContext . getDupDetector  ( ) == null )  {   _outputContext =  _outputContext . withDupDetector  (  DupDetector . rootDetector  ( this ) ) ; } } }  return this ; }    @ Override public JsonGenerator disable  (  StreamWriteFeature f )  {   final  int  mask =  f . getMask  ( ) ;   _streamWriteFeatures &=  ~ mask ;  if  (   (  mask & DERIVED_FEATURES_MASK ) != 0 )  {  if  (  f ==  StreamWriteFeature . WRITE_NUMBERS_AS_STRINGS )  {   _cfgNumbersAsStrings = false ; } else  if  (  f ==  StreamWriteFeature . STRICT_DUPLICATE_DETECTION )  {   _outputContext =  _outputContext . withDupDetector  ( null ) ; } }  return this ; }    @ Override public TokenStreamContext getOutputContext  ( )  {  return _outputContext ; }    @ Override public ObjectWriteContext getObjectWriteContext  ( )  {  return _objectWriteContext ; }    @ Override public void writeStartArray  (  Object forValue ,   int size )  throws IOException  {   writeStartArray  ( size ) ;  if  (   (  _outputContext != null ) &&  (  forValue != null ) )  {   _outputContext . setCurrentValue  ( forValue ) ; } }    @ Override public void writeStartObject  (  Object forValue )  throws IOException  {   writeStartObject  ( ) ;  if  (   (  _outputContext != null ) &&  (  forValue != null ) )  {   _outputContext . setCurrentValue  ( forValue ) ; } }    @ Override public void writeFieldName  (  SerializableString name )  throws IOException  {   writeFieldName  (  name . getValue  ( ) ) ; }    @ Override public void writeString  (  SerializableString text )  throws IOException  {   writeString  (  text . getValue  ( ) ) ; }    @ Override public void writeRawValue  (  String text )  throws IOException  {   _verifyValueWrite  ( "write raw value" ) ;   writeRaw  ( text ) ; }    @ Override public void writeRawValue  (  String text ,   int offset ,   int len )  throws IOException  {   _verifyValueWrite  ( "write raw value" ) ;   writeRaw  ( text , offset , len ) ; }    @ Override public void writeRawValue  (    char  [ ] text ,   int offset ,   int len )  throws IOException  {   _verifyValueWrite  ( "write raw value" ) ;   writeRaw  ( text , offset , len ) ; }    @ Override public void writeRawValue  (  SerializableString text )  throws IOException  {   _verifyValueWrite  ( "write raw value" ) ;   writeRaw  ( text ) ; }    @ Override public  int writeBinary  (  Base64Variant b64variant ,  InputStream data ,   int dataLength )  throws IOException  {   _reportUnsupportedOperation  ( ) ;  return 0 ; }    @ Override public void writeObject  (  Object value )  throws IOException  {  if  (  value == null )  {   writeNull  ( ) ; } else  {   _objectWriteContext . writeValue  ( this , value ) ; } }    @ Override public void writeTree  (  TreeNode rootNode )  throws IOException  {  if  (  rootNode == null )  {   writeNull  ( ) ; } else  {   _objectWriteContext . writeTree  ( this , rootNode ) ; } }    @ Override public abstract void flush  ( )  throws IOException ;    @ Override public void close  ( )  throws IOException  {   _closed = true ; }    @ Override public boolean isClosed  ( )  {  return _closed ; }   protected abstract void _releaseBuffers  ( ) ;   protected abstract void _verifyValueWrite  (  String typeMsg )  throws IOException ;   protected PrettyPrinter _constructDefaultPrettyPrinter  ( )  {  return  new DefaultPrettyPrinter  ( ) ; }   protected String _asString  (  BigDecimal value )  throws IOException  {  if  (   StreamWriteFeature . WRITE_BIGDECIMAL_AS_PLAIN . enabledIn  ( _streamWriteFeatures ) )  {   int  scale =  value . scale  ( ) ;  if  (   (  scale <  - MAX_BIG_DECIMAL_SCALE ) ||  (  scale > MAX_BIG_DECIMAL_SCALE ) )  {   _reportError  (  String . format  ( "Attempt to write plain `java.math.BigDecimal` (see JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN) with illegal scale (%d): needs to be between [-%d, %d]" , scale , MAX_BIG_DECIMAL_SCALE , MAX_BIG_DECIMAL_SCALE ) ) ; }  return  value . toPlainString  ( ) ; }  return  value . toString  ( ) ; }   protected final  int _decodeSurrogate  (   int surr1 ,   int surr2 )  throws IOException  {  if  (   surr2 < SURR2_FIRST ||  surr2 > SURR2_LAST )  {  String  msg =    "Incomplete surrogate pair: first char 0x" +  Integer . toHexString  ( surr1 ) + ", second 0x" +  Integer . toHexString  ( surr2 ) ;   _reportError  ( msg ) ; }   int  c =   0x10000 +  (   (  surr1 - SURR1_FIRST ) << 10 ) +  (  surr2 - SURR2_FIRST ) ;  return c ; } }