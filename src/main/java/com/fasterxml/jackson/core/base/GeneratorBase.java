  package     com . fasterxml . jackson . core . base ;   import  java . io .  * ;  import    com . fasterxml . jackson . core .  * ;  import      com . fasterxml . jackson . core . json . DupDetector ;  import      com . fasterxml . jackson . core . json . JsonWriteContext ;  import      com . fasterxml . jackson . core . json . PackageVersion ;  import      com . fasterxml . jackson . core . util . DefaultPrettyPrinter ;   public abstract class GeneratorBase  extends JsonGenerator  {   public final static  int  SURR1_FIRST = 0xD800 ;   public final static  int  SURR1_LAST = 0xDBFF ;   public final static  int  SURR2_FIRST = 0xDC00 ;   public final static  int  SURR2_LAST = 0xDFFF ;   protected final static  int  DERIVED_FEATURES_MASK =     Feature . WRITE_NUMBERS_AS_STRINGS . getMask  ( ) |   Feature . ESCAPE_NON_ASCII . getMask  ( ) |   Feature . STRICT_DUPLICATE_DETECTION . getMask  ( ) ;   protected final static String  WRITE_BINARY = "write a binary value" ;   protected final static String  WRITE_BOOLEAN = "write a boolean value" ;   protected final static String  WRITE_NULL = "write a null" ;   protected final static String  WRITE_NUMBER = "write a number" ;   protected final static String  WRITE_RAW = "write a raw (unencoded) value" ;   protected final static String  WRITE_STRING = "write a string" ;   protected ObjectCodec  _objectCodec ;   protected  int  _features ;   protected boolean  _cfgNumbersAsStrings ;   protected JsonWriteContext  _writeContext ;   protected boolean  _closed ;   protected GeneratorBase  (   int features ,  ObjectCodec codec )  {  super  ( ) ;   _features = features ;   _objectCodec = codec ;  DupDetector  dups =    Feature . STRICT_DUPLICATE_DETECTION . enabledIn  ( features ) ?  DupDetector . rootDetector  ( this ) : null ;   _writeContext =  JsonWriteContext . createRootContext  ( dups ) ;   _cfgNumbersAsStrings =   Feature . WRITE_NUMBERS_AS_STRINGS . enabledIn  ( features ) ; }   protected GeneratorBase  (   int features ,  ObjectCodec codec ,  JsonWriteContext ctxt )  {  super  ( ) ;   _features = features ;   _objectCodec = codec ;   _writeContext = ctxt ;   _cfgNumbersAsStrings =   Feature . WRITE_NUMBERS_AS_STRINGS . enabledIn  ( features ) ; }    @ Override public Version version  ( )  {  return  PackageVersion . VERSION ; }    @ Override public Object getCurrentValue  ( )  {  return  _writeContext . getCurrentValue  ( ) ; }    @ Override public void setCurrentValue  (  Object v )  {   _writeContext . setCurrentValue  ( v ) ; }    @ Override public final boolean isEnabled  (  Feature f )  {  return   (  _features &  f . getMask  ( ) ) != 0 ; }    @ Override public  int getFeatureMask  ( )  {  return _features ; }    @ Override public JsonGenerator enable  (  Feature f )  {   final  int  mask =  f . getMask  ( ) ;   _features |= mask ;  if  (   (  mask & DERIVED_FEATURES_MASK ) != 0 )  {  if  (  f ==  Feature . WRITE_NUMBERS_AS_STRINGS )  {   _cfgNumbersAsStrings = true ; } else  if  (  f ==  Feature . ESCAPE_NON_ASCII )  {   setHighestNonEscapedChar  ( 127 ) ; } else  if  (  f ==  Feature . STRICT_DUPLICATE_DETECTION )  {  if  (   _writeContext . getDupDetector  ( ) == null )  {   _writeContext =  _writeContext . withDupDetector  (  DupDetector . rootDetector  ( this ) ) ; } } }  return this ; }    @ Override public JsonGenerator disable  (  Feature f )  {   final  int  mask =  f . getMask  ( ) ;   _features &=  ~ mask ;  if  (   (  mask & DERIVED_FEATURES_MASK ) != 0 )  {  if  (  f ==  Feature . WRITE_NUMBERS_AS_STRINGS )  {   _cfgNumbersAsStrings = false ; } else  if  (  f ==  Feature . ESCAPE_NON_ASCII )  {   setHighestNonEscapedChar  ( 0 ) ; } else  if  (  f ==  Feature . STRICT_DUPLICATE_DETECTION )  {   _writeContext =  _writeContext . withDupDetector  ( null ) ; } }  return this ; }    @ Override  @ Deprecated public JsonGenerator setFeatureMask  (   int newMask )  {   int  changed =  newMask ^ _features ;   _features = newMask ;  if  (  changed != 0 )  {   _checkStdFeatureChanges  ( newMask , changed ) ; }  return this ; }    @ Override public JsonGenerator overrideStdFeatures  (   int values ,   int mask )  {   int  oldState = _features ;   int  newState =   (  oldState &  ~ mask ) |  (  values & mask ) ;   int  changed =  oldState ^ newState ;  if  (  changed != 0 )  {   _features = newState ;   _checkStdFeatureChanges  ( newState , changed ) ; }  return this ; }   protected void _checkStdFeatureChanges  (   int newFeatureFlags ,   int changedFeatures )  {  if  (   (  changedFeatures & DERIVED_FEATURES_MASK ) == 0 )  {  return ; }   _cfgNumbersAsStrings =   Feature . WRITE_NUMBERS_AS_STRINGS . enabledIn  ( newFeatureFlags ) ;  if  (   Feature . ESCAPE_NON_ASCII . enabledIn  ( changedFeatures ) )  {  if  (   Feature . ESCAPE_NON_ASCII . enabledIn  ( newFeatureFlags ) )  {   setHighestNonEscapedChar  ( 127 ) ; } else  {   setHighestNonEscapedChar  ( 0 ) ; } }  if  (   Feature . STRICT_DUPLICATE_DETECTION . enabledIn  ( changedFeatures ) )  {  if  (   Feature . STRICT_DUPLICATE_DETECTION . enabledIn  ( newFeatureFlags ) )  {  if  (   _writeContext . getDupDetector  ( ) == null )  {   _writeContext =  _writeContext . withDupDetector  (  DupDetector . rootDetector  ( this ) ) ; } } else  {   _writeContext =  _writeContext . withDupDetector  ( null ) ; } } }    @ Override public JsonGenerator useDefaultPrettyPrinter  ( )  {  if  (   getPrettyPrinter  ( ) != null )  {  return this ; }  return  setPrettyPrinter  (  _constructDefaultPrettyPrinter  ( ) ) ; }    @ Override public JsonGenerator setCodec  (  ObjectCodec oc )  {   _objectCodec = oc ;  return this ; }    @ Override public ObjectCodec getCodec  ( )  {  return _objectCodec ; }    @ Override public JsonStreamContext getOutputContext  ( )  {  return _writeContext ; }    @ Override public void writeStartObject  (  Object forValue )  throws IOException  {   writeStartObject  ( ) ;  if  (   (  _writeContext != null ) &&  (  forValue != null ) )  {   _writeContext . setCurrentValue  ( forValue ) ; }   setCurrentValue  ( forValue ) ; }    @ Override public void writeFieldName  (  SerializableString name )  throws IOException  {   writeFieldName  (  name . getValue  ( ) ) ; }    @ Override public void writeString  (  SerializableString text )  throws IOException  {   writeString  (  text . getValue  ( ) ) ; }    @ Override public void writeRawValue  (  String text )  throws IOException  {   _verifyValueWrite  ( "write raw value" ) ;   writeRaw  ( text ) ; }    @ Override public void writeRawValue  (  String text ,   int offset ,   int len )  throws IOException  {   _verifyValueWrite  ( "write raw value" ) ;   writeRaw  ( text , offset , len ) ; }    @ Override public void writeRawValue  (    char  [ ] text ,   int offset ,   int len )  throws IOException  {   _verifyValueWrite  ( "write raw value" ) ;   writeRaw  ( text , offset , len ) ; }    @ Override public void writeRawValue  (  SerializableString text )  throws IOException  {   _verifyValueWrite  ( "write raw value" ) ;   writeRaw  ( text ) ; }    @ Override public  int writeBinary  (  Base64Variant b64variant ,  InputStream data ,   int dataLength )  throws IOException  {   _reportUnsupportedOperation  ( ) ;  return 0 ; }    @ Override public void writeObject  (  Object value )  throws IOException  {  if  (  value == null )  {   writeNull  ( ) ; } else  {  if  (  _objectCodec != null )  {   _objectCodec . writeValue  ( this , value ) ;  return ; }   _writeSimpleObject  ( value ) ; } }    @ Override public void writeTree  (  TreeNode rootNode )  throws IOException  {  if  (  rootNode == null )  {   writeNull  ( ) ; } else  {  if  (  _objectCodec == null )  {  throw  new IllegalStateException  ( "No ObjectCodec defined" ) ; }   _objectCodec . writeValue  ( this , rootNode ) ; } }    @ Override public abstract void flush  ( )  throws IOException ;    @ Override public void close  ( )  throws IOException  {   _closed = true ; }    @ Override public boolean isClosed  ( )  {  return _closed ; }   protected abstract void _releaseBuffers  ( ) ;   protected abstract void _verifyValueWrite  (  String typeMsg )  throws IOException ;   protected PrettyPrinter _constructDefaultPrettyPrinter  ( )  {  return  new DefaultPrettyPrinter  ( ) ; }   protected final  int _decodeSurrogate  (   int surr1 ,   int surr2 )  throws IOException  {  if  (   surr2 < SURR2_FIRST ||  surr2 > SURR2_LAST )  {  String  msg =    "Incomplete surrogate pair: first char 0x" +  Integer . toHexString  ( surr1 ) + ", second 0x" +  Integer . toHexString  ( surr2 ) ;   _reportError  ( msg ) ; }   int  c =   0x10000 +  (   (  surr1 - SURR1_FIRST ) << 10 ) +  (  surr2 - SURR2_FIRST ) ;  return c ; } }