  package    com . mitchellbosecke . pebble . tokenParser ;   import     com . mitchellbosecke . pebble . lexer . Token ;  import     com . mitchellbosecke . pebble . lexer . TokenStream ;  import     com . mitchellbosecke . pebble . node . ImportNode ;  import     com . mitchellbosecke . pebble . node . RenderableNode ;  import      com . mitchellbosecke . pebble . node . expression . Expression ;  import     com . mitchellbosecke . pebble . parser . Parser ;   public class ImportTokenParser  extends AbstractTokenParser  {    @ Override public RenderableNode parse  (  Token token ,  Parser parser )  {  TokenStream  stream =  parser . getStream  ( ) ;   int  lineNumber =  token . getLineNumber  ( ) ;   stream . next  ( ) ;   Expression  <  ? >  importExpression =   parser . getExpressionParser  ( ) . parseExpression  ( ) ;  Token  current =  stream . current  ( ) ;  String  alias = null ;  if  (    current . getType  ( ) . equals  (   Token . Type . NAME ) &&   current . getValue  ( ) . equals  ( "as" ) )  {   stream . next  ( ) ;   current =  stream . expect  (   Token . Type . NAME ) ;   alias =  current . getValue  ( ) ; }   stream . expect  (   Token . Type . EXECUTE_END ) ;  return  new ImportNode  ( lineNumber , importExpression , alias ) ; }    @ Override public String getTag  ( )  {  return "import" ; } }