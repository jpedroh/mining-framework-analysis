  package    com . mitchellbosecke . pebble . lexer ;   import   java . util . ArrayList ;  import   java . util . Collection ;  import     com . mitchellbosecke . pebble . error . ParserException ;  import      com . mitchellbosecke . pebble . lexer . Token . Type ;   public class TokenStream  {   private  ArrayList  < Token >  tokens =  new  ArrayList  < >  ( ) ;   private  int  current ;   private String  filename ;   public TokenStream  (   Collection  < Token > tokens ,  String name )  {    this . tokens . addAll  ( tokens ) ;    this . current = 0 ;    this . filename = name ; }   public Token next  ( )  {  return  tokens . get  (  ++ current ) ; }   public Token expect  (   Token . Type type )  {  return  expect  ( type , null ) ; }   public Token expect  (   Token . Type type ,  String value )  {  Token  token =  tokens . get  ( current ) ;  boolean  success = true ;  String  message = null ;  if  (  value == null )  {   success =  token . test  ( type ) ; } else  {   success =  token . test  ( type , value ) ; }  if  (  ! success )  {  if  (  message == null )  {   message =  String . format  ( "Unexpected token of value \"%s\" and type %s, expected token of type %s" ,  token . getValue  ( ) ,   token . getType  ( ) . toString  ( ) , type ) ; }  throw  new ParserException  ( null , message ,  token . getLineNumber  ( ) , filename ) ; }   this . next  ( ) ;  return token ; }   public Token peek  ( )  {  return  peek  ( 1 ) ; }   public Token peek  (   int number )  {  return   this . tokens . get  (   this . current + number ) ; }   public boolean isEOF  ( )  {  return     this . tokens . get  ( current ) . getType  ( ) . equals  (  Type . EOF ) ; }    @ Override public String toString  ( )  {  return  String . format  ( "Current: %s. All: %s" ,  current  ( ) , tokens ) ; }   public Token current  ( )  {  return   this . tokens . get  ( current ) ; }   public String getFilename  ( )  {  return filename ; }   public  ArrayList  < Token > getTokens  ( )  {  return tokens ; } }