  package    com . mitchellbosecke . pebble . loader ;   import   java . io . Reader ;  import   java . util . ArrayList ;  import   java . util . Collections ;  import   java . util . List ;  import     com . mitchellbosecke . pebble . error . LoaderException ;   public class DelegatingLoader  implements   Loader  < DelegatingLoaderCacheKey >  {   private String  prefix ;   private String  suffix ;   private String  charset = "UTF-8" ;   private final  List  <  Loader  <  ? > >  loaders ;   public DelegatingLoader  (   List  <  Loader  <  ? > > loaders )  {    this . loaders =  Collections . unmodifiableList  (  new  ArrayList  <  Loader  <  ? > >  ( loaders ) ) ; }    @ Override public Reader getReader  (  String templateName )  throws LoaderException  {  Reader  reader = null ;   final  int  size =   this . loaders . size  ( ) ;  for (   int  i = 0 ;  i < size ;  i ++ )  {   Loader  <  ? >  loader =   this . loaders . get  ( i ) ;  try  {   reader =  this . getReaderInner  ( loader , templateName ) ;  if  (  reader != null )  {  break ; } }  catch (   LoaderException e )  { } }  if  (  reader == null )  {  throw  new LoaderException  ( null ,   "Could not find template \"" + templateName + "\"" ) ; }  return reader ; }   private  <  T > Reader getReaderInner  (   Loader  < T > delegatingLoader ,  String templateName )  throws LoaderException  {  return  delegatingLoader . getReader  ( templateName ) ; }   public String getSuffix  ( )  {  return suffix ; }    @ Override public void setSuffix  (  String suffix )  {    this . suffix = suffix ;  for (  Loader  <  ? > loader : loaders )  {   loader . setSuffix  ( suffix ) ; } }   public String getPrefix  ( )  {  return prefix ; }    @ Override public void setPrefix  (  String prefix )  {    this . prefix = prefix ;  for (  Loader  <  ? > loader : loaders )  {   loader . setPrefix  ( prefix ) ; } }   public String getCharset  ( )  {  return charset ; }    @ Override public void setCharset  (  String charset )  {    this . charset = charset ;  for (  Loader  <  ? > loader : loaders )  {   loader . setCharset  ( charset ) ; } }    @ Override public String resolveRelativePath  (  String relativePath ,  String anchorPath )  {  if  (  relativePath == null )  {  return relativePath ; }  for (  Loader  <  ? > loader :  this . loaders )  {  String  path =  loader . resolveRelativePath  ( relativePath , anchorPath ) ;  if  (  path != null )  {  return path ; } }  return null ; }    @ Override public DelegatingLoaderCacheKey createCacheKey  (  String templateName )  {   List  < Object >  keys =  new  ArrayList  < >  ( ) ;  for (  Loader  <  ? > loader :  this . loaders )  {   keys . add  (  loader . createCacheKey  ( templateName ) ) ; }  return  new DelegatingLoaderCacheKey  ( keys , templateName ) ; } 
<<<<<<<
=======
   @ Override public Reader getReader  (  DelegatingLoaderCacheKey cacheKey )  {  Reader  reader = null ;   final  int  size =   this . loaders . size  ( ) ;  for (   int  i = 0 ;  i < size ;  i ++ )  {   Loader  <  ? >  loader =   this . loaders . get  ( i ) ;  Object  delegatingKey =   cacheKey . getDelegatingCacheKeys  ( ) . get  ( i ) ;  try  {   reader =  this . getReaderInner  ( loader , delegatingKey ) ;  if  (  reader != null )  {  break ; } }  catch (   LoaderException e )  { } }  if  (  reader == null )  {  throw  new LoaderException  ( null ,   "Could not find template \"" +  cacheKey . getTemplateName  ( ) + "\"" ) ; }  return reader ; }
>>>>>>>
 
<<<<<<<
=======
  private  <  T > Reader getReaderInner  (   Loader  < T > delegatingLoader ,  Object cacheKey )  {    @ SuppressWarnings  ( "unchecked" ) T  castedKey =  ( T ) cacheKey ;  return  delegatingLoader . getReader  ( castedKey ) ; }
>>>>>>>
 }