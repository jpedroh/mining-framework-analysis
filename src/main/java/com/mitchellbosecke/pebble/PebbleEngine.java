  package   com . mitchellbosecke . pebble ;   import     com . google . common . cache . Cache ;  import     com . google . common . cache . CacheBuilder ;  import     com . mitchellbosecke . pebble . error . LoaderException ;  import     com . mitchellbosecke . pebble . error . PebbleException ;  import     com . mitchellbosecke . pebble . extension . Extension ;  import     com . mitchellbosecke . pebble . extension . ExtensionRegistry ;  import     com . mitchellbosecke . pebble . extension . NodeVisitorFactory ;  import      com . mitchellbosecke . pebble . extension . core . CoreExtension ;  import      com . mitchellbosecke . pebble . extension . escaper . EscaperExtension ;  import      com . mitchellbosecke . pebble . extension . escaper . EscapingStrategy ;  import      com . mitchellbosecke . pebble . extension . i18n . I18nExtension ;  import     com . mitchellbosecke . pebble . lexer . LexerImpl ;  import     com . mitchellbosecke . pebble . lexer . Syntax ;  import     com . mitchellbosecke . pebble . lexer . TokenStream ;  import     com . mitchellbosecke . pebble . loader . ClasspathLoader ;  import     com . mitchellbosecke . pebble . loader . DelegatingLoader ;  import     com . mitchellbosecke . pebble . loader . FileLoader ;  import     com . mitchellbosecke . pebble . loader . Loader ;  import     com . mitchellbosecke . pebble . node . RootNode ;  import     com . mitchellbosecke . pebble . parser . Parser ;  import     com . mitchellbosecke . pebble . parser . ParserImpl ;  import     com . mitchellbosecke . pebble . template . PebbleTemplate ;  import     com . mitchellbosecke . pebble . template . PebbleTemplateImpl ;  import   java . io . Reader ;  import   java . util . ArrayList ;  import   java . util . Collection ;  import   java . util . List ;  import   java . util . Locale ;  import    java . util . concurrent . Callable ;  import    java . util . concurrent . ExecutorService ;  import     com . mitchellbosecke . pebble . cache . CacheKey ;   public class PebbleEngine  {   private final  Loader  <  ? >  loader ;   private final Syntax  syntax ;   private final boolean  strictVariables ;   private final Locale  defaultLocale ;   private final  Cache  < CacheKey , Object >  tagCache ;   private final ExecutorService  executorService ;   private final  Cache  < Object , PebbleTemplate >  templateCache ;   private final ExtensionRegistry  extensionRegistry ;   public PebbleTemplate getTemplate  (   final String templateName )  {  if  (  templateName == null )  {  return null ; }  if  (   this . loader == null )  {  throw  new LoaderException  ( null , "Loader has not yet been specified." ) ; }   final PebbleEngine  self = this ;  PebbleTemplate  result ;  try  {   final Object  cacheKey =   this . loader . createCacheKey  ( templateName ) ;   result =  templateCache . get  ( cacheKey ,  new  Callable  < PebbleTemplate >  ( )  {   public PebbleTemplateImpl call  ( )  {  LexerImpl  lexer =  new LexerImpl  ( syntax ,   extensionRegistry . getUnaryOperators  ( ) . values  ( ) ,   extensionRegistry . getBinaryOperators  ( ) . values  ( ) ) ;  Reader  templateReader =  self . retrieveReaderFromLoader  (  self . loader , templateName ) ;  TokenStream  tokenStream =  lexer . tokenize  ( templateReader , templateName ) ;  Parser  parser =  new ParserImpl  (  extensionRegistry . getUnaryOperators  ( ) ,  extensionRegistry . getBinaryOperators  ( ) ,  extensionRegistry . getTokenParsers  ( ) ) ;  RootNode  root =  parser . parse  ( tokenStream ) ;  PebbleTemplateImpl  instance =  new PebbleTemplateImpl  ( self , root , templateName ) ;  for ( NodeVisitorFactory visitorFactory :  extensionRegistry . getNodeVisitors  ( ) )  {    visitorFactory . createVisitor  ( instance ) . visit  ( root ) ; }  return instance ; } } ) ; }  catch (   Exception e )  {  if  (    e . getCause  ( ) != null &&   e . getCause  ( ) instanceof PebbleException )  {  throw  ( PebbleException )  e . getCause  ( ) ; } else  {  throw  new PebbleException  ( e ,  String . format  ( "An error occurred while compiling %s" , templateName ) ) ; } }  return result ; }   private  <  T > Reader retrieveReaderFromLoader  (   Loader  < T > loader ,  String templateName )  throws LoaderException  {  return  loader . getReader  ( templateName ) ; }   public  Loader  <  ? > getLoader  ( )  {  return loader ; }   public  Cache  < Object , PebbleTemplate > getTemplateCache  ( )  {  return templateCache ; }   public boolean isStrictVariables  ( )  {  return strictVariables ; }   public Locale getDefaultLocale  ( )  {  return defaultLocale ; }   public ExecutorService getExecutorService  ( )  {  return executorService ; }   public Syntax getSyntax  ( )  {  return  this . syntax ; }   public ExtensionRegistry getExtensionRegistry  ( )  {  return extensionRegistry ; }   public  Cache  < CacheKey , Object > getTagCache  ( )  {  return  this . tagCache ; }   public static class Builder  {   private  Loader  <  ? >  loader ;   private  List  < Extension >  userProvidedExtensions =  new  ArrayList  < >  ( ) ;   private Syntax  syntax ;   private boolean  strictVariables = false ;   private boolean  enableNewLineTrimming = true ;   private Locale  defaultLocale ;   private ExecutorService  executorService ;   private  Cache  < Object , PebbleTemplate >  templateCache ;   private boolean  cacheActive = true ;   private  Cache  < CacheKey , Object >  tagCache ;   private EscaperExtension  escaperExtension =  new EscaperExtension  ( ) ;   public Builder  ( )  { }   public Builder loader  (   Loader  <  ? > loader )  {    this . loader = loader ;  return this ; }   public Builder extension  (  Extension ...  extensions )  {  for ( Extension extension : extensions )  {    this . userProvidedExtensions . add  ( extension ) ; }  return this ; }   public Builder syntax  (  Syntax syntax )  {    this . syntax = syntax ;  return this ; }   public Builder strictVariables  (  boolean strictVariables )  {    this . strictVariables = strictVariables ;  return this ; }   public Builder newLineTrimming  (  boolean enableNewLineTrimming )  {    this . enableNewLineTrimming = enableNewLineTrimming ;  return this ; }   public Builder defaultLocale  (  Locale defaultLocale )  {    this . defaultLocale = defaultLocale ;  return this ; }   public Builder executorService  (  ExecutorService executorService )  {    this . executorService = executorService ;  return this ; }   public Builder templateCache  (   Cache  < Object , PebbleTemplate > templateCache )  {    this . templateCache = templateCache ;  return this ; }   public Builder autoEscaping  (  boolean autoEscaping )  {   escaperExtension . setAutoEscaping  ( autoEscaping ) ;  return this ; }   public Builder defaultEscapingStrategy  (  String strategy )  {   escaperExtension . setDefaultStrategy  ( strategy ) ;  return this ; }   public Builder addEscapingStrategy  (  String name ,  EscapingStrategy strategy )  {   escaperExtension . addEscapingStrategy  ( name , strategy ) ;  return this ; }   public Builder cacheActive  (  boolean cacheActive )  {    this . cacheActive = cacheActive ;  return this ; }   public PebbleEngine build  ( )  {   List  < Extension >  extensions =  new  ArrayList  < >  ( ) ;   extensions . add  (  new CoreExtension  ( ) ) ;   extensions . add  ( escaperExtension ) ;   extensions . add  (  new I18nExtension  ( ) ) ;   extensions . addAll  (  this . userProvidedExtensions ) ;  if  (  loader == null )  {   List  <  Loader  <  ? > >  defaultLoadingStrategies =  new  ArrayList  < >  ( ) ;   defaultLoadingStrategies . add  (  new ClasspathLoader  ( ) ) ;   defaultLoadingStrategies . add  (  new FileLoader  ( ) ) ;   loader =  new DelegatingLoader  ( defaultLoadingStrategies ) ; }  if  (  defaultLocale == null )  {   defaultLocale =  Locale . getDefault  ( ) ; }  if  ( cacheActive )  {  if  (  templateCache == null )  {   templateCache =    CacheBuilder . newBuilder  ( ) . maximumSize  ( 200 ) . build  ( ) ; }  if  (  tagCache == null )  {   tagCache =    CacheBuilder . newBuilder  ( ) . maximumSize  ( 200 ) . build  ( ) ; } } else  {   templateCache =    CacheBuilder . newBuilder  ( ) . maximumSize  ( 0 ) . build  ( ) ;   tagCache =    CacheBuilder . newBuilder  ( ) . maximumSize  ( 0 ) . build  ( ) ; }  if  (  syntax == null )  {   syntax =    new  Syntax . Builder  ( ) . setEnableNewLineTrimming  ( enableNewLineTrimming ) . build  ( ) ; }  return  new PebbleEngine  ( loader , syntax , strictVariables , defaultLocale , tagCache , templateCache , executorService , extensions , allowGetClass ) ; }   private boolean  allowGetClass = true ;   public Builder tagCache  (   Cache  < CacheKey , Object > tagCache )  {    this . tagCache = tagCache ;  return this ; }   public Builder allowGetClass  (  boolean allowGetClass )  {    this . allowGetClass = allowGetClass ;  return this ; } }   private final boolean  allowGetClass ;   private PebbleEngine  (   Loader  <  ? > loader ,  Syntax syntax ,  boolean strictVariables ,  Locale defaultLocale ,   Cache  < CacheKey , Object > tagCache ,   Cache  < Object , PebbleTemplate > templateCache ,  ExecutorService executorService ,   Collection  <  ? extends Extension > extensions ,  boolean allowGetClass )  {    this . loader = loader ;    this . syntax = syntax ;    this . strictVariables = strictVariables ;    this . defaultLocale = defaultLocale ;    this . tagCache = tagCache ;    this . executorService = executorService ;    this . templateCache = templateCache ;    this . extensionRegistry =  new ExtensionRegistry  ( extensions ) ;    this . allowGetClass = allowGetClass ; } 
<<<<<<<
=======
  private  <  T > Reader retrieveReaderFromLoader  (   Loader  < T > loader ,  Object cacheKey )  {    @ SuppressWarnings  ( "unchecked" ) T  casted =  ( T ) cacheKey ;  return  loader . getReader  ( casted ) ; }
>>>>>>>
   public boolean isAllowGetClass  ( )  {  return  this . allowGetClass ; } }