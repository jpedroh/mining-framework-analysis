  package     com . smartsheet . api . internal . http ;   import     com . fasterxml . jackson . databind . ObjectMapper ;  import    com . smartsheet . api . Trace ;  import      com . smartsheet . api . internal . util . Util ;  import       com . smartsheet . api . internal . util . logging . LoggerLevel ;  import       com . smartsheet . api . internal . util . logging . LoggerWriter ;  import    org . apache . http . HttpHeaders ;  import     org . apache . http . client . ClientProtocolException ;  import      org . apache . http . client . config . RequestConfig ;  import      org . apache . http . client . methods . CloseableHttpResponse ;  import      org . apache . http . client . methods . HttpDelete ;  import      org . apache . http . client . methods . HttpEntityEnclosingRequestBase ;  import      org . apache . http . client . methods . HttpGet ;  import      org . apache . http . client . methods . HttpPost ;  import      org . apache . http . client . methods . HttpPut ;  import      org . apache . http . client . methods . HttpRequestBase ;  import     org . apache . http . entity . InputStreamEntity ;  import      org . apache . http . impl . client . CloseableHttpClient ;  import      org . apache . http . impl . client . HttpClients ;  import   org . slf4j . Logger ;  import   org . slf4j . LoggerFactory ;  import   java . io . IOException ;  import   java . io . OutputStreamWriter ;  import   java . io . Writer ;  import   java . util . Arrays ;  import   java . util . Collections ;  import   java . util . HashMap ;  import   java . util . HashSet ;  import   java . util . Map ;  import   java . util . Set ;  import   java . io . ByteArrayOutputStream ;   public class DefaultHttpClient  implements  HttpClient  {   private static final Logger  logger =  LoggerFactory . getLogger  (  DefaultHttpClient . class ) ;   private static final LoggerWriter  errorLoggerWriter =  new LoggerWriter  ( logger ,  LoggerLevel . Warn ) ;   private static final  Set  < Trace >  REQUEST_RESPONSE_SUMMARY =  Collections . unmodifiableSet  (  new  HashSet  < Trace >  (  Arrays . asList  (  Trace . RequestHeaders ,  Trace . RequestBodySummary ,  Trace . ResponseHeaders ,  Trace . ResponseBodySummary ) ) ) ;   private static final ObjectMapper  JSON_MAPPER =  new ObjectMapper  ( ) ;   private static final boolean  TRACE_PRETTY_PRINT_DEFAULT =  Boolean . parseBoolean  (  System . getProperty  ( "Smartsheet.trace.pretty" , "true" ) ) ;   private static final  Set  < Trace >  TRACE_DEFAULT_TRACE_SET =  Trace . parse  (  System . getProperty  ( "Smartsheet.trace.parts" ) ) ;   private static Writer  TRACE_WRITER =  new OutputStreamWriter  (  System . out )  {    @ Override public void close  ( )  throws IOException  { } } ;  static  {   logger . info  ( "default trace logging - pretty:{} parts:{}" , TRACE_PRETTY_PRINT_DEFAULT , TRACE_DEFAULT_TRACE_SET ) ; }   private final CloseableHttpClient  httpClient ;   private HttpRequestBase  apacheHttpRequest ;   private CloseableHttpResponse  apacheHttpResponse ;   private final String  userAgent ;   private final  Set  < Trace >  traces =  new  HashSet  < Trace >  ( TRACE_DEFAULT_TRACE_SET ) ;   private boolean  tracePrettyPrint = TRACE_PRETTY_PRINT_DEFAULT ;    @ Deprecated public static final String  USER_AGENT = "Mozilla/5.0 Firefox/26.0" ;   public DefaultHttpClient  ( )  {  this  (  HttpClients . createDefault  ( ) ) ; }   public DefaultHttpClient  (  CloseableHttpClient httpClient )  {   Util . throwIfNull  ( httpClient ) ;    this . httpClient = httpClient ;    this . userAgent =  generateUserAgent  (  getClass  ( ) ) ; }   public HttpResponse request  (  HttpRequest smartsheetRequest )  throws HttpClientException  {   Util . throwIfNull  ( smartsheetRequest ) ;  if  (   smartsheetRequest . getUri  ( ) == null )  {  throw  new IllegalArgumentException  ( "A Request URI is required." ) ; }  switch  (  smartsheetRequest . getMethod  ( ) )  {   case GET :   apacheHttpRequest =  new HttpGet  (  smartsheetRequest . getUri  ( ) ) ;  break ;   case POST :   apacheHttpRequest =  new HttpPost  (  smartsheetRequest . getUri  ( ) ) ;  break ;   case PUT :   apacheHttpRequest =  new HttpPut  (  smartsheetRequest . getUri  ( ) ) ;  break ;   case DELETE :   apacheHttpRequest =  new HttpDelete  (  smartsheetRequest . getUri  ( ) ) ;  break ;   default :  throw  new UnsupportedOperationException  (   "Request method " +  smartsheetRequest . getMethod  ( ) + " is not supported!" ) ; }   RequestConfig . Builder  builder =  RequestConfig . custom  ( ) ;  if  (   apacheHttpRequest . getConfig  ( ) != null )  {   builder =  RequestConfig . copy  (  apacheHttpRequest . getConfig  ( ) ) ; }   builder . setRedirectsEnabled  ( true ) ;  RequestConfig  config =  builder . build  ( ) ;   apacheHttpRequest . setConfig  ( config ) ;  if  (   smartsheetRequest . getHeaders  ( ) != null )  {  for (   Map . Entry  < String , String > header :   smartsheetRequest . getHeaders  ( ) . entrySet  ( ) )  {   apacheHttpRequest . addHeader  (  header . getKey  ( ) ,  header . getValue  ( ) ) ; } }   apacheHttpRequest . setHeader  (  HttpHeaders . USER_AGENT , userAgent ) ;  HttpEntity  originalRequestEntity = null ;  HttpEntity  originalResponseEntity = null ;   final HttpEntity  entity =  smartsheetRequest . getEntity  ( ) ;  if  (    apacheHttpRequest instanceof HttpEntityEnclosingRequestBase &&  entity != null &&   entity . getContent  ( ) != null )  {  try  {   originalRequestEntity =  new HttpEntity  ( entity ) ; }  catch (   IOException iox )  {   logger . error  ( "failed to make copy of original request entity - {}" , iox ) ; }  InputStreamEntity  streamEntity =  new InputStreamEntity  (  entity . getContent  ( ) ,  entity . getContentLength  ( ) ) ;   streamEntity . setChunked  ( false ) ;    (  ( HttpEntityEnclosingRequestBase ) apacheHttpRequest ) . setEntity  ( streamEntity ) ; } else  {   logRequest  ( apacheHttpRequest , null ) ; }  HttpResponse  smartsheetResponse =  new HttpResponse  ( ) ;  try  {   apacheHttpResponse =   this . httpClient . execute  ( apacheHttpRequest ) ;   smartsheetResponse . setHeaders  (  new  HashMap  < String , String >  ( ) ) ;  for (    org . apache . http . Header header :  apacheHttpResponse . getAllHeaders  ( ) )  {    smartsheetResponse . getHeaders  ( ) . put  (  header . getName  ( ) ,  header . getValue  ( ) ) ; }   smartsheetResponse . setStatus  (   apacheHttpResponse . getStatusLine  ( ) . getStatusCode  ( ) ,   apacheHttpResponse . getStatusLine  ( ) . toString  ( ) ) ;  if  (   apacheHttpResponse . getEntity  ( ) != null )  {  HttpEntity  httpEntity =  new HttpEntity  ( ) ;   httpEntity . setContentType  (    apacheHttpResponse . getEntity  ( ) . getContentType  ( ) . getValue  ( ) ) ;   httpEntity . setContentLength  (   apacheHttpResponse . getEntity  ( ) . getContentLength  ( ) ) ;   httpEntity . setContent  (   apacheHttpResponse . getEntity  ( ) . getContent  ( ) ) ;   smartsheetResponse . setEntity  ( httpEntity ) ;   originalResponseEntity =  new HttpEntity  ( httpEntity ) ; }  if  (   smartsheetResponse . getStatusCode  ( ) != 200 )  {   JSON_MAPPER . writeValue  ( errorLoggerWriter ,  RequestAndResponseData . of  ( apacheHttpRequest , originalRequestEntity , smartsheetResponse , originalResponseEntity , REQUEST_RESPONSE_SUMMARY ) ) ;   errorLoggerWriter . flush  ( ) ; }  if  (   traces . size  ( ) > 0 )  {  RequestAndResponseData  requestAndResponseData =  RequestAndResponseData . of  ( apacheHttpRequest , originalRequestEntity , smartsheetResponse , originalResponseEntity , traces ) ;  if  ( tracePrettyPrint )  {    JSON_MAPPER . writerWithDefaultPrettyPrinter  ( ) . writeValue  ( TRACE_WRITER , requestAndResponseData ) ; } else  {   JSON_MAPPER . writeValue  ( TRACE_WRITER , requestAndResponseData ) ; }   TRACE_WRITER . write  ( "\n" ) ;   TRACE_WRITER . flush  ( ) ; } }  catch (   ClientProtocolException e )  {  try  {   JSON_MAPPER . writeValue  ( errorLoggerWriter ,  RequestAndResponseData . of  ( apacheHttpRequest , originalRequestEntity , smartsheetResponse , originalResponseEntity , REQUEST_RESPONSE_SUMMARY ) ) ; }  catch (   IOException ignore )  { }  throw  new HttpClientException  ( "Error occurred." , e ) ; }  catch (   IOException e )  {  try  {   JSON_MAPPER . writeValue  ( errorLoggerWriter ,  RequestAndResponseData . of  ( apacheHttpRequest , originalRequestEntity , smartsheetResponse , originalResponseEntity , REQUEST_RESPONSE_SUMMARY ) ) ; }  catch (   IOException ignore )  { }  throw  new HttpClientException  ( "Error occurred." , e ) ; }  finally  { }  return smartsheetResponse ; }    @ Override public void close  ( )  throws IOException  {    this . httpClient . close  ( ) ; }    @ Override public void releaseConnection  ( )  {  if  (  apacheHttpResponse != null )  {  try  {   apacheHttpResponse . close  ( ) ;   apacheHttpResponse = null ; }  catch (   IOException e )  {   logger . error  ( "error closing Apache HttpResponse - {}" , e ) ; } } }    @ Override public void setTraces  (  Trace ...  traces )  {    this . traces . clear  ( ) ;  for ( Trace trace : traces )  {  if  (  !  trace . addReplacements  (  this . traces ) )  {    this . traces . add  ( trace ) ; } } }    @ Override public void setTracePrettyPrint  (  boolean pretty )  {   tracePrettyPrint = pretty ; }   public static void setTraceWriter  (  Writer writer )  {   TRACE_WRITER = writer ; }   static String generateUserAgent  (   Class  <  ? > clazz )  {  String  thisVersion = "" ;  String  title = "" ;  Package  thisPackage =  clazz . getPackage  ( ) ;  if  (  thisPackage != null )  {   thisVersion =  thisPackage . getImplementationVersion  ( ) ;   title =  thisPackage . getImplementationTitle  ( ) ; }  return           title + "/" + thisVersion + " " +  System . getProperty  ( "os.name" ) + " " +  System . getProperty  ( "java.vm.name" ) + " " +  System . getProperty  ( "java.vendor" ) + " " +  System . getProperty  ( "java.version" ) ; } 
<<<<<<<
=======
  private static void append  (  StringBuilder buf ,  HttpEntity entity )  {  String  contentAsText = null ;  try  {  InputStream  inputStream =  entity . getContent  ( ) ;  ByteArrayOutputStream  contentCopyStream =  new ByteArrayOutputStream  ( ) ;  InputStream  resetStream =  StreamUtil . cloneContent  ( inputStream , contentCopyStream ) ;  if  (  resetStream != inputStream )  {   entity . setContent  ( resetStream ) ; }   contentAsText =  StreamUtil . toUtf8StringOrHex  ( contentCopyStream ) ; }  catch (   IOException iox )  {   logger . error  ( "failed to extract content from response - {}" , iox ) ; }         buf . append  ( "{ contentType:" ) . append  (  entity . getContentType  ( ) ) . append  ( ", contentLen:" ) . append  (  entity . getContentLength  ( ) ) . append  ( ", content:" ) . append  ( contentAsText ) . append  ( " }" ) ; }
>>>>>>>
 }