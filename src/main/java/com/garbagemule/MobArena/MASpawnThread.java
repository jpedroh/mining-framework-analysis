  package   com . garbagemule . MobArena ;   import     com . garbagemule . MobArena . events . ArenaCompleteEvent ;  import     com . garbagemule . MobArena . events . NewWaveEvent ;  import     com . garbagemule . MobArena . framework . Arena ;  import     com . garbagemule . MobArena . healthbar . CreatesHealthBar ;  import     com . garbagemule . MobArena . healthbar . HealthBar ;  import     com . garbagemule . MobArena . region . ArenaRegion ;  import     com . garbagemule . MobArena . things . ExperienceThing ;  import     com . garbagemule . MobArena . things . Thing ;  import     com . garbagemule . MobArena . things . ThingPicker ;  import     com . garbagemule . MobArena . util . PotionEffectParser ;  import     com . garbagemule . MobArena . waves . MABoss ;  import     com . garbagemule . MobArena . waves . MACreature ;  import     com . garbagemule . MobArena . waves . Wave ;  import     com . garbagemule . MobArena . waves . WaveManager ;  import      com . garbagemule . MobArena . waves . enums . WaveType ;  import      com . garbagemule . MobArena . waves . types . BossWave ;  import      com . garbagemule . MobArena . waves . types . SupplyWave ;  import      com . garbagemule . MobArena . waves . types . UpgradeWave ;  import   org . bukkit . Bukkit ;  import   org . bukkit . Location ;  import   org . bukkit . World ;  import    org . bukkit . attribute . Attribute ;  import    org . bukkit . entity . Entity ;  import    org . bukkit . entity . LivingEntity ;  import    org . bukkit . entity . Player ;  import    org . bukkit . potion . PotionEffect ;  import    org . bukkit . scheduler . BukkitRunnable ;  import    org . bukkit . scheduler . BukkitTask ;  import   java . util . ArrayList ;  import   java . util . List ;  import   java . util . Map ;  import   java . util . Set ;   public class MASpawnThread  implements  Runnable  {   private MobArena  plugin ;   private Arena  arena ;   private ArenaRegion  region ;   private RewardManager  rewardManager ;   private WaveManager  waveManager ;   private MonsterManager  monsterManager ;   private CreatesHealthBar  createsHealthBar ;   private  int  playerCount ,  monsterLimit ;   private boolean  waveClear ,  bossClear ,  preBossClear ,  wavesAsLevel ;   private  int  waveInterval ;   private  int  nextWaveDelay ;   private  long  monsterGlowDelay ;   private BukkitTask  task ;   public MASpawnThread  (  MobArena plugin ,  Arena arena )  {    this . plugin = plugin ;    this . arena = arena ;    this . region =  arena . getRegion  ( ) ;    this . rewardManager =  arena . getRewardManager  ( ) ;    this . waveManager =  arena . getWaveManager  ( ) ;    this . monsterManager =  arena . getMonsterManager  ( ) ;    this . createsHealthBar =  new CreatesHealthBar  (   arena . getSettings  ( ) . getString  ( "boss-health-bar" , "none" ) ) ;   reset  ( ) ; }   public void reset  ( )  {   waveManager . reset  ( ) ;   playerCount =   arena . getPlayersInArena  ( ) . size  ( ) ;   monsterLimit =   arena . getSettings  ( ) . getInt  ( "monster-limit" , 100 ) ;   waveClear =   arena . getSettings  ( ) . getBoolean  ( "clear-wave-before-next" , false ) ;   bossClear =   arena . getSettings  ( ) . getBoolean  ( "clear-boss-before-next" , false ) ;   preBossClear =   arena . getSettings  ( ) . getBoolean  ( "clear-wave-before-boss" , false ) ;   clearLeeway =   arena . getSettings  ( ) . getInt  ( "clear-wave-leeway" , 0 ) ;   =   arena . getSettings  ( ) .  ( , ) ;   =   arena . getSettings  ( ) . getInt  ( , ) ;   monsterGlowDelay =   arena . getSettings  ( ) . getLong  ( "monster-glow-delay" , 0L ) ; }   public void start  ( )  {  if  (  task != null )  {    plugin . getLogger  ( ) . warning  (   "Starting spawner in arena " +  arena . configName  ( ) + " with existing spawner still running. This should never happen." ) ;   task . cancel  ( ) ;   task = null ; }   int  delay =    arena . getSettings  ( ) . getInt  ( "first-wave-delay" , 5 ) * 20 ;   task =   Bukkit . getScheduler  ( ) . runTaskLater  ( plugin ,   ( ) ->  {    arena . getEventListener  ( ) . pvpActivate  ( ) ;   this . run  ( ) ; } , delay ) ; }   public void stop  ( )  {  if  (  task == null )  {    plugin . getLogger  ( ) . warning  (   "Can't stop non-existent spawner in arena " +  arena . configName  ( ) + ". This should never happen." ) ;  return ; }    arena . getEventListener  ( ) . pvpDeactivate  ( ) ;   task . cancel  ( ) ;   task = null ; }   public void run  ( )  {  if  (   !  arena . isRunning  ( ) ||   arena . getPlayersInArena  ( ) . isEmpty  ( ) )  {  return ; }   removeDeadMonsters  ( ) ;   removeCheatingPlayers  ( ) ;  if  (  !  arena . isRunning  ( ) )  {  return ; }   int  nextWave =   waveManager . getWaveNumber  ( ) + 1 ;  if  (  !  isWaveClear  ( ) )  {   arena . scheduleTask  ( this , 60 ) ;  return ; }  NewWaveEvent  event =  new NewWaveEvent  ( arena ,  waveManager . getNext  ( ) , nextWave ) ;     plugin . getServer  ( ) . getPluginManager  ( ) . callEvent  ( event ) ;  if  (  event . isCancelled  ( ) )  {   arena . scheduleTask  ( this , 60 ) ;  return ; }  if  (  nextWaveDelay > 0 )  {   task =   Bukkit . getScheduler  ( ) . runTaskLater  ( plugin ,  this :: spawnNextWave ,  nextWaveDelay * 20 ) ; } else  {   spawnNextWave  ( ) ; } }   private void spawnNextWave  ( )  {   int  nextWave =   waveManager . getWaveNumber  ( ) + 1 ;   grantRewards  (  nextWave - 1 ) ;  if  (   nextWave > 1 &&   (  nextWave - 1 ) ==  waveManager . getFinalWave  ( ) )  {  ArenaCompleteEvent  complete =  new ArenaCompleteEvent  ( arena ) ;     plugin . getServer  ( ) . getPluginManager  ( ) . callEvent  ( complete ) ;   List  < Player >  players =  new  ArrayList  < >  (  arena . getPlayersInArena  ( ) ) ;  for ( Player p : players )  {  if  (   arena . getSettings  ( ) . getBoolean  ( "keep-exp" , false ) )  {    arena . getRewardManager  ( ) . addReward  ( p ,  new ExperienceThing  (  p . getTotalExperience  ( ) ) ) ; }   arena . playerLeave  ( p ) ; }  return ; }   spawnWave  ( nextWave ) ;   updateStats  ( nextWave ) ;   task =   Bukkit . getScheduler  ( ) . runTaskLater  ( plugin , this ,  waveInterval * 20 ) ; }   private void spawnWave  (   int wave )  {  Wave  w =  waveManager . next  ( ) ;   w . announce  ( arena , wave ) ;    arena . getScoreboard  ( ) . updateWave  ( wave ) ;  if  ( wavesAsLevel )  {  for ( Player p :  arena . getPlayersInArena  ( ) )  {   p . setLevel  ( wave ) ;   p . setExp  ( 0.0f ) ; } }  if  (   w . getType  ( ) ==  WaveType . UPGRADE )  {   handleUpgradeWave  ( w ) ;  return ; }   Map  < MACreature , Integer >  monsters =  w . getMonstersToSpawn  ( wave , playerCount , arena ) ;   List  < Location >  spawnpoints =  w . getSpawnpoints  ( arena ) ;  World  world =  arena . getWorld  ( ) ;   int  totalSpawnpoints =  spawnpoints . size  ( ) ;   int  index = 0 ;   int  waveNumber =  waveManager . getWaveNumber  ( ) ;   double  mul =  w . getHealthMultiplier  ( ) ;  for (   Map . Entry  < MACreature , Integer > entry :  monsters . entrySet  ( ) )  {  for (   int  i = 0 ;  i <  entry . getValue  ( ) ;  i ++ ,  index ++ )  {  if  (    monsterManager . getMonsters  ( ) . size  ( ) >= monsterLimit )  {  return ; }  Location  spawnpoint =  spawnpoints . get  (  index % totalSpawnpoints ) ;  LivingEntity  e =   entry . getKey  ( ) . spawn  ( arena , world , spawnpoint ) ;   e . addPotionEffects  (  w . getEffects  ( ) ) ;   monsterManager . addMonster  ( e ) ;   monsterManager . addWaveMonster  ( e , waveNumber ) ;   int  health =  (  int )  Math . max  ( 1D ,    e . getAttribute  (  Attribute . GENERIC_MAX_HEALTH ) . getValue  ( ) * mul ) ;  try  {    e . getAttribute  (  Attribute . GENERIC_MAX_HEALTH ) . setBaseValue  ( health ) ;   e . setHealth  ( health ) ; }  catch (   IllegalArgumentException ex )  {    plugin . getLogger  ( ) . severe  (   "Can't set health to " + health + ", using default health. If you are running Spigot, set 'maxHealth' higher in your Spigot settings." ) ;    plugin . getLogger  ( ) . severe  (  ex . getLocalizedMessage  ( ) ) ;  if  (   w . getType  ( ) ==  WaveType . BOSS )  {    (  ( BossWave ) w ) . setBossName  ( "SPIGOT ERROR" ) ; } else  {   e . setCustomName  ( "SPIGOT ERROR" ) ; } }  switch  (  w . getType  ( ) )  {   case BOSS :  BossWave  bw =  ( BossWave ) w ;   double  maxHealth =   bw . getHealth  ( ) . evaluate  ( arena ) ;  MABoss  boss =  monsterManager . addBoss  ( e , maxHealth ) ;  HealthBar  healthbar =  createsHealthBar . create  ( e ,  bw . getBossName  ( ) ) ;    arena . getPlayersInArena  ( ) . forEach  (  healthbar :: addPlayer ) ;   healthbar . setProgress  ( 1 ) ;   boss . setHealthBar  ( healthbar ) ;   boss . setReward  (  bw . getReward  ( ) ) ;   boss . setDrops  (  bw . getDrops  ( ) ) ;   bw . addMABoss  ( boss ) ;   bw . activateAbilities  ( arena ) ;  if  (   bw . getBossName  ( ) != null )  {   e . setCustomName  (  bw . getBossName  ( ) ) ;   e . setCustomNameVisible  ( true ) ; }  break ;   case SWARM :   health =  (  int )  (   mul < 1D ?    e . getAttribute  (  Attribute . GENERIC_MAX_HEALTH ) . getValue  ( ) * mul : 1 ) ;   health =  Math . max  ( 1 , health ) ;   e . setHealth  (  Math . min  ( health ,   e . getAttribute  (  Attribute . GENERIC_MAX_HEALTH ) . getValue  ( ) ) ) ;  break ;   case SUPPLY :  SupplyWave  sw =  ( SupplyWave ) w ;   monsterManager . addSupplier  ( e ,  sw . getDropList  ( ) ) ;  break ;   default :  break ; } } }  if  (   Math . round  ( monsterGlowDelay ) > 0 )  {  PotionEffect  effect =  PotionEffectParser . parsePotionEffect  ( "glowing" , true ) ;  BukkitRunnable  runnable =  addGlowMonsters  ( effect ,  monsterManager . getWaveMonsters  (  waveManager . getWaveNumber  ( ) ) ) ;   runnable . runTaskLater  ( plugin ,   Math . round  ( monsterGlowDelay ) * 20L ) ; } }   private void handleUpgradeWave  (  Wave w )  {  UpgradeWave  uw =  ( UpgradeWave ) w ;  for ( Player p :  arena . getPlayersInArena  ( ) )  {  String  slug =    arena . getArenaPlayer  ( p ) . getArenaClass  ( ) . getSlug  ( ) ;   uw . grantItems  ( p , slug ) ;   uw . grantItems  ( p , "all" ) ; }     plugin . getArenaMaster  ( ) . getSpawnsPets  ( ) . spawn  ( arena ) ; }   private boolean isWaveClear  ( )  {  if  (    monsterManager . getMonsters  ( ) . size  ( ) >= monsterLimit )  {  return false ; }  if  (  bossClear &&  !   monsterManager . getBossMonsters  ( ) . isEmpty  ( ) )  {  return false ; }  if  (  waveClear &&    monsterManager . getMonsters  ( ) . size  ( ) > clearLeeway )  {  return false ; }  if  (   preBossClear &&    waveManager . getNext  ( ) . getType  ( ) ==  WaveType . BOSS &&    monsterManager . getMonsters  ( ) . size  ( ) > clearLeeway )  {  return false ; }  if  (     monsterManager . getMonsters  ( ) . size  ( ) > clearLeeway &&   waveManager . getWaveNumber  ( ) ==  waveManager . getFinalWave  ( ) )  {  return false ; }  return true ; }   private BukkitRunnable addGlowMonsters  (  PotionEffect potionEffect ,   Set  < LivingEntity > entities )  {  BukkitRunnable  runnable =  new BukkitRunnable  ( )  {    @ Override public void run  ( )  {   entities . forEach  (  entity ->  {  if  (  !  entity . isDead  ( ) )  {   entity . addPotionEffect  ( potionEffect ) ; } } ) ; } } ;  return runnable ; }   private void removeDeadMonsters  ( )  {   List  < Entity >  tmp =  new  ArrayList  < >  (  monsterManager . getMonsters  ( ) ) ;  for ( Entity e : tmp )  {  if  (  e == null )  {  continue ; }  if  (   e . isDead  ( ) ||  !  region . contains  (  e . getLocation  ( ) ) )  {   monsterManager . remove  ( e ) ;   e . remove  ( ) ; } } }   private void removeCheatingPlayers  ( )  {   List  < Player >  players =  new  ArrayList  < >  (  arena . getPlayersInArena  ( ) ) ;  for ( Player p : players )  {  if  (  region . contains  (  p . getLocation  ( ) ) )  {  continue ; }    arena . getMessenger  ( ) . tell  ( p , "Leaving so soon?" ) ;    p . getInventory  ( ) . clear  ( ) ;   arena . playerLeave  ( p ) ; } }   private void grantRewards  (   int wave )  {  for (   Map . Entry  < Integer , ThingPicker > entry :  arena . getEveryWaveEntrySet  ( ) )  {  if  (   wave > 0 &&   wave %  entry . getKey  ( ) == 0 )  {   addReward  (  entry . getValue  ( ) ) ; } }  ThingPicker  after =  arena . getAfterWaveReward  ( wave ) ;  if  (  after != null )  {   addReward  ( after ) ; } }   private void updateStats  (   int wave )  {  for ( ArenaPlayer ap :  arena . getArenaPlayerSet  ( ) )  {  if  (   arena . getPlayersInArena  ( ) . contains  (  ap . getPlayer  ( ) ) )  {    ap . getStats  ( ) . inc  ( "lastWave" ) ; } } }   public  int getPlayerCount  ( )  {  return playerCount ; }   private void addReward  (  ThingPicker picker )  {  for ( Player p :  arena . getPlayersInArena  ( ) )  {  Thing  reward =  picker . pick  ( ) ;  if  (  reward != null )  {   rewardManager . addReward  ( p , reward ) ;    arena . getMessenger  ( ) . tell  ( p ,  Msg . WAVE_REWARD ,  reward . toString  ( ) ) ; } } }   private  int  clearLeeway ; }