  package $   {  package } ;   import     org . apache . ibatis . logging . LogFactory ;  import     org . camunda . bpm . engine . ProcessEngine ;  import      org . camunda . bpm . engine . runtime . ProcessInstance ;  import      org . camunda . bpm . engine . test . Deployment ;  import      org . camunda . bpm . engine . test . ProcessEngineRule ;  import   org . junit . Before ;  import   org . junit . ClassRule ;  import   org . junit . Rule ;  import   org . junit . Test ;  import    org . junit . runner . RunWith ;  import      org . springframework . beans . factory . annotation . Autowired ;  import      org . springframework . boot . test . context . SpringBootTest ;  import       org . springframework . boot . test . context . SpringBootTest . WebEnvironment ;  import      org . springframework . test . context . junit4 . SpringRunner ;  import     org . camunda . bpm . scenario . ProcessScenario ;  import     org . camunda . bpm . scenario . Scenario ;  import       org . camunda . bpm . scenario . run . ProcessRunner . ExecutableRunner ;  import   org . mockito . Mock ;  import static   org . mockito . Matchers .  * ;  import static   org . mockito . Mockito .  * ;  import   org . mockito . MockitoAnnotations ;  import static       org . camunda . bpm . engine . test . assertions . ProcessEngineTests .  * ;  import static   org . junit . Assert .  * ;  import         org . camunda . bpm . spring . boot . starter . test . helper . StandaloneInMemoryTestConfiguration ;  import static     org . assertj . core . api . Assertions .  * ;    @ RunWith  (  SpringRunner . class )  @ SpringBootTest  (  webEnvironment =  WebEnvironment . NONE ) public class ProcessScenarioTest  {    @ Rule public final ProcessEngineRule  processEngine =   new StandaloneInMemoryTestConfiguration  ( ) . rule  ( ) ;  static  {   LogFactory . useSlf4jLogging  ( ) ; }    @ Before public void setup  ( )  {   MockitoAnnotations . initMocks  ( this ) ; }    @ Mock private ProcessScenario  myProcess ;    @ Test public void testHappyPath  ( )  { } }