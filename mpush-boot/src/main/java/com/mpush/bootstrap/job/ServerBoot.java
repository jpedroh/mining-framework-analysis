  package    com . mpush . bootstrap . job ;   import     com . mpush . api . service . Listener ;  import     com . mpush . api . service . Server ;  import     com . mpush . tools . log . Logs ;  import      com . mpush . api . spi . common . ServiceRegistryFactory ;  import     com . mpush . api . srd . ServiceNode ;   public final class ServerBoot  extends BootJob  {   private final Server  server ;   private final ServiceNode  node ;    @ Override public void start  ( )  {   server . init  ( ) ;   server . start  (  new Listener  ( )  {    @ Override public void onSuccess  (  Object ...  args )  {    Logs . Console . info  ( "start {} success on:{}" ,   server . getClass  ( ) . getSimpleName  ( ) ,  args [ 0 ] ) ;  if  (  node != null )  {    ServiceRegistryFactory . create  ( ) . register  ( node ) ;    Logs . RSD . info  ( "register {} to srd success." , node ) ; }   startNext  ( ) ; }    @ Override public void onFailure  (  Throwable cause )  {    Logs . Console . error  ( "start {} failure, jvm exit with code -1" ,   server . getClass  ( ) . getSimpleName  ( ) , cause ) ;   System . exit  (  - 1 ) ; } } ) ; }    @ Override protected void stop  ( )  {  if  (  node != null )  {    ServiceRegistryFactory . create  ( ) . deregister  ( node ) ; }    Logs . Console . info  ( "try shutdown {}..." ,   this . getClass  ( ) . getSimpleName  ( ) ) ;    server . stop  ( ) . join  ( ) ;    Logs . Console . info  ( "{} shutdown success." ,   this . getClass  ( ) . getSimpleName  ( ) ) ;   stopNext  ( ) ; }    @ Override protected String getName  ( )  {  return     super . getName  ( ) + '(' +   server . getClass  ( ) . getSimpleName  ( ) + ')' ; }   public ServerBoot  (  Server server ,  ServiceNode node )  {    this . server = server ;    this . node = node ; } }