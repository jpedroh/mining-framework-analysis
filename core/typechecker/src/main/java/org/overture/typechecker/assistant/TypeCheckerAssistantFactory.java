  package    org . overture . typechecker . assistant ;   import   java . util . Collection ;  import   java . util . LinkedList ;  import   java . util . List ;  import     org . overture . ast . analysis . AnalysisAdaptor ;  import     org . overture . ast . analysis . AnswerAdaptor ;  import      org . overture . ast . analysis . intf . IAnswer ;  import      org . overture . ast . analysis . intf . IQuestion ;  import      org . overture . ast . analysis . intf . IQuestionAnswer ;  import     org . overture . ast . assistant . AstAssistantFactory ;  import      org . overture . ast . assistant . pattern . PTypeList ;  import     org . overture . ast . definitions . PDefinition ;  import      org . overture . ast . intf . lex . ILexNameToken ;  import     org . overture . ast . lex . LexNameList ;  import     org . overture . ast . lex . LexNameSet ;  import     org . overture . ast . modules . AModuleModules ;  import     org . overture . ast . patterns . PMultipleBind ;  import     org . overture . ast . types . AAccessSpecifierAccessSpecifier ;  import     org . overture . ast . types . AClassType ;  import     org . overture . ast . types . AFunctionType ;  import     org . overture . ast . types . AOperationType ;  import     org . overture . ast . types . AProductType ;  import     org . overture . ast . types . ARecordInvariantType ;  import     org . overture . ast . types . SSetType ;  import     org . overture . ast . types . AUnionType ;  import     org . overture . ast . types . PType ;  import     org . overture . ast . types . SMapType ;  import     org . overture . ast . types . SSeqType ;  import     org . overture . ast . util . PTypeSet ;  import    org . overture . typechecker . Environment ;  import    org . overture . typechecker . LexNameTokenAssistant ;  import    org . overture . typechecker . TypeCheckInfo ;  import    org . overture . typechecker . TypeComparator ;  import      org . overture . typechecker . assistant . definition . AExplicitFunctionDefinitionAssistantTC ;  import      org . overture . typechecker . assistant . definition . AExplicitOperationDefinitionAssistantTC ;  import      org . overture . typechecker . assistant . definition . AImplicitFunctionDefinitionAssistantTC ;  import      org . overture . typechecker . assistant . definition . AImplicitOperationDefinitionAssistantTC ;  import      org . overture . typechecker . assistant . definition . PAccessSpecifierAssistantTC ;  import      org . overture . typechecker . assistant . definition . PDefinitionAssistantTC ;  import      org . overture . typechecker . assistant . definition . PDefinitionListAssistantTC ;  import      org . overture . typechecker . assistant . definition . PDefinitionSet ;  import      org . overture . typechecker . assistant . definition . SClassDefinitionAssistantTC ;  import      org . overture . typechecker . assistant . definition . SFunctionDefinitionAssistantTC ;  import      org . overture . typechecker . assistant . module . AModuleExportsAssistantTC ;  import      org . overture . typechecker . assistant . module . AModuleImportsAssistantTC ;  import      org . overture . typechecker . assistant . module . AModuleModulesAssistantTC ;  import      org . overture . typechecker . assistant . pattern . APatternTypePairAssistant ;  import      org . overture . typechecker . assistant . pattern . ATypeBindAssistantTC ;  import      org . overture . typechecker . assistant . pattern . PBindAssistantTC ;  import      org . overture . typechecker . assistant . pattern . PMultipleBindAssistantTC ;  import      org . overture . typechecker . assistant . pattern . PPatternAssistantTC ;  import      org . overture . typechecker . assistant . pattern . PPatternListAssistantTC ;  import      org . overture . typechecker . assistant . pattern . PatternListTC ;  import      org . overture . typechecker . assistant . type . AClassTypeAssistantTC ;  import      org . overture . typechecker . assistant . type . AFunctionTypeAssistantTC ;  import      org . overture . typechecker . assistant . type . AOperationTypeAssistantTC ;  import      org . overture . typechecker . assistant . type . ARecordInvariantTypeAssistantTC ;  import      org . overture . typechecker . assistant . type . PTypeAssistantTC ;  import     org . overture . typechecker . utilities . CallableOperationChecker ;  import     org . overture . typechecker . utilities . ComposeTypeCollector ;  import     org . overture . typechecker . utilities . DefinitionCollector ;  import     org . overture . typechecker . utilities . DefinitionEqualityChecker ;  import     org . overture . typechecker . utilities . DefinitionFinder ;  import      org . overture . typechecker . utilities . DefinitionFinder . Newquestion ;  import     org . overture . typechecker . utilities . DefinitionTypeFinder ;  import     org . overture . typechecker . utilities . DefinitionTypeResolver ;  import      org . overture . typechecker . utilities . DefinitionTypeResolver . NewQuestion ;  import     org . overture . typechecker . utilities . Dereferer ;  import     org . overture . typechecker . utilities . ExitTypeCollector ;  import     org . overture . typechecker . utilities . FreeVarInfo ;  import     org . overture . typechecker . utilities . FreeVariablesChecker ;  import     org . overture . typechecker . utilities . FunctionChecker ;  import     org . overture . typechecker . utilities . ImplicitDefinitionFinder ;  import     org . overture . typechecker . utilities . InstanceVariableChecker ;  import     org . overture . typechecker . utilities . KindFinder ;  import     org . overture . typechecker . utilities . NameFinder ;  import     org . overture . typechecker . utilities . OperationChecker ;  import     org . overture . typechecker . utilities . PTypeFunctionChecker ;  import     org . overture . typechecker . utilities . SelfDefinitionFinder ;  import     org . overture . typechecker . utilities . TypeDefinitionChecker ;  import     org . overture . typechecker . utilities . UnusedChecker ;  import     org . overture . typechecker . utilities . UpdatableChecker ;  import     org . overture . typechecker . utilities . UsedChecker ;  import     org . overture . typechecker . utilities . UsedMarker ;  import     org . overture . typechecker . utilities . VariableNameCollector ;  import      org . overture . typechecker . utilities . expression . ExportDefinitionFinder ;  import      org . overture . typechecker . utilities . expression . ExportDefinitionListFinder ;  import      org . overture . typechecker . utilities . expression . ImportDefinitionFinder ;  import      org . overture . typechecker . utilities . expression . PreNameFinder ;  import      org . overture . typechecker . utilities . pattern . AllDefinitionLocator ;  import      org . overture . typechecker . utilities . pattern . AlwaysMatchingPatternChecker ;  import      org . overture . typechecker . utilities . pattern . MultipleBindLister ;  import      org . overture . typechecker . utilities . pattern . PatternResolver ;  import      org . overture . typechecker . utilities . pattern . PatternUnresolver ;  import      org . overture . typechecker . utilities . pattern . PossibleBindTypeFinder ;  import      org . overture . typechecker . utilities . pattern . PossibleTypeFinder ;  import      org . overture . typechecker . utilities . pattern . SimplePatternChecker ;  import     org . overture . typechecker . visitor . QualificationVisitor ;  import      org . overture . ast . intf . lex . ILexLocation ;  import     org . overture . typechecker . utilities . type .  * ;   public class TypeCheckerAssistantFactory  extends AstAssistantFactory  implements  ITypeCheckerAssistantFactory  {   transient TypeComparator  typeComp ;   transient LexNameTokenAssistant  lnt ;   transient SFunctionDefinitionAssistantTC  sfd ;    @ Override public AClassTypeAssistantTC createAClassTypeAssistant  ( )  {  return  new AClassTypeAssistantTC  ( this ) ; }    @ Override public AFunctionTypeAssistantTC createAFunctionTypeAssistant  ( )  {  return  new AFunctionTypeAssistantTC  ( this ) ; }    @ Override public AOperationTypeAssistantTC createAOperationTypeAssistant  ( )  {  return  new AOperationTypeAssistantTC  ( this ) ; }    @ Override public ARecordInvariantTypeAssistantTC createARecordInvariantTypeAssistant  ( )  {  return  new ARecordInvariantTypeAssistantTC  ( this ) ; }    @ Override public PTypeAssistantTC createPTypeAssistant  ( )  {  return  new PTypeAssistantTC  ( this ) ; }    @ Override public AExplicitFunctionDefinitionAssistantTC createAExplicitFunctionDefinitionAssistant  ( )  {  return  new AExplicitFunctionDefinitionAssistantTC  ( this ) ; }    @ Override public AExplicitOperationDefinitionAssistantTC createAExplicitOperationDefinitionAssistant  ( )  {  return  new AExplicitOperationDefinitionAssistantTC  ( this ) ; }    @ Override public AImplicitFunctionDefinitionAssistantTC createAImplicitFunctionDefinitionAssistant  ( )  {  return  new AImplicitFunctionDefinitionAssistantTC  ( this ) ; }    @ Override public AImplicitOperationDefinitionAssistantTC createAImplicitOperationDefinitionAssistant  ( )  {  return  new AImplicitOperationDefinitionAssistantTC  ( this ) ; }    @ Override public PAccessSpecifierAssistantTC createPAccessSpecifierAssistant  ( )  {  return  new PAccessSpecifierAssistantTC  ( this ) ; }    @ Override public PDefinitionAssistantTC createPDefinitionAssistant  ( )  {  return  new PDefinitionAssistantTC  ( this ) ; }    @ Override public PDefinitionListAssistantTC createPDefinitionListAssistant  ( )  {  return  new PDefinitionListAssistantTC  ( this ) ; }    @ Override public PDefinitionSet createPDefinitionSet  ( )  {  return  new PDefinitionSet  ( this ) ; }    @ Override public SClassDefinitionAssistantTC createSClassDefinitionAssistant  ( )  {  return  new SClassDefinitionAssistantTC  ( this ) ; }    @ Override public AModuleExportsAssistantTC createAModuleExportsAssistant  ( )  {  return  new AModuleExportsAssistantTC  ( this ) ; }    @ Override public AModuleImportsAssistantTC createAModuleImportsAssistant  ( )  {  return  new AModuleImportsAssistantTC  ( this ) ; }    @ Override public AModuleModulesAssistantTC createAModuleModulesAssistant  ( )  {  return  new AModuleModulesAssistantTC  ( this ) ; }    @ Override public APatternTypePairAssistant createAPatternTypePairAssistant  ( )  {  return  new APatternTypePairAssistant  ( this ) ; }    @ Override public ATypeBindAssistantTC createATypeBindAssistant  ( )  {  return  new ATypeBindAssistantTC  ( this ) ; }    @ Override public PatternListTC createPatternList  ( )  {  return  new PatternListTC  ( this ) ; }    @ Override public PBindAssistantTC createPBindAssistant  ( )  {  return  new PBindAssistantTC  ( this ) ; }    @ Override public PMultipleBindAssistantTC createPMultipleBindAssistant  ( )  {  return  new PMultipleBindAssistantTC  ( this ) ; }    @ Override public PPatternAssistantTC createPPatternAssistant  ( )  {  return  new PPatternAssistantTC  ( this ) ; }    @ Override public PPatternListAssistantTC createPPatternListAssistant  ( )  {  return  new PPatternListAssistantTC  ( this ) ; }    @ Override public  IAnswer  <  List  < PDefinition > > getDefinitionCollector  ( )  {  return  new DefinitionCollector  ( this ) ; }    @ Override public  IAnswer  < PType > getDefinitionTypeFinder  ( )  {  return  new DefinitionTypeFinder  ( this ) ; }    @ Override public  IQuestionAnswer  < Object , Boolean > getDefinitionEqualityChecker  ( )  {  return  new DefinitionEqualityChecker  ( this ) ; }    @ Override public  IAnswer  < LexNameList > getVariableNameCollector  ( )  {  return  new VariableNameCollector  ( this ) ; }    @ Override public  IAnswer  < PDefinition > getSelfDefinitionFinder  ( )  {  return  new SelfDefinitionFinder  ( this ) ; }    @ Override public  IAnswer  < PTypeSet > getExitTypeCollector  ( )  {  return  new ExitTypeCollector  ( this ) ; }    @ Override public  IQuestionAnswer  < Newquestion , PDefinition > getDefinitionFinder  ( )  {  return  new DefinitionFinder  ( this ) ; }    @ Override public  IQuestionAnswer  <  NameFinder . Newquestion , PDefinition > getNameFinder  ( )  {  return  new NameFinder  ( this ) ; }    @ Override public  AnswerAdaptor  < Boolean > getFunctionChecker  ( )  {  return  new FunctionChecker  ( this ) ; }    @ Override public  IAnswer  < Boolean > getOperationChecker  ( )  {  return  new OperationChecker  ( this ) ; }    @ Override public  IAnswer  < String > getKindFinder  ( )  {  return  new KindFinder  ( this ) ; }    @ Override public  IAnswer  < Boolean > getUpdatableChecker  ( )  {  return  new UpdatableChecker  ( this ) ; }    @ Override public  IAnswer  < Boolean > getCallableOperationChecker  ( )  {  return  new CallableOperationChecker  ( this ) ; }    @ Override public AnalysisAdaptor getUsedMarker  ( )  {  return  new UsedMarker  ( this ) ; }    @ Override public  IQuestion  < Environment > getImplicitDefinitionFinder  ( )  {  return  new ImplicitDefinitionFinder  ( this ) ; }    @ Override public  IAnswer  < Boolean > getUsedChecker  ( )  {  return  new UsedChecker  ( this ) ; }    @ Override public  IAnswer  < Boolean > getPTypeFunctionChecker  ( )  {  return  new PTypeFunctionChecker  ( this ) ; }    @ Override public AnalysisAdaptor getUnusedChecker  ( )  {  return  new UnusedChecker  ( this ) ; }    @ Override public  IAnswer  < PDefinition > getDereferer  ( )  {  return  new Dereferer  ( this ) ; }    @ Override public  IQuestion  < NewQuestion > getDefinitionTypeResolver  ( )  {  return  new DefinitionTypeResolver  ( this ) ; }    @ Override public  AnswerAdaptor  < Boolean > getMapBasisChecker  ( )  {  return  new MapBasisChecker  ( this ) ; }    @ Override public  IAnswer  < SMapType > getMapTypeFinder  ( )  {  return  new MapTypeFinder  ( this ) ; }    @ Override public  IAnswer  < SSeqType > getSeqTypeFinder  ( )  {  return  new SeqTypeFinder  ( this ) ; }    @ Override public  AnswerAdaptor  < Boolean > getSeqBasisChecker  ( )  {  return  new SeqBasisChecker  ( this ) ; }    @ Override public  IAnswer  < AOperationType > getOperationTypeFinder  ( )  {  return  new OperationTypeFinder  ( this ) ; }    @ Override public  AnswerAdaptor  < Boolean > getOperationBasisChecker  ( )  {  return  new OperationBasisChecker  ( this ) ; }    @ Override public  AnswerAdaptor  < Boolean > getSetBasisChecker  ( )  {  return  new SetBasisChecker  ( this ) ; }    @ Override public  IAnswer  < SSetType > getSetTypeFinder  ( )  {  return  new SetTypeFinder  ( this ) ; }    @ Override public  AnswerAdaptor  < Boolean > getRecordBasisChecker  ( )  {  return  new RecordBasisChecker  ( this ) ; }    @ Override public  AnswerAdaptor  < Boolean > getTagBasisChecker  ( )  {  return  new TagBasisChecker  ( this ) ; }    @ Override public  IAnswer  < ARecordInvariantType > getRecordTypeFinder  ( )  {  return  new RecordTypeFinder  ( this ) ; }    @ Override public  AnswerAdaptor  < Boolean > getClassBasisChecker  (  Environment env )  {  return  new ClassBasisChecker  ( this , env ) ; }    @ Override public  IAnswer  < AClassType > getClassTypeFinder  (  Environment env )  {  return  new ClassTypeFinder  ( this , env ) ; }    @ Override public  IAnswer  < AProductType > getProductTypeFinder  ( )  {  return  new ProductTypeFinder  ( this ) ; }    @ Override public  AnswerAdaptor  < Boolean > getProductBasisChecker  ( )  {  return  new ProductBasisChecker  ( this ) ; }    @ Override public  IAnswer  < AUnionType > getUnionTypeFinder  ( )  {  return  new UnionTypeFinder  ( this ) ; }    @ Override public  IQuestionAnswer  < Object , Boolean > getTypeEqualityChecker  ( )  {  return  new TypeEqualityChecker  ( this ) ; }    @ Override public  IAnswer  < String > getTypeDisplayer  ( )  {  return  new TypeDisplayer  ( this ) ; }    @ Override public AnalysisAdaptor getTypeUnresolver  ( )  {  return  new TypeUnresolver  ( this ) ; }    @ Override public  IQuestionAnswer  < AAccessSpecifierAccessSpecifier , Boolean > getNarrowerThanComparator  ( )  {  return  new NarrowerThanComparator  ( this ) ; }    @ Override public  AnswerAdaptor  < Boolean > getUnionBasisChecker  ( )  {  return  new UnionBasisChecker  ( this ) ; }    @ Override public  IAnswer  < AFunctionType > getFunctionTypeFinder  ( )  {  return  new FunctionTypeFinder  ( this ) ; }    @ Override public  IQuestionAnswer  <       org . overture . typechecker . utilities . type . ConcreateTypeImplementor . Newquestion , PType > getConcreateTypeImplementor  ( )  {  return  new ConcreateTypeImplementor  ( this ) ; }    @ Override public  IQuestionAnswer  <       org . overture . typechecker . utilities . type . PTypeResolver . Newquestion , PType > getPTypeResolver  ( )  {  return  new PTypeResolver  ( this ) ; }    @ Override public  IQuestionAnswer  < String , PType > getPTypeFinder  ( )  {  return  new PTypeFinder  ( this ) ; }    @ Override public  IQuestionAnswer  < Integer , Boolean > getProductExtendedChecker  ( )  {  return  new ProductExtendedChecker  ( this ) ; }    @ Override public  IQuestionAnswer  < Integer , AProductType > getProductExtendedTypeFinder  ( )  {  return  new ProductExtendedTypeFinder  ( this ) ; }    @ Override public  IQuestionAnswer  <  Class  <  ? extends PType > , Boolean > getPTypeExtendedChecker  ( )  {  return  new PTypeExtendedChecker  ( this ) ; }    @ Override public  IAnswer  < Boolean > getVoidExistanceChecker  ( )  {  return  new VoidExistanceChecker  ( this ) ; }    @ Override public  IAnswer  < Boolean > getVoidBasisChecker  ( )  {  return  new VoidBasisChecker  ( this ) ; }    @ Override public  IAnswer  < PType > getPossibleTypeFinder  ( )  {  return  new PossibleTypeFinder  ( this ) ; }    @ Override public  IAnswer  < Boolean > getSimplePatternChecker  ( )  {  return  new SimplePatternChecker  ( this ) ; }    @ Override public  IAnswer  < Boolean > getAlwaysMatchingPatternChecker  ( )  {  return  new AlwaysMatchingPatternChecker  ( this ) ; }    @ Override public AnalysisAdaptor getPatternUnresolver  ( )  {  return  new PatternUnresolver  ( this ) ; }    @ Override public  IQuestion  <       org . overture . typechecker . utilities . pattern . PatternResolver . NewQuestion > getPatternResolver  ( )  {  return  new PatternResolver  ( this ) ; }    @ Override public  IQuestionAnswer  <       org . overture . typechecker . utilities . pattern . AllDefinitionLocator . NewQuestion ,  List  < PDefinition > > getAllDefinitionLocator  ( )  {  return  new AllDefinitionLocator  ( this ) ; }    @ Override public  IAnswer  < PType > getPossibleBindTypeFinder  ( )  {  return  new PossibleBindTypeFinder  ( this ) ; }    @ Override public  IAnswer  <  List  < PMultipleBind > > getMultipleBindLister  ( )  {  return  new MultipleBindLister  ( this ) ; }    @ Override public  IAnswer  < ILexNameToken > getPreNameFinder  ( )  {  return  new PreNameFinder  ( this ) ; }    @ Override public  IQuestionAnswer  <  LinkedList  < PDefinition > ,  Collection  <  ? extends PDefinition > > getExportDefinitionFinder  ( )  {  return  new ExportDefinitionFinder  ( this ) ; }    @ Override public  IAnswer  <  Collection  <  ? extends PDefinition > > getExportDefinitionListFinder  ( )  {  return  new ExportDefinitionListFinder  ( this ) ; }    @ Override public  IQuestionAnswer  < AModuleModules ,  List  < PDefinition > > getImportDefinitionFinder  ( )  {  return  new ImportDefinitionFinder  ( this ) ; }    @ Override public  IAnswer  < PTypeList > getComposeTypeCollector  ( )  {  return  new ComposeTypeCollector  ( ) ; }    @ Override public  IQuestionAnswer  < TypeCheckInfo ,  List  < QualifiedDefinition > > getQualificationVisitor  ( )  {  return  new QualificationVisitor  ( ) ; }    @ Override public TypeComparator getTypeComparator  ( )  {  if  (  typeComp == null )  {   typeComp =  new TypeComparator  ( this ) ; }  return typeComp ; }    @ Override public LexNameTokenAssistant getLexNameTokenAssistant  ( )  {  if  (  lnt == null )  {   lnt =  new LexNameTokenAssistant  ( this ) ; }  return lnt ; }    @ Override public SFunctionDefinitionAssistantTC createSFunctionDefinitionAssistant  ( )  {  if  (  sfd == null )  {   sfd =  new SFunctionDefinitionAssistantTC  ( this ) ; }  return sfd ; }    @ Override public  IAnswer  < Boolean > getInstanceVariableChecker  ( )  {  return  new InstanceVariableChecker  ( this ) ; }    @ Override public  IAnswer  < Boolean > getTypeDefinitionChecker  ( )  {  return  new TypeDefinitionChecker  ( this ) ; }    @ Override public  IQuestionAnswer  < FreeVarInfo , LexNameSet > getFreeVariablesChecker  ( )  {  return  new FreeVariablesChecker  ( this ) ; }   transient IsEqVisitor  iEqV ;   transient IsOrderedVisitor  iOrdV ;   transient MultipleEqualityChecker  mulEqCheckr ;    @ Override public  IQuestionAnswer  < ILexLocation , Boolean > getIsOrderedVisitor  ( )  {  if  (  iOrdV == null )  {   iOrdV =  new IsOrderedVisitor  ( ) ; }  return iOrdV ; }    @ Override public  IQuestionAnswer  < ILexLocation , Boolean > getIsEqVisitor  ( )  {  if  (  iEqV == null )  {   iEqV =  new IsEqVisitor  ( ) ; }  return iOrdV ; }    @ Override public  IQuestion  < TypeCheckInfo > getMultipleEqualityChecker  ( )  {  if  (  mulEqCheckr == null )  {   mulEqCheckr =  new MultipleEqualityChecker  ( ) ; }  return mulEqCheckr ; } }