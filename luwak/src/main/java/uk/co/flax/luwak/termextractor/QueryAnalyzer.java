  package     uk . co . flax . luwak . termextractor ;   import   java . util . ArrayList ;  import   java . util . Arrays ;  import   java . util . List ;  import    org . apache . lucene . search .  * ;  import      uk . co . flax . luwak . presearcher . PresearcherComponent ;  import       uk . co . flax . luwak . termextractor . querytree . QueryTree ;  import       uk . co . flax . luwak . termextractor . querytree . TreeAdvancer ;  import       uk . co . flax . luwak . termextractor . querytree . TreeWeightor ;  import       uk . co . flax . luwak . termextractor . treebuilder . TreeBuilders ;   public class QueryAnalyzer  {   private final  List  <  QueryTreeBuilder  <  ? > >  queryTreeBuilders ;   public final TreeWeightor  weightor ;   public QueryAnalyzer  (  TreeWeightor weightor ,   List  <  QueryTreeBuilder  <  ? > > queryTreeBuilders )  {    this . queryTreeBuilders =  new  ArrayList  < >  ( ) ;    this . queryTreeBuilders . addAll  ( queryTreeBuilders ) ;    this . queryTreeBuilders . addAll  (  TreeBuilders . DEFAULT_BUILDERS ) ;    this . weightor = weightor ; }   public QueryAnalyzer  (  TreeWeightor weightor ,   QueryTreeBuilder  <  ? > ...  queryTreeBuilders )  {  this  ( weightor ,  Arrays . asList  ( queryTreeBuilders ) ) ; }   public QueryAnalyzer  (   QueryTreeBuilder  <  ? > ...  queryTreeBuilders )  {  this  (  TreeWeightor . DEFAULT_WEIGHTOR , queryTreeBuilders ) ; }   public static QueryAnalyzer fromComponents  (  TreeWeightor weightor ,  PresearcherComponent ...  components )  {   List  <  QueryTreeBuilder  <  ? > >  builders =  new  ArrayList  < >  ( ) ;  for ( PresearcherComponent component : components )  {   builders . addAll  (  component . getQueryTreeBuilders  ( ) ) ; }  return  new QueryAnalyzer  ( weightor , builders ) ; }   public static QueryAnalyzer fromComponents  (  PresearcherComponent ...  components )  {  return  fromComponents  (  TreeWeightor . DEFAULT_WEIGHTOR , components ) ; }    @ SuppressWarnings  ( "unchecked" ) public QueryTree buildTree  (  Query luceneQuery )  {  QueryTreeBuilder  builder =  getTreeBuilderForQuery  (  luceneQuery . getClass  ( ) ) ;  if  (  builder == null )  throw  new UnsupportedOperationException  (  "Can't build query tree from query of type " +  luceneQuery . getClass  ( ) ) ;  return  builder . buildTree  ( this , luceneQuery ) ; }   public QueryTreeBuilder getTreeBuilderForQuery  (   Class  <  ? extends Query > queryClass )  {  for (  QueryTreeBuilder  <  ? > builder : queryTreeBuilders )  {  if  (   builder . cls . isAssignableFrom  ( queryClass ) )  {  return builder ; } }  return null ; }   public  List  < QueryTerm > collectTerms  (  QueryTree queryTree )  {   List  < QueryTerm >  terms =  new  ArrayList  < >  ( ) ;   queryTree . collectTerms  ( terms , weightor ) ;  return terms ; }   public  List  < QueryTerm > collectTerms  (  Query luceneQuery )  {  return  collectTerms  (  buildTree  ( luceneQuery ) ) ; }   public boolean advancePhase  (  QueryTree queryTree ,  TreeAdvancer advancer )  {  return  queryTree . advancePhase  ( weightor , advancer ) ; } 
<<<<<<<
=======
  public static final  List  <  QueryTreeBuilder  <  ? extends Query > >  DEFAULT_BUILDERS =  CollectionUtils . makeUnmodifiableList  (  new  BooleanQueryTreeBuilder . QueryBuilder  ( ) ,  new PhraseQueryTreeBuilder  ( ) ,  new ConstantScoreQueryTreeBuilder  ( ) ,  new BoostQueryTreeBuilder  ( ) ,  new NumericRangeQueryTreeBuilder  ( ) ,  new TermRangeQueryTreeBuilder  ( ) ,  new RegexpAnyTermQueryTreeBuilder  ( ) ,  new SimpleTermQueryTreeBuilder  ( ) ,  new SpanTermQueryTreeBuilder  ( ) ,  new SpanNearQueryTreeBuilder  ( ) ,  new SpanOrQueryTreeBuilder  ( ) ,  new SpanMultiTermQueryWrapperTreeBuilder  ( ) ,  new SpanNotQueryTreeBuilder  ( ) ,  new GenericQueryTreeBuilder  ( ) ) ;
>>>>>>>
 }