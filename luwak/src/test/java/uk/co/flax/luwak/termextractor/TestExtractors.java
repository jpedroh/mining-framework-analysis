  package     uk . co . flax . luwak . termextractor ;   import     org . apache . lucene . index . Term ;  import    org . apache . lucene . search .  * ;  import   org . junit . Test ;  import       uk . co . flax . luwak . termextractor . querytree . TreeWeightor ;  import       uk . co . flax . luwak . termextractor . treebuilder . RegexpNGramTermQueryTreeBuilder ;  import static      org . assertj . core . api . Assertions . assertThat ;   public class TestExtractors  {   private static final QueryAnalyzer  treeBuilder =  new QueryAnalyzer  ( ) ;   private static QueryAnalyzer getBuilder  (   QueryTreeBuilder  <  ? > ...  queryTreeBuilder )  {  return  new QueryAnalyzer  (  TreeWeightor . DEFAULT_WEIGHTOR , queryTreeBuilder ) ; }    @ Test public void testRegexpExtractor  ( )  {  RegexpNGramTermQueryTreeBuilder  extractor =  new RegexpNGramTermQueryTreeBuilder  ( "XX" , "WILDCARD" ) ;  QueryAnalyzer  builder =  getBuilder  ( extractor ) ;    assertThat  (  builder . collectTerms  (  new RegexpQuery  (  new Term  ( "field" , "super.*califragilistic" ) ) ) ) . containsExactly  (  new QueryTerm  ( "field" , "califragilisticXX" ,   QueryTerm . Type . CUSTOM , "WILDCARD" ) ) ;    assertThat  (  builder . collectTerms  (  new RegexpQuery  (  new Term  ( "field" , "hell." ) ) ) ) . containsExactly  (  new QueryTerm  ( "field" , "hellXX" ,   QueryTerm . Type . CUSTOM , "WILDCARD" ) ) ;    assertThat  (  builder . collectTerms  (  new RegexpQuery  (  new Term  ( "field" , "hel?o" ) ) ) ) . containsExactly  (  new QueryTerm  ( "field" , "heXX" ,   QueryTerm . Type . CUSTOM , "WILDCARD" ) ) ; }    @ Test  @ SuppressWarnings  ( "deprecation" ) public void testRangeQueriesReturnAnyToken  ( )  {   LegacyNumericRangeQuery  < Long >  nrq =  LegacyNumericRangeQuery . newLongRange  ( "field" , 0l , 10l , true , true ) ;      assertThat  (  treeBuilder . collectTerms  ( nrq ) ) . hasSize  ( 1 ) . extracting  ( "type" ) . containsExactly  (   QueryTerm . Type . ANY ) ;   BooleanQuery . Builder  bq =  new  BooleanQuery . Builder  ( ) ;   bq . add  ( nrq ,   BooleanClause . Occur . MUST ) ;   bq . add  (  new TermQuery  (  new Term  ( "field" , "term" ) ) ,   BooleanClause . Occur . MUST ) ;    assertThat  (  treeBuilder . collectTerms  (  bq . build  ( ) ) ) . containsExactly  (  new QueryTerm  ( "field" , "term" ,   QueryTerm . Type . EXACT ) ) ; }    @ Test public void testConstantScoreQueryExtractor  ( )  {   BooleanQuery . Builder  bq =  new  BooleanQuery . Builder  ( ) ;   bq . add  (  new TermQuery  (  new Term  ( "f" , "q1" ) ) ,   BooleanClause . Occur . MUST ) ;   bq . add  (  new TermQuery  (  new Term  ( "f" , "q2" ) ) ,   BooleanClause . Occur . SHOULD ) ;  Query  csqWithQuery =  new ConstantScoreQuery  (  bq . build  ( ) ) ;    assertThat  (  treeBuilder . collectTerms  ( csqWithQuery ) ) . containsExactly  (  new QueryTerm  ( "f" , "q1" ,   QueryTerm . Type . EXACT ) ) ; }    @ Test public void testPhraseQueryExtractor  ( )  {   PhraseQuery . Builder  pq =  new  PhraseQuery . Builder  ( ) ;   pq . add  (  new Term  ( "f" , "hello" ) ) ;   pq . add  (  new Term  ( "f" , "encyclopedia" ) ) ;    assertThat  (  treeBuilder . collectTerms  (  pq . build  ( ) ) ) . containsOnly  (  new QueryTerm  ( "f" , "encyclopedia" ,   QueryTerm . Type . EXACT ) ) ; }    @ Test public void testBoostQueryExtractor  ( )  {   BooleanQuery . Builder  bq =  new  BooleanQuery . Builder  ( ) ;   bq . add  (  new TermQuery  (  new Term  ( "f" , "q1" ) ) ,   BooleanClause . Occur . MUST ) ;   bq . add  (  new TermQuery  (  new Term  ( "f" , "q2" ) ) ,   BooleanClause . Occur . SHOULD ) ;  Query  boostQuery =  new BoostQuery  (  bq . build  ( ) , 0.5f ) ;    assertThat  (  treeBuilder . collectTerms  ( boostQuery ) ) . containsExactly  (  new QueryTerm  ( "f" , "q1" ,   QueryTerm . Type . EXACT ) ) ; } }