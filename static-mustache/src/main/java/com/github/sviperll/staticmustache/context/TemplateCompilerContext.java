  package     com . github . sviperll . staticmustache . context ;   import     javax . lang . model . element . TypeElement ;   public class TemplateCompilerContext  {   public static TemplateCompilerContext createInstace  (  RenderingCodeGenerator codeGenerator ,  TypeElement element ,  ContextVariables variables )  {  RenderingContext  fieldContext =  new DeclaredTypeRenderingContext  ( codeGenerator , element ,  variables . data  ( ) ) ;  return  new TemplateCompilerContext  ( codeGenerator , variables , fieldContext ) ; }   private final EnclosedRelation  enclosedRelation ;   private final RenderingContext  context ;   private final RenderingCodeGenerator  generator ;   private final ContextVariables  variables ;  TemplateCompilerContext  (  RenderingCodeGenerator processor ,  ContextVariables variables ,  RenderingContext field )  {  this  ( processor , variables , field , null ) ; }   private TemplateCompilerContext  (  RenderingCodeGenerator processor ,  ContextVariables variables ,  RenderingContext field ,  EnclosedRelation parent )  {    this . enclosedRelation = parent ;    this . context = field ;    this . generator = processor ;    this . variables = variables ; } 
<<<<<<<
  private String renderingCodeBody  ( )  throws ContextException  {  RenderingData  entry =  context . thisCurrentData  ( ) ;  try  {  return  generator . generateRenderingCode  (  entry . type  ( ) ,  entry . expression  ( ) ,  variables . writer  ( ) ) ; }  catch (   TypeException ex )  {  throw  new ContextException  ( "Unable to render field" , ex ) ; } }
=======
>>>>>>>
   public String renderingCode  ( )  throws ContextException  {  return    beginSectionRenderingCode  ( ) +  sectionBodyRenderingCode  ( ) +  endSectionRenderingCode  ( ) ; } 
<<<<<<<
  public TemplateCompilerContext createChild  (  String name )  throws ContextException  {  if  (  name . equals  ( "." ) )  {  return  new TemplateCompilerContext  ( generator , variables ,  new OwnedRenderingContext  ( context ) ,  new EnclosedRelation  ( name , this ) ) ; } else  {  RenderingData  entry =  context . getDataOrDefault  ( name , null ) ;  if  (  entry == null )  throw  new ContextException  (  "Field not found in current context: " + name ) ;  RenderingContext  enclosedField ;  try  {   enclosedField =  generator . createRenderingContext  (  entry . type  ( ) ,  entry . expression  ( ) ,  new OwnedRenderingContext  ( context ) ) ; }  catch (   TypeException ex )  {  throw  new ContextException  (   "Can't use " + name + " for rendering" , ex ) ; }  return  new TemplateCompilerContext  ( generator , variables , enclosedField ,  new EnclosedRelation  ( name , this ) ) ; } }
=======
>>>>>>>
   public boolean isEnclosed  ( )  {  return  enclosedRelation != null ; }   public String currentEnclosedContextName  ( )  {  return  enclosedRelation . name  ( ) ; }   public TemplateCompilerContext parentContext  ( )  {  return  enclosedRelation . parentContext  ( ) ; }   private String sectionBodyRenderingCode  ( )  throws ContextException  {  RenderingData  entry =  context . currentData  ( ) ;  try  {  return  generator . generateRenderingCode  (  entry . type  ( ) ,  entry . expression  ( ) , writerExpression ) ; }  catch (   TypeException ex )  {  throw  new ContextException  ( "Unable to render field" , ex ) ; } }   public String beginSectionRenderingCode  ( )  {  return  context . beginSectionRenderingCode  ( ) ; }   public String endSectionRenderingCode  ( )  {  return  context . endSectionRenderingCode  ( ) ; }   public TemplateCompilerContext getChild  (  String name )  throws ContextException  {  if  (  name . equals  ( "." ) )  {  return  new TemplateCompilerContext  ( generator , writerExpression ,  new OwnedRenderingContext  ( context ) ,  new EnclosedRelation  ( name , this ) ) ; } else  {  RenderingData  entry =  context . getDataOrDefault  ( name , null ) ;  if  (  entry == null )  throw  new ContextException  (  "Field not found in current context: " + name ) ;  RenderingContext  enclosedField ;  try  {   enclosedField =  generator . createRenderingContext  (  entry . type  ( ) ,  entry . expression  ( ) ,  new OwnedRenderingContext  ( context ) ) ; }  catch (   TypeException ex )  {  throw  new ContextException  (   "Can't use " + name + " for rendering" , ex ) ; }  return  new TemplateCompilerContext  ( generator , writerExpression , enclosedField ,  new EnclosedRelation  ( name , this ) ) ; } }   public TemplateCompilerContext getInvertedChild  (  String name )  throws ContextException  {  if  (  name . equals  ( "." ) )  {  throw  new ContextException  ( "Current section can't be inverted" ) ; } else  {  RenderingData  entry =  context . getDataOrDefault  ( name , null ) ;  if  (  entry == null )  throw  new ContextException  (  "Field not found in current context: " + name ) ;  RenderingContext  enclosedField ;  try  {   enclosedField =  generator . createInvertedRenderingContext  (  entry . type  ( ) ,  entry . expression  ( ) ,  new OwnedRenderingContext  ( context ) ) ; }  catch (   TypeException ex )  {  throw  new ContextException  (   "Can't use " + name + " for rendering" , ex ) ; }  return  new TemplateCompilerContext  ( generator , writerExpression , enclosedField ,  new EnclosedRelation  ( name , this ) ) ; } } }