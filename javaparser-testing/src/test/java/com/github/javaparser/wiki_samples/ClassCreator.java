  package    com . github . javaparser . wiki_samples ;   import     com . github . javaparser . ast . CompilationUnit ;  import     com . github . javaparser . ast . Modifier ;  import     com . github . javaparser . ast . PackageDeclaration ;  import      com . github . javaparser . ast . body . ClassOrInterfaceDeclaration ;  import      com . github . javaparser . ast . body . MethodDeclaration ;  import      com . github . javaparser . ast . body . Parameter ;  import     com . github . javaparser . ast . expr .  * ;  import      com . github . javaparser . ast . stmt . BlockStmt ;  import      com . github . javaparser . ast . type . ClassOrInterfaceType ;  import   java . util . EnumSet ;  import static       com . github . javaparser . ast . type . VoidType . VOID_TYPE ;   public class ClassCreator  {   public static void main  (   String  [ ] args )  throws Exception  {  CompilationUnit  cu =  createCU  ( ) ;    System . out . println  (  cu . toString  ( ) ) ; }   private static CompilationUnit createCU  ( )  {  CompilationUnit  cu =  new CompilationUnit  ( ) ;   cu . setPackageDeclaration  (  new PackageDeclaration  (  Name . parse  ( "java.parser.test" ) ) ) ;   cu . setPackageDeclaration  ( "java.parser.test" ) ;  ClassOrInterfaceDeclaration  type =  cu . addClass  ( "GeneratedClass" ) ;   EnumSet  < Modifier >  modifiers =  EnumSet . of  (  Modifier . PUBLIC ) ;  MethodDeclaration  method =  new MethodDeclaration  ( modifiers , VOID_TYPE , "main" ) ;   modifiers . add  (  Modifier . STATIC ) ;   method . setModifiers  ( modifiers ) ;   type . addMember  ( method ) ;  MethodDeclaration  main2 =  type . addMethod  ( "main2" ,  Modifier . PUBLIC ,  Modifier . STATIC ) ;  Parameter  param =  new Parameter  (  new ClassOrInterfaceType  ( "String" ) , "args" ) ;   param . setVarArgs  ( true ) ;   method . addParameter  ( param ) ;    main2 . addAndGetParameter  (  String . class , "args" ) . setVarArgs  ( true ) ;  BlockStmt  block =  new BlockStmt  ( ) ;   method . setBody  ( block ) ;  NameExpr  clazz =  new NameExpr  ( "System" ) ;  FieldAccessExpr  field =  new FieldAccessExpr  ( clazz , "out" ) ;  MethodCallExpr  call =  new MethodCallExpr  ( field , "println" ) ;   call . addArgument  (  new StringLiteralExpr  ( "Hello World!" ) ) ;   block . addStatement  ( call ) ;  return cu ; } }