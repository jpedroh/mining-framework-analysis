  package    org . atmosphere . gwt20 . client ;   import      com . google . gwt . core . client . JavaScriptObject ;  import   java . util . Collections ;  import   java . util . List ;  import      org . atmosphere . gwt20 . client . AtmosphereRequestConfig . Transport ;   public final class AtmosphereResponse  extends JavaScriptObject  {   public enum State  {  MESSAGE_RECEIVED ,  MESSAGE_PUBLISHED ,  OPENING ,  RE_OPENING ,  CLOSED ,  ERROR  ;    @ Override public String toString  ( )  {  switch  ( this )  {   case MESSAGE_RECEIVED :  return "messageReceived" ;   case MESSAGE_PUBLISHED :  return "messagePublished" ;   case OPENING :  return "opening" ;   case RE_OPENING :  return "re-opening" ;   case CLOSED :  return "closed" ;   default :   case ERROR :  return "error" ; } }   public static State fromString  (  String s )  {  for ( State st :  State . values  ( ) )  {  if  (   st . toString  ( ) . equals  ( s ) )  {  return st ; } }  return  State . ERROR ; } }   public native  int getStatus  ( ) ;   public  <  T >  List  < T > getMessages  ( )  {  Object  containedMessage =  getMessageObject  ( ) ;  if  (  containedMessage == null )  {  return  Collections . emptyList  ( ) ; } else  if  (  containedMessage instanceof List )  {  return  ( List ) containedMessage ; } else  {  return  (  List  < T > )  Collections . singletonList  ( containedMessage ) ; } }   public native String getResponseBody  ( ) ;   public native String getHeader  (  String name ) ;   public State getState  ( )  {  return  State . fromString  (  getStateImpl  ( ) ) ; }   protected AtmosphereResponse  ( )  { }   native void setMessageObject  (  Object message ) ;   native Object getMessageObject  ( ) ;   private native String getStateImpl  ( ) ;   public Transport getTransport  ( )  {  return  Transport . fromString  (  getTransportImpl  ( ) ) ; }   private native String getTransportImpl  ( ) ; }