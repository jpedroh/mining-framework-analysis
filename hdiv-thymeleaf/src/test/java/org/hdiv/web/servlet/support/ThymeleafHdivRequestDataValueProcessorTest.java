  package     org . hdiv . web . servlet . support ;   import   java . util . List ;  import   java . util . Map ;  import    javax . servlet . http . HttpServletRequest ;  import   org . hdiv . AbstractHDIVTestCase ;  import    org . hdiv . context . RequestContext ;  import    org . hdiv . dataComposer . DataComposerFactory ;  import    org . hdiv . dataComposer . IDataComposer ;  import    org . hdiv . state . IParameter ;  import    org . hdiv . state . IState ;  import    org . hdiv . state . StateUtil ;  import    org . hdiv . util . HDIVUtil ;   public class ThymeleafHdivRequestDataValueProcessorTest  extends AbstractHDIVTestCase  {   private ThymeleafHdivRequestDataValueProcessor  dataValueProcessor ;   private DataComposerFactory  dataComposerFactory ;   private StateUtil  stateUtil ;    @ Override protected void onSetUp  ( )  throws Exception  {    this . dataValueProcessor =   this . getApplicationContext  ( ) . getBean  (  ThymeleafHdivRequestDataValueProcessor . class ) ;    this . dataComposerFactory =   this . getApplicationContext  ( ) . getBean  (  DataComposerFactory . class ) ;    this . stateUtil =   this . getApplicationContext  ( ) . getBean  (  StateUtil . class ) ; }   public void testProcessUrl  ( )  {  HttpServletRequest  request =  this . getMockRequest  ( ) ;  String  url = "/testAction.do" ;  String  result =   this . dataValueProcessor . processUrl  ( request , url ) ;   assertTrue  (  result . contains  ( "_HDIV_STATE_" ) ) ; }   public void testProcessUrlAvoid  ( )  {    this . getConfig  ( ) . setAvoidValidationInUrlsWithoutParams  ( true ) ;  HttpServletRequest  request =  this . getMockRequest  ( ) ;  String  url = "/testAction.do" ;  String  result =   this . dataValueProcessor . processUrl  ( request , url ) ;   assertEquals  ( url , result ) ; }   public void testProcessAction  ( )  {  HttpServletRequest  request =  this . getMockRequest  ( ) ;  String  action = "/testAction.do" ;  String  result =   this . dataValueProcessor . processAction  ( request , action ) ;   assertEquals  ( action , result ) ;  String  val =   this . dataValueProcessor . processFormFieldValue  ( request , "param" , "value" , "select" ) ;   assertEquals  ( "0" , val ) ;   Map  < String , String >  extraParams =   this . dataValueProcessor . getExtraHiddenFields  ( request ) ;   assertNotNull  ( extraParams ) ;   assertTrue  (   extraParams . size  ( ) > 0 ) ; }   public void testProcessActionGetMethod  ( )  {  HttpServletRequest  request =  this . getMockRequest  ( ) ;  String  action = "/onlyget.do" ;  String  result =   this . dataValueProcessor . processAction  ( request , action , "GET" ) ;   assertEquals  ( action , result ) ;  String  val =   this . dataValueProcessor . processFormFieldValue  ( request , "param" , "value" , "select" ) ;   assertEquals  ( "value" , val ) ;   Map  < String , String >  extraParams =   this . dataValueProcessor . getExtraHiddenFields  ( request ) ;   assertNotNull  ( extraParams ) ;   assertTrue  (   extraParams . size  ( ) == 0 ) ; }   public void testProcessActionAvoid  ( )  {    this . getConfig  ( ) . setAvoidValidationInUrlsWithoutParams  ( true ) ;  HttpServletRequest  request =  this . getMockRequest  ( ) ;  String  action = "/testAction.do" ;  String  result =   this . dataValueProcessor . processAction  ( request , action ) ;   assertEquals  ( action , result ) ;  String  val =   this . dataValueProcessor . processFormFieldValue  ( request , "param" , "value" , "select" ) ;   assertEquals  ( "0" , val ) ;   Map  < String , String >  extraParams =   this . dataValueProcessor . getExtraHiddenFields  ( request ) ;   assertNotNull  ( extraParams ) ;   assertTrue  (   extraParams . size  ( ) > 0 ) ; }   public void testProcessFormThymeleafOrder  ( )  {  HttpServletRequest  request =  this . getMockRequest  ( ) ;  RequestContext  context =  this . getRequestContext  ( ) ;  IDataComposer  dataComposer =   this . dataComposerFactory . newInstance  ( request ) ;   HDIVUtil . setDataComposer  ( dataComposer , request ) ;   dataComposer . startPage  ( ) ;  String  action = "/testAction.do" ;  String  result =   this . dataValueProcessor . processAction  ( request , action ) ;   assertEquals  ( action , result ) ;   Map  < String , String >  extraParams =   this . dataValueProcessor . getExtraHiddenFields  ( request ) ;   assertNotNull  ( extraParams ) ;   assertTrue  (   extraParams . size  ( ) == 1 ) ;  String  hdivStateParam =  HDIVUtil . getHdivStateParameterName  ( request ) ;  String  stateValue =  extraParams . get  ( hdivStateParam ) ;   assertNotNull  ( stateValue ) ;  String  val =   this . dataValueProcessor . processFormFieldValue  ( request , "param" , "value" , "select" ) ;   assertEquals  ( "0" , val ) ;   val =   this . dataValueProcessor . processFormFieldValue  ( request , "param1" , "value1" , "text" ) ;   assertEquals  ( "value1" , val ) ;   dataComposer . endPage  ( ) ;  IState  state =  stateUtil . restoreState  ( context , stateValue ) ;   assertNotNull  ( state ) ;  IParameter  param =  state . getParameter  ( "param" ) ;   List  < String >  values =  param . getValues  ( ) ;   assertTrue  (   values . size  ( ) == 1 ) ;  String  value =  values . get  ( 0 ) ;   assertEquals  ( "value" , value ) ; } }