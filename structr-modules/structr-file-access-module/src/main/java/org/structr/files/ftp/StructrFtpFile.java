  package    org . structr . files . ftp ;   import     org . apache . ftpserver . ftplet . FtpFile ;  import   org . slf4j . Logger ;  import   org . slf4j . LoggerFactory ;  import    org . structr . common . SecurityContext ;  import     org . structr . common . error . FrameworkException ;  import     org . structr . core . app . StructrApp ;  import     org . structr . core . graph . Tx ;  import     org . structr . core . storage . StorageProviderFactory ;  import     org . structr . web . entity . File ;  import   java . io . IOException ;  import   java . io . InputStream ;  import   java . io . OutputStream ;  import   java . util . List ;  import    org . structr . storage . StorageProviderFactory ;   public class StructrFtpFile  extends AbstractStructrFtpFile  {   private static final Logger  logger =  LoggerFactory . getLogger  (   StructrFtpFile . class . getName  ( ) ) ;   public StructrFtpFile  (   final SecurityContext securityContext ,   final File file )  {  super  ( securityContext , file ) ; }    @ Override public boolean isDirectory  ( )  {  return false ; }    @ Override public boolean isFile  ( )  {  return true ; }    @ Override public  long getSize  ( )  {  try  (  Tx tx =   StructrApp . getInstance  ( securityContext ) . tx  ( ) )  {   final Long  size =   StorageProviderFactory . getStorageProvider  ( structrFile ) . size  ( ) ;   tx . success  ( ) ;  return   size == null ? 0L : size ; }  catch (   FrameworkException fex )  { }  return 0L ; }    @ Override public boolean mkdir  ( )  {   logger . info  ( "mkdir()" ) ;  throw  new UnsupportedOperationException  ( "Not supported." ) ; }    @ Override public OutputStream createOutputStream  (   final  long l )  throws IOException  {  try  (  Tx tx =   StructrApp . getInstance  ( securityContext ) . tx  ( ) )  {   final OutputStream  outputStream =   (  ( File ) structrFile ) . getOutputStream  ( ) ;   tx . success  ( ) ;  return outputStream ; }  catch (   FrameworkException fex )  {   logger . error  ( null , fex ) ; }  return null ; }    @ Override public InputStream createInputStream  (   final  long l )  throws IOException  {  try  (  Tx tx =   StructrApp . getInstance  ( securityContext ) . tx  ( ) )  {   final InputStream  inputStream =   (  ( File ) structrFile ) . getInputStream  ( ) ;   tx . success  ( ) ;  return inputStream ; }  catch (   FrameworkException fex )  {   logger . error  ( null , fex ) ; }  return null ; }    @ Override public  List  < FtpFile > listFiles  ( )  {   logger . info  ( "listFiles()" ) ;  return null ; }    @ Override public Object getPhysicalFile  ( )  {  throw  new UnsupportedOperationException  ( "Not supported yet." ) ; } }