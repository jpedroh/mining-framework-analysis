  package    org . structr . mail . function ;   import     org . apache . commons . mail . EmailAttachment ;  import    org . structr . common . AdvancedMailContainer ;  import    org . structr . common . DynamicMailAttachment ;  import     org . structr . common . error . FrameworkException ;  import     org . structr . core . storage . StorageProviderFactory ;  import    org . structr . mail . AdvancedMailModule ;  import    org . structr . mail . DynamicFileDataSource ;  import     org . structr . schema . action . ActionContext ;  import     org . structr . web . entity . File ;  import   java . net . MalformedURLException ;  import    org . structr . storage . StorageProviderFactory ;   public class MailAddAttachmentFunction  extends AdvancedMailModuleFunction  {   public final String  ERROR_MESSAGE = "Usage: ${mail_add_attachment(file[, name])}" ;   public final String  ERROR_MESSAGE_JS = "Usage: ${{ Structr.mail_add_attachment(file[, name]) }}" ;   public MailAddAttachmentFunction  (   final AdvancedMailModule parent )  {  super  ( parent ) ; }    @ Override public String getName  ( )  {  return "mail_add_attachment" ; }    @ Override public String getSignature  ( )  {  return "file [, name ]" ; }    @ Override public Object apply  (  ActionContext ctx ,  Object caller ,   Object  [ ] sources )  throws FrameworkException  {  try  {   assertArrayHasMinLengthAndMaxLengthAndAllElementsNotNull  ( sources , 1 , 2 ) ;   final AdvancedMailContainer  amc =  ctx . getAdvancedMailContainer  ( ) ;  if  (   sources [ 0 ] instanceof File )  {   final File  fileNode =  ( File )  sources [ 0 ] ;   final String  attachmentName =   (   sources . length == 2 ) ?   sources [ 1 ] . toString  ( ) :  fileNode . getName  ( ) ;  try  {   addAttachment  ( amc , fileNode , attachmentName ) ; }  catch (   MalformedURLException ex )  {   logException  ( caller , ex , sources ) ; } }  return "" ; }  catch (   IllegalArgumentException e )  {   logParameterError  ( caller , sources ,  e . getMessage  ( ) ,  ctx . isJavaScriptContext  ( ) ) ;  return  usage  (  ctx . isJavaScriptContext  ( ) ) ; } }    @ Override public String usage  (  boolean inJavaScriptContext )  {  return  (  inJavaScriptContext ? ERROR_MESSAGE_JS : ERROR_MESSAGE ) ; }    @ Override public String shortDescription  ( )  {  return "Adds an attachment file and an optional file name to the current mail" ; }   public static void addAttachment  (   final AdvancedMailContainer amc ,   final File fileNode )  throws MalformedURLException  {   addAttachment  ( amc , fileNode ,  fileNode . getName  ( ) ) ; }   public static void addAttachment  (   final AdvancedMailContainer amc ,   final File fileNode ,   final String attachmentName )  throws MalformedURLException  {   final DynamicMailAttachment  attachment =  new DynamicMailAttachment  ( ) ;   attachment . setName  ( attachmentName ) ;   attachment . setDisposition  (  EmailAttachment . ATTACHMENT ) ;  if  (  fileNode . isTemplate  ( ) )  {   attachment . setDataSource  (  new DynamicFileDataSource  ( fileNode ) ) ; } else  {   attachment . setDataSource  (  StorageProviderFactory . getStorageProvider  ( fileNode ) ) ; }   amc . addAttachment  ( attachment ) ; } }