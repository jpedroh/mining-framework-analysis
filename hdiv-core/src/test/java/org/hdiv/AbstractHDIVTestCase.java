  package  org . hdiv ;   import    java . util . regex . Pattern ;  import   javax . servlet . ServletContext ;  import   javax . servlet . ServletContextEvent ;  import    javax . servlet . http . HttpServletResponse ;  import    javax . servlet . http . HttpSession ;  import    javax . servlet . http . HttpSessionEvent ;  import   junit . framework . TestCase ;  import     org . apache . commons . logging . Log ;  import     org . apache . commons . logging . LogFactory ;  import    org . hdiv . config . HDIVConfig ;  import    org . hdiv . context . RequestContext ;  import    org . hdiv . dataComposer . DataComposerFactory ;  import    org . hdiv . dataComposer . IDataComposer ;  import    org . hdiv . init . RequestInitializer ;  import    org . hdiv . listener . InitListener ;  import    org . hdiv . util . HDIVUtil ;  import    org . springframework . context . ApplicationContext ;  import    org . springframework . context . ConfigurableApplicationContext ;  import     org . springframework . mock . web . MockHttpServletRequest ;  import     org . springframework . mock . web . MockHttpServletResponse ;  import     org . springframework . web . context . WebApplicationContext ;  import      org . springframework . web . context . support . XmlWebApplicationContext ;   public abstract class AbstractHDIVTestCase  extends TestCase  {   private static final Log  log =  LogFactory . getLog  (  AbstractHDIVTestCase . class ) ;   protected static final String  MEMORY_PATTERN = "([0-9]+-){2}[A-Za-z0-9]+" ;   protected Pattern  memoryPattern =  Pattern . compile  ( MEMORY_PATTERN ) ;   private ApplicationContext  applicationContext = null ;   private HDIVConfig  config ;   private InitListener  initListener ;   private MockHttpServletRequest  mockRequest ;   private MockHttpServletResponse  mockResponse ;   private RequestContext  requestContext ;   private  String  [ ]  files =  { "/org/hdiv/config/hdiv-core-applicationContext.xml" , "/org/hdiv/config/hdiv-config.xml" , "/org/hdiv/config/hdiv-validations.xml" , "/org/hdiv/config/applicationContext-extra.xml" } ;   protected final  @ Override void setUp  ( )  throws Exception  {   preSetUp  ( ) ;  MockHttpServletRequest  request =  new MockHttpServletRequest  ( "GET" , "/path/testAction.do" ) ;  HttpServletResponse  response =  new MockHttpServletResponse  ( ) ;  HttpSession  httpSession =  request . getSession  ( ) ;  ServletContext  servletContext =  httpSession . getServletContext  ( ) ;   requestContext =  new RequestContext  ( request , response ) ;   mockRequest = request ;   mockResponse =  ( MockHttpServletResponse ) response ;  XmlWebApplicationContext  webApplicationContext =  new XmlWebApplicationContext  ( ) ;   webApplicationContext . setServletContext  ( servletContext ) ;   webApplicationContext . setConfigLocations  ( files ) ;   servletContext . setAttribute  (  WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE , webApplicationContext ) ;   webApplicationContext . refresh  ( ) ;   applicationContext = webApplicationContext ;   config =  applicationContext . getBean  (  HDIVConfig . class ) ;   postCreateHdivConfig  ( config ) ;   initListener =  new InitListener  ( ) ;  ServletContextEvent  servletContextEvent =  new ServletContextEvent  ( servletContext ) ;   initListener . contextInitialized  ( servletContextEvent ) ;  HttpSessionEvent  httpSessionEvent =  new HttpSessionEvent  ( httpSession ) ;   initListener . sessionCreated  ( httpSessionEvent ) ;  RequestInitializer  requestInitializer =  applicationContext . getBean  (  RequestInitializer . class ) ;   requestInitializer . initRequest  ( request , response ) ;  DataComposerFactory  dataComposerFactory =  applicationContext . getBean  (  DataComposerFactory . class ) ;  IDataComposer  dataComposer =  dataComposerFactory . newInstance  ( request ) ;   HDIVUtil . setDataComposer  ( dataComposer , request ) ;  if  (  log . isDebugEnabled  ( ) )  {   log . debug  ( "Hdiv test context initialized" ) ; }   onSetUp  ( ) ; }   protected abstract void onSetUp  ( )  throws Exception ;   protected void preSetUp  ( )  throws Exception  { }   protected void onTearDown  ( )  throws Exception  { }   protected void preTearDown  ( )  throws Exception  { }    @ Override protected void tearDown  ( )  throws Exception  {   preTearDown  ( ) ;  RequestInitializer  requestInitializer =  applicationContext . getBean  (  RequestInitializer . class ) ;   requestInitializer . endRequest  ( mockRequest , mockResponse ) ;  HttpSessionEvent  httpSessionEvent =  new HttpSessionEvent  (  mockRequest . getSession  ( ) ) ;   initListener . sessionDestroyed  ( httpSessionEvent ) ;  ServletContextEvent  servletContextEvent =  new ServletContextEvent  (   mockRequest . getSession  ( ) . getServletContext  ( ) ) ;   initListener . contextDestroyed  ( servletContextEvent ) ;    (  ( ConfigurableApplicationContext ) applicationContext ) . close  ( ) ;   onTearDown  ( ) ; }   protected void postCreateHdivConfig  (   final HDIVConfig config )  { }   public ApplicationContext getApplicationContext  ( )  {  return applicationContext ; }   public HDIVConfig getConfig  ( )  {  return config ; }   public RequestContext getRequestContext  ( )  {  return requestContext ; }   public MockHttpServletRequest getMockRequest  ( )  {  return mockRequest ; }   public MockHttpServletResponse getMockResponse  ( )  {  return mockResponse ; }   protected  String  [ ] getFiles  ( )  {  return files ; }   protected void setFiles  (   final  String  [ ] files )  {    this . files = files ; } }