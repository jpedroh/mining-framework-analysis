  package   org . hdiv . urlProcessor ;   import   org . hdiv . AbstractHDIVTestCase ;  import    org . hdiv . util . HDIVUtil ;  import    org . hdiv . util . Method ;   public class UriTemplateTest  extends AbstractHDIVTestCase  {   private LinkUrlProcessor  linkUrlProcessor ;   private String  urlWithoutUriTemplate ;   private String  uriTemplate ;   private String  url ;    @ Override protected void onSetUp  ( )  throws Exception  {   linkUrlProcessor =   getApplicationContext  ( ) . getBean  (  LinkUrlProcessor . class ) ;   urlWithoutUriTemplate = "/testAction.do" ;   uriTemplate = "{?filter, projection, search}" ;   url =  urlWithoutUriTemplate + uriTemplate ; }   private UrlData create  (   final String url )  {  return  linkUrlProcessor . createUrlData  ( url ,  Method . GET ,  HDIVUtil . getHdivStateParameterName  (  getMockRequest  ( ) ) ,  getMockRequest  ( ) ) ; }   public void testCreateUrlDataSimple  ( )  {  UrlData  urlData =  create  ( urlWithoutUriTemplate ) ;   assertEquals  ( false ,  urlData . hasUriTemplate  ( ) ) ;   assertEquals  ( urlWithoutUriTemplate ,  urlData . getUrlWithOutUriTemplate  ( ) ) ;   assertEquals  ( "" ,  urlData . getUriTemplate  ( ) ) ; }   public void testCreateUrlDataWithUriTemplate  ( )  {  UrlData  urlData =  create  ( url ) ;   assertEquals  ( true ,  urlData . hasUriTemplate  ( ) ) ;   assertEquals  ( urlWithoutUriTemplate ,  urlData . getUrlWithOutUriTemplate  ( ) ) ;   assertEquals  ( uriTemplate ,  urlData . getUriTemplate  ( ) ) ; }   public void testGetProcessedUrlWithHdivState  ( )  {  UrlData  urlData =  create  ( url ) ;  String  stateParam = "1-12-123123123123" ;  String  urlProcessed =  linkUrlProcessor . getProcessedUrlWithHdivState  (  HDIVUtil . getHdivStateParameterName  (  getMockRequest  ( ) ) , urlData , stateParam ) ;   assertEquals  (    urlWithoutUriTemplate + "?_HDIV_STATE_=" + stateParam +  uriTemplate . replace  ( "?" , "&" ) , urlProcessed ) ; }   public void testJSURLData  ( )  {  UrlData  data =  new UrlData  ( "javascript:myMethod()" ,  Method . GET ) ;   assertEquals  ( true ,  data . isJS  ( ) ) ;   data =  new UrlData  ( "hhhhhhhhhh:myMethod()" ,  Method . GET ) ;   assertEquals  ( false ,  data . isJS  ( ) ) ; } }