  package   org . hdiv . filter ;   import   java . io . UnsupportedEncodingException ;  import   java . net . URLDecoder ;  import   java . util . ArrayList ;  import   java . util . Arrays ;  import   java . util . Enumeration ;  import   java . util . HashSet ;  import   java . util . List ;  import   java . util . Map ;  import   java . util . Set ;  import    java . util . regex . Matcher ;  import    java . util . regex . Pattern ;  import   javax . servlet . ServletRequest ;  import   javax . servlet . ServletRequestWrapper ;  import    javax . servlet . http . Cookie ;  import    javax . servlet . http . HttpServletRequest ;  import     org . apache . commons . logging . Log ;  import     org . apache . commons . logging . LogFactory ;  import    org . hdiv . config . HDIVConfig ;  import    org . hdiv . config . Strategy ;  import    org . hdiv . context . RequestContext ;  import    org . hdiv . dataComposer . DataComposerFactory ;  import    org . hdiv . dataComposer . IDataComposer ;  import    org . hdiv . dataValidator . IDataValidator ;  import    org . hdiv . dataValidator . IValidationResult ;  import    org . hdiv . exception . HDIVException ;  import    org . hdiv . session . ISession ;  import    org . hdiv . state . IPage ;  import    org . hdiv . state . IParameter ;  import    org . hdiv . state . IState ;  import    org . hdiv . state . StateUtil ;  import     org . hdiv . state . scope . StateScope ;  import     org . hdiv . state . scope . StateScopeManager ;  import    org . hdiv . urlProcessor . BasicUrlData ;  import    org . hdiv . urlProcessor . BasicUrlProcessor ;  import    org . hdiv . util . Constants ;  import    org . hdiv . util . HDIVErrorCodes ;  import    org . hdiv . util . HDIVUtil ;  import    org . hdiv . util . Method ;  import    org . hdiv . validator . EditableDataValidationResult ;  import     org . springframework . web . util . HtmlUtils ;   public class ValidatorHelperRequest  implements  IValidationHelper  {   private static final Log  log =  LogFactory . getLog  (  ValidatorHelperRequest . class ) ;   protected HDIVConfig  hdivConfig ;   protected StateUtil  stateUtil ;   protected ISession  session ;   protected IDataValidator  dataValidator ;   protected DataComposerFactory  dataComposerFactory ;   protected Pattern  numberPattern =  Pattern . compile  ( "[0-9]+" ) ;   protected BasicUrlProcessor  urlProcessor ;   protected StateScopeManager  stateScopeManager ;   public void init  ( )  { }   public ValidatorHelperResult validate  (   final HttpServletRequest request )  {  String  target =  getTarget  ( request ) ;   target =  getTargetWithoutContextPath  ( request , target ) ;   target =  decodeUrl  ( target ) ;  ValidatorHelperResult  result =  preValidate  ( request , target ) ;  if  (  result != null )  {  return result ; }  if  (  hdivConfig . hasExtensionToExclude  ( target ) )  {  if  (  log . isDebugEnabled  ( ) )  {   log . debug  (   "The target [" + target + "] has an extension to exclude from validation" ) ; }  return  ValidatorHelperResult . VALIDATION_NOT_REQUIRED ; }  if  (  !  hdivConfig . isValidationInUrlsWithoutParamsActivated  ( ) )  {  boolean  requestHasParameters =   (   request . getParameterNames  ( ) != null ) &&  (   request . getParameterNames  ( ) . hasMoreElements  ( ) ) ;  if  (  ! requestHasParameters )  {  if  (  log . isDebugEnabled  ( ) )  {   log . debug  (   "The url [" +  request . getRequestURI  ( ) + "] is not be validated because it has not got parameters" ) ; }  return  ValidatorHelperResult . VALIDATION_NOT_REQUIRED ; } }  if  (  isStartPage  ( request , target ) )  {   result =  validateStartPageParameters  ( request , target ) ;  if  (  result . isValid  ( ) )  {  return  ValidatorHelperResult . VALIDATION_NOT_REQUIRED ; } else  {  return result ; } }  if  (  hdivConfig . isCookiesIntegrityActivated  ( ) )  {   result =  validateRequestCookies  ( request , target ) ;  if  (  !  result . isValid  ( ) )  {  return result ; } }   result =  restoreState  ( request , target ) ;  if  (  !  result . isValid  ( ) )  {  return result ; }  IState  state =  result . getValue  ( ) ;   result =  isTheSameAction  ( request , target , state ) ;  if  (  !  result . isValid  ( ) )  {  return result ; }   result =  allRequiredParametersReceived  ( request , state , target ) ;  if  (  !  result . isValid  ( ) )  {  return result ; }  String  hdivParameter =  getHdivParameter  ( request ) ;  BasicUrlData  urlData =  urlProcessor . processUrl  ( request ,  "?" +  state . getParams  ( ) ) ;   Map  < String ,  String  [ ] >  stateParams =  urlData . getUrlParams  ( ) ;   List  < ValidatorError >  unauthorizedEditableParameters =  new  ArrayList  < ValidatorError >  ( ) ;   Enumeration  <  ? >  parameters =  request . getParameterNames  ( ) ;  while  (  parameters . hasMoreElements  ( ) )  {  String  parameter =  ( String )  parameters . nextElement  ( ) ;   result =  validateParameter  ( request ,  state . getParameter  ( parameter ) ,  stateParams . get  ( parameter ) , unauthorizedEditableParameters , hdivParameter , target , parameter ) ;  if  (  !  result . isValid  ( ) )  {  return result ; } }  if  (   unauthorizedEditableParameters . size  ( ) > 0 )  {  return  new ValidatorHelperResult  ( unauthorizedEditableParameters ) ; }  return  ValidatorHelperResult . VALID ; }   protected boolean isStartPage  (   final HttpServletRequest request ,   final String target )  {  return  hdivConfig . isStartPage  ( target ,  Method . valueOf  (  request . getMethod  ( ) ) ) ; }   protected String decodeUrl  (   final String url )  {  try  {  return  URLDecoder . decode  ( url ,  Constants . ENCODING_UTF_8 ) ; }  catch (   final  UnsupportedEncodingException e )  {  throw  new HDIVException  ( "Error decoding url" , e ) ; }  catch (   final  IllegalArgumentException e )  {  throw  new HDIVException  ( "Error decoding url" , e ) ; } }   protected ValidatorHelperResult isTheSameAction  (   final HttpServletRequest request ,   final String target ,   final IState state )  {  String  stateAction =  state . getAction  ( ) ;   stateAction =  HtmlUtils . htmlUnescape  ( stateAction ) ;  if  (  stateAction . equalsIgnoreCase  ( target ) )  {  return  ValidatorHelperResult . VALID ; }  if  (  target . endsWith  ( "/" ) )  {  String  actionSlash =  stateAction + "/" ;  if  (  actionSlash . equalsIgnoreCase  ( target ) )  {  return  ValidatorHelperResult . VALID ; } }  if  (  log . isDebugEnabled  ( ) )  {   log . debug  (     "Validation error in the action. Action in state [" +  state . getAction  ( ) + "], action in the request [" + target + "]" ) ; }  ValidatorError  error =  new ValidatorError  (  HDIVErrorCodes . ACTION_ERROR , target ) ;  return  new ValidatorHelperResult  ( error ) ; }   protected ValidatorHelperResult validateStartPageParameters  (   final HttpServletRequest request ,   final String target )  {   List  < ValidatorError >  unauthorizedEditableParameters =  new  ArrayList  < ValidatorError >  ( ) ;   Enumeration  <  ? >  parameters =  request . getParameterNames  ( ) ;  while  (  parameters . hasMoreElements  ( ) )  {  String  parameter =  ( String )  parameters . nextElement  ( ) ;   String  [ ]  values =  request . getParameterValues  ( parameter ) ;   validateEditableParameter  ( request , target , parameter , values , "text" , unauthorizedEditableParameters ) ; }  if  (   unauthorizedEditableParameters . size  ( ) > 0 )  {  return  new ValidatorHelperResult  ( unauthorizedEditableParameters ) ; }  return  ValidatorHelperResult . VALID ; }   protected ValidatorHelperResult validateRequestCookies  (   final HttpServletRequest request ,   final String target )  {   Cookie  [ ]  requestCookies =  request . getCookies  ( ) ;  if  (   (  requestCookies == null ) ||  (   requestCookies . length == 0 ) )  {  return  ValidatorHelperResult . VALID ; }    @ SuppressWarnings  ( "unchecked" )  Map  < String , SavedCookie >  sessionCookies =  session . getAttribute  (  new RequestContext  ( request ) ,  Constants . HDIV_COOKIES_KEY ,  Map . class ) ;  if  (  sessionCookies == null )  {  return  ValidatorHelperResult . VALID ; }  boolean  cookiesConfidentiality =   hdivConfig . getConfidentiality  ( ) &&  hdivConfig . isCookiesConfidentialityActivated  ( ) ;  for (   int  i = 0 ;  i <  requestCookies . length ;  i ++ )  {  boolean  found = false ;  if  (    requestCookies [ i ] . getName  ( ) . equals  (  Constants . JSESSIONID ) )  {  continue ; }  if  (  sessionCookies . containsKey  (   requestCookies [ i ] . getName  ( ) ) )  {  SavedCookie  savedCookie =  sessionCookies . get  (   requestCookies [ i ] . getName  ( ) ) ;  if  (  savedCookie . isEqual  (  requestCookies [ i ] , cookiesConfidentiality ) )  {   found = true ;  if  ( cookiesConfidentiality )  {  if  (   savedCookie . getValue  ( ) != null )  {    requestCookies [ i ] . setValue  (  savedCookie . getValue  ( ) ) ; } } } }  if  (  ! found )  {  ValidatorError  error =  new ValidatorError  (  HDIVErrorCodes . COOKIE_INCORRECT , target ,  "cookie:" +   requestCookies [ i ] . getName  ( ) ,   requestCookies [ i ] . getValue  ( ) ) ;  return  new ValidatorHelperResult  ( error ) ; } }  return  ValidatorHelperResult . VALID ; }   protected void validateEditableParameter  (   final HttpServletRequest request ,   final String target ,   final String parameter ,   final  String  [ ] values ,   final String dataType ,   final  List  < ValidatorError > unauthorizedParameters )  {  EditableDataValidationResult  result =   hdivConfig . getEditableDataValidationProvider  ( ) . validate  ( target , parameter , values , dataType ) ;  if  (  !  result . isValid  ( ) )  {  String  value ;  if  (  dataType . equals  ( "password" ) )  {   value =  Constants . HDIV_EDITABLE_PASSWORD_ERROR_KEY ; } else  {  StringBuilder  unauthorizedValues =  new StringBuilder  (  values [ 0 ] ) ;  for (   int  i = 1 ;  i <  values . length ;  i ++ )  {    unauthorizedValues . append  ( ',' ) . append  (  values [ i ] ) ; }   value =  unauthorizedValues . toString  ( ) ; }  ValidatorError  error =  new ValidatorError  (  HDIVErrorCodes . EDITABLE_VALIDATION_ERROR , target , parameter , value , null ,  result . getValidationId  ( ) ) ;   unauthorizedParameters . add  ( error ) ; } }   protected ValidatorHelperResult allRequiredParametersReceived  (   final HttpServletRequest request ,   final IState state ,   final String target )  {   List  < String >  receivedParameters =  state . getRequiredParams  ( ) ;   Enumeration  <  ? >  requestParameters =  request . getParameterNames  ( ) ;  while  (  requestParameters . hasMoreElements  ( ) )  {  String  currentParameter =  ( String )  requestParameters . nextElement  ( ) ;   receivedParameters . remove  ( currentParameter ) ;  if  (  receivedParameters . isEmpty  ( ) )  {  return  ValidatorHelperResult . VALID ; } }  if  (   receivedParameters . size  ( ) > 0 )  {  ValidatorError  error =  new ValidatorError  (  HDIVErrorCodes . REQUIRED_PARAMETERS , target ,  receivedParameters . toString  ( ) ) ;  return  new ValidatorHelperResult  ( error ) ; }  return  ValidatorHelperResult . VALID ; }   protected ValidatorHelperResult validateParameter  (   final HttpServletRequest request ,   final IParameter stateParameter ,   final  String  [ ] actionParamValues ,   final  List  < ValidatorError > unauthorizedEditableParameters ,   final String hdivParameter ,   final String target ,   final String parameter )  {  if  (  isUserDefinedNonValidationParameter  ( target , parameter , hdivParameter ) )  {  return  ValidatorHelperResult . VALIDATION_NOT_REQUIRED ; }  if  (   stateParameter == null &&  actionParamValues == null )  {  return  validateExtraParameter  ( request , stateParameter , actionParamValues , unauthorizedEditableParameters , hdivParameter , target , parameter ) ; }   String  [ ]  values =  request . getParameterValues  ( parameter ) ;  if  (   stateParameter != null &&  stateParameter . isEditable  ( ) )  {   addEditableParameter  ( request , parameter ) ;  if  (   stateParameter . getEditableDataType  ( ) != null )  {   validateEditableParameter  ( request , target , parameter , values ,  stateParameter . getEditableDataType  ( ) , unauthorizedEditableParameters ) ; }  return  ValidatorHelperResult . VALID ; }  try  {  ValidatorHelperResult  result =  validateParameterValues  ( request , target , stateParameter , actionParamValues , parameter , values ) ;  return result ; }  catch (   final  HDIVException e )  {  String  errorMessage =  HDIVUtil . getMessage  ( request , "validation.error" ,  e . getMessage  ( ) ) ;  throw  new HDIVException  ( errorMessage , e ) ; } }   protected ValidatorHelperResult validateExtraParameter  (   final HttpServletRequest request ,   final IParameter stateParameter ,   final  String  [ ] actionParamValues ,   final  List  < ValidatorError > unauthorizedEditableParameters ,   final String hdivParameter ,   final String target ,   final String parameter )  {  if  (  log . isDebugEnabled  ( ) )  {   log . debug  (     "Validation Error Detected: Parameter [" + parameter + "] does not exist in the state for action [" + target + "]" ) ; }  ValidatorError  error =  new ValidatorError  (  HDIVErrorCodes . PARAMETER_NOT_EXISTS , target , parameter ) ;  return  new ValidatorHelperResult  ( error ) ; }   protected boolean isUserDefinedNonValidationParameter  (   final String target ,   final String parameter ,   final String hdivParameter )  {  if  (  !  hdivConfig . needValidation  ( parameter , hdivParameter ) )  {  if  (   log . isDebugEnabled  ( ) &&  !  parameter . equals  ( hdivParameter ) )  {   log . debug  (   "Parameter [" + parameter + "] doesn't need validation. It is configured as 'StartParameter'" ) ; }  return true ; }  if  (  hdivConfig . isParameterWithoutValidation  ( target , parameter ) )  {  if  (  log . isDebugEnabled  ( ) )  {   log . debug  (   "Parameter [" + parameter + "] doesn't need validation. It is configured as 'ParameterWithoutValidation'." ) ; }  return true ; }  return false ; }   protected ValidatorHelperResult restoreState  (   final HttpServletRequest request ,   final String target )  {  String  hdivParameter =  getHdivParameter  ( request ) ;  String  requestState =  request . getParameter  ( hdivParameter ) ;  if  (  requestState == null )  {  ValidatorError  error =  new ValidatorError  (  HDIVErrorCodes . HDIV_PARAMETER_DOES_NOT_EXIST , target , hdivParameter ) ;  return  new ValidatorHelperResult  ( error ) ; }  if  (  requestState . contains  ( "#" ) )  {   requestState =   requestState . split  ( "#" ) [ 0 ] ; }  try  {   int  pageId =  stateUtil . getPageId  ( requestState ) ;  IState  state =  stateUtil . restoreState  (  new RequestContext  ( request ) , requestState ) ;   HDIVUtil . setCurrentPageId  ( pageId , request ) ;  if  (  stateUtil . isMemoryStrategy  ( requestState ) )  {  if  (  !  validateHDIVSuffix  ( request , requestState , state ) )  {  ValidatorError  error =  new ValidatorError  (  HDIVErrorCodes . HDIV_PARAMETER_INCORRECT_VALUE , target , hdivParameter , requestState ) ;  return  new ValidatorHelperResult  ( error ) ; } }  return  new ValidatorHelperResult  ( true , state ) ; }  catch (   final  HDIVException e )  {  if  (  !   hdivConfig . getStrategy  ( ) . equals  (  Strategy . MEMORY ) )  {   requestState = null ; }  ValidatorError  error =  new ValidatorError  (  e . getMessage  ( ) , target , hdivParameter , requestState ) ;  return  new ValidatorHelperResult  ( error ) ; } }   protected boolean validateHDIVSuffix  (   final HttpServletRequest request ,   final String value ,   final IState restoredState )  {   int  firstSeparator =  value . indexOf  ( '-' ) ;   int  lastSeparator =  value . lastIndexOf  ( '-' ) ;  if  (  firstSeparator ==  - 1 )  {  return false ; }  if  (  firstSeparator >= lastSeparator )  {  return false ; }  try  {  String  requestSuffix =  value . substring  (  lastSeparator + 1 ) ;  String  pId =  value . substring  ( 0 , firstSeparator ) ;  String  sId =  value . substring  (  firstSeparator + 1 , lastSeparator ) ;   int  pageId = 0 ;   int  stateId = 0 ;  try  {   stateId =  Integer . parseInt  ( sId ) ; }  catch (   final  NumberFormatException e )  {  throw  new HDIVException  (  HDIVErrorCodes . PAGE_ID_INCORRECT , e ) ; }  RequestContext  context =  new RequestContext  ( request ) ;  StateScope  stateScope =  stateScopeManager . getStateScope  ( value ) ;  if  (  stateScope != null )  {  String  token =  stateScope . getStateToken  ( context , stateId ) ;  return  requestSuffix . equals  ( token ) ; }  try  {   pageId =  Integer . parseInt  ( pId ) ; }  catch (   final  NumberFormatException e )  {  throw  new HDIVException  (  HDIVErrorCodes . PAGE_ID_INCORRECT , e ) ; }  IPage  currentPage =  session . getPage  ( context , pageId ) ;  if  (  currentPage == null )  {  if  (  log . isErrorEnabled  ( ) )  {   log . error  (   "Page with id [" + pageId + "] not found in session." ) ; }  throw  new HDIVException  (  HDIVErrorCodes . PAGE_ID_INCORRECT ) ; }  return   currentPage . getRandomToken  (  restoredState . getMethod  ( ) ) . equals  ( requestSuffix ) ; }  catch (   final  IndexOutOfBoundsException e )  {  String  errorMessage =  HDIVUtil . getMessage  ( request , "validation.error" ,  e . getMessage  ( ) ) ;  if  (  log . isErrorEnabled  ( ) )  {   log . error  ( errorMessage ) ; }  throw  new HDIVException  ( errorMessage , e ) ; } }   protected ValidatorHelperResult validateParameterValues  (   final HttpServletRequest request ,   final String target ,   final IParameter stateParameter ,   final  String  [ ] actionParamValues ,   final String parameter ,   final  String  [ ] values )  {  try  {  if  (  actionParamValues != null )  {  if  (   values . length !=  actionParamValues . length )  {  String  valueMessage =   (   values . length >  actionParamValues . length ) ? "extra value" : "more values expected" ;  ValidatorError  error =  new ValidatorError  (  HDIVErrorCodes . VALUE_LENGTH_INCORRECT , target , parameter , valueMessage ) ;  return  new ValidatorHelperResult  ( error ) ; } }   List  < String >  stateParamValues = null ;  if  (  stateParameter != null )  {   stateParamValues =  stateParameter . getValues  ( ) ; } else  {   stateParamValues =  Arrays . asList  ( actionParamValues ) ; }  ValidatorHelperResult  result =  hasRepeatedOrInvalidValues  ( request , target , parameter , values , stateParamValues ) ;  if  (  !  result . isValid  ( ) )  {  return result ; }  return  validateReceivedValuesInState  ( request , target , stateParameter , actionParamValues , parameter , values ) ; }  catch (   final  HDIVException e )  {  String  errorMessage =  HDIVUtil . getMessage  ( request , "validation.error" ,  e . getMessage  ( ) ) ;  throw  new HDIVException  ( errorMessage , e ) ; } }   protected ValidatorHelperResult hasRepeatedOrInvalidValues  (   final HttpServletRequest request ,   final String target ,   final String parameter ,   final  String  [ ] values ,   final  List  < String > stateValues )  {   List  < String >  tempStateValues =  new  ArrayList  < String >  ( ) ;   tempStateValues . addAll  ( stateValues ) ;  if  (  hdivConfig . getConfidentiality  ( ) )  {  return  hasConfidentialIncorrectValues  ( request , target , parameter , values , tempStateValues ) ; } else  {  return  hasNonConfidentialIncorrectValues  ( target , parameter , values , tempStateValues ) ; } }   protected ValidatorHelperResult hasConfidentialIncorrectValues  (   final HttpServletRequest request ,   final String target ,   final String parameter ,   final  String  [ ] values ,   final  List  < String > stateValues )  {   Set  < String >  receivedValues =  new  HashSet  < String >  ( ) ;  for (   int  i = 0 ;  i <  values . length ;  i ++ )  {  if  (  hdivConfig . isParameterWithoutConfidentiality  ( request , parameter ) )  {  return  ValidatorHelperResult . VALID ; }  ValidatorHelperResult  result =  isInRange  ( target , parameter ,  values [ i ] , stateValues ) ;  if  (  !  result . isValid  ( ) )  {  return result ; }  if  (  receivedValues . contains  (  values [ i ] ) )  {  String  originalValue =    stateValues . size  ( ) > 1 ?  stateValues . toString  ( ) :  stateValues . get  ( 0 ) ;  ValidatorError  error =  new ValidatorError  (  HDIVErrorCodes . REPEATED_VALUES , target , parameter ,  values [ i ] , originalValue ) ;  return  new ValidatorHelperResult  ( error ) ; }   receivedValues . add  (  values [ i ] ) ; }  return  ValidatorHelperResult . VALID ; }   protected ValidatorHelperResult hasNonConfidentialIncorrectValues  (   final String target ,   final String parameter ,   final  String  [ ] values ,   final  List  < String > tempStateValues )  {   Set  < String >  receivedValues =  new  HashSet  < String >  ( ) ;  for (   int  i = 0 ;  i <  values . length ;  i ++ )  {  boolean  exists = false ;  for (   int  j = 0 ;   j <  tempStateValues . size  ( ) &&  ! exists ;  j ++ )  {  String  tempValue =  tempStateValues . get  ( j ) ;  if  (  tempValue . equalsIgnoreCase  (  values [ i ] ) )  {   tempStateValues . remove  ( j ) ;   exists = true ; } }  if  (  ! exists )  {  String  originalValue = "" ;  if  (   tempStateValues . size  ( ) == 1 )  {   originalValue =  tempStateValues . get  ( 0 ) ; } else  if  (   tempStateValues . size  ( ) > 1 )  {   originalValue =  tempStateValues . toString  ( ) ; }  if  (  receivedValues . contains  (  values [ i ] ) )  {  ValidatorError  error =  new ValidatorError  (  HDIVErrorCodes . REPEATED_VALUES , target , parameter ,  values [ i ] , originalValue ) ;  return  new ValidatorHelperResult  ( error ) ; }  ValidatorError  error =  new ValidatorError  (  HDIVErrorCodes . PARAMETER_VALUE_INCORRECT , target , parameter ,  values [ i ] , originalValue ) ;  return  new ValidatorHelperResult  ( error ) ; }   receivedValues . add  (  values [ i ] ) ; }  return  ValidatorHelperResult . VALID ; }   protected ValidatorHelperResult isInRange  (   final String target ,   final String parameter ,   final String value ,   final  List  < String > stateValues )  {  Matcher  m =  numberPattern . matcher  ( value ) ;  try  {  if  (   !  m . matches  ( ) ||   Integer . parseInt  ( value ) >=  stateValues . size  ( ) )  {  String  originalValue =    stateValues . size  ( ) > 1 ?  stateValues . toString  ( ) :  stateValues . get  ( 0 ) ;  ValidatorError  error =  new ValidatorError  (  HDIVErrorCodes . CONFIDENTIAL_VALUE_INCORRECT , target , parameter , value , originalValue ) ;  return  new ValidatorHelperResult  ( error ) ; } }  catch (   final  NumberFormatException e )  {  String  originalValue =    stateValues . size  ( ) > 1 ?  stateValues . toString  ( ) :  stateValues . get  ( 0 ) ;  ValidatorError  error =  new ValidatorError  (  HDIVErrorCodes . CONFIDENTIAL_VALUE_INCORRECT , target , parameter , value , originalValue ) ;  return  new ValidatorHelperResult  ( error ) ; }  return  ValidatorHelperResult . VALID ; }   protected ValidatorHelperResult validateReceivedValuesInState  (   final HttpServletRequest request ,   final String target ,   final IParameter stateParameter ,   final  String  [ ] actionParamValues ,   final String parameter ,   final  String  [ ] values )  {   int  size =  values . length ;   String  [ ]  originalValues =  new String  [ size ] ;  for (   int  i = 0 ;  i < size ;  i ++ )  {  IValidationResult  result =  dataValidator . validate  ( request ,  values [ i ] , target , parameter , stateParameter , actionParamValues ) ;  if  (  !  result . getLegal  ( ) )  {  ValidatorError  error =  new ValidatorError  (  HDIVErrorCodes . PARAMETER_VALUE_INCORRECT , target , parameter ,  values [ i ] ) ;  return  new ValidatorHelperResult  ( error ) ; } else  {    originalValues [ i ] =  result . getResult  ( ) ; } }  if  (  hdivConfig . getConfidentiality  ( ) )  {   addParameterToRequest  ( request , parameter , originalValues ) ; }  return  ValidatorHelperResult . VALID ; }   protected void addParameterToRequest  (   final HttpServletRequest request ,   final String name ,   final  String  [ ] value )  {  RequestWrapper  wrapper = null ;  if  (  request instanceof RequestWrapper )  {   wrapper =  ( RequestWrapper ) request ; } else  {   wrapper =  ( RequestWrapper )  getNativeRequest  ( request ,  RequestWrapper . class ) ; }  if  (  wrapper != null )  {   wrapper . addParameter  ( name , value ) ; } else  {  String  errorMessage =  HDIVUtil . getMessage  ( request , "helper.notwrapper" ) ;  throw  new HDIVException  ( errorMessage ) ; } }   protected void addEditableParameter  (   final HttpServletRequest request ,   final String name )  {  if  (  request instanceof RequestWrapper )  {  if  (  log . isDebugEnabled  ( ) )  {   log . debug  (   "Editable parameter [" + name + "] added." ) ; }  RequestWrapper  wrapper =  ( RequestWrapper ) request ;   wrapper . addEditableParameter  ( name ) ; } }   protected ServletRequest getNativeRequest  (   final ServletRequest request ,   final  Class  <  ? > requiredType )  {  if  (  requiredType != null )  {  if  (  requiredType . isInstance  ( request ) )  {  return request ; } else  if  (  request instanceof ServletRequestWrapper )  {  return  getNativeRequest  (   (  ( ServletRequestWrapper ) request ) . getRequest  ( ) , requiredType ) ; } }  return null ; }   protected String getTarget  (   final HttpServletRequest request )  {  try  {  String  requestUri =  request . getRequestURI  ( ) ;   requestUri =  HDIVUtil . stripSession  ( requestUri ) ;  return requestUri ; }  catch (   final  Exception e )  {  String  errorMessage =  HDIVUtil . getMessage  ( request , "helper.actionName" ) ;  throw  new HDIVException  ( errorMessage , e ) ; } }   protected String getTargetWithoutContextPath  (   final HttpServletRequest request ,   final String target )  {  String  targetWithoutContextPath =  target . substring  (   request . getContextPath  ( ) . length  ( ) ) ;  return targetWithoutContextPath ; }   protected String getHdivParameter  (   final HttpServletRequest request )  {  String  paramName =  HDIVUtil . getHdivStateParameterName  ( request ) ;  if  (  paramName == null )  {  throw  new HDIVException  ( "HDIV parameter name missing in session. Deleted by the app?" ) ; }  return paramName ; }   protected ValidatorHelperResult preValidate  (   final HttpServletRequest request ,   final String target )  {  return null ; }   public void startPage  (   final HttpServletRequest request )  {  boolean  exclude =  hdivConfig . hasExtensionToExclude  (  request . getRequestURI  ( ) ) ;  if  (  ! exclude )  {  IDataComposer  dataComposer =  dataComposerFactory . newInstance  ( request ) ;   HDIVUtil . setDataComposer  ( dataComposer , request ) ; } }   public void endPage  (   final HttpServletRequest request )  {  IDataComposer  dataComposer =  HDIVUtil . getDataComposer  ( request ) ;  if  (  dataComposer != null )  {   dataComposer . endPage  ( ) ;  RequestWrapper  wrapper =  HDIVUtil . getNativeRequest  ( request ,  RequestWrapper . class ) ;  if  (   wrapper == null ||  !  wrapper . isAsyncRequest  ( ) )  {   HDIVUtil . removeDataComposer  ( request ) ; } } }   public void setStateUtil  (   final StateUtil stateUtil )  {    this . stateUtil = stateUtil ; }   public void setHdivConfig  (   final HDIVConfig hdivConfig )  {    this . hdivConfig = hdivConfig ; }   public void setSession  (   final ISession session )  {    this . session = session ; }   public void setDataValidator  (   final IDataValidator dataValidator )  {    this . dataValidator = dataValidator ; }   public void setNumberPattern  (   final Pattern numberPattern )  {    this . numberPattern = numberPattern ; }   public void setDataComposerFactory  (   final DataComposerFactory dataComposerFactory )  {    this . dataComposerFactory = dataComposerFactory ; }   public void setUrlProcessor  (   final BasicUrlProcessor urlProcessor )  {    this . urlProcessor = urlProcessor ; }   public void setStateScopeManager  (   final StateScopeManager stateScopeManager )  {    this . stateScopeManager = stateScopeManager ; } }