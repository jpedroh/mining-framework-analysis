  package   org . hdiv . filter ;   import   java . io . IOException ;  import   java . io . PrintWriter ;  import   java . util . List ;  import    javax . servlet . http . HttpServletRequest ;  import    javax . servlet . http . HttpServletResponse ;  import    javax . servlet . http . HttpSession ;  import    org . hdiv . config . HDIVConfig ;  import    org . hdiv . logs . IUserData ;  import    org . hdiv . util . Constants ;  import    org . hdiv . util . HDIVErrorCodes ;   public class DefaultValidatorErrorHandler  implements  ValidatorErrorHandler  {   protected HDIVConfig  config ;   protected DefaultErrorPageWritter  errorPageWritter =  new DefaultErrorPageWritter  ( ) ;   public void handleValidatorError  (  HttpServletRequest request ,  HttpServletResponse response ,   List  < ValidatorError > errors )  {  if  (  this . isPageNotFoundError  ( errors ) )  {  HttpSession  session =  request . getSession  ( false ) ;  if  (   session == null ||  session . isNew  ( ) )  {   this . redirectToLoginPage  ( request , response ) ; } else  {  ValidatorError  error =  errors . get  ( 0 ) ;  String  username =  error . getUserName  ( ) ;  if  (   username == null ||  username ==  IUserData . ANONYMOUS )  {   this . redirectToLoginPage  ( request , response ) ; } else  {   this . redirectToHomePage  ( request , response ) ; } } } else  {   redirectToErrorPage  ( request , response ) ; } }   protected boolean isPageNotFoundError  (   List  < ValidatorError > errors )  {  for ( ValidatorError error : errors )  {  if  (   HDIVErrorCodes . PAGE_ID_INCORRECT . equals  (  error . getType  ( ) ) )  {  return true ; } }  return false ; }   protected void redirectToErrorPage  (  HttpServletRequest request ,  HttpServletResponse response )  {  if  (    this . config . getErrorPage  ( ) != null )  {   redirect  ( response ,   request . getContextPath  ( ) +   this . config . getErrorPage  ( ) ) ; } else  {   redirectToDefaultErrorPage  ( request , response ) ; } }   protected void redirectToLoginPage  (  HttpServletRequest request ,  HttpServletResponse response )  {  if  (    this . config . getSessionExpiredLoginPage  ( ) != null )  {   redirect  ( response ,   request . getContextPath  ( ) +   this . config . getSessionExpiredLoginPage  ( ) ) ; } else  {   redirectToErrorPage  ( request , response ) ; } }   protected void redirectToHomePage  (  HttpServletRequest request ,  HttpServletResponse response )  {  if  (    this . config . getSessionExpiredHomePage  ( ) != null )  {   redirect  ( response ,   request . getContextPath  ( ) +   this . config . getSessionExpiredHomePage  ( ) ) ; } else  {   redirectToErrorPage  ( request , response ) ; } }   protected void redirect  (  HttpServletResponse response ,  String url )  {  try  {   response . sendRedirect  (  response . encodeRedirectURL  ( url ) ) ; }  catch (   IOException e )  {  throw  new RuntimeException  (  "Cant redirect to: " + url , e ) ; } }    @ SuppressWarnings  ( "unchecked" ) protected void redirectToDefaultErrorPage  (  HttpServletRequest request ,  HttpServletResponse response )  {  try  {   response . setContentType  ( "text/html" ) ;  PrintWriter  out =  response . getWriter  ( ) ;   List  < ValidatorError >  editableErrors =  (  List  < ValidatorError > )   request . getSession  ( ) . getAttribute  (  Constants . EDITABLE_PARAMETER_ERROR ) ;    request . getSession  ( ) . removeAttribute  (  Constants . EDITABLE_PARAMETER_ERROR ) ;    this . errorPageWritter . writetErrorPage  ( out , editableErrors ) ;   out . flush  ( ) ; }  catch (   IOException e )  {  throw  new RuntimeException  ( "Cant redirect to the default error page" , e ) ; } }   public void setConfig  (  HDIVConfig config )  {    this . config = config ; } }