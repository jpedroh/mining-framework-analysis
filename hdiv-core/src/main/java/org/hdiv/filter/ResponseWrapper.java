  package   org . hdiv . filter ;   import   java . util . ArrayList ;  import   java . util . HashMap ;  import   java . util . List ;  import   java . util . Map ;  import   java . util . StringTokenizer ;  import    javax . servlet . http . Cookie ;  import    javax . servlet . http . HttpServletRequest ;  import    javax . servlet . http . HttpServletResponse ;  import    javax . servlet . http . HttpServletResponseWrapper ;  import     org . apache . commons . logging . Log ;  import     org . apache . commons . logging . LogFactory ;  import    org . hdiv . util . Constants ;  import    org . hdiv . context . RequestContext ;  import    org . hdiv . session . ISession ;  import    org . springframework . util . Assert ;   public class ResponseWrapper  extends HttpServletResponseWrapper  {   private static final Log  log =  LogFactory . getLog  (  ResponseWrapper . class ) ;   protected static final String  SET_COOKIE = "Set-Cookie" ;   protected  Map  < String , SavedCookie >  cookies =  new  HashMap  < String , SavedCookie >  ( ) ;   protected boolean  confidentiality ;   protected boolean  avoidCookiesConfidentiality ;   public ResponseWrapper  (   final HttpServletRequest request ,   final HttpServletResponse originalResponse )  {  super  ( originalResponse ) ;   Assert . notNull  ( request ) ;   Assert . notNull  ( originalResponse ) ;    this . requestContext =  new RequestContext  ( request ) ;  if  (  log . isDebugEnabled  ( ) )  {   log . debug  ( "New ResponseWrapper instance." ) ; } }    @ Override public void setHeader  (   final String name ,   final String value )  {  String  confidentialValue = value ;  if  (  name . equalsIgnoreCase  ( SET_COOKIE ) )  {    this . cookies . clear  ( ) ;   this . removeCookiesFromSession  ( ) ;   List  < String >  parseValues =  this . parseCookieString  ( value ) ;  if  (   this . confidentiality &&  !  this . avoidCookiesConfidentiality )  {   confidentialValue =  this . replaceOriginalValues  ( parseValues , value ) ; } }   super . setHeader  ( name , confidentialValue ) ; }    @ Override public void addHeader  (   final String name ,   final String value )  {  String  confidentialValue = value ;  if  (  name . equalsIgnoreCase  ( SET_COOKIE ) )  {   List  < String >  parseValues =  this . parseCookieString  ( value ) ;  if  (   this . confidentiality &&  !  this . avoidCookiesConfidentiality )  {   confidentialValue =  this . replaceOriginalValues  ( parseValues , value ) ; } }   super . addHeader  ( name , confidentialValue ) ; }   protected String replaceOriginalValues  (   final  List  < String > values ,  String value )  {  for ( String currentValue : values )  {   value =  value . replaceFirst  (  "=" + currentValue , "=0" ) ; }  return value ; }    @ Override public void reset  ( )  {   super . reset  ( ) ;    this . cookies . clear  ( ) ;   this . removeCookiesFromSession  ( ) ; }   protected  List  < String > parseCookieString  (  String cookieString )  {   final  List  < String >  values =  new  ArrayList  < String >  ( ) ;   cookieString =  cookieString . trim  ( ) ;  StringTokenizer  tokens =  new StringTokenizer  ( cookieString , ";" ) ;  while  (  tokens . hasMoreTokens  ( ) )  {  StringTokenizer  t =  new StringTokenizer  (  tokens . nextToken  ( ) , "=" ) ;  String  name =   t . nextToken  ( ) . trim  ( ) ;  if  (  t . hasMoreTokens  ( ) )  {  String  value =   t . nextToken  ( ) . trim  ( ) ;    this . cookies . put  ( name ,  new SavedCookie  ( name , value ) ) ;   values . add  ( value ) ; } }   this . updateSessionCookies  ( ) ;  return values ; }    @ Override public void addCookie  (   final Cookie cookie )  {    this . cookies . put  (  cookie . getName  ( ) ,  new SavedCookie  ( cookie ) ) ;   this . updateSessionCookies  ( ) ;  if  (   this . confidentiality &&  !  this . avoidCookiesConfidentiality )  {   cookie . setValue  ( "0" ) ; }   super . addCookie  ( cookie ) ; }    @ SuppressWarnings  ( "unchecked" ) protected void updateSessionCookies  ( )  {   Map  < String , SavedCookie >  sessionOriginalCookies =   this . session . getAttribute  (  this . requestContext ,  Constants . HDIV_COOKIES_KEY ,  Map . class ) ;  if  (   sessionOriginalCookies != null &&   sessionOriginalCookies . size  ( ) > 0 )  {   sessionOriginalCookies . putAll  (  this . cookies ) ;    this . session . setAttribute  (  this . requestContext ,  Constants . HDIV_COOKIES_KEY , sessionOriginalCookies ) ; } else  {    this . session . setAttribute  (  this . requestContext ,  Constants . HDIV_COOKIES_KEY ,  this . cookies ) ; } }   protected void removeCookiesFromSession  ( )  {    this . session . removeAttribute  (  this . requestContext ,  Constants . HDIV_COOKIES_KEY ) ; }   public  Map  < String , SavedCookie > getCookies  ( )  {  return  this . cookies ; }   public void setConfidentiality  (   final boolean confidentiality )  {    this . confidentiality = confidentiality ; }   public void setAvoidCookiesConfidentiality  (   final boolean avoidCookiesConfidentiality )  {    this . avoidCookiesConfidentiality = avoidCookiesConfidentiality ; }   protected RequestContext  requestContext ;   protected ISession  session ;   public void setSession  (  ISession session )  {    this . session = session ; } }