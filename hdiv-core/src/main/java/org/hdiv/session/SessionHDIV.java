  package   org . hdiv . session ;   import    javax . servlet . http . HttpSession ;  import     org . apache . commons . logging . Log ;  import     org . apache . commons . logging . LogFactory ;  import    org . hdiv . context . RequestContext ;  import    org . hdiv . exception . HDIVException ;  import    org . hdiv . idGenerator . PageIdGenerator ;  import    org . hdiv . state . IPage ;  import    org . hdiv . state . IState ;  import    org . hdiv . util . Constants ;  import    org . hdiv . util . HDIVErrorCodes ;  import     org . springframework . beans . factory . BeanFactory ;  import     org . springframework . beans . factory . BeanFactoryAware ;  import    org . springframework . util . Assert ;   public class SessionHDIV  implements  ISession , BeanFactoryAware  {   private static final Log  log =  LogFactory . getLog  (  SessionHDIV . class ) ;   private BeanFactory  beanFactory ;   private String  pageIdGeneratorName =  Constants . PAGE_ID_GENERATOR_NAME ;   public final  int getPageId  (   final RequestContext context )  {  HttpSession  session =   context . getRequest  ( ) . getSession  ( ) ;  PageIdGenerator  pageIdGenerator =  ( PageIdGenerator )  session . getAttribute  ( pageIdGeneratorName ) ;  if  (  pageIdGenerator == null )  {   pageIdGenerator =  beanFactory . getBean  (  PageIdGenerator . class ) ; }  if  (  pageIdGenerator == null )  {  throw  new HDIVException  ( "session.nopageidgenerator" ) ; }   int  id =  pageIdGenerator . getNextPageId  ( ) ;  if  (  id <= 0 )  {  throw  new HDIVException  (   "Incorrect PageId generated [" + id + "]. PageId must be greater than 0." ) ; }   session . setAttribute  ( pageIdGeneratorName , pageIdGenerator ) ;  return id ; }   public IPage getPage  (   final RequestContext context ,   final  int pageId )  {  try  {  return  cache . findPage  (  new SimpleCacheKey  ( context , pageId ) ) ; }  catch (   final  IllegalStateException e )  {  throw  new HDIVException  (  HDIVErrorCodes . PAGE_ID_INCORRECT , e ) ; } }   public void addPage  (   final RequestContext context ,   final IPage page )  {   addPageToSession  ( context , page , false ) ; }   public void addPartialPage  (   final RequestContext context ,   final IPage page )  {   addPageToSession  ( context , page , true ) ; }   public void removeEndedPages  (   final RequestContext context ,   final String conversationId )  {  if  (  cache instanceof HTTPSessionCache )  {   cache . removeEndedPages  ( context , conversationId ) ; } else  {   log . error  (  "Remove ended pages not supported by cache:" + cache ) ; } }   public IState getState  (   final RequestContext context ,   final  int pageId ,   final  int stateId )  {  try  {  return   getPage  ( context , pageId ) . getState  ( stateId ) ; }  catch (   final  Exception e )  {  throw  new HDIVException  (  HDIVErrorCodes . PAGE_ID_INCORRECT , e ) ; } }   protected void addPageToSession  (   final RequestContext context ,   final IPage page ,   final boolean isPartial )  {   cache . insertPage  (  new SimpleCacheKey  ( context ,  page . getId  ( ) ) , page ) ; }   public void setBeanFactory  (   final BeanFactory beanFactory )  {    this . beanFactory = beanFactory ;  if  (  cache instanceof HTTPSessionCache )  {   cache . setBeanFactory  ( beanFactory ) ; } }   public void setPageIdGeneratorName  (   final String pageIdGeneratorName )  {    this . pageIdGeneratorName = pageIdGeneratorName ; }    @ Deprecated public final void addPage  (   final RequestContext context ,   final  int pageId ,   final IPage page )  {   addPage  ( context , page ) ; }    @ Deprecated public final void addPartialPage  (   final RequestContext context ,   final  int pageId ,   final IPage page )  {   addPartialPage  ( context , page ) ; }   protected final HTTPSessionCache  cache =  new HTTPSessionCache  ( ) ;   public String getAttribute  (   final RequestContext context ,   final String name )  {   Assert . notNull  ( context ) ;   Assert . notNull  ( name ) ;  return  ( String )   context . getSession  ( ) . getAttribute  ( name ) ; }    @ SuppressWarnings  ( "unchecked" ) public  <  T > T getAttribute  (   final RequestContext context ,   final String name ,   final  Class  < T > requiredType )  {   Assert . notNull  ( context ) ;   Assert . notNull  ( name ) ;   Assert . notNull  ( requiredType ) ;  Object  result =   context . getSession  ( ) . getAttribute  ( name ) ;  if  (  result == null )  {  return null ; } else  if  (  requiredType . isInstance  ( result ) )  {  return  ( T ) result ; } else  {  throw  new IllegalArgumentException  (    "Attibute with name '" + name + "' is not of required type " +  requiredType . getCanonicalName  ( ) ) ; } }   public void setAttribute  (   final RequestContext context ,   final String name ,   final Object value )  {   Assert . notNull  ( context ) ;   Assert . notNull  ( name ) ;    context . getSession  ( ) . setAttribute  ( name , value ) ; }   public void removeAttribute  (   final RequestContext context ,   final String name )  {   Assert . notNull  ( context ) ;   Assert . notNull  ( name ) ;    context . getSession  ( ) . removeAttribute  ( name ) ; } }