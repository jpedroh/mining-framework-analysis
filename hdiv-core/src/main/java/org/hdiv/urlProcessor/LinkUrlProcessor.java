  package   org . hdiv . urlProcessor ;   import    javax . servlet . http . HttpServletRequest ;  import     org . apache . commons . logging . Log ;  import     org . apache . commons . logging . LogFactory ;  import    org . hdiv . dataComposer . IDataComposer ;  import    org . hdiv . util . Constants ;  import    org . hdiv . util . HDIVUtil ;  import    org . hdiv . util . Method ;   public class LinkUrlProcessor  extends AbstractUrlProcessor  {   private static final Log  log =  LogFactory . getLog  (  LinkUrlProcessor . class ) ;   public String processUrl  (   final HttpServletRequest request ,   final String url )  {  return  this . processUrl  ( request , url ,  Constants . ENCODING_UTF_8 ) ; }   public String processUrl  (   final HttpServletRequest request ,  String url ,   final String encoding )  {  IDataComposer  dataComposer =  HDIVUtil . getDataComposer  ( request ) ;  if  (  dataComposer == null )  {  if  (  log . isDebugEnabled  ( ) )  {   log . debug  ( "IDataComposer not initialized on request. Request doesn't pass through ValidatorFilter, review it's mapping" ) ; }  return url ; }  String  hdivParameter =  HDIVUtil . getHdivStateParameterName  ( request ) ;  UrlData  urlData =  createUrlData  ( url ,  Method . GET , hdivParameter , request ) ;  if  (  isHdivStateNecessary  ( urlData ) )  {   dataComposer . beginRequest  (  Method . GET ,  urlData . getUrlWithoutContextPath  ( ) ) ;   urlData . setUrlParams  (  dataComposer . composeParams  (  urlData . getUrlParams  ( ) ,  Method . GET , encoding ) ) ;  String  stateParam =  dataComposer . endRequest  ( ) ;   url =  getProcessedUrlWithHdivState  ( hdivParameter , urlData , stateParam ) ; }  return url ; } }