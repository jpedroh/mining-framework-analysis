  package   org . hdiv . urlProcessor ;   import   java . io . UnsupportedEncodingException ;  import   java . net . URLDecoder ;  import   java . util . Arrays ;  import   java . util . LinkedHashMap ;  import   java . util . List ;  import   java . util . Map ;  import   java . util . Stack ;  import   java . util . StringTokenizer ;  import    javax . servlet . http . HttpServletRequest ;  import    org . hdiv . config . HDIVConfig ;  import    org . hdiv . regex . PatternMatcher ;  import    org . hdiv . util . Constants ;  import    org . hdiv . util . HDIVUtil ;  import    org . hdiv . util . Method ;  import    org . springframework . util . Assert ;  import     org . springframework . web . util . HtmlUtils ;   public abstract class AbstractUrlProcessor  {   protected HDIVConfig  config ;    @ Deprecated public final UrlData createUrlData  (   final String url ,   final String method ,   final HttpServletRequest request )  {  return  createUrlData  ( url ,  Method . secureValueOf  ( method ) ,  ( String )   request . getSession  ( ) . getAttribute  (  Constants . HDIV_PARAMETER ) , request ) ; }   protected final String processAnchorAndParameters  (  String url ,   final UrlData urlData ,   final String hdivParameter )  {   url =  urlData . findAnchor  ( url ) ;   final  int  paramInit =  url . indexOf  ( '?' ) ;  if  (  paramInit >  - 1 )  {   urlData . setUrlParams  (  removeStateParameter  ( hdivParameter ,  url . substring  (  paramInit + 1 ) ) ) ;   url =  url . substring  ( 0 , paramInit ) ; }  return url ; }   public UrlData createUrlData  (  String url ,   final Method method ,   final String hdivParameter ,   final HttpServletRequest request )  {   Assert . notNull  ( config ) ;   final String  contextPath =  request . getContextPath  ( ) ;   final String  serverName =  request . getServerName  ( ) ;   final String  baseURL =  getBaseURL  ( request ) ;   final UrlData  urlData =  new UrlData  ( url , method ) ;  if  (  urlData . hasUriTemplate  ( ) )  {   url =  urlData . getUrlWithOutUriTemplate  ( ) ; }   url =  processAnchorAndParameters  ( url , urlData , hdivParameter ) ;   final String  serverUrl =  getServerFromUrl  ( url ) ;  if  (   serverUrl != null &&   serverUrl . length  ( ) > 0 )  {   urlData . setServer  ( serverUrl ) ;   url =  url . replaceFirst  ( serverUrl , "" ) ; }   url =  stripSession  ( url , urlData ) ;  String  contextPathRelativeUrl =  getContextPathRelative  ( baseURL , url ) ;   urlData . setContextPathRelativeUrl  ( contextPathRelativeUrl ) ;  boolean  internal =  isInternalUrl  ( serverName , contextPath , contextPathRelativeUrl , urlData ) ;   urlData . setInternal  ( internal ) ;  if  ( internal )  {  String  urlWithoutContextPath =  contextPathRelativeUrl . substring  (  contextPath . length  ( ) ) ;   urlData . setUrlWithoutContextPath  ( urlWithoutContextPath ) ; }  return urlData ; }   protected final String getBaseURL  (   final HttpServletRequest request )  {  String  baseUrl =  HDIVUtil . getBaseURL  ( request ) ;  if  (  baseUrl != null )  {   final String  serverUrl =  getServerFromUrl  ( baseUrl ) ;  if  (   serverUrl != null &&   serverUrl . length  ( ) > 0 )  {   baseUrl =  baseUrl . replaceFirst  ( serverUrl , "" ) ; } } else  {   baseUrl =  HDIVUtil . getRequestURI  ( request ) ; }  return baseUrl ; }   protected final String removeStateParameter  (   final String hdivParameter ,   final String params )  {  if  (   params == null ||  !  params . contains  ( hdivParameter ) )  {  return params ; }   int  start =  params . indexOf  ( hdivParameter ) ;  if  (    start > 0 &&   params . charAt  (  start - 1 ) != '?' &&   params . charAt  (  start - 1 ) != '&' )  {  return params ; }   int  end =  params . indexOf  ( "&" , start ) ;  if  (  end < 0 )  {   end =  params . indexOf  ( "#" , start ) ; }  if  (  end < 0 )  {   end =  params . length  ( ) ; }  String  result =  params . substring  ( 0 , start ) ;   result =  result +  params . substring  ( end ,  params . length  ( ) ) ;  if  (  result . endsWith  ( "&" ) )  {   result =  result . substring  ( 0 ,   result . length  ( ) - 1 ) ; }  return result ; }   public  Map  < String ,  String  [ ] > getUrlParamsAsMap  (   final HttpServletRequest request ,   final String urlParams )  {   Map  < String ,  String  [ ] >  params =  new  LinkedHashMap  < String ,  String  [ ] >  ( ) ;  if  (  urlParams == null )  {  return params ; }  String  value =  urlParams . replaceAll  ( "&amp;" , "&" ) ;  String  hdivParameter =  HDIVUtil . getHdivStateParameterName  ( request ) ;  StringTokenizer  st =  new StringTokenizer  ( value , "&" ) ;  while  (  st . hasMoreTokens  ( ) )  {  String  token =  st . nextToken  ( ) ;   int  index =  token . indexOf  ( '=' ) ;  String  param = "" ;  String  val = "" ;  if  (  index >  - 1 )  {   param =  token . substring  ( 0 , index ) ;   val =  token . substring  (  index + 1 ) ; } else  {   param = token ; }   val =  getDecodedValue  ( val ,  Constants . ENCODING_UTF_8 ) ;  if  (  !  param . equals  ( hdivParameter ) )  {   String  [ ]  values =  params . get  ( param ) ;  if  (  values == null )  {   values =  new String  [ ]  { val } ; } else  {   int  l =  values . length ;   values =  Arrays . copyOf  ( values ,  l + 1 ) ;    values [ l ] = val ; }   params . put  ( param , values ) ; } }  return params ; }   protected String getDecodedValue  (   final String value ,   final String charEncoding )  {  if  (   value == null ||   value . length  ( ) == 0 )  {  return "" ; }  String  decodedValue ;  try  {   decodedValue =  URLDecoder . decode  ( value , charEncoding ) ; }  catch (   final  UnsupportedEncodingException e )  {   decodedValue = value ; }  catch (   final  IllegalArgumentException e )  {   decodedValue = value ; }  if  (  decodedValue . contains  ( "&" ) )  {   decodedValue =  HtmlUtils . htmlUnescape  ( decodedValue ) ; }  return   (  decodedValue == null ) ? "" : decodedValue ; }   protected boolean isStartPage  (   final UrlData urlData )  {  return  config . isStartPage  (  urlData . getUrlWithoutContextPath  ( ) ,  urlData . getMethod  ( ) ) ; }   public String getProcessedUrlWithHdivState  (   final String hdivParameter ,   final UrlData urlData ,   final String stateParam )  {  StringBuilder  sb =  urlData . getParamProcessedUrl  ( ) ;  if  (   stateParam == null ||   stateParam . length  ( ) <= 0 )  {  return  sb . toString  ( ) ; }   char  separator =   (  urlData . containsParams  ( ) ) ? '&' : '?' ;      sb . append  ( separator ) . append  ( hdivParameter ) . append  ( '=' ) . append  ( stateParam ) ;   sb . append  (   urlData . getUriTemplate  ( ) . replace  ( '?' , '&' ) ) ;   appendAnchor  ( sb ,  urlData . getAnchor  ( ) ) ;  return  sb . toString  ( ) ; }   public String getProcessedUrl  (   final UrlData urlData )  {  StringBuilder  url =  urlData . getParamProcessedUrl  ( ) ;   appendAnchor  ( url ,  urlData . getAnchor  ( ) ) ;  return  url . toString  ( ) ; }   protected void appendAnchor  (   final StringBuilder url ,   final String anchor )  {  if  (  anchor != null )  {    url . append  ( '#' ) . append  ( anchor ) ; } }   public boolean isHdivStateNecessary  (   final UrlData urlData )  {  if  (  urlData . isJS  ( ) )  {  return false ; }  if  (  !  urlData . isInternal  ( ) )  {  return false ; }  boolean  startPage =  isStartPage  ( urlData ) ;  if  ( startPage )  {  return false ; }  if  (  hasExtensionToExclude  ( urlData ) )  {  return false ; }  boolean  validateParamLessUrls =  config . isValidationInUrlsWithoutParamsActivated  ( ) ;  if  (    urlData . isGetMethod  ( ) &&  ! validateParamLessUrls &&  !  urlData . containsParams  ( ) )  {  return false ; }  return true ; }   protected boolean isInternalUrl  (   final String serverName ,   final String contextPath ,   final String url ,   final UrlData urlData )  {  if  (   urlData . getServer  ( ) != null )  {  if  (  !   urlData . getServer  ( ) . contains  ( serverName ) )  {  return false ; }  if  (   url . startsWith  ( contextPath ) &&  (    url . length  ( ) ==  contextPath . length  ( ) ||   url . charAt  (  contextPath . length  ( ) ) == '/' ) )  {  return true ; }  return false ; } else  {  if  (   url . startsWith  ( contextPath ) &&  (    url . length  ( ) ==  contextPath . length  ( ) ||   url . charAt  (  contextPath . length  ( ) ) == '/' ) )  {  return true ; } else  if  (   url . charAt  ( 0 ) == '/' )  {  return false ; } else  {  return true ; } } }   protected String getServerFromUrl  (  String url )  {   final  int  pos =  url . indexOf  ( "://" ) ;  if  (  pos > 0 )  {   int  posicion =  url . indexOf  ( "/" ,  pos + 3 ) ;  if  (  posicion > 0 )  {   url =  url . substring  ( 0 , posicion ) ;  return url ; } else  {  return url ; } }  return null ; }   protected boolean hasExtensionToExclude  (   final UrlData urlData )  {  String  contextPathRelativeUrl =  urlData . getContextPathRelativeUrl  ( ) ;  if  (   contextPathRelativeUrl . charAt  (   contextPathRelativeUrl . length  ( ) - 1 ) == '/' )  {  return false ; }   List  < String >  excludedExtensions =  config . getExcludedURLExtensions  ( ) ;  if  (  excludedExtensions != null )  {  for (   int  i = 0 ;  i <  excludedExtensions . size  ( ) ;  i ++ )  {  if  (  contextPathRelativeUrl . endsWith  (  excludedExtensions . get  ( i ) ) )  {  return true ; } } }  if  (  contextPathRelativeUrl . endsWith  ( ".jsp" ) )  {  return false ; }   List  < PatternMatcher >  protectedExtension =  config . getProtectedURLPatterns  ( ) ;  for (   int  i = 0 ;   protectedExtension != null &&  i <  protectedExtension . size  ( ) ;  i ++ )  {  PatternMatcher  extensionPattern =  protectedExtension . get  ( i ) ;  if  (  extensionPattern . matches  ( contextPathRelativeUrl ) )  {  return false ; } }  return   (   contextPathRelativeUrl . charAt  ( 0 ) != '/' ) &&  (   contextPathRelativeUrl . indexOf  ( '.' ) ==  - 1 ) ; }   protected final String getContextPathRelative  (   final String baseUrl ,   final String url )  {  String  returnValue ;  if  (  url . equals  ( "" ) )  {  return baseUrl ; } else  if  (   url . charAt  ( 0 ) == '/' )  {   returnValue = url ; } else  if  (  url . startsWith  ( ".." ) )  {   returnValue = url ; } else  {  String  uri = baseUrl ;   uri =  uri . substring  (  uri . indexOf  ( '/' ) ,  uri . lastIndexOf  ( '/' ) ) ;   returnValue =   uri + "/" + url ; }  return  removeRelativePaths  ( returnValue , baseUrl ) ; }   protected String removeRelativePaths  (   final String url ,   final String originalRequestUri )  {  String  urlWithoutRelativePath = url ;  if  (  url . startsWith  ( ".." ) )  {   Stack  < String >  stack =  new  Stack  < String >  ( ) ;  String  localUri =  originalRequestUri . substring  (  originalRequestUri . indexOf  ( '/' ) ,  originalRequestUri . lastIndexOf  ( '/' ) ) ;  StringTokenizer  localUriParts =  new StringTokenizer  (  localUri . replace  ( '\\' , '/' ) , "/" ) ;  while  (  localUriParts . hasMoreTokens  ( ) )  {  String  part =  localUriParts . nextToken  ( ) ;   stack . push  ( part ) ; }  StringTokenizer  pathParts =  new StringTokenizer  (  url . replace  ( '\\' , '/' ) , "/" ) ;  while  (  pathParts . hasMoreTokens  ( ) )  {  String  part =  pathParts . nextToken  ( ) ;  if  (  !  part . equals  ( "." ) )  {  if  (  part . equals  ( ".." ) )  {   stack . pop  ( ) ; } else  {   stack . push  ( part ) ; } } }  StringBuilder  flatPathBuffer =  new StringBuilder  ( ) ;  for (   int  i = 0 ;  i <  stack . size  ( ) ;  i ++ )  {    flatPathBuffer . append  ( '/' ) . append  (  stack . elementAt  ( i ) ) ; }   urlWithoutRelativePath =  flatPathBuffer . toString  ( ) ; }  return urlWithoutRelativePath ; }   public static String stripSession  (   final String url ,   final UrlData urlData )  {  return  HDIVUtil . stripAndFillSessionData  ( url , urlData ) ; }   public void setConfig  (   final HDIVConfig config )  {    this . config = config ; } }