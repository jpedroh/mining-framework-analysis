  package   org . hdiv . config ;   import   java . io . Serializable ;  import   java . util . ArrayList ;  import   java . util . Arrays ;  import   java . util . HashMap ;  import   java . util . List ;  import   java . util . Map ;  import    javax . servlet . http . HttpServletRequest ;  import    org . hdiv . regex . PatternMatcher ;  import    org . hdiv . regex . PatternMatcherFactory ;  import    org . hdiv . state . IPage ;  import    org . hdiv . util . Method ;  import    org . hdiv . validator . EditableDataValidationProvider ;  import    org . hdiv . util . HDIVUtil ;   public class HDIVConfig  implements  Serializable  {   private static final  long  serialVersionUID = 1L ;   private static final Strategy  DEFAULT_STRATEGY =  Strategy . MEMORY ;   private static final String  DEFAULT_STATE_PARAMETER_NAME = "_HDIV_STATE_" ;   private static final String  DEFAULT_MODIFY_STATE_PARAMETER_NAME = "_MODIFY_HDIV_STATE_" ;   protected transient PatternMatcherFactory  patternMatcherFactory ;   protected  StartPage  [ ]  startPages =  new StartPage  [ 0 ] ;   protected  List  < PatternMatcher >  startParameters =  new  ArrayList  < PatternMatcher >  ( ) ;   protected String  errorPage ;   protected String  sessionExpiredLoginPage ;   protected String  sessionExpiredHomePage ;   protected boolean  confidentiality = true ;   protected  Map  < PatternMatcher ,  List  < PatternMatcher > >  paramsWithoutValidation ;   protected EditableDataValidationProvider  editableDataValidationProvider ;   protected boolean  avoidCookiesIntegrity = false ;   protected boolean  avoidCookiesConfidentiality = false ;   protected boolean  avoidValidationInUrlsWithoutParams = false ;   protected  List  < PatternMatcher >  protectedURLPatterns ;   protected  List  < String >  excludedURLExtensions ;   protected boolean  randomName = false ;   protected String  stateParameterName = DEFAULT_STATE_PARAMETER_NAME ;   protected String  modifyStateParameterName = DEFAULT_MODIFY_STATE_PARAMETER_NAME ;   protected Strategy  strategy = DEFAULT_STRATEGY ;   protected boolean  debugMode = false ;   protected boolean  showErrorPageOnEditableValidation = false ;   protected boolean  reuseExistingPageInAjaxRequest = false ;   protected  Map  < PatternMatcher , String >  longLivingPages =  new  HashMap  < PatternMatcher , String >  ( ) ;   public void setStrategy  (   final Strategy strategy )  {    this . strategy = strategy ; }   public boolean isStartParameter  (   final String parameter )  {  for ( PatternMatcher matcher : startParameters )  {  if  (  matcher . matches  ( parameter ) )  {  return true ; } }  return false ; }   private void addStartPage  (   final StartPage page )  {   List  < StartPage >  pages =  new  ArrayList  < StartPage >  (  Arrays . asList  ( startPages ) ) ;   pages . add  ( page ) ;   startPages =  pages . toArray  (  new StartPage  [  pages . size  ( ) ] ) ; }    @ Deprecated public final boolean isStartPage  (   final String target ,   final String method )  {  return  isStartPage  ( target ,  Method . secureValueOf  ( method ) ) ; }   public boolean isStartPage  (   final String target ,   final Method method )  {  for (   int  i = 0 ;  i <  startPages . length ;  i ++ )  {  StartPage  startPage =  startPages [ i ] ;  PatternMatcher  m =  startPage . compiledPattern ;  if  (  m . matches  ( target ) )  {  if  (   startPage . isAnyMethod  ( ) ||   startPage . method == method )  {  return true ; } } }  return false ; }   public boolean hasExtensionToExclude  (  String path )  {  if  (  excludedURLExtensions == null )  {  return false ; }   int  pos =  path . indexOf  ( '?' ) ;  if  (  pos > 0 )  {   path =  path . substring  ( 0 , pos ) ; }  if  (   path . length  ( ) == 0 )  {  return false ; }  if  (   path . charAt  (   path . length  ( ) - 1 ) == '/' )  {  return false ; }   int  pound =  path . indexOf  ( '#' ) ;  if  (  pound >= 0 )  {   path =  path . substring  ( 0 , pound ) ; }   int  size =  excludedURLExtensions . size  ( ) ;  for (   int  i = 0 ;  i < size ;  i ++ )  {  if  (  path . endsWith  (  excludedURLExtensions . get  ( i ) ) )  {  return true ; } }  return false ; }   public boolean isParameterWithoutConfidentiality  (   final HttpServletRequest request ,   final String paramName )  {  String  modifyHdivStateParameterName =  HDIVUtil . getModifyHdivStateParameterName  ( request ) ;  if  (   modifyHdivStateParameterName != null &&  modifyHdivStateParameterName . equals  ( paramName ) )  {  return true ; }  return false ; }   public boolean isParameterWithoutValidation  (   final String action ,   final String parameter )  {  if  (  action == null )  {  return false ; }  if  (  paramsWithoutValidation == null )  {  return false ; }  for ( PatternMatcher matcher :  paramsWithoutValidation . keySet  ( ) )  {  if  (  matcher . matches  ( action ) )  {  for ( PatternMatcher paramMatcher :  paramsWithoutValidation . get  ( matcher ) )  {  if  (  paramMatcher . matches  ( parameter ) )  {  return true ; } } } }  return false ; }   public String isLongLivingPages  (   final String url )  {  for (   Map . Entry  < PatternMatcher , String > page :  longLivingPages . entrySet  ( ) )  {  PatternMatcher  m =  page . getKey  ( ) ;  if  (  m . matches  ( url ) )  {  return  page . getValue  ( ) ; } }  return null ; }   public boolean needValidation  (   final String parameter ,   final String hdivParameter )  {  if  (   isStartParameter  ( parameter ) ||  parameter . equals  ( hdivParameter ) )  {  return false ; }  return true ; }   public String getErrorPage  ( )  {  return errorPage ; }   public void setErrorPage  (  String errorPage )  {  if  (   errorPage != null &&  !  errorPage . startsWith  ( "/" ) )  {   errorPage =  "/" + errorPage ; }    this . errorPage = errorPage ;  if  (  errorPage != null )  {  PatternMatcher  matcher =  patternMatcherFactory . getPatternMatcher  ( errorPage ) ;   addStartPage  (  new StartPage  (  ( Method ) null , matcher ) ) ; } }   public String getSessionExpiredLoginPage  ( )  {  return sessionExpiredLoginPage ; }   public void setSessionExpiredLoginPage  (  String sessionExpiredLoginPage )  {  if  (   sessionExpiredLoginPage != null &&  !  sessionExpiredLoginPage . startsWith  ( "/" ) )  {   sessionExpiredLoginPage =  "/" + sessionExpiredLoginPage ; }    this . sessionExpiredLoginPage = sessionExpiredLoginPage ;  if  (  sessionExpiredLoginPage != null )  {  PatternMatcher  matcher =  patternMatcherFactory . getPatternMatcher  ( sessionExpiredLoginPage ) ;   addStartPage  (  new StartPage  (  ( Method ) null , matcher ) ) ; } }   public String getSessionExpiredHomePage  ( )  {  return sessionExpiredHomePage ; }   public void setSessionExpiredHomePage  (  String sessionExpiredHomePage )  {  if  (   sessionExpiredHomePage != null &&  !  sessionExpiredHomePage . startsWith  ( "/" ) )  {   sessionExpiredHomePage =  "/" + sessionExpiredHomePage ; }    this . sessionExpiredHomePage = sessionExpiredHomePage ;  if  (  sessionExpiredHomePage != null )  {  PatternMatcher  matcher =  patternMatcherFactory . getPatternMatcher  ( sessionExpiredHomePage ) ;   addStartPage  (  new StartPage  (  ( Method ) null , matcher ) ) ; } }   public boolean getConfidentiality  ( )  {  return confidentiality ; }   public void setConfidentiality  (   final boolean confidentiality )  {    this . confidentiality = confidentiality ; }   public void setParamsWithoutValidation  (   final  Map  < String ,  List  < String > > paramsWithoutValidation )  {    this . paramsWithoutValidation =  new  HashMap  < PatternMatcher ,  List  < PatternMatcher > >  ( ) ;  for ( String url :  paramsWithoutValidation . keySet  ( ) )  {  PatternMatcher  matcher =  patternMatcherFactory . getPatternMatcher  ( url ) ;   List  < PatternMatcher >  paramMatchers =  new  ArrayList  < PatternMatcher >  ( ) ;  for ( String param :  paramsWithoutValidation . get  ( url ) )  {  PatternMatcher  paramMatcher =  patternMatcherFactory . getPatternMatcher  ( param ) ;   paramMatchers . add  ( paramMatcher ) ; }    this . paramsWithoutValidation . put  ( matcher , paramMatchers ) ; } }   public void setUserStartPages  (   final  List  < StartPage > userStartPages )  {  for ( StartPage startPage : userStartPages )  {  PatternMatcher  matcher =  patternMatcherFactory . getPatternMatcher  (  startPage . getPattern  ( ) ) ;   startPage . setCompiledPattern  ( matcher ) ;   addStartPage  ( startPage ) ; } }   public void setUserStartParameters  (   final  List  < String > userStartParameters )  {  for ( String useStartParameter : userStartParameters )  {   startParameters . add  (  patternMatcherFactory . getPatternMatcher  ( useStartParameter ) ) ; } }   public boolean isCookiesConfidentialityActivated  ( )  {  return  (  avoidCookiesConfidentiality == false ) ; }   public void setAvoidCookiesConfidentiality  (   final boolean avoidCookiesConfidentiality )  {    this . avoidCookiesConfidentiality = avoidCookiesConfidentiality ; }   public boolean isCookiesIntegrityActivated  ( )  {  return  (  avoidCookiesIntegrity == false ) ; }   public void setAvoidCookiesIntegrity  (   final boolean avoidCookiesIntegrity )  {    this . avoidCookiesIntegrity = avoidCookiesIntegrity ; }   public boolean isValidationInUrlsWithoutParamsActivated  ( )  {  return  (  avoidValidationInUrlsWithoutParams == false ) ; }   public void setAvoidValidationInUrlsWithoutParams  (   final Boolean avoidValidationInUrlsWithoutParams )  {    this . avoidValidationInUrlsWithoutParams =  avoidValidationInUrlsWithoutParams . booleanValue  ( ) ; }   public void setProtectedExtensions  (   final  List  < String > protectedExtensions )  {   protectedURLPatterns =  new  ArrayList  < PatternMatcher >  ( ) ;  for ( String protectedExtension : protectedExtensions )  {   protectedURLPatterns . add  (  patternMatcherFactory . getPatternMatcher  ( protectedExtension ) ) ; } }   public void setExcludedExtensions  (   final  List  < String > excludedExtensions )  {  if  (  excludedURLExtensions == null )  {   excludedURLExtensions =  new  ArrayList  < String >  ( ) ; }   excludedURLExtensions . addAll  ( excludedExtensions ) ; }   public  List  < PatternMatcher > getProtectedURLPatterns  ( )  {  return protectedURLPatterns ; }   public  List  < String > getExcludedURLExtensions  ( )  {  return excludedURLExtensions ; }   public boolean isRandomName  ( )  {  return randomName ; }   public void setRandomName  (   final boolean randomName )  {    this . randomName = randomName ; }   public Strategy getStrategy  ( )  {  return strategy ; }   public boolean isDebugMode  ( )  {  return debugMode ; }   public void setDebugMode  (   final boolean debugMode )  {    this . debugMode = debugMode ; }   public boolean isShowErrorPageOnEditableValidation  ( )  {  return showErrorPageOnEditableValidation ; }   public void setShowErrorPageOnEditableValidation  (   final boolean showErrorPageOnEditableValidation )  {    this . showErrorPageOnEditableValidation = showErrorPageOnEditableValidation ; }   public boolean isReuseExistingPageInAjaxRequest  ( )  {  return reuseExistingPageInAjaxRequest ; }   public void setReuseExistingPageInAjaxRequest  (   final boolean reuseExistingPageInAjaxRequest )  {    this . reuseExistingPageInAjaxRequest = reuseExistingPageInAjaxRequest ; }   public void setPatternMatcherFactory  (   final PatternMatcherFactory patternMatcherFactory )  {    this . patternMatcherFactory = patternMatcherFactory ; }   public String getStateParameterName  ( )  {  return stateParameterName ; }   public void setStateParameterName  (   final String stateParameterName )  {    this . stateParameterName = stateParameterName ; }   public String getModifyStateParameterName  ( )  {  return modifyStateParameterName ; }   public void setModifyStateParameterName  (   final String modifyStateParameterName )  {    this . modifyStateParameterName = modifyStateParameterName ; }   public void setLongLivingPages  (   final  Map  < String , String > longLivingPages )  {  for (   Map . Entry  < String , String > page :  longLivingPages . entrySet  ( ) )  {  PatternMatcher  pattern =  patternMatcherFactory . getPatternMatcher  (  page . getKey  ( ) ) ;  String  scope =  page . getValue  ( ) ;    this . longLivingPages . put  ( pattern , scope ) ; } }   public void setEditableDataValidationProvider  (   final EditableDataValidationProvider editableDataValidationProvider )  {    this . editableDataValidationProvider = editableDataValidationProvider ; }   public EditableDataValidationProvider getEditableDataValidationProvider  ( )  {  return editableDataValidationProvider ; }    @ Override public String toString  ( )  {  StringBuilder  result =   new StringBuilder  ( ) . append  ( "" ) ;   result =   result . append  ( " Confidentiality=" ) . append  (  getConfidentiality  ( ) ) ;    result . append  ( " avoidCookiesIntegrity=" ) . append  ( avoidCookiesIntegrity ) ;    result . append  ( " avoidCookiesConfidentiality=" ) . append  ( avoidCookiesConfidentiality ) ;    result . append  ( " avoidValidationInUrlsWithoutParams=" ) . append  ( avoidValidationInUrlsWithoutParams ) ;    result . append  ( " strategy=" ) . append  (  getStrategy  ( ) ) ;    result . append  ( " randomName=" ) . append  (  isRandomName  ( ) ) ;    result . append  ( " errorPage=" ) . append  (  getErrorPage  ( ) ) ;    result . append  ( " sessionExpiredLoginPage=" ) . append  ( sessionExpiredLoginPage ) ;    result . append  ( " sessionExpiredHomePage=" ) . append  ( sessionExpiredHomePage ) ;    result . append  ( " excludedExtensions=" ) . append  ( excludedURLExtensions ) ;    result . append  ( " protectedExtensions=" ) . append  (  getProtectedURLPatterns  ( ) ) ;    result . append  ( " startPages=" ) . append  ( startPages ) ;    result . append  ( " startParameters=" ) . append  ( startParameters ) ;    result . append  ( " paramsWithoutValidation=" ) . append  ( paramsWithoutValidation ) ;    result . append  ( " longLivingPages=" ) . append  ( longLivingPages ) ;    result . append  ( " debugMode=" ) . append  ( debugMode ) ;    result . append  ( " showErrorPageOnEditableValidation=" ) . append  ( showErrorPageOnEditableValidation ) ;  return  result . toString  ( ) ; } }