  package   org . hdiv . state ;   import   java . io . Serializable ;  import   java . io . UnsupportedEncodingException ;  import   java . util . ArrayList ;  import   java . util . Collections ;  import   java . util . List ;  import    org . hdiv . exception . HDIVException ;  import    org . hdiv . util . Constants ;  import    org . hdiv . util . Method ;   public class State  implements  IState , Serializable  {   private static final  long  serialVersionUID =  - 5179573248448214135L ;   private static final  int  PARAMETERS_LIST_SIZE = 3 ;   private String  action ;   private   byte  [ ]  params ;   private  List  < IParameter >  parameters ;   private  int  id ;   private Method  method ;   public State  ( )  { }   public State  (   final  int id )  {    this . id = id ; }   public  List  < IParameter > getParameters  ( )  {  return parameters ; }   public void addParameter  (   final IParameter parameter )  {  if  (  parameters == null )  {   parameters =  new  ArrayList  < IParameter >  ( PARAMETERS_LIST_SIZE ) ; }   parameters . add  ( parameter ) ; }   public IParameter getParameter  (   final String key )  {  if  (  parameters != null )  {  for ( IParameter parameter : parameters )  {  if  (   parameter . getName  ( ) . equalsIgnoreCase  ( key ) )  {  return parameter ; } } }  return null ; }   public String getAction  ( )  {  return action ; }   public void setAction  (   final String action )  {    this . action = action ; }   public String getParams  ( )  {  if  (  params == null )  {  return null ; }  try  {  return  new String  ( params ,  Constants . ENCODING_UTF_8 ) ; }  catch (   final  UnsupportedEncodingException e )  {  throw  new HDIVException  ( "Error converting parameters to String" , e ) ; } }   public void setParams  (   final String params )  {  try  {  if  (  params != null )  {    this . params =  params . getBytes  (  Constants . ENCODING_UTF_8 ) ; } else  {    this . params = null ; } }  catch (   UnsupportedEncodingException e )  {  throw  new HDIVException  ( "Error converting action to byte array" , e ) ; } }   public  int getId  ( )  {  return id ; }   public  List  < String > getRequiredParams  ( )  {  if  (  parameters == null )  {  return  Collections . emptyList  ( ) ; } else  {   List  < String >  requiredParams =  new  ArrayList  < String >  (  parameters . size  ( ) ) ;  for ( IParameter parameter : parameters )  {  if  (  parameter . isActionParam  ( ) )  {   requiredParams . add  (  parameter . getName  ( ) ) ; } }  return requiredParams ; } }   public final Method getMethod  ( )  {  return   method != null ? method :  Method . GET ; }   public void setMethod  (   final Method method )  {    this . method = method ; }   public boolean existParameter  (   final String key )  {  throw  new UnsupportedOperationException  ( ) ; }    @ Override public String toString  ( )  {   final StringBuilder  sb =  new StringBuilder  ( 32 ) ;    sb . append  ( "id: " ) . append  ( id ) ;    sb . append  ( "action: " ) . append  ( action ) ;    sb . append  ( "parameters: " ) . append  ( parameters ) ;    sb . append  ( "params: " ) . append  ( params ) ;    sb . append  ( "requiredParams: " ) . append  (  getRequiredParams  ( ) ) ;    sb . append  ( "method: " ) . append  (   method == null ?  Method . GET : method ) ;  return  super . toString  ( ) ; } }