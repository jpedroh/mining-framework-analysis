  package   org . hdiv . state ;   import    java . util . regex . Pattern ;  import     org . apache . commons . logging . Log ;  import     org . apache . commons . logging . LogFactory ;  import    org . hdiv . config . HDIVConfig ;  import    org . hdiv . config . Strategy ;  import    org . hdiv . context . RequestContext ;  import    org . hdiv . exception . HDIVException ;  import    org . hdiv . session . ISession ;  import     org . hdiv . state . scope . StateScope ;  import     org . hdiv . state . scope . StateScopeManager ;  import    org . hdiv . util . HDIVErrorCodes ;   public class StateUtil  {   private static final Log  log =  LogFactory . getLog  (  StateUtil . class ) ;   protected static final String  MEMORY_PATTERN = "([0-9]+-){2}[A-Za-z0-9]+" ;   protected Pattern  memoryPattern =  Pattern . compile  ( MEMORY_PATTERN ) ;   protected HDIVConfig  config ;   protected ISession  session ;   protected StateScopeManager  stateScopeManager ;   public void init  ( )  {   log . debug  ( "StateUtil instance created." ) ; }   public IState restoreState  (   final RequestContext context ,   final String requestState )  {  IState  restoredState = null ;  if  (  isMemoryStrategy  ( requestState ) )  {   restoredState =  restoreMemoryState  ( context , requestState ) ; }  if  (  restoredState == null )  {  throw  new HDIVException  (  HDIVErrorCodes . HDIV_PARAMETER_INCORRECT_VALUE ) ; }  return restoredState ; }   public boolean isMemoryStrategy  (   final String value )  {  return    config . getStrategy  ( ) ==  Strategy . MEMORY ||   memoryPattern . matcher  ( value ) . matches  ( ) ; }   protected IState restoreMemoryState  (   final RequestContext context ,   final String requestState )  {  IState  restoredState = null ;   int  firstSeparator =  requestState . indexOf  ( '-' ) ;   int  lastSeparator =  requestState . lastIndexOf  ( '-' ) ;  if  (   firstSeparator ==  - 1 ||  lastSeparator ==  - 1 )  {  throw  new HDIVException  (  HDIVErrorCodes . HDIV_PARAMETER_INCORRECT_VALUE ) ; }  String  pId ;  String  sId ;  try  {   pId =  requestState . substring  ( 0 , firstSeparator ) ;   sId =  requestState . substring  (  firstSeparator + 1 , lastSeparator ) ; }  catch (   StringIndexOutOfBoundsException e )  {  throw  new HDIVException  (  HDIVErrorCodes . HDIV_PARAMETER_INCORRECT_VALUE , e ) ; }   int  stateId ;  try  {   stateId =  Integer . parseInt  ( sId ) ; }  catch (   NumberFormatException e )  {  throw  new HDIVException  (  HDIVErrorCodes . HDIV_PARAMETER_INCORRECT_VALUE , e ) ; }  StateScope  stateScope =  stateScopeManager . getStateScope  ( requestState ) ;  if  (  stateScope != null )  {   restoredState =  stateScope . restoreState  ( context , stateId ) ;  if  (  restoredState == null )  {  throw  new HDIVException  (  HDIVErrorCodes . PAGE_ID_INCORRECT ) ; }  return restoredState ; }   int  pageId ;  try  {   pageId =  Integer . parseInt  ( pId ) ; }  catch (   NumberFormatException e )  {  throw  new HDIVException  (  HDIVErrorCodes . HDIV_PARAMETER_INCORRECT_VALUE , e ) ; }   restoredState =  getStateFromSession  ( context , pageId , stateId ) ;  return restoredState ; }   protected IState getStateFromSession  (   final RequestContext context ,   final  int pageId ,   final  int stateId )  {   final IState  sessionState =  session . getState  ( context , pageId , stateId ) ;  if  (  sessionState == null )  {  throw  new HDIVException  (  HDIVErrorCodes . HDIV_PARAMETER_INCORRECT_VALUE ) ; }  return sessionState ; }   public void setConfig  (   final HDIVConfig config )  {    this . config = config ; }   public void setSession  (   final ISession session )  {    this . session = session ; }   public void setStateScopeManager  (   final StateScopeManager stateScopeManager )  {    this . stateScopeManager = stateScopeManager ; }   public  int getPageId  (   final String requestState )  {  StateScope  stateScope =  stateScopeManager . getStateScope  ( requestState ) ;  if  (  stateScope != null )  {  return 0 ; }   int  firstSeparator =  requestState . indexOf  ( '-' ) ;  if  (  firstSeparator ==  - 1 )  {  throw  new HDIVException  (  HDIVErrorCodes . HDIV_PARAMETER_INCORRECT_VALUE ) ; }  return  Integer . parseInt  (  requestState . substring  ( 0 , firstSeparator ) ) ; } }