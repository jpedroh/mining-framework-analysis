  package   org . hdiv . dataComposer ;   import   java . io . UnsupportedEncodingException ;  import   java . net . URLDecoder ;  import   java . util . ArrayDeque ;  import   java . util . Deque ;  import     org . apache . commons . logging . Log ;  import     org . apache . commons . logging . LogFactory ;  import    org . hdiv . context . RequestContext ;  import    org . hdiv . exception . HDIVException ;  import    org . hdiv . state . IPage ;  import    org . hdiv . state . IState ;  import    org . hdiv . state . State ;  import     org . hdiv . state . scope . StateScope ;  import     org . hdiv . state . scope . StateScopeManager ;  import    org . hdiv . util . Constants ;  import    org . hdiv . util . Method ;   public class DataComposerMemory  extends AbstractDataComposer  {   private static final Log  log =  LogFactory . getLog  (  DataComposerMemory . class ) ;   protected StateScopeManager  stateScopeManager ;   protected  Deque  < String >  scopeStack ;   public DataComposerMemory  (   final RequestContext requestContext )  {  super  ( requestContext ) ; }    @ Override public void init  ( )  {   super . init  ( ) ;   scopeStack =  new  ArrayDeque  < String >  ( ) ;   scopeStack . push  ( "page" ) ; }   public void startScope  (   final String scope )  {   scopeStack . push  ( scope ) ; }   public void endScope  ( )  {   scopeStack . pop  ( ) ; }   protected String getCurrentScope  ( )  {  return  scopeStack . peek  ( ) ; }   public final String beginRequest  ( )  {  return  beginRequest  ( null , "" ) ; }   public String beginRequest  (   final Method method ,  String action )  {  try  {   action =  URLDecoder . decode  ( action ,  Constants . ENCODING_UTF_8 ) ; }  catch (   UnsupportedEncodingException e )  {  throw  new HDIVException  (   Constants . ENCODING_UTF_8 + " enconding not supported." , e ) ; }  catch (   IllegalArgumentException e )  { }  return  beginRequest  (  createNewState  (  page . getNextStateId  ( ) , method , action ) ) ; }   protected IState createNewState  (   final  int stateId ,   final Method method ,   final String action )  {  IState  state =  new State  ( stateId ) ;   state . setAction  ( action ) ;   state . setMethod  ( method ) ;  return state ; }   public String beginRequest  (   final IState state )  {    getStates  ( ) . push  ( state ) ;   final StateScope  stateScope =  stateScopeManager . getStateScopeByName  (  getCurrentScope  ( ) ) ;  if  (  stateScope != null )  {  return null ; }  return  toId  ( state ) ; }   protected String toId  (   final IState state )  {  StringBuilder  sb =  new StringBuilder  ( 40 ) ;       sb . append  (  page . getId  ( ) ) . append  ( DASH ) . append  (  state . getId  ( ) ) . append  ( DASH ) . append  (  getStateSuffix  (  state . getMethod  ( ) ) ) ;  return  sb . toString  ( ) ; }   public String endRequest  ( )  {  IState  state =   getStates  ( ) . pop  ( ) ;  StateScope  stateScope =  stateScopeManager . getStateScopeByName  (  getCurrentScope  ( ) ) ;  if  (  stateScope != null )  {  return  stateScope . addState  ( context , state ,  getStateSuffix  (  state . getMethod  ( ) ) ) ; }   page . addState  ( state ) ;  if  (   page . getStatesCount  ( ) == 1 )  {   session . addPartialPage  ( context , page ) ; }  return  toId  ( state ) ; }   public void startPage  ( )  {   initPage  ( ) ; }   public void startPage  (   final String parentStateId )  {   initPage  ( parentStateId ) ; }   public void startPage  (   final IPage existingPage )  {   existingPage . markAsReused  ( ) ;   setPage  ( existingPage ) ; }   public void endPage  ( )  {  if  (  isRequestStarted  ( ) )  {   endRequest  ( ) ; }  if  (   page . getStatesCount  ( ) > 0 )  {   session . addPage  ( context , page ) ; } else  {  if  (  log . isDebugEnabled  ( ) )  {   log . debug  (   "The page [" +  page . getId  ( ) + "] has no states, is not stored in session" ) ; } } }   public void setStateScopeManager  (   final StateScopeManager stateScopeManager )  {    this . stateScopeManager = stateScopeManager ; } }