  package   org . hdiv . dataComposer ;   import   java . util . Arrays ;  import   java . util . List ;  import    javax . servlet . http . HttpServletRequest ;  import    org . hdiv . config . HDIVConfig ;  import    org . hdiv . config . Strategy ;  import    org . hdiv . context . RequestContext ;  import    org . hdiv . exception . HDIVException ;  import    org . hdiv . idGenerator . UidGenerator ;  import    org . hdiv . session . ISession ;  import    org . hdiv . state . IPage ;  import    org . hdiv . state . IState ;  import    org . hdiv . state . StateUtil ;  import     org . hdiv . state . scope . StateScopeManager ;  import    org . hdiv . util . Constants ;  import    org . hdiv . util . HDIVUtil ;   public class DataComposerFactory  {   private static final  int  DEFAULT_ALLOWED_LENGTH = 4000 ;   protected HDIVConfig  config ;   protected ISession  session ;   protected UidGenerator  uidGenerator ;   protected  int  allowedLength = DEFAULT_ALLOWED_LENGTH ;   protected StateUtil  stateUtil ;   protected StateScopeManager  stateScopeManager ;   protected  List  < String >  excludePageReuseHeaders =  Arrays . asList  ( "X-PJAX" , "X-HDIV-EXCLUDE-PAGE-REUSE" ) ;   public IDataComposer newInstance  (   final HttpServletRequest request )  {  RequestContext  context =  new RequestContext  ( request ) ;  if  (   config . getStrategy  ( ) ==  Strategy . MEMORY )  {  DataComposerMemory  composer =  new DataComposerMemory  ( context ) ;   composer . setHdivConfig  ( config ) ;   composer . setSession  ( session ) ;   composer . setUidGenerator  ( uidGenerator ) ;   composer . setStateScopeManager  ( stateScopeManager ) ;   composer . init  ( ) ;   initDataComposer  ( composer , context ) ;  return composer ; } else  {  throw  new HDIVException  (  HDIVUtil . getMessage  ( request , "strategy.error" ,   config . getStrategy  ( ) . toString  ( ) ) ) ; } }   protected void initDataComposer  (   final IDataComposer dataComposer ,   final RequestContext context )  {  HttpServletRequest  request =  context . getRequest  ( ) ;  String  hdivStateParamName =  HDIVUtil . getHdivStateParameterName  ( request ) ;  String  hdivState =  request . getParameter  ( hdivStateParamName ) ;  String  preState =  getModifyStateParameterValue  ( dataComposer , request ) ;  if  (   preState != null &&   preState . length  ( ) > 0 )  {   int  pageId =  stateUtil . getPageId  ( preState ) ;  IState  state =  stateUtil . restoreState  ( context , preState ) ;  if  (  pageId > 0 )  {  IPage  page =  session . getPage  ( context , pageId ) ;  if  (  page != null )  {   dataComposer . startPage  ( page ) ; } }  if  (  state != null )  {   dataComposer . beginRequest  ( state ) ; } } else  if  (  reuseExistingPage  ( request ) )  {  if  (   hdivState != null &&   hdivState . length  ( ) > 0 )  {   int  pageId =  stateUtil . getPageId  ( hdivState ) ;  if  (  pageId > 0 )  {  IPage  page =  session . getPage  ( context , pageId ) ;   dataComposer . startPage  ( page ) ; } else  {   dataComposer . startPage  ( hdivState ) ; } } else  {   dataComposer . startPage  ( hdivState ) ; } } else  {   dataComposer . startPage  ( hdivState ) ; }  String  url =   request . getRequestURI  ( ) . substring  (   request . getContextPath  ( ) . length  ( ) ) ;  String  scope =  config . isLongLivingPages  ( url ) ;  if  (  scope != null )  {   dataComposer . startScope  ( scope ) ; } }   protected String getModifyStateParameterValue  (   final IDataComposer dataComposer ,   final HttpServletRequest request )  {  String  paramName =  HDIVUtil . getModifyHdivStateParameterName  ( request ) ;  String  preState =   paramName != null ?  request . getParameter  ( paramName ) : null ;  return preState ; }   protected boolean reuseExistingPage  (   final HttpServletRequest request )  {  if  (  isAjaxRequest  ( request ) )  {  if  (  excludePageReuseInAjax  ( request ) )  {  return false ; }  return  config . isReuseExistingPageInAjaxRequest  ( ) ; }  return false ; }   protected boolean isAjaxRequest  (   final HttpServletRequest request )  {  String  xRequestedWithValue =  request . getHeader  ( "x-requested-with" ) ;  boolean  isAjaxRequest =   (  xRequestedWithValue != null ) ?  "XMLHttpRequest" . equalsIgnoreCase  ( xRequestedWithValue ) : false ;   request . setAttribute  (  Constants . AJAX_REQUEST , isAjaxRequest ) ;  return isAjaxRequest ; }   protected boolean excludePageReuseInAjax  (   final HttpServletRequest request )  {  for ( String header : excludePageReuseHeaders )  {  String  headerValue =  request . getHeader  ( header ) ;  if  (  headerValue != null )  {  return true ; } }  return false ; }   public void setConfig  (   final HDIVConfig config )  {    this . config = config ; }   public void setSession  (   final ISession session )  {    this . session = session ; }   public void setUidGenerator  (   final UidGenerator uidGenerator )  {    this . uidGenerator = uidGenerator ; }   public void setAllowedLength  (   final  int allowedLength )  {    this . allowedLength = allowedLength ; }   public void setStateUtil  (   final StateUtil stateUtil )  {    this . stateUtil = stateUtil ; }   public void setStateScopeManager  (   final StateScopeManager stateScopeManager )  {    this . stateScopeManager = stateScopeManager ; }   public void setExcludePageReuseHeaders  (   final  List  < String > excludePageReuseHeaders )  {    this . excludePageReuseHeaders = excludePageReuseHeaders ; } }