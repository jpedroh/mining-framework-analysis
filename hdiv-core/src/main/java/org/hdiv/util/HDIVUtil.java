  package   org . hdiv . util ;   import   java . util . Enumeration ;  import   java . util . Locale ;  import   java . util . Random ;  import    java . util . regex . Pattern ;  import   javax . servlet . ServletContext ;  import   javax . servlet . ServletRequest ;  import   javax . servlet . ServletRequestWrapper ;  import    javax . servlet . http . HttpServletRequest ;  import     org . apache . commons . logging . Log ;  import     org . apache . commons . logging . LogFactory ;  import    org . hdiv . application . IApplication ;  import    org . hdiv . config . HDIVConfig ;  import    org . hdiv . dataComposer . IDataComposer ;  import    org . hdiv . exception . HDIVException ;  import    org . hdiv . urlProcessor . FormUrlProcessor ;  import    org . hdiv . urlProcessor . LinkUrlProcessor ;  import    org . hdiv . urlProcessor . UrlData ;  import    org . springframework . context . MessageSource ;  import     org . springframework . web . context . WebApplicationContext ;  import      org . springframework . web . context . support . WebApplicationContextUtils ;   public class HDIVUtil  {   private static final Log  log =  LogFactory . getLog  (  HDIVUtil . class ) ;   private static final String  APPLICATION_SERVLETCONTEXT_KEY = "APPLICATION_SERVLETCONTEXT_KEY" ;   private static final String  MESSAGESOURCE_SERVLETCONTEXT_KEY = "MESSAGESOURCE_SERVLETCONTEXT_KEY" ;   private static final String  HDIVCONFIG_SERVLETCONTEXT_KEY = "HDIVCONFIG_SERVLETCONTEXT_KEY" ;   private static final String  DATACOMPOSER_REQUEST_KEY = "DATACOMPOSER_REQUEST_KEY" ;   private static final String  REQUESTURI_REQUEST_KEY = "REQUESTURI_REQUEST_KEY" ;   private static final String  BASEURL_REQUEST_KEY = "BASEURL_REQUEST_KEY" ;   private static final String  LINKURLPROCESSOR_SERVLETCONTEXT_KEY = "LINKURLPROCESSOR_SERVLETCONTEXT_KEY" ;   private static final String  FORMURLPROCESSOR_SERVLETCONTEXT_KEY = "FORMURLPROCESSOR_SERVLETCONTEXT_KEY" ;   private static final String  CURRENT_PAGE_KEY = "CURRENT_PAGE_KEY" ;   public static final Pattern  intPattern =  Pattern . compile  ( "[0-9]+" ) ;   private static final   char  [ ]  jsessionLower =  ";jsessionid=" . toCharArray  ( ) ;   private static final   char  [ ]  jsessionUpper =  ";JSESSIONID=" . toCharArray  ( ) ;   private static final   char  [ ]  SEMICOLON =  ";" . toCharArray  ( ) ;   private static final   char  [ ]  QUESTION =  "?" . toCharArray  ( ) ;   public static IDataComposer getDataComposer  (   final ServletRequest request )  {  return  ( IDataComposer )  request . getAttribute  ( DATACOMPOSER_REQUEST_KEY ) ; }   public static void setDataComposer  (   final IDataComposer newDataComposer ,   final HttpServletRequest request )  {   request . setAttribute  ( DATACOMPOSER_REQUEST_KEY , newDataComposer ) ; }   public static void removeDataComposer  (   final HttpServletRequest request )  {   request . removeAttribute  ( DATACOMPOSER_REQUEST_KEY ) ; }   public static String getRequestURI  (   final HttpServletRequest request )  {  String  requestURI =  ( String )  request . getAttribute  ( REQUESTURI_REQUEST_KEY ) ;  if  (  requestURI == null )  {  throw  new HDIVException  ( "RequestURI has not been initialized in request." ) ; }  return requestURI ; }   public static void setRequestURI  (   final String requestURI ,   final HttpServletRequest request )  {   request . setAttribute  ( REQUESTURI_REQUEST_KEY , requestURI ) ; }   public static String getBaseURL  (   final ServletRequest request )  {   final String  baseURL =  ( String )  request . getAttribute  ( BASEURL_REQUEST_KEY ) ;  return baseURL ; }   public static void setBaseURL  (   final String baseURL ,   final ServletRequest request )  {   request . setAttribute  ( BASEURL_REQUEST_KEY , baseURL ) ; }   public static IApplication getApplication  (   final ServletContext servletContext )  {  IApplication  app =  ( IApplication )  servletContext . getAttribute  ( APPLICATION_SERVLETCONTEXT_KEY ) ;  if  (  app == null )  {  throw  new HDIVException  ( "IApplication has not been initialized in servlet context" ) ; }  return app ; }   public static void setApplication  (   final IApplication newApplication ,   final ServletContext servletContext )  {   servletContext . setAttribute  ( APPLICATION_SERVLETCONTEXT_KEY , newApplication ) ; }   public static HDIVConfig getHDIVConfig  (   final ServletContext servletContext )  {  HDIVConfig  hdivConfig =  ( HDIVConfig )  servletContext . getAttribute  ( HDIVCONFIG_SERVLETCONTEXT_KEY ) ;  if  (  hdivConfig == null )  {  throw  new HDIVException  ( "HDIVConfig has not been initialized in servlet context" ) ; }  return hdivConfig ; }   public static void setHDIVConfig  (   final HDIVConfig hdivConfig ,   final ServletContext servletContext )  {   servletContext . setAttribute  ( HDIVCONFIG_SERVLETCONTEXT_KEY , hdivConfig ) ; }   public static LinkUrlProcessor getLinkUrlProcessor  (   final ServletContext servletContext )  {  LinkUrlProcessor  urlProcessor =  ( LinkUrlProcessor )  servletContext . getAttribute  ( LINKURLPROCESSOR_SERVLETCONTEXT_KEY ) ;  if  (  urlProcessor == null )  {  throw  new HDIVException  ( "LinkUrlProcessor has not been initialized in servlet context" ) ; }  return urlProcessor ; }   public static void setLinkUrlProcessor  (   final LinkUrlProcessor urlProcessor ,   final ServletContext servletContext )  {   servletContext . setAttribute  ( LINKURLPROCESSOR_SERVLETCONTEXT_KEY , urlProcessor ) ; }   public static FormUrlProcessor getFormUrlProcessor  (   final ServletContext servletContext )  {  FormUrlProcessor  urlProcessor =  ( FormUrlProcessor )  servletContext . getAttribute  ( FORMURLPROCESSOR_SERVLETCONTEXT_KEY ) ;  if  (  urlProcessor == null )  {  throw  new HDIVException  ( "FormUrlProcessor has not been initialized in servlet context" ) ; }  return urlProcessor ; }   public static void setFormUrlProcessor  (   final FormUrlProcessor urlProcessor ,   final ServletContext servletContext )  {   servletContext . setAttribute  ( FORMURLPROCESSOR_SERVLETCONTEXT_KEY , urlProcessor ) ; }   public static Integer getCurrentPageId  (   final ServletRequest request )  {  return  ( Integer )  request . getAttribute  ( CURRENT_PAGE_KEY ) ; }   public static void setCurrentPageId  (   final Integer pageId ,   final ServletRequest request )  {   request . setAttribute  ( CURRENT_PAGE_KEY , pageId ) ; }   public static MessageSource getMessageSource  (   final HttpServletRequest request )  {  return  getMessageSource  (   request . getSession  ( ) . getServletContext  ( ) ) ; }   public static MessageSource getMessageSource  (   final ServletContext servletContext )  {   final MessageSource  msgSource =  ( MessageSource )  servletContext . getAttribute  ( MESSAGESOURCE_SERVLETCONTEXT_KEY ) ;  if  (  msgSource == null )  {  throw  new HDIVException  ( "MessageSource has not been initialized in servlet context" ) ; }  return msgSource ; }   public static void setMessageSource  (   final MessageSource msgSource ,   final ServletContext servletContext )  {   servletContext . setAttribute  ( MESSAGESOURCE_SERVLETCONTEXT_KEY , msgSource ) ; }   public static String getMessage  (   final HttpServletRequest request ,   final String key )  {  return  HDIVUtil . getMessage  ( request , key , null ) ; }   public static String getMessage  (   final HttpServletRequest request ,   final String key ,   final String o )  {  return  HDIVUtil . getMessage  ( request , key , o ,  Locale . getDefault  ( ) ) ; }   public static String getMessage  (   final HttpServletRequest request ,   final String key ,   final String o ,   final Locale userLocale )  {  String  resolvedMessage =   HDIVUtil . getMessageSource  ( request ) . getMessage  ( key ,  new String  [ ]  { o } , userLocale ) ;   log . debug  ( resolvedMessage ) ;  return resolvedMessage ; }   public static String createRandomToken  (   final  int n )  {  Random  r =  new Random  ( ) ;   int  i =  r . nextInt  ( n ) ;  if  (  i == 0 )  {   i = 1 ; }  return  String . valueOf  ( i ) ; }   public static String stripSession  (   final String url )  {  return  stripAndFillSessionData  ( url , null ) ; }   public static String stripAndFillSessionData  (   final String url ,   final UrlData urldata )  {   final  int  pos =  url . indexOf  ( ';' ) ;  if  (  pos !=  - 1 )  {   final   char  [ ]  data =  url . toCharArray  ( ) ;   int  sessionStart ;  if  (    (  sessionStart =  indexOf  ( data , jsessionLower , pos ) ) !=  - 1 ||  (   (  sessionStart =  indexOf  ( data , jsessionUpper , pos ) ) !=  - 1 ) )  {   int  sessionEnd =  indexOf  ( data , SEMICOLON ,  sessionStart + 1 ) ;  if  (  sessionEnd ==  - 1 )  {   sessionEnd =  indexOf  ( data , QUESTION ,  sessionStart + 1 ) ; }  if  (  sessionEnd ==  - 1 )  {   sessionEnd =  data . length ; }   final  int  len =  sessionEnd - sessionStart ;  if  (  len > 0 )  {  if  (  urldata != null )  {   urldata . setjSessionId  (  new String  ( data ,  sessionStart + 1 ,  len - 1 ) ) ; }   System . arraycopy  ( data ,  sessionStart + len , data , sessionStart ,   data . length - sessionEnd ) ;  return  new String  ( data , 0 ,   data . length - len ) ; } } }  return url ; }   private static  int indexOf  (   final   char  [ ] source ,   final   char  [ ] target ,   final  int fromIndex )  {   char  first =  target [ 0 ] ;   int  max =  (   source . length -  target . length ) ;  for (   int  i =  0 + fromIndex ;  i <= max ;  i ++ )  {  if  (   source [ i ] != first )  {  while  (    ++ i <= max &&   source [ i ] != first ) ; }  if  (  i <= max )  {   int  j =  i + 1 ;   int  end =   j +  target . length - 1 ;  for (   int  k = 1 ;   j < end &&   source [ j ] ==  target [ k ] ;  j ++ ,  k ++ ) ;  if  (  j == end )  {  return i ; } } }  return  - 1 ; }    @ SuppressWarnings  ( "unchecked" ) public static  <  T > T getNativeRequest  (   final ServletRequest request ,   final  Class  < T > requiredType )  {  if  (  requiredType != null )  {  if  (  requiredType . isInstance  ( request ) )  {  return  ( T ) request ; } else  if  (  request instanceof ServletRequestWrapper )  {  return  getNativeRequest  (   (  ( ServletRequestWrapper ) request ) . getRequest  ( ) , requiredType ) ; } }  return null ; }   public static WebApplicationContext findWebApplicationContext  (   final ServletContext sc )  {  WebApplicationContext  wac =  WebApplicationContextUtils . getWebApplicationContext  ( sc ) ;  if  (  wac == null )  {   Enumeration  < String >  attrNames =  sc . getAttributeNames  ( ) ;  while  (  attrNames . hasMoreElements  ( ) )  {  String  attrName =  attrNames . nextElement  ( ) ;  Object  attrValue =  sc . getAttribute  ( attrName ) ;  if  (  attrValue instanceof WebApplicationContext )  {  if  (  wac != null )  {  throw  new IllegalStateException  (  "No unique WebApplicationContext found: more than one " + "DispatcherServlet registered with publishContext=true?" ) ; }   wac =  ( WebApplicationContext ) attrValue ; } } }  if  (  wac == null )  {  throw  new IllegalStateException  ( "No WebApplicationContext found: no ContextLoaderListener registered?" ) ; }  return wac ; }   public static String getHdivStateParameterName  (  HttpServletRequest request )  {  return  ( String )  request . getAttribute  (  Constants . HDIV_PARAMETER ) ; }   public static void setHdivStateParameterName  (  HttpServletRequest request ,  String parameterName )  {   request . setAttribute  (  Constants . HDIV_PARAMETER , parameterName ) ; }   public static String getModifyHdivStateParameterName  (  HttpServletRequest request )  {  return  ( String )  request . getAttribute  (  Constants . MODIFY_STATE_HDIV_PARAMETER ) ; }   public static void setModifyHdivStateParameterName  (  HttpServletRequest request ,  String parameterName )  {   request . setAttribute  (  Constants . MODIFY_STATE_HDIV_PARAMETER , parameterName ) ; } }