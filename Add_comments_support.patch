Index: src/main/java/com/monitorjbl/xlsx/impl/StreamingSheet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/monitorjbl/xlsx/impl/StreamingSheet.java	(revision 3a06f177d1a6d7d487a38cfbf72a8e042b45d6ef)
+++ src/main/java/com/monitorjbl/xlsx/impl/StreamingSheet.java	(revision )
@@ -19,6 +19,9 @@
 import org.apache.poi.ss.usermodel.Workbook;
 import org.apache.poi.ss.util.CellAddress;
 import org.apache.poi.ss.util.CellRangeAddress;
+import org.apache.poi.xssf.model.CommentsTable;
+import org.apache.poi.xssf.usermodel.XSSFComment;
+import org.openxmlformats.schemas.spreadsheetml.x2006.main.CTComment;
 
 import java.util.Collection;
 import java.util.Iterator;
@@ -28,10 +31,12 @@
 public class StreamingSheet implements Sheet {
 
   private final String name;
+  private final CommentsTable commentsTable;
   private final StreamingSheetReader reader;
 
-  public StreamingSheet(String name, StreamingSheetReader reader) {
+  public StreamingSheet(String name, CommentsTable commentsTable, StreamingSheetReader reader) {
     this.name = name;
+    this.commentsTable = commentsTable;
     this.reader = reader;
   }
 
@@ -812,8 +817,20 @@
    * Not supported
    */
   @Override
-  public Comment getCellComment(CellAddress cellAddress) {
-    throw new UnsupportedOperationException();
+  public Comment getCellComment(CellAddress address) {
+    if (this.commentsTable == null) {
+      return null;
+    } else {
+      int row = address.getRow();
+      int column = address.getColumn();
+      CellAddress ref = new CellAddress(row, column);
+      CTComment ctComment = this.commentsTable.getCTComment(ref);
+      if (ctComment == null) {
+        return null;
+      } else {
+        return new XSSFComment(this.commentsTable, ctComment, null);
+      }
+    }
   }
 
   /**
Index: src/main/java/com/monitorjbl/xlsx/impl/StreamingCell.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/monitorjbl/xlsx/impl/StreamingCell.java	(revision 3a06f177d1a6d7d487a38cfbf72a8e042b45d6ef)
+++ src/main/java/com/monitorjbl/xlsx/impl/StreamingCell.java	(revision )
@@ -1,6 +1,8 @@
 package com.monitorjbl.xlsx.impl;
 
-import com.monitorjbl.xlsx.exceptions.NotSupportedException;
+import java.util.Calendar;
+import java.util.Date;
+
 import org.apache.poi.hssf.usermodel.HSSFDateUtil;
 import org.apache.poi.ss.formula.FormulaParseException;
 import org.apache.poi.ss.usermodel.Cell;
@@ -13,10 +15,12 @@
 import org.apache.poi.ss.usermodel.Sheet;
 import org.apache.poi.ss.util.CellAddress;
 import org.apache.poi.ss.util.CellRangeAddress;
+import org.apache.poi.xssf.model.CommentsTable;
+import org.apache.poi.xssf.usermodel.XSSFComment;
 import org.apache.poi.xssf.usermodel.XSSFRichTextString;
+import org.openxmlformats.schemas.spreadsheetml.x2006.main.CTComment;
 
-import java.util.Calendar;
-import java.util.Date;
+import com.monitorjbl.xlsx.exceptions.NotSupportedException;
 
 public class StreamingCell implements Cell {
 
@@ -33,6 +37,7 @@
   private int columnIndex;
   private int rowIndex;
   private final boolean use1904Dates;
+  private final CommentsTable commentsTable;
 
   private Supplier contentsSupplier = NULL_SUPPLIER;
   private Object rawContents;
@@ -44,10 +49,11 @@
   private Row row;
   private CellStyle cellStyle;
 
-  public StreamingCell(int columnIndex, int rowIndex, boolean use1904Dates) {
+  public StreamingCell(int columnIndex, int rowIndex, boolean use1904Dates, CommentsTable commentsTable) {
     this.columnIndex = columnIndex;
     this.rowIndex = rowIndex;
     this.use1904Dates = use1904Dates;
+    this.commentsTable = commentsTable;
   }
 
   public void setContentSupplier(Supplier contentsSupplier) {
@@ -465,7 +471,16 @@
    */
   @Override
   public Comment getCellComment() {
-    throw new NotSupportedException();
+    if (commentsTable != null) {
+      CellAddress ref = new CellAddress(rowIndex, columnIndex);
+      CTComment ctComment = this.commentsTable.getCTComment(ref);
+      if (ctComment == null) {
+        return null;
+      } else {
+        return new XSSFComment(this.commentsTable, ctComment, null);
+      }
+    }
+    return null;
   }
 
   /**
Index: src/main/java/com/monitorjbl/xlsx/StreamingReader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/monitorjbl/xlsx/StreamingReader.java	(revision 3a06f177d1a6d7d487a38cfbf72a8e042b45d6ef)
+++ src/main/java/com/monitorjbl/xlsx/StreamingReader.java	(revision )
@@ -109,6 +109,7 @@
     private int sstCacheSize = -1;
     private String sheetName;
     private String password;
+    private boolean loadComments = false;
 
     public int getRowCacheSize() {
       return rowCacheSize;
@@ -149,6 +150,13 @@
       return sstCacheSize;
     }
 
+    /**
+     * @return if the reader should parse and read the cell comments in the file.
+     */
+    public boolean shouldLoadCellComments() {
+      return loadComments;
+    }
+
     /**
      * The number of rows to keep in memory at any given point.
      * <p>
@@ -247,6 +255,19 @@
       return this;
     }
 
+    /**
+     * By default comments will not be loaded as they does not support streaming. They pose memory
+     * risk if the opened file use comments excessively.
+     * <p>If enabled comments contents will be available for all currently accessible cells in the
+     * stream sheet</p>
+     *
+     * @return reference to current {@code Builder}
+     */
+    public Builder readComments() {
+      this.loadComments = true;
+      return this;
+    }
+
     /**
      * Reads a given {@code InputStream} and returns a new
      * instance of {@code Workbook}. Due to Apache POI
@@ -360,7 +381,7 @@
 
         XMLEventReader parser = StaxHelper.newXMLInputFactory().createXMLEventReader(sheet);
 
-        return new StreamingReader(new StreamingWorkbookReader(sst, sstCache, pkg, new StreamingSheetReader(sst, styles, parser, use1904Dates, rowCacheSize),
+        return new StreamingReader(new StreamingWorkbookReader(sst, sstCache, pkg, new StreamingSheetReader(sst, styles, null, parser, use1904Dates, rowCacheSize),
             this));
       } catch(IOException e) {
         throw new OpenException("Failed to open file", e);
Index: src/main/java/com/monitorjbl/xlsx/impl/StreamingWorkbook.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/monitorjbl/xlsx/impl/StreamingWorkbook.java	(revision 3a06f177d1a6d7d487a38cfbf72a8e042b45d6ef)
+++ src/main/java/com/monitorjbl/xlsx/impl/StreamingWorkbook.java	(revision )
@@ -13,6 +13,7 @@
 import org.apache.poi.ss.usermodel.Sheet;
 import org.apache.poi.ss.usermodel.SheetVisibility;
 import org.apache.poi.ss.usermodel.Workbook;
+import org.apache.poi.xssf.model.StylesTable;
 
 import java.io.IOException;
 import java.io.OutputStream;
@@ -252,7 +253,11 @@
    */
   @Override
   public Font getFontAt(short idx) {
-    throw new UnsupportedOperationException();
+    StylesTable styles = reader.getStyles();
+    if (styles != null) {
+      return styles.getFontAt(idx);
+    }
+    return null;
   }
 
   /**
Index: src/test/java/com/monitorjbl/xlsx/StreamingWorkbookTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/com/monitorjbl/xlsx/StreamingWorkbookTest.java	(revision 3a06f177d1a6d7d487a38cfbf72a8e042b45d6ef)
+++ src/test/java/com/monitorjbl/xlsx/StreamingWorkbookTest.java	(revision )
@@ -12,6 +12,8 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 
 public class StreamingWorkbookTest {
@@ -98,4 +100,39 @@
       assertEquals("Wrong formula", "SUM(A1:A2)", A3.getCellFormula());
     }
   }
+
+  @Test
+  public void testCellComments() throws Exception {
+    try(
+            InputStream is = new FileInputStream(new File("src/test/resources/read_cell_comments.xlsx"));
+            Workbook workbook = StreamingReader.builder().readComments().open(is)
+    ) {
+      assertEquals(3, workbook.getNumberOfSheets());
+      Sheet sheet1 = workbook.getSheetAt(0);
+
+      Iterator<Row> rowIterator = sheet1.rowIterator();
+      Row row1 = rowIterator.next();
+      Cell A1 = row1.getCell(0);
+
+      assertEquals("Cell A1 should have data", "A1", A1.getStringCellValue());
+      assertNotNull("Cell A1 should have a comment", A1.getCellComment());
+      String A1Author = A1.getCellComment().getAuthor();
+      assertEquals("Invalid comment author", "BBonev", A1Author);
+      // the author is visible in the comment
+      assertEquals("Invalid comment text", A1Author + ":\nA1 comment\nhere on the second line", A1.getCellComment().getString().getString());
+
+      Sheet sheet3 = workbook.getSheetAt(2);
+
+      rowIterator = sheet3.rowIterator();
+      rowIterator.next();
+      Row row2 = rowIterator.next();
+      Cell B2 = row2.getCell(1);
+
+      assertEquals("Cell B2 should have data", "B2S3", B2.getStringCellValue());
+      assertNotNull("Cell B2 should have a comment", B2.getCellComment());
+      assertEquals("Invalid comment author", "BBonev", B2.getCellComment().getAuthor());
+      // the author is not visible in the comment
+      assertEquals("Invalid comment text", "Comment from B2 sheet 3", B2.getCellComment().getString().getString());
+    }
+  }
 }
Index: src/main/java/com/monitorjbl/xlsx/impl/StreamingRow.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/monitorjbl/xlsx/impl/StreamingRow.java	(revision 3a06f177d1a6d7d487a38cfbf72a8e042b45d6ef)
+++ src/main/java/com/monitorjbl/xlsx/impl/StreamingRow.java	(revision )
@@ -14,11 +14,13 @@
 public class StreamingRow implements Row {
   private int rowIndex;
   private boolean isHidden;
+  private final CellStyle rowStyle;
   private TreeMap<Integer, Cell> cellMap = new TreeMap<>();
 
-  public StreamingRow(int rowIndex, boolean isHidden) {
+  public StreamingRow(int rowIndex, boolean isHidden, CellStyle rowStyle) {
     this.rowIndex = rowIndex;
     this.isHidden = isHidden;
+    this.rowStyle = rowStyle;
   }
 
   public Map<Integer, Cell> getCellMap() {
@@ -119,7 +121,7 @@
   public Cell getCell(int cellnum, MissingCellPolicy policy) {
     StreamingCell cell = (StreamingCell) cellMap.get(cellnum);
     if(policy == MissingCellPolicy.CREATE_NULL_AS_BLANK) {
-      if(cell == null) { return new StreamingCell(cellnum, rowIndex, false); }
+      if(cell == null) { return new StreamingCell(cellnum, rowIndex, false, null); }
     } else if(policy == MissingCellPolicy.RETURN_BLANK_AS_NULL) {
       if(cell == null || cell.getCellTypeEnum() == CellType.BLANK) { return null; }
     }
@@ -213,7 +215,7 @@
    */
   @Override
   public boolean isFormatted() {
-    throw new NotSupportedException();
+    return rowStyle != null;
   }
 
   /**
@@ -221,7 +223,7 @@
    */
   @Override
   public CellStyle getRowStyle() {
-    throw new NotSupportedException();
+    return rowStyle;
   }
 
   /**
Index: src/main/java/com/monitorjbl/xlsx/impl/StreamingSheetReader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/monitorjbl/xlsx/impl/StreamingSheetReader.java	(revision 3a06f177d1a6d7d487a38cfbf72a8e042b45d6ef)
+++ src/main/java/com/monitorjbl/xlsx/impl/StreamingSheetReader.java	(revision )
@@ -3,9 +3,11 @@
 import com.monitorjbl.xlsx.exceptions.CloseException;
 import com.monitorjbl.xlsx.exceptions.ParseException;
 import org.apache.poi.ss.usermodel.BuiltinFormats;
+import org.apache.poi.ss.usermodel.CellStyle;
 import org.apache.poi.ss.usermodel.DataFormatter;
 import org.apache.poi.ss.usermodel.Row;
 import org.apache.poi.ss.util.CellReference;
+import org.apache.poi.xssf.model.CommentsTable;
 import org.apache.poi.xssf.model.SharedStringsTable;
 import org.apache.poi.xssf.model.StylesTable;
 import org.apache.poi.xssf.usermodel.XSSFCellStyle;
@@ -39,6 +41,7 @@
 
   private final SharedStringsTable sst;
   private final StylesTable stylesTable;
+  private final CommentsTable commentsTable;
   private final XMLEventReader parser;
   private final DataFormatter dataFormatter = new DataFormatter();
   private final Set<Integer> hiddenColumns = new HashSet<>();
@@ -56,9 +59,12 @@
   private StreamingCell currentCell;
   private boolean use1904Dates;
 
-  public StreamingSheetReader(SharedStringsTable sst, StylesTable stylesTable, XMLEventReader parser, final boolean use1904Dates, int rowCacheSize) {
+  public StreamingSheetReader(SharedStringsTable sst, StylesTable stylesTable,
+          CommentsTable commentsTable, XMLEventReader parser, final boolean use1904Dates,
+          int rowCacheSize) {
     this.sst = sst;
     this.stylesTable = stylesTable;
+    this.commentsTable = commentsTable;
     this.parser = parser;
     this.use1904Dates = use1904Dates;
     this.rowCacheSize = rowCacheSize;
@@ -123,9 +129,14 @@
           rowIndex = Integer.parseInt(rowNumAttr.getValue()) - 1;
           currentRowNum = rowIndex;
         }
+        Attribute rowStyleNum = startElement.getAttributeByName(new QName("s"));
+        CellStyle rowStyle = null;
+        if (rowStyleNum != null && stylesTable.getNumCellStyles() > 0) {
+          rowStyle = stylesTable.getStyleAt(Integer.parseInt(rowStyleNum.getValue()));
+        }
         Attribute isHiddenAttr = startElement.getAttributeByName(new QName("hidden"));
         boolean isHidden = isHiddenAttr != null && ("1".equals(isHiddenAttr.getValue()) || "true".equals(isHiddenAttr.getValue()));
-        currentRow = new StreamingRow(rowIndex, isHidden);
+        currentRow = new StreamingRow(rowIndex, isHidden, rowStyle);
         currentColNum = firstColNum;
       } else if("col".equals(tagLocalName)) {
         Attribute isHiddenAttr = startElement.getAttributeByName(new QName("hidden"));
@@ -143,9 +154,9 @@
 
         if(ref != null) {
           String[] coord = splitCellRef(ref.getValue());
-          currentCell = new StreamingCell(CellReference.convertColStringToIndex(coord[0]), Integer.parseInt(coord[1]) - 1, use1904Dates);
+          currentCell = new StreamingCell(CellReference.convertColStringToIndex(coord[0]), Integer.parseInt(coord[1]) - 1, use1904Dates, commentsTable);
         } else {
-          currentCell = new StreamingCell(currentColNum, currentRowNum, use1904Dates);
+          currentCell = new StreamingCell(currentColNum, currentRowNum, use1904Dates, commentsTable);
         }
         setFormatString(startElement, currentCell);
 
Index: src/main/java/com/monitorjbl/xlsx/impl/StreamingWorkbookReader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/monitorjbl/xlsx/impl/StreamingWorkbookReader.java	(revision 3a06f177d1a6d7d487a38cfbf72a8e042b45d6ef)
+++ src/main/java/com/monitorjbl/xlsx/impl/StreamingWorkbookReader.java	(revision )
@@ -7,6 +7,7 @@
 import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
 import org.apache.poi.openxml4j.exceptions.OpenXML4JException;
 import org.apache.poi.openxml4j.opc.OPCPackage;
+import org.apache.poi.openxml4j.opc.PackagePart;
 import org.apache.poi.poifs.crypt.Decryptor;
 import org.apache.poi.poifs.crypt.EncryptionInfo;
 import org.apache.poi.poifs.filesystem.POIFSFileSystem;
@@ -14,8 +15,10 @@
 import org.apache.poi.util.StaxHelper;
 import org.apache.poi.xssf.eventusermodel.XSSFReader;
 import org.apache.poi.xssf.eventusermodel.XSSFReader.SheetIterator;
+import org.apache.poi.xssf.model.CommentsTable;
 import org.apache.poi.xssf.model.SharedStringsTable;
 import org.apache.poi.xssf.model.StylesTable;
+import org.apache.poi.xssf.usermodel.XSSFRelation;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.w3c.dom.Node;
@@ -52,6 +55,7 @@
   private OPCPackage pkg;
   private SharedStringsTable sst;
   private boolean use1904Dates = false;
+  private StylesTable styles;
 
   /**
    * This constructor exists only so the StreamingReader can instantiate
@@ -69,7 +73,7 @@
     this.sst = sst;
     this.sstCache = sstCache;
     this.pkg = pkg;
-    this.sheets = asList(new StreamingSheet(null, reader));
+    this.sheets = asList(new StreamingSheet(null, null, reader));
     this.builder = builder;
   }
 
@@ -120,7 +124,7 @@
         sst = reader.getSharedStringsTable();
       }
 
-      StylesTable styles = reader.getStylesTable();
+      styles = reader.getStylesTable();
       NodeList workbookPr = searchForNodeList(document(reader.getWorkbookData()), "/workbook/workbookPr");
       if(workbookPr.getLength() == 1) {
         final Node date1904 = workbookPr.item(0).getAttributes().getNamedItem("date1904");
@@ -129,7 +133,7 @@
         }
       }
 
-      loadSheets(reader, sst, styles, builder.getRowCacheSize());
+      loadSheets(reader, sst, styles, pkg, builder.getRowCacheSize());
     } catch(IOException e) {
       throw new OpenException("Failed to open file", e);
     } catch(OpenXML4JException | XMLStreamException e) {
@@ -139,7 +143,38 @@
     }
   }
 
-  void loadSheets(XSSFReader reader, SharedStringsTable sst, StylesTable stylesTable, int rowCacheSize) throws IOException, InvalidFormatException,
+  private CommentsTable getCommentsTable(OPCPackage opcPackage, URI uri) throws IOException {
+  	if (!builder.shouldLoadCellComments()) {
+  		return null;
+	}
+	// selects comments file based on the described relation in the sheet relations file
+	// comments select cannot be done by index as files index vary depending if the given sheet has any comments or not
+    ArrayList<PackagePart> relations = opcPackage.getPartsByContentType("application/vnd.openxmlformats-package.relationships+xml");
+    String sheetName = uri.getPath().substring(uri.getPath().lastIndexOf('/'));
+  	for (PackagePart part : relations) {
+	  if (part.getPartName().getURI().toString().contains(sheetName)) {
+	  	NodeList commentsRelationNode = searchForNodeList(document(part.getInputStream()), "//Relationship[@Type='" + XSSFRelation.SHEET_COMMENTS.getRelation() + "']");
+	  	if (commentsRelationNode.getLength() > 0) {
+		  String commentsPath = commentsRelationNode.item(0).getAttributes().getNamedItem("Target").getNodeValue();
+		  commentsPath = commentsPath.substring(commentsPath.lastIndexOf('/'));
+		  ArrayList<PackagePart> commentParts = opcPackage.getPartsByContentType(XSSFRelation.SHEET_COMMENTS.getContentType());
+		  for (PackagePart commentPart : commentParts) {
+		    if (commentPart.getPartName().getURI().toString().contains(commentsPath)) {
+			  return new CommentsTable(commentPart);
+		    }
+		  }
+	    }
+	  }
+    }
+    return null;
+  }
+
+  protected StylesTable getStyles() {
+    return styles;
+  }
+
+  void loadSheets(XSSFReader reader, SharedStringsTable sst, StylesTable stylesTable,
+          OPCPackage opcPackage, int rowCacheSize) throws IOException, InvalidFormatException,
       XMLStreamException {
     lookupSheetNames(reader);
 
@@ -156,8 +191,9 @@
     //Iterate over the loaded streams
     int i = 0;
     for(URI uri : sheetStreams.keySet()) {
+      CommentsTable commentsTable = getCommentsTable(opcPackage, uri);
       XMLEventReader parser = StaxHelper.newXMLInputFactory().createXMLEventReader(sheetStreams.get(uri));
-      sheets.add(new StreamingSheet(sheetProperties.get(i++).get("name"), new StreamingSheetReader(sst, stylesTable, parser, use1904Dates, rowCacheSize)));
+      sheets.add(new StreamingSheet(sheetProperties.get(i++).get("name"), commentsTable, new StreamingSheetReader(sst, stylesTable, commentsTable, parser, use1904Dates, rowCacheSize)));
     }
   }
 
diff --git src/test/resources/read_cell_comments.xlsx src/test/resources/read_cell_comments.xlsx
new file mode 100644
index 0000000000000000000000000000000000000000..627ca7bff353ecd35c5961cd66670b2987f10c6f
GIT binary patch
literal 12168
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
XSgR^LhX45v=l;Ta3;=)_e?I*mFH5A2

