  package   opennlp . tools . postag ;   import   java . io . ByteArrayInputStream ;  import   java . io . ByteArrayOutputStream ;  import   java . io . IOException ;  import    java . nio . charset . StandardCharsets ;  import    opennlp . tools . formats . ResourceAsStreamFactory ;  import     opennlp . tools . postag . DummyPOSTaggerFactory . DummyPOSContextGenerator ;  import     opennlp . tools . postag . DummyPOSTaggerFactory . DummyPOSDictionary ;  import     opennlp . tools . postag . DummyPOSTaggerFactory . DummyPOSSequenceValidator ;  import    opennlp . tools . util . BaseToolFactory ;  import    opennlp . tools . util . InputStreamFactory ;  import    opennlp . tools . util . InvalidFormatException ;  import    opennlp . tools . util . ObjectStream ;  import    opennlp . tools . util . PlainTextByLineStream ;  import    opennlp . tools . util . TrainingParameters ;  import     org . junit . jupiter . api . Assertions ;  import     org . junit . jupiter . api . Test ;   public class POSTaggerFactoryTest  {   private static  ObjectStream  < POSSample > createSampleStream  ( )  throws IOException  {  InputStreamFactory  in =  new ResourceAsStreamFactory  (  POSTaggerFactoryTest . class , "/opennlp/tools/postag/AnnotatedSentences.txt" ) ;  return  new WordTagSampleStream  (  new PlainTextByLineStream  ( in ,  StandardCharsets . UTF_8 ) ) ; }   private static POSModel trainPOSModel  (  POSTaggerFactory factory )  throws IOException  {  return  POSTaggerME . train  ( "eng" ,  createSampleStream  ( ) ,  TrainingParameters . defaultParams  ( ) , factory ) ; }    @ Test void testPOSTaggerWithCustomFactory  ( )  throws IOException  {  DummyPOSDictionary  posDict =  new DummyPOSDictionary  (  POSDictionary . create  (   POSDictionaryTest . class . getResourceAsStream  ( "TagDictionaryCaseSensitive.xml" ) ) ) ;  POSModel  posModel =  trainPOSModel  (  new DummyPOSTaggerFactory  ( posDict ) ) ;  POSTaggerFactory  factory =  posModel . getFactory  ( ) ;   Assertions . assertTrue  (   factory . getTagDictionary  ( ) instanceof DummyPOSDictionary ) ;   Assertions . assertTrue  (   factory . getPOSContextGenerator  ( ) instanceof DummyPOSContextGenerator ) ;   Assertions . assertTrue  (   factory . getSequenceValidator  ( ) instanceof DummyPOSSequenceValidator ) ;  ByteArrayOutputStream  out =  new ByteArrayOutputStream  ( ) ;   posModel . serialize  ( out ) ;  ByteArrayInputStream  in =  new ByteArrayInputStream  (  out . toByteArray  ( ) ) ;  POSModel  fromSerialized =  new POSModel  ( in ) ;   factory =  fromSerialized . getFactory  ( ) ;   Assertions . assertTrue  (   factory . getTagDictionary  ( ) instanceof DummyPOSDictionary ) ;   Assertions . assertTrue  (   factory . getPOSContextGenerator  ( ) instanceof DummyPOSContextGenerator ) ;   Assertions . assertTrue  (   factory . getSequenceValidator  ( ) instanceof DummyPOSSequenceValidator ) ; }    @ Test void testPOSTaggerWithDefaultFactory  ( )  throws IOException  {  POSDictionary  posDict =  POSDictionary . create  (   POSDictionaryTest . class . getResourceAsStream  ( "TagDictionaryCaseSensitive.xml" ) ) ;  POSModel  posModel =  trainPOSModel  (  new POSTaggerFactory  ( null , null , posDict ) ) ;  POSTaggerFactory  factory =  posModel . getFactory  ( ) ;   Assertions . assertTrue  (   factory . getTagDictionary  ( ) instanceof POSDictionary ) ;   Assertions . assertNotNull  (  factory . getPOSContextGenerator  ( ) ) ;   Assertions . assertTrue  (   factory . getSequenceValidator  ( ) instanceof DefaultPOSSequenceValidator ) ;  ByteArrayOutputStream  out =  new ByteArrayOutputStream  ( ) ;   posModel . serialize  ( out ) ;  ByteArrayInputStream  in =  new ByteArrayInputStream  (  out . toByteArray  ( ) ) ;  POSModel  fromSerialized =  new POSModel  ( in ) ;   factory =  fromSerialized . getFactory  ( ) ;   Assertions . assertTrue  (   factory . getTagDictionary  ( ) instanceof POSDictionary ) ;   Assertions . assertNotNull  (  factory . getPOSContextGenerator  ( ) ) ;   Assertions . assertTrue  (   factory . getSequenceValidator  ( ) instanceof DefaultPOSSequenceValidator ) ; }    @ Test void testCreateWithInvalidName  ( )  {   Assertions . assertThrows  (  InvalidFormatException . class ,   ( ) ->  {   BaseToolFactory . create  ( "X" , null ) ; } ) ; }    @ Test void testCreateWithInvalidName2  ( )  {   Assertions . assertThrows  (  InvalidFormatException . class ,   ( ) ->  {   POSTaggerFactory . create  ( "X" , null , null ) ; } ) ; }    @ Test void testCreateWithHierarchy  ( )  {   Assertions . assertThrows  (  InvalidFormatException . class ,   ( ) ->  {   BaseToolFactory . create  (   Object . class . getCanonicalName  ( ) , null ) ; } ) ; }    @ Test void testCreateWithHierarchy2  ( )  {   Assertions . assertThrows  (  InvalidFormatException . class ,   ( ) ->  {   POSTaggerFactory . create  (   this . getClass  ( ) . getCanonicalName  ( ) , null , null ) ; } ) ; } }