  package    opennlp . tools . formats . ad ;   import   java . io . File ;  import   java . io . IOException ;  import   java . net . URISyntaxException ;  import   java . util . ArrayList ;  import   java . util . List ;  import   java . util . Objects ;  import    opennlp . tools . tokenize . TokenSample ;  import    opennlp . tools . util . ObjectStream ;  import     org . junit . jupiter . api . Assertions ;  import     org . junit . jupiter . api . BeforeEach ;  import     org . junit . jupiter . api . Test ;   public class ADTokenSampleStreamTest  {   private final  List  < TokenSample >  samples =  new  ArrayList  < >  ( ) ;    @ Test void testSimpleCount  ( )  {   Assertions . assertEquals  (  ADParagraphStreamTest . NUM_SENTENCES ,  samples . size  ( ) ) ; }    @ Test void testSentences  ( )  {   Assertions . assertTrue  (    samples . get  ( 5 ) . getText  ( ) . contains  ( "ofereceu-me" ) ) ; }    @ BeforeEach void setup  ( )  throws IOException , URISyntaxException  {    ADTokenSampleStreamFactory <  ADTokenSampleStreamFactory . Parameters >  factory =  new  ADTokenSampleStreamFactory  < >  (   ADTokenSampleStreamFactory . Parameters . class ) ;  File  dict =  new File  (   Objects . requireNonNull  (    getClass  ( ) . getClassLoader  ( ) . getResource  ( "opennlp/tools/tokenize/latin-detokenizer.xml" ) ) . toURI  ( ) ) ;  File  data =  new File  (   Objects . requireNonNull  (    getClass  ( ) . getClassLoader  ( ) . getResource  ( "opennlp/tools/formats/ad.sample" ) ) . toURI  ( ) ) ;   String  [ ]  args =  { "-data" ,  data . getCanonicalPath  ( ) , "-encoding" , "UTF-8" , "-lang" , "por" , "-detokenizer" ,  dict . getCanonicalPath  ( ) } ;   ObjectStream  < TokenSample >  tokenSampleStream =  factory . create  ( args ) ;  TokenSample  sample =  tokenSampleStream . read  ( ) ;  while  (  sample != null )  {   samples . add  ( sample ) ;   sample =  tokenSampleStream . read  ( ) ; } } }