  package   opennlp . tools . namefind ;   import   java . io . IOException ;  import     opennlp . tools . ml . model . Event ;  import    opennlp . tools . util . ObjectStream ;  import    opennlp . tools . util . ObjectStreamUtils ;  import    opennlp . tools . util . Span ;  import     opennlp . tools . util . featuregen . AdaptiveFeatureGenerator ;  import     org . junit . jupiter . api . Assertions ;  import     org . junit . jupiter . api . Test ;   public class NameFinderEventStreamTest  {   private static final  String  [ ]  SENTENCE =  { "Elise" , "Wendel" , "appreciated" , "the" , "hint" , "and" , "enjoyed" , "a" , "delicious" , "traditional" , "meal" , "." } ;   private static final NameContextGenerator  CG =  new DefaultNameContextGenerator  (  (  AdaptiveFeatureGenerator  [ ] ) null ) ;    @ Test void testOutcomesForSingleTypeSentence  ( )  throws IOException  {  NameContextGenerator  CG =  new DefaultNameContextGenerator  (  (  AdaptiveFeatureGenerator  [ ] ) null ) ;  NameSample  nameSample =  new NameSample  ( SENTENCE ,  new Span  [ ]  {  new Span  ( 0 , 2 , "person" ) } , false ) ;  try  (   ObjectStream  < Event > eventStream =  new NameFinderEventStream  (  ObjectStreamUtils . createObjectStream  ( nameSample ) , "person" , CG , null ) )  {   Assertions . assertEquals  (  "person-" +  NameFinderME . START ,   eventStream . read  ( ) . getOutcome  ( ) ) ;   Assertions . assertEquals  (  "person-" +  NameFinderME . CONTINUE ,   eventStream . read  ( ) . getOutcome  ( ) ) ;  for (   int  i = 0 ;  i < 10 ;  i ++ )  {   Assertions . assertEquals  (  NameFinderME . OTHER ,   eventStream . read  ( ) . getOutcome  ( ) ) ; }   Assertions . assertNull  (  eventStream . read  ( ) ) ; } }    @ Test void testOutcomesTypeCantOverride  ( )  throws IOException  {  String  type = "XYZ" ;  NameSample  nameSample =  new NameSample  ( SENTENCE ,  new Span  [ ]  {  new Span  ( 0 , 2 , "person" ) } , false ) ;   ObjectStream  < Event >  eventStream =  new NameFinderEventStream  (  ObjectStreamUtils . createObjectStream  ( nameSample ) , type , CG , null ) ;  String  prefix =  type + "-" ;   Assertions . assertEquals  (  prefix +  NameFinderME . START ,   eventStream . read  ( ) . getOutcome  ( ) ) ;   Assertions . assertEquals  (  prefix +  NameFinderME . CONTINUE ,   eventStream . read  ( ) . getOutcome  ( ) ) ;  for (   int  i = 0 ;  i < 10 ;  i ++ )  {   Assertions . assertEquals  (  NameFinderME . OTHER ,   eventStream . read  ( ) . getOutcome  ( ) ) ; }   Assertions . assertNull  (  eventStream . read  ( ) ) ;   eventStream . close  ( ) ; }    @ Test void testOutcomesWithType  ( )  throws IOException  {  String  type = "XYZ" ;  NameSample  nameSample =  new NameSample  ( SENTENCE ,  new Span  [ ]  {  new Span  ( 0 , 2 ) } , false ) ;   ObjectStream  < Event >  eventStream =  new NameFinderEventStream  (  ObjectStreamUtils . createObjectStream  ( nameSample ) , type , CG , null ) ;  String  prefix =  type + "-" ;   Assertions . assertEquals  (  prefix +  NameFinderME . START ,   eventStream . read  ( ) . getOutcome  ( ) ) ;   Assertions . assertEquals  (  prefix +  NameFinderME . CONTINUE ,   eventStream . read  ( ) . getOutcome  ( ) ) ;  for (   int  i = 0 ;  i < 10 ;  i ++ )  {   Assertions . assertEquals  (  NameFinderME . OTHER ,   eventStream . read  ( ) . getOutcome  ( ) ) ; }   Assertions . assertNull  (  eventStream . read  ( ) ) ;   eventStream . close  ( ) ; }    @ Test void testOutcomesTypeEmpty  ( )  throws IOException  {  NameSample  nameSample =  new NameSample  ( SENTENCE ,  new Span  [ ]  {  new Span  ( 0 , 2 ) } , false ) ;   ObjectStream  < Event >  eventStream =  new NameFinderEventStream  (  ObjectStreamUtils . createObjectStream  ( nameSample ) , null , CG , null ) ;  String  prefix = "default-" ;   Assertions . assertEquals  (  prefix +  NameFinderME . START ,   eventStream . read  ( ) . getOutcome  ( ) ) ;   Assertions . assertEquals  (  prefix +  NameFinderME . CONTINUE ,   eventStream . read  ( ) . getOutcome  ( ) ) ;  for (   int  i = 0 ;  i < 10 ;  i ++ )  {   Assertions . assertEquals  (  NameFinderME . OTHER ,   eventStream . read  ( ) . getOutcome  ( ) ) ; }   Assertions . assertNull  (  eventStream . read  ( ) ) ;   eventStream . close  ( ) ; } }