  package   opennlp . tools . cmdline ;   import   java . security . Permission ;  import     org . junit . jupiter . api . AfterEach ;  import     org . junit . jupiter . api . Assertions ;  import     org . junit . jupiter . api . BeforeEach ;  import     org . junit . jupiter . api . Test ;   public class CLITest  {   private static class ExitException  extends SecurityException  {   private static final  long  serialVersionUID = 6144359372794123631L ;   private final  int  status ;   public ExitException  (   int status )  {    this . status = status ; }   int status  ( )  {  return status ; } }   private static class NoExitSecurityManager  extends SecurityManager  {    @ Override public void checkPermission  (  Permission perm )  { }    @ Override public void checkPermission  (  Permission perm ,  Object context )  { }    @ Override public void checkExit  (   int status )  {   super . checkExit  ( status ) ;  throw  new ExitException  ( status ) ; } }   private final SecurityManager  originalSecurityManager =  System . getSecurityManager  ( ) ;    @ BeforeEach void installNoExitSecurityManager  ( )  {   System . setSecurityManager  (  new NoExitSecurityManager  ( ) ) ; }    @ Test void testMainHelpMessage  ( )  {  try  {   CLI . main  (  new String  [ ]  { } ) ; }  catch (   ExitException e )  {   Assertions . assertEquals  ( 0 ,  e . status  ( ) ) ; } }    @ Test void testUnknownToolMessage  ( )  {  try  {   CLI . main  (  new String  [ ]  { "unknown name" } ) ; }  catch (   ExitException e )  {   Assertions . assertEquals  ( 1 ,  e . status  ( ) ) ; } }    @ Test void testToolParameterMessage  ( )  {  try  {   CLI . main  (  new String  [ ]  { "DoccatTrainer" , "-param" , "value" } ) ; }  catch (   ExitException e )  {   Assertions . assertEquals  ( 1 ,  e . status  ( ) ) ; } }    @ Test void testUnknownFileMessage  ( )  {  try  {   CLI . main  (  new String  [ ]  { "Doccat" , "unknown.model" } ) ; }  catch (   ExitException e )  {   Assertions . assertEquals  (  - 1 ,  e . status  ( ) ) ; } }    @ Test void testHelpMessageOfTools  ( )  {  for ( String toolName :  CLI . getToolNames  ( ) )  {    System . err . println  (  "-> ToolName" + toolName ) ;  try  {   CLI . main  (  new String  [ ]  { toolName , "help" } ) ; }  catch (   ExitException e )  {   Assertions . assertEquals  ( 0 ,  e . status  ( ) ) ; } } }    @ AfterEach void restoreSecurityManager  ( )  {   System . setSecurityManager  ( originalSecurityManager ) ; } }