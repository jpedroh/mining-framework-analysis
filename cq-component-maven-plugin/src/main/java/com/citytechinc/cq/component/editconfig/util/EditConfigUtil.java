  package      com . citytechinc . cq . component . editconfig . util ;   import   java . io . File ;  import   java . io . FileInputStream ;  import   java . io . FileOutputStream ;  import   java . io . IOException ;  import    java . lang . reflect . InvocationTargetException ;  import   java . util . ArrayList ;  import   java . util . List ;  import   java . util . Set ;  import  javassist . CtClass ;  import    javax . xml . parsers . ParserConfigurationException ;  import    javax . xml . transform . TransformerException ;  import       org . apache . commons . compress . archivers . zip . ZipArchiveEntry ;  import       org . apache . commons . compress . archivers . zip . ZipArchiveOutputStream ;  import     org . apache . commons . io . IOUtils ;  import      com . citytechinc . cq . component . annotations . Component ;  import      com . citytechinc . cq . component . dialog . ComponentNameTransformer ;  import       com . citytechinc . cq . component . dialog . exception . InvalidComponentClassException ;  import       com . citytechinc . cq . component . dialog . exception . OutputFailureException ;  import      com . citytechinc . cq . component . editconfig . EditConfig ;  import       com . citytechinc . cq . component . editconfig . factory . EditConfigFactory ;  import       com . citytechinc . cq . component . maven . util . ComponentMojoUtil ;  import      com . citytechinc . cq . component . xml . XmlWriter ;   public class EditConfigUtil  {   private EditConfigUtil  ( )  { }   public static void writeEditConfigToArchiveFile  (  ComponentNameTransformer transformer ,  File editConfigFile ,  CtClass componentClass ,  ZipArchiveOutputStream archiveStream ,   Set  < String > reservedNames ,  String componentPathBase ,  String defaultComponentPathSuffix )  throws IOException , ClassNotFoundException  {  String  editConfigFilePath =       ComponentMojoUtil . getComponentBasePathForComponentClass  ( componentClass , componentPathBase ) + "/" +  ComponentMojoUtil . getComponentPathSuffixForComponentClass  ( componentClass , defaultComponentPathSuffix ) + "/" +  ComponentMojoUtil . getComponentNameForComponentClass  ( transformer , componentClass ) + "/_cq_editConfig.xml" ;    ComponentMojoUtil . getLog  ( ) . debug  (  "Archiving edit config file " + editConfigFilePath ) ;  if  (  !  reservedNames . contains  (  editConfigFilePath . toLowerCase  ( ) ) )  {  ZipArchiveEntry  entry =  new ZipArchiveEntry  ( editConfigFile , editConfigFilePath ) ;   archiveStream . putArchiveEntry  ( entry ) ;   IOUtils . copy  (  new FileInputStream  ( editConfigFile ) , archiveStream ) ;   archiveStream . closeArchiveEntry  ( ) ; } else  {    ComponentMojoUtil . getLog  ( ) . debug  (  "Existing file found at " + editConfigFilePath ) ; } }   public static File writeEditConfigToFile  (  ComponentNameTransformer transformer ,  EditConfig editConfig ,  CtClass componentClass ,  File buildDirectory ,  String componentPathBase ,  String defaultComponentPathSuffix )  throws TransformerException , ParserConfigurationException , IOException , OutputFailureException , ClassNotFoundException , IllegalArgumentException , SecurityException , IllegalAccessException , InvocationTargetException , NoSuchMethodException  {  File  componentOutputDirectory =  ComponentMojoUtil . getOutputDirectoryForComponentClass  ( transformer , componentClass , buildDirectory , componentPathBase , defaultComponentPathSuffix ) ;  File  editConfigFile =  new File  ( componentOutputDirectory , "_cq_editConfig.xml" ) ;  if  (  editConfigFile . exists  ( ) )  {   editConfigFile . delete  ( ) ; }   editConfigFile . createNewFile  ( ) ;   XmlWriter . writeXml  ( editConfig ,  new FileOutputStream  ( editConfigFile ) ) ;  return editConfigFile ; }   public static  List  < EditConfig > buildEditConfigFromClassList  (   List  < CtClass > classList ,  ZipArchiveOutputStream zipOutputStream ,   Set  < String > reservedNames ,  File buildDirectory ,  String componentPathBase ,  String defaultComponentPathSuffix ,  ComponentNameTransformer transformer )  throws InvalidComponentClassException , TransformerException , ParserConfigurationException , IOException , OutputFailureException , ClassNotFoundException , IllegalArgumentException , SecurityException , IllegalAccessException , InvocationTargetException , NoSuchMethodException  {   List  < EditConfig >  builtEditConfigs =  new  ArrayList  < EditConfig >  ( ) ;  for ( CtClass curClass : classList )  {  Component  annotation =  ( Component )  curClass . getAnnotation  (  Component . class ) ;  if  (   annotation != null &&  annotation . editConfig  ( ) )  {  EditConfig  builtEditConfig =  EditConfigFactory . make  ( curClass ) ;   builtEditConfigs . add  ( builtEditConfig ) ;  File  editConfigFile =  writeEditConfigToFile  ( transformer , builtEditConfig , curClass , buildDirectory , componentPathBase , defaultComponentPathSuffix ) ;   writeEditConfigToArchiveFile  ( transformer , editConfigFile , curClass , zipOutputStream , reservedNames , componentPathBase , defaultComponentPathSuffix ) ; } }  return builtEditConfigs ; } ; }