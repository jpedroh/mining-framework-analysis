  package ninja ;   import static    org . hamcrest . CoreMatchers . equalTo ;  import static    org . junit . Assert . assertFalse ;  import static    org . junit . Assert . assertThat ;  import static    org . junit . Assert . assertTrue ;  import static    org . mockito . Mockito . when ;  import   ninja . utils . NinjaProperties ;  import   org . hamcrest . CoreMatchers ;  import   org . junit . Before ;  import   org . junit . Test ;  import    org . junit . runner . RunWith ;  import   org . mockito . Mock ;  import    org . mockito . runners . MockitoJUnitRunner ;  import    com . google . inject . Injector ;  import    com . google . inject . Provider ;  import   java . util . Map ;    @ RunWith  (  MockitoJUnitRunner . class ) public class RouterImplTest  {  Router  router ;    @ Mock NinjaProperties  ninjaProperties ;    @ Mock Injector  injector ;    @ Mock Context  context ;    @ Mock  Provider  < TestController >  testControllerProvider ;    @ Before public void before  ( )  {    when  (  testControllerProvider . get  ( ) ) . thenReturn  (  new TestController  ( ) ) ;    when  (  injector . getProvider  (  TestController . class ) ) . thenReturn  ( testControllerProvider ) ;   router =  new RouterImpl  ( injector , ninjaProperties ) ;     router . GET  ( ) . route  ( "/testroute" ) . with  (  TestController . class , "index" ) ;     router . GET  ( ) . route  ( "/user/{email}/{id: .*}" ) . with  (  TestController . class , "user" ) ;     router . GET  ( ) . route  ( "/u{userId: .*}/entries/{entryId: .*}" ) . with  (  TestController . class , "entry" ) ;     router . GET  ( ) . route  ( "/.*" ) . with  (  Results . redirect  ( "/" ) ) ;   router . compileRoutes  ( ) ; }    @ Test public void testGetReverseRouteWithNoContextPathWorks  ( )  {  String  contextPath = "" ;    when  (  ninjaProperties . getContextPath  ( ) ) . thenReturn  ( contextPath ) ;  String  route =  router . getReverseRoute  (  TestController . class , "index" ) ;   assertThat  ( route ,  CoreMatchers . equalTo  ( "/testroute" ) ) ; }    @ Test public void testGetReverseRouteContextPathWorks  ( )  {  String  contextPath = "/myappcontext" ;    when  (  ninjaProperties . getContextPath  ( ) ) . thenReturn  ( contextPath ) ;  String  route =  router . getReverseRoute  (  TestController . class , "index" ) ;   assertThat  ( route ,  equalTo  ( "/myappcontext/testroute" ) ) ; }    @ Test public void testGetReverseRouteWithRegexWorks  ( )  {  String  contextPath = "" ;    when  (  ninjaProperties . getContextPath  ( ) ) . thenReturn  ( contextPath ) ;  String  route =  router . getReverseRoute  (  TestController . class , "user" , "email" , "me@me.com" , "id" , 10000 ) ;   assertThat  ( route ,  equalTo  ( "/user/me@me.com/10000" ) ) ; }    @ Test public void testGetReverseRouteWithRegexAndQueryParametersWorks  ( )  {  String  contextPath = "" ;    when  (  ninjaProperties . getContextPath  ( ) ) . thenReturn  ( contextPath ) ;  String  route =  router . getReverseRoute  (  TestController . class , "user" , "email" , "me@me.com" , "id" , 10000 , "q" , "froglegs" ) ;   assertThat  ( route ,  equalTo  ( "/user/me@me.com/10000?q=froglegs" ) ) ; }    @ Test public void testGetReverseRouteWithMultipleRegexWorks  ( )  {  String  contextPath = "" ;    when  (  ninjaProperties . getContextPath  ( ) ) . thenReturn  ( contextPath ) ;  String  route =  router . getReverseRoute  (  TestController . class , "entry" , "userId" , 1 , "entryId" , 100 ) ;   assertThat  ( route ,  equalTo  ( "/u1/entries/100" ) ) ; }   public static class TestController  {   public Result index  ( )  {  return  Results . ok  ( ) ; }   public Result user  ( )  {  return  Results . ok  ( ) ; }   public Result entry  ( )  {  return  Results . ok  ( ) ; } }    @ Test public void testRedirect  ( )  {  String  contextPath = "" ;    when  (  ninjaProperties . getContextPath  ( ) ) . thenReturn  ( contextPath ) ;  Route  route =  router . getRouteFor  ( "GET" , "/this-should-redirect" ) ;   assertThat  (  route . getUrl  ( ) ,  equalTo  ( "/.*" ) ) ;  FilterChain  filterChain =  route . getFilterChain  ( ) ;  Result  result =  filterChain . next  ( context ) ;   Map  < String , String >  headers =  result . getHeaders  ( ) ;   assertTrue  (  headers . containsKey  ( "Location" ) ) ;   assertThat  (  result . getStatusCode  ( ) ,  equalTo  ( 303 ) ) ; }    @ Test public void testRedirectResultNotShared  ( )  {  String  contextPath = "" ;    when  (  ninjaProperties . getContextPath  ( ) ) . thenReturn  ( contextPath ) ;  Route  route =  router . getRouteFor  ( "GET" , "/redirect1" ) ;   assertThat  (  route . getUrl  ( ) ,  equalTo  ( "/.*" ) ) ;  FilterChain  filterChain =  route . getFilterChain  ( ) ;  Result  result =  filterChain . next  ( context ) ;   result . addHeader  ( "dummy" , "value" ) ;   route =  router . getRouteFor  ( "GET" , "/redirect2" ) ;   assertThat  (  route . getUrl  ( ) ,  equalTo  ( "/.*" ) ) ;   filterChain =  route . getFilterChain  ( ) ;   result =  filterChain . next  ( context ) ;   Map  < String , String >  headers =  result . getHeaders  ( ) ;   assertFalse  (  headers . containsKey  ( "dummy" ) ) ; } }