  package   cc . redpen . parser ;   import    cc . redpen . model . Sentence ;  import    cc . redpen . symbol . AbstractSymbols ;  import    cc . redpen . symbol . DefaultSymbols ;  import    cc . redpen . util . EndOfSentenceDetector ;  import   java . util . ArrayList ;  import   java . util . Arrays ;  import   java . util . List ;  import    java . util . regex . Pattern ;   public final class SentenceExtractor  {   private Pattern  fullStopPattern ;   private  List  < String >  fullStopList =  new  ArrayList  < >  ( ) ;   private  List  < String >  rightQuotationList =  new  ArrayList  < >  ( ) ;   private  List  < String >  whiteWords =  generateUmList  ( "Mr." , "Mrs." , "Dr." , "genn.ai" , "Co., Ltd." , "Miss." , "a.m." , "U.S.A." , "Jan." , "Feb." , "Mar." , "Apr." , "May." , "Jun." , "Jul." , "Aug." , "Sep." , "Oct." , "Nov." , "Dec." , "Feb." , "B.C" , "A.D." ) ;   private EndOfSentenceDetector  endOfSentenceDetector ;   public SentenceExtractor  ( )  {  AbstractSymbols  symbols =  DefaultSymbols . getInstance  ( ) ;   fullStopList . add  (   symbols . get  ( "FULL_STOP" ) . getValue  ( ) ) ;   fullStopList . add  (   symbols . get  ( "QUESTION_MARK" ) . getValue  ( ) ) ;   fullStopList . add  (   symbols . get  ( "EXCLAMATION_MARK" ) . getValue  ( ) ) ;   rightQuotationList . add  (   symbols . get  ( "RIGHT_SINGLE_QUOTATION_MARK" ) . getValue  ( ) ) ;   rightQuotationList . add  (   symbols . get  ( "RIGHT_DOUBLE_QUOTATION_MARK" ) . getValue  ( ) ) ;    this . fullStopPattern =  Pattern . compile  (  this . constructEndSentencePattern  ( ) ) ;    this . endOfSentenceDetector =  new EndOfSentenceDetector  (  this . fullStopPattern ,  this . whiteWords ) ; }   public SentenceExtractor  (   List  < String > fullStopList )  {  this  ( ) ;    this . fullStopList = fullStopList ;    this . fullStopPattern =  Pattern . compile  (  this . constructEndSentencePattern  ( ) ) ;    this . endOfSentenceDetector =  new EndOfSentenceDetector  (  this . fullStopPattern ,  this . whiteWords ) ; }   public SentenceExtractor  (   List  < String > fullStopList ,   List  < String > rightQuotationList )  {    this . fullStopList = fullStopList ;    this . rightQuotationList = rightQuotationList ;    this . fullStopPattern =  Pattern . compile  (  this . constructEndSentencePattern  ( ) ) ;    this . endOfSentenceDetector =  new EndOfSentenceDetector  (  this . fullStopPattern ,  this . whiteWords ) ; }   private static void generateQutotationPattern  (   List  < String > endCharacters ,  StringBuilder patternString ,  String quotation )  {  for ( String endChar : endCharacters )  {  String  pattern ;   pattern =   handleSpecialCharacter  ( endChar ) + quotation ;   appendPattern  ( patternString , pattern ) ; } }   private static void generateSimplePattern  (   List  < String > endCharacters ,  StringBuilder patternString )  {  for ( String endChar : endCharacters )  {   endChar =  handleSpecialCharacter  ( endChar ) ;   appendPattern  ( patternString , endChar ) ; } }   private static void appendPattern  (  StringBuilder patternString ,  String newPattern )  {  if  (   patternString . length  ( ) > 0 )  {   patternString . append  ( "|" ) ; }   patternString . append  ( newPattern ) ; }   private static String handleSpecialCharacter  (  String endChar )  {  if  (  endChar . equals  ( "." ) )  {   endChar = "\\." ; }  if  (  endChar . equals  ( "?" ) )  {   endChar = "\\?" ; }  if  (  endChar . equals  ( "!" ) )  {   endChar = "\\!" ; }  return endChar ; }   private static  <  E >  List  < E > generateUmList  (  E ...  args )  {   List  < E >  list =  new  ArrayList  < >  (  Arrays . asList  ( args ) ) ;  return list ; }   public  int getSentenceEndPosition  (  String str )  {  return  endOfSentenceDetector . getSentenceEndPosition  ( str ) ; }   protected String constructEndSentencePattern  ( )  {  if  (    this . fullStopList == null ||    this . fullStopList . size  ( ) == 0 )  {  throw  new IllegalArgumentException  ( "No end character is specified" ) ; }  StringBuilder  patternString =  new StringBuilder  ( ) ;  for ( String rightQuotation : rightQuotationList )  {   generateQutotationPattern  (  this . fullStopList , patternString , rightQuotation ) ; }   generateSimplePattern  (  this . fullStopList , patternString ) ;  return  patternString . toString  ( ) ; }   public String extract  (  String line ,   List  < Sentence > outputSentences ,   int position )  {   int  periodPosition =  endOfSentenceDetector . getSentenceEndPosition  ( line ) ;  if  (  periodPosition ==  - 1 )  {  return line ; } else  {  while  ( true )  {  Sentence  sentence =  new Sentence  (  line . substring  ( 0 ,  periodPosition + 1 ) , position ) ;   outputSentences . add  ( sentence ) ;   line =  line . substring  (  periodPosition + 1 ,  line . length  ( ) ) ;   periodPosition =  endOfSentenceDetector . getSentenceEndPosition  ( line ) ;  if  (  periodPosition ==  - 1 )  {  return line ; } } } } }