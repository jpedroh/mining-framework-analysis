  package algorithms ;   import   java . util . ArrayList ;  import   java . util . List ;  import   java . util . Set ;  import     org . apache . commons . configuration . XMLConfiguration ;  import  util . NeighborhoodImpl ;  import  basics . VehicleRoutingProblem ;  import   basics . VehicleRoutingProblem . FleetComposition ;  import   basics . algo . InsertionListener ;  import    basics . algo . VehicleRoutingAlgorithmListeners . PrioritizedVRAListener ;  import    basics . algo . VehicleRoutingAlgorithmListeners . Priority ;  import   basics . costs . VehicleRoutingActivityCosts ;  class CalculatorBuilder  {   private static class CalculatorPlusListeners  {   private JobInsertionCalculator  calculator ;   public JobInsertionCalculator getCalculator  ( )  {  return calculator ; }   private  List  < PrioritizedVRAListener >  algorithmListener =  new  ArrayList  < PrioritizedVRAListener >  ( ) ;   private  List  < InsertionListener >  insertionListener =  new  ArrayList  < InsertionListener >  ( ) ;   public CalculatorPlusListeners  (  JobInsertionCalculator calculator )  {  super  ( ) ;    this . calculator = calculator ; }   public  List  < PrioritizedVRAListener > getAlgorithmListener  ( )  {  return algorithmListener ; }   public  List  < InsertionListener > getInsertionListener  ( )  {  return insertionListener ; } }   private  List  < InsertionListener >  insertionListeners ;   private  List  < PrioritizedVRAListener >  algorithmListeners ;   private VehicleRoutingProblem  vrp ;   private StateManager  states ;   private boolean  local = true ;   private  int  forwardLooking = 0 ;   private  int  memory = 1 ;   private boolean  considerFixedCost = false ;   private  double  weightOfFixedCost = 0 ;   private VehicleFleetManager  fleetManager ;   private boolean  timeScheduling ;   private  double  timeSlice ;   private  int  neighbors ;   public CalculatorBuilder  (   List  < InsertionListener > insertionListeners ,   List  < PrioritizedVRAListener > algorithmListeners )  {  super  ( ) ;    this . insertionListeners = insertionListeners ;    this . algorithmListeners = algorithmListeners ; }   public CalculatorBuilder setVehicleRoutingProblem  (  VehicleRoutingProblem vehicleRoutingProblem )  {    this . vrp = vehicleRoutingProblem ;  return this ; }   public CalculatorBuilder setVehicleFleetManager  (  VehicleFleetManager fleetManager )  {    this . fleetManager = fleetManager ;  return this ; }   public void setLocalLevel  ( )  {   local = true ; }   public void setRouteLevel  (   int forwardLooking ,   int memory )  {   local = false ;    this . forwardLooking = forwardLooking ;    this . memory = memory ; }   public void considerFixedCosts  (   double weightOfFixedCosts )  {   considerFixedCost = true ;    this . weightOfFixedCost = weightOfFixedCosts ; }   public void experimentalTimeScheduler  (   double timeSlice ,   int neighbors )  {   timeScheduling = true ;    this . timeSlice = timeSlice ;    this . neighbors = neighbors ; }   public JobInsertionCalculator build  ( )  {  if  (  vrp == null )  throw  new IllegalStateException  ( "vehicle-routing-problem is null, but it must be set (this.setVehicleRoutingProblem(vrp))" ) ;  if  (  states == null )  throw  new IllegalStateException  ( "states is null, but is must be set (this.setStates(states))" ) ;  if  (  fleetManager == null )  throw  new IllegalStateException  ( "fleetManager is null, but it must be set (this.setVehicleFleetManager(fleetManager))" ) ;  JobInsertionCalculator  baseCalculator = null ;  CalculatorPlusListeners  standardLocal = null ;  if  ( local )  {   standardLocal =  createStandardLocal  ( vrp , states ) ; } else  {   standardLocal =  createStandardRoute  ( vrp , states , forwardLooking , memory ) ; }   baseCalculator =  standardLocal . getCalculator  ( ) ;   addAlgorithmListeners  (  standardLocal . getAlgorithmListener  ( ) ) ;   addInsertionListeners  (  standardLocal . getInsertionListener  ( ) ) ;  if  ( considerFixedCost )  {  CalculatorPlusListeners  withFixed =  createCalculatorConsideringFixedCosts  ( vrp , baseCalculator , states , weightOfFixedCost ) ;   baseCalculator =  withFixed . getCalculator  ( ) ;   addAlgorithmListeners  (  withFixed . getAlgorithmListener  ( ) ) ;   addInsertionListeners  (  withFixed . getInsertionListener  ( ) ) ; }  if  ( timeScheduling )  {   baseCalculator =  new CalculatesServiceInsertionWithTimeScheduling  ( baseCalculator , timeSlice , neighbors ) ; }  return  createFinalInsertion  ( fleetManager , baseCalculator , states ) ; }   private void addInsertionListeners  (   List  < InsertionListener > list )  {  for ( InsertionListener iL : list )  {   insertionListeners . add  ( iL ) ; } }   private void addAlgorithmListeners  (   List  < PrioritizedVRAListener > list )  {  for ( PrioritizedVRAListener aL : list )  {   algorithmListeners . add  ( aL ) ; } } 
<<<<<<<
  private CalculatorPlusListeners createStandardLocal  (  VehicleRoutingProblem vrp ,  StatesContainer activityStates2 )  {  JobInsertionCalculator  standardServiceInsertion =  new CalculatesServiceInsertion  (  vrp . getTransportCosts  ( ) ,  vrp . getActivityCosts  ( ) ) ;    (  ( CalculatesServiceInsertion ) standardServiceInsertion ) . setStates  ( activityStates2 ) ;    (  ( CalculatesServiceInsertion ) standardServiceInsertion ) . setNeighborhood  (  vrp . getNeighborhood  ( ) ) ;    (  ( CalculatesServiceInsertion ) standardServiceInsertion ) . setHardConstraint  (  new  HardConstraints . HardLoadConstraint  ( activityStates2 ) ) ;  CalculatorPlusListeners  calcPlusListeners =  new CalculatorPlusListeners  ( standardServiceInsertion ) ;  return calcPlusListeners ; }
=======
>>>>>>>
 
<<<<<<<
  private CalculatorPlusListeners createStandardRoute  (  VehicleRoutingProblem vrp ,  StatesContainer activityStates2 ,   int forwardLooking ,   int solutionMemory )  {   int  after = forwardLooking ;  JobInsertionCalculator  jobInsertionCalculator =  new CalculatesServiceInsertionOnRouteLevel  (  vrp . getTransportCosts  ( ) ,  vrp . getActivityCosts  ( ) ) ;    (  ( CalculatesServiceInsertionOnRouteLevel ) jobInsertionCalculator ) . setNuOfActsForwardLooking  ( after ) ;    (  ( CalculatesServiceInsertionOnRouteLevel ) jobInsertionCalculator ) . setMemorySize  ( solutionMemory ) ;    (  ( CalculatesServiceInsertionOnRouteLevel ) jobInsertionCalculator ) . setNeighborhood  (  vrp . getNeighborhood  ( ) ) ;    (  ( CalculatesServiceInsertionOnRouteLevel ) jobInsertionCalculator ) . setStates  ( activityStates2 ) ;  CalculatorPlusListeners  calcPlusListener =  new CalculatorPlusListeners  ( jobInsertionCalculator ) ;  return calcPlusListener ; }
=======
>>>>>>>
   public CalculatorBuilder setStates  (  StateManager states )  {    this . states = states ;  return this ; }   private CalculatorPlusListeners createStandardLocal  (  VehicleRoutingProblem vrp ,  StateManager activityStates2 )  {  JobInsertionCalculator  standardServiceInsertion =  new CalculatesServiceInsertion  (  vrp . getTransportCosts  ( ) ,  vrp . getActivityCosts  ( ) ) ;    (  ( CalculatesServiceInsertion ) standardServiceInsertion ) . setActivityStates  ( activityStates2 ) ;    (  ( CalculatesServiceInsertion ) standardServiceInsertion ) . setNeighborhood  (  vrp . getNeighborhood  ( ) ) ;  CalculatorPlusListeners  calcPlusListeners =  new CalculatorPlusListeners  ( standardServiceInsertion ) ;  return calcPlusListeners ; }   private CalculatorPlusListeners createCalculatorConsideringFixedCosts  (  VehicleRoutingProblem vrp ,  JobInsertionCalculator baseCalculator ,  StateManager activityStates2 ,   double weightOfFixedCosts )  {   final CalculatesServiceInsertionConsideringFixCost  withFixCost =  new CalculatesServiceInsertionConsideringFixCost  ( baseCalculator , activityStates2 ) ;   withFixCost . setWeightOfFixCost  ( weightOfFixedCosts ) ;  CalculatorPlusListeners  calcPlusListeners =  new CalculatorPlusListeners  ( withFixCost ) ;    calcPlusListeners . getInsertionListener  ( ) . add  (  new ConfigureFixCostCalculator  ( vrp , withFixCost ) ) ;  return calcPlusListeners ; }   private CalculatorPlusListeners createStandardRoute  (  VehicleRoutingProblem vrp ,  StateManager activityStates2 ,   int forwardLooking ,   int solutionMemory )  {   int  after = forwardLooking ;  JobInsertionCalculator  jobInsertionCalculator =  new CalculatesServiceInsertionOnRouteLevel  (  vrp . getTransportCosts  ( ) ,  vrp . getActivityCosts  ( ) ) ;    (  ( CalculatesServiceInsertionOnRouteLevel ) jobInsertionCalculator ) . setNuOfActsForwardLooking  ( after ) ;    (  ( CalculatesServiceInsertionOnRouteLevel ) jobInsertionCalculator ) . setMemorySize  ( solutionMemory ) ;    (  ( CalculatesServiceInsertionOnRouteLevel ) jobInsertionCalculator ) . setNeighborhood  (  vrp . getNeighborhood  ( ) ) ;    (  ( CalculatesServiceInsertionOnRouteLevel ) jobInsertionCalculator ) . setActivityStates  ( activityStates2 ) ;  CalculatorPlusListeners  calcPlusListener =  new CalculatorPlusListeners  ( jobInsertionCalculator ) ;  return calcPlusListener ; }   private JobInsertionCalculator createFinalInsertion  (  VehicleFleetManager fleetManager ,  JobInsertionCalculator baseCalc ,  StateManager activityStates2 )  {  return  new CalculatesVehTypeDepServiceInsertion  ( fleetManager , baseCalc ) ; } }