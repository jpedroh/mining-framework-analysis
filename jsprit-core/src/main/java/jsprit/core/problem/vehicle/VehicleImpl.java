  package    jsprit . core . problem . vehicle ;   import    jsprit . core . problem . AbstractVehicle ;  import    jsprit . core . problem . Location ;  import    jsprit . core . problem . Skills ;  import     org . apache . logging . log4j . LogManager ;  import     org . apache . logging . log4j . Logger ;   public class VehicleImpl  extends AbstractVehicle  {   public static class NoVehicle  extends AbstractVehicle  {   private String  id = "noVehicle" ;   private VehicleType  type =    VehicleTypeImpl . Builder . newInstance  ( "noType" ) . build  ( ) ;   public NoVehicle  ( )  { }    @ Override public  double getEarliestDeparture  ( )  {  return 0 ; }    @ Override public  double getLatestArrival  ( )  {  return 0 ; }    @ Override public VehicleType getType  ( )  {  return type ; }    @ Override public String getId  ( )  {  return id ; }    @ Override public boolean isReturnToDepot  ( )  {  return false ; }    @ Override public Location getStartLocation  ( )  {  return null ; }    @ Override public Location getEndLocation  ( )  {  return null ; }    @ Override public Skills getSkills  ( )  {  return null ; } }   public static class Builder  {   static final Logger  log =  LogManager . getLogger  (   Builder . class . getName  ( ) ) ;   private String  id ;   private  double  earliestStart = 0.0 ;   private  double  latestArrival =  Double . MAX_VALUE ;   private boolean  returnToDepot = true ;   private VehicleType  type =    VehicleTypeImpl . Builder . newInstance  ( "default" ) . build  ( ) ;   private  Skills . Builder  skillBuilder =   Skills . Builder . newInstance  ( ) ;   private Skills  skills ;   private Location  startLocation ;   private Location  endLocation ;   private Builder  (  String id )  {  super  ( ) ;    this . id = id ; }   public Builder setType  (  VehicleType type )  {  if  (  type == null )  throw  new IllegalStateException  ( "type cannot be null." ) ;    this . type = type ;  return this ; }   public Builder setReturnToDepot  (  boolean returnToDepot )  {    this . returnToDepot = returnToDepot ;  return this ; }   public Builder setStartLocation  (  Location startLocation )  {    this . startLocation = startLocation ;  return this ; }   public Builder setEndLocation  (  Location endLocation )  {    this . endLocation = endLocation ;  return this ; }   public Builder setEarliestStart  (   double earliest_startTime )  {    this . earliestStart = earliest_startTime ;  return this ; }   public Builder setLatestArrival  (   double latest_arrTime )  {    this . latestArrival = latest_arrTime ;  return this ; }   public Builder addSkill  (  String skill )  {   skillBuilder . addSkill  ( skill ) ;  return this ; }   public VehicleImpl build  ( )  {  if  (   startLocation != null &&  endLocation != null )  {  if  (   !   startLocation . getId  ( ) . equals  (  endLocation . getId  ( ) ) &&  ! returnToDepot )  throw  new IllegalStateException  (  "this must not be. you specified both endLocationId and open-routes. this is contradictory. <br>" + "if you set endLocation, returnToDepot must be true. if returnToDepot is false, endLocationCoord must not be specified." ) ; }  if  (   startLocation != null &&  endLocation == null )  {   endLocation = startLocation ; }  if  (   startLocation == null &&  endLocation == null )  {  throw  new IllegalStateException  ( "vehicle requires startLocation. but neither locationId nor locationCoord nor startLocationId nor startLocationCoord has been set" ) ; }   skills =  skillBuilder . build  ( ) ;  return  new VehicleImpl  ( this ) ; }   public static Builder newInstance  (  String vehicleId )  {  return  new Builder  ( vehicleId ) ; }   public Builder addSkills  (  Skills skills )  {    this . skillBuilder . addAllSkills  (  skills . values  ( ) ) ;  return this ; } }   public static NoVehicle createNoVehicle  ( )  {  return  new NoVehicle  ( ) ; }   private final String  id ;   private final VehicleType  type ;   private final  double  earliestDeparture ;   private final  double  latestArrival ;   private final boolean  returnToDepot ;   private final Skills  skills ;   private final Location  endLocation ;   private final Location  startLocation ;   private VehicleImpl  (  Builder builder )  {   id =  builder . id ;   type =  builder . type ;   earliestDeparture =  builder . earliestStart ;   latestArrival =  builder . latestArrival ;   returnToDepot =  builder . returnToDepot ;   skills =  builder . skills ;   endLocation =  builder . endLocation ;   startLocation =  builder . startLocation ;   setVehicleIdentifier  (  new VehicleTypeKey  (  type . getTypeId  ( ) ,  startLocation . getId  ( ) ,  endLocation . getId  ( ) , earliestDeparture , latestArrival , skills , returnToDepot ) ) ; }    @ Override public String toString  ( )  {  return                  "[id=" + id + "]" + "[type=" + type + "]" + "[startLocation=" + startLocation + "]" + "[endLocation=" + endLocation + "]" + "[isReturnToDepot=" +  isReturnToDepot  ( ) + "]" + "[skills=" + skills + "]" ; }    @ Override public  double getEarliestDeparture  ( )  {  return earliestDeparture ; }    @ Override public  double getLatestArrival  ( )  {  return latestArrival ; }    @ Override public VehicleType getType  ( )  {  return type ; }    @ Override public String getId  ( )  {  return id ; }   public boolean isReturnToDepot  ( )  {  return returnToDepot ; }    @ Override public Location getStartLocation  ( )  {  return startLocation ; }    @ Override public Location getEndLocation  ( )  {  return endLocation ; }    @ Override public Skills getSkills  ( )  {  return skills ; }    @ Override public  int hashCode  ( )  {   final  int  prime = 31 ;   int  result = 1 ;   result =   prime * result +  (   (  id == null ) ? 0 :  id . hashCode  ( ) ) ;   result =   prime * result +  (   (  type == null ) ? 0 :  type . hashCode  ( ) ) ;  return result ; }    @ Override public boolean equals  (  Object obj )  {  if  (  this == obj )  return true ;  if  (  obj == null )  return false ;  if  (   getClass  ( ) !=  obj . getClass  ( ) )  return false ;  VehicleImpl  other =  ( VehicleImpl ) obj ;  if  (  id == null )  {  if  (   other . id != null )  return false ; } else  if  (  !  id . equals  (  other . id ) )  return false ;  if  (  type == null )  {  if  (   other . type != null )  return false ; } else  if  (  !  type . equals  (  other . type ) )  return false ;  return true ; } }