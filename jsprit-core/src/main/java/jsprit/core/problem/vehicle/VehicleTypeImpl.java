  package    jsprit . core . problem . vehicle ;   import    jsprit . core . problem . Capacity ;   public class VehicleTypeImpl  implements  VehicleType  {   public static class VehicleCostParams  {   public static  VehicleTypeImpl . VehicleCostParams newInstance  (   double fix ,   double perTimeUnit ,   double perDistanceUnit )  {  return  new VehicleCostParams  ( fix , perTimeUnit , perDistanceUnit ) ; }   public final  double  fix ;   public final  @ Deprecated  double  perTimeUnit ;   public final  double  perDistanceUnit ;   private VehicleCostParams  (   double fix ,   double perTimeUnit ,   double perDistanceUnit )  {  super  ( ) ;    this . fix = fix ;    this . perTimeUnit = perTimeUnit ;    this . perTransportTimeUnit = perTimeUnit ;    this . perDistanceUnit = perDistanceUnit ;    this . perWaitingTimeUnit = 0. ; }    @ Override public String toString  ( )  {  return         "[fixed=" + fix + "][perTime=" + perTransportTimeUnit + "][perDistance=" + perDistanceUnit + "][perWaitingTimeUnit=" + perWaitingTimeUnit + "]" ; }   public final  double  perTransportTimeUnit ;   public final  double  perWaitingTimeUnit ;   public VehicleCostParams  (   double fix ,   double perTimeUnit ,   double perDistanceUnit ,   double perWaitingTimeUnit )  {    this . fix = fix ;    this . perTimeUnit = perTimeUnit ;    this . perTransportTimeUnit = perTimeUnit ;    this . perDistanceUnit = perDistanceUnit ;    this . perWaitingTimeUnit = perWaitingTimeUnit ; } }   public static class Builder  {   public static  VehicleTypeImpl . Builder newInstance  (  String id )  {  if  (  id == null )  throw  new IllegalStateException  ( ) ;  return  new Builder  ( id ) ; }   private String  id ;   private  int  capacity = 0 ;   private  double  maxVelo =  Double . MAX_VALUE ;   private  double  fixedCost = 0.0 ;   private  double  perDistance = 1.0 ;   private  double  perTime = 0.0 ;   private String  profile = "car" ;   private  Capacity . Builder  capacityBuilder =   Capacity . Builder . newInstance  ( ) ;   private Capacity  capacityDimensions = null ;   private boolean  dimensionAdded = false ;   private Builder  (  String id )  {    this . id = id ; }   public  VehicleTypeImpl . Builder setMaxVelocity  (   double inMeterPerSeconds )  {  if  (  inMeterPerSeconds < 0.0 )  throw  new IllegalStateException  ( "velocity cannot be smaller than zero" ) ;    this . maxVelo = inMeterPerSeconds ;  return this ; }   public  VehicleTypeImpl . Builder setFixedCost  (   double fixedCost )  {  if  (  fixedCost < 0.0 )  throw  new IllegalStateException  ( "fixed costs cannot be smaller than zero" ) ;    this . fixedCost = fixedCost ;  return this ; }   public  VehicleTypeImpl . Builder setCostPerDistance  (   double perDistance )  {  if  (  perDistance < 0.0 )  throw  new IllegalStateException  ( "cost per distance must not be smaller than zero" ) ;    this . perDistance = perDistance ;  return this ; }   public  @ Deprecated  VehicleTypeImpl . Builder setCostPerTime  (   double perTime )  {  if  (  perTime < 0.0 )  throw  new IllegalStateException  ( ) ;    this . perTime = perTime ;  return this ; }   public VehicleTypeImpl build  ( )  {  if  (  capacityDimensions == null )  {   capacityDimensions =  capacityBuilder . build  ( ) ; }  return  new VehicleTypeImpl  ( this ) ; }   public Builder addCapacityDimension  (   int dimIndex ,   int dimVal )  {  if  (  dimVal < 0 )  throw  new IllegalArgumentException  ( "capacity value cannot be negative" ) ;  if  (  capacityDimensions != null )  throw  new IllegalStateException  (   "either build your dimension with build your dimensions with " + "addCapacityDimension(int dimIndex, int dimVal) or set the already built dimensions with .setCapacityDimensions(Capacity capacity)." + "You used both methods." ) ;   dimensionAdded = true ;   capacityBuilder . addDimension  ( dimIndex , dimVal ) ;  return this ; }   public Builder setCapacityDimensions  (  Capacity capacity )  {  if  ( dimensionAdded )  throw  new IllegalStateException  (   "either build your dimension with build your dimensions with " + "addCapacityDimension(int dimIndex, int dimVal) or set the already built dimensions with .setCapacityDimensions(Capacity capacity)." + "You used both methods." ) ;    this . capacityDimensions = capacity ;  return this ; }   public Builder setProfile  (  String profile )  {    this . profile = profile ;  return this ; }   private  double  perWaitingTime = 0.0 ;   public  VehicleTypeImpl . Builder setCostPerTransportTime  (   double perTime )  {  if  (  perTime < 0.0 )  throw  new IllegalStateException  ( ) ;    this . perTime = perTime ;  return this ; }   public  VehicleTypeImpl . Builder setCostPerWaitingTime  (   double perWaitingTime )  {  if  (  perWaitingTime < 0.0 )  throw  new IllegalStateException  ( ) ;    this . perWaitingTime = perWaitingTime ;  return this ; } }    @ Override public  int hashCode  ( )  {   final  int  prime = 31 ;   int  result = 1 ;   result =   prime * result +  (   (  typeId == null ) ? 0 :  typeId . hashCode  ( ) ) ;  return result ; }    @ Override public boolean equals  (  Object obj )  {  if  (  this == obj )  return true ;  if  (  obj == null )  return false ;  if  (   getClass  ( ) !=  obj . getClass  ( ) )  return false ;  VehicleTypeImpl  other =  ( VehicleTypeImpl ) obj ;  if  (  typeId == null )  {  if  (   other . typeId != null )  return false ; } else  if  (  !  typeId . equals  (  other . typeId ) )  return false ;  return true ; }   private final String  typeId ;   private final  int  capacity ;   private final String  profile ;   private final  VehicleTypeImpl . VehicleCostParams  vehicleCostParams ;   private final Capacity  capacityDimensions ;   private final  double  maxVelocity ;   private VehicleTypeImpl  (   VehicleTypeImpl . Builder builder )  {   typeId =  builder . id ;   capacity =  builder . capacity ;   maxVelocity =  builder . maxVelo ;   vehicleCostParams =  new VehicleCostParams  (  builder . fixedCost ,  builder . perTime ,  builder . perDistance ,  builder . perWaitingTime ) ;   capacityDimensions =  builder . capacityDimensions ;   profile =  builder . profile ; }    @ Override public String getTypeId  ( )  {  return typeId ; }    @ Override public  VehicleTypeImpl . VehicleCostParams getVehicleCostParams  ( )  {  return vehicleCostParams ; }    @ Override public String toString  ( )  {  return         "[typeId=" + typeId + "]" + "[capacity=" + capacityDimensions + "]" + "[costs=" + vehicleCostParams + "]" ; }    @ Override public  double getMaxVelocity  ( )  {  return maxVelocity ; }    @ Override public Capacity getCapacityDimensions  ( )  {  return capacityDimensions ; }    @ Override public String getProfile  ( )  {  return profile ; } }