  package   jsprit . core . problem ;   import     jsprit . core . problem . cost . VehicleRoutingActivityCosts ;  import     jsprit . core . problem . cost . VehicleRoutingTransportCosts ;  import     jsprit . core . problem . job . Job ;  import     jsprit . core . problem . job . Service ;  import     jsprit . core . problem . job . Shipment ;  import      jsprit . core . problem . solution . route . VehicleRoute ;  import       jsprit . core . problem . solution . route . activity . DefaultShipmentActivityFactory ;  import       jsprit . core . problem . solution . route . activity . DefaultTourActivityFactory ;  import       jsprit . core . problem . solution . route . activity . TourActivity ;  import     jsprit . core . problem . vehicle . Vehicle ;  import     jsprit . core . problem . vehicle . VehicleType ;  import     jsprit . core . problem . vehicle . VehicleTypeImpl ;  import     jsprit . core . problem . vehicle . VehicleTypeKey ;  import    jsprit . core . util . Coordinate ;  import    jsprit . core . util . CrowFlyCosts ;  import    jsprit . core . util . Locations ;  import     org . apache . logging . log4j . LogManager ;  import     org . apache . logging . log4j . Logger ;  import  java . util .  * ;  import     jsprit . core . problem . cost . WaitingTimeCosts ;   public class VehicleRoutingProblem  {   public static class Builder  {   public static Builder newInstance  ( )  {  return  new Builder  ( ) ; }   private VehicleRoutingTransportCosts  transportCosts ;   private VehicleRoutingActivityCosts  activityCosts =  new WaitingTimeCosts  ( ) ;   private  Map  < String , Job >  jobs =  new  LinkedHashMap  < String , Job >  ( ) ;   private  Map  < String , Job >  tentativeJobs =  new  LinkedHashMap  < String , Job >  ( ) ;   private  Set  < String >  jobsInInitialRoutes =  new  HashSet  < String >  ( ) ;   private  Map  < String , Coordinate >  tentative_coordinates =  new  HashMap  < String , Coordinate >  ( ) ;   private FleetSize  fleetSize =  FleetSize . INFINITE ;   private  Collection  < VehicleType >  vehicleTypes =  new  ArrayList  < VehicleType >  ( ) ;   private  Collection  < VehicleRoute >  initialRoutes =  new  ArrayList  < VehicleRoute >  ( ) ;   private  Set  < Vehicle >  uniqueVehicles =  new  HashSet  < Vehicle >  ( ) ;   private JobActivityFactory  jobActivityFactory =  new JobActivityFactory  ( )  {    @ Override public  List  < AbstractActivity > createActivities  (  Job job )  {   List  < AbstractActivity >  acts =  new  ArrayList  < AbstractActivity >  ( ) ;  if  (  job instanceof Service )  {   acts . add  (  serviceActivityFactory . createActivity  (  ( Service ) job ) ) ; } else  if  (  job instanceof Shipment )  {   acts . add  (  shipmentActivityFactory . createPickup  (  ( Shipment ) job ) ) ;   acts . add  (  shipmentActivityFactory . createDelivery  (  ( Shipment ) job ) ) ; }  return acts ; } } ;   private  int  jobIndexCounter = 1 ;   private  int  vehicleIndexCounter = 1 ;   private  int  activityIndexCounter = 1 ;   private  int  vehicleTypeIdIndexCounter = 1 ;   private  Map  < VehicleTypeKey , Integer >  typeKeyIndices =  new  HashMap  < VehicleTypeKey , Integer >  ( ) ;   private  Map  < Job ,  List  < AbstractActivity > >  activityMap =  new  HashMap  < Job ,  List  < AbstractActivity > >  ( ) ;   private final DefaultShipmentActivityFactory  shipmentActivityFactory =  new DefaultShipmentActivityFactory  ( ) ;   private final DefaultTourActivityFactory  serviceActivityFactory =  new DefaultTourActivityFactory  ( ) ;   private void incJobIndexCounter  ( )  {   jobIndexCounter ++ ; }   private void incActivityIndexCounter  ( )  {   activityIndexCounter ++ ; }   private void incVehicleTypeIdIndexCounter  ( )  {   vehicleTypeIdIndexCounter ++ ; }   public  Map  < String , Coordinate > getLocationMap  ( )  {  return  Collections . unmodifiableMap  ( tentative_coordinates ) ; }   public Locations getLocations  ( )  {  return  new Locations  ( )  {    @ Override public Coordinate getCoord  (  String id )  {  return  tentative_coordinates . get  ( id ) ; } } ; }   public Builder setRoutingCost  (  VehicleRoutingTransportCosts costs )  {    this . transportCosts = costs ;  return this ; }   public Builder setFleetSize  (  FleetSize fleetSize )  {    this . fleetSize = fleetSize ;  return this ; }    @ Deprecated public Builder addJob  (  Job job )  {  if  (  !  (  job instanceof AbstractJob ) )  throw  new IllegalArgumentException  ( "job must be of type AbstractJob" ) ;  return  addJob  (  ( AbstractJob ) job ) ; }   public Builder addJob  (  AbstractJob job )  {  if  (  tentativeJobs . containsKey  (  job . getId  ( ) ) )  throw  new IllegalStateException  (   "jobList already contains a job with id " +  job . getId  ( ) + ". make sure you use unique ids for your jobs (i.e. service and shipments)" ) ;  if  (  !  (   job instanceof Service ||  job instanceof Shipment ) )  throw  new IllegalStateException  ( "job must be either a service or a shipment" ) ;   job . setIndex  ( jobIndexCounter ) ;   incJobIndexCounter  ( ) ;   tentativeJobs . put  (  job . getId  ( ) , job ) ;   addLocationToTentativeLocations  ( job ) ;  return this ; }   private void addLocationToTentativeLocations  (  Job job )  {  if  (  job instanceof Service )  {   tentative_coordinates . put  (    (  ( Service ) job ) . getLocation  ( ) . getId  ( ) ,    (  ( Service ) job ) . getLocation  ( ) . getCoordinate  ( ) ) ; } else  if  (  job instanceof Shipment )  {  Shipment  shipment =  ( Shipment ) job ;   tentative_coordinates . put  (   shipment . getPickupLocation  ( ) . getId  ( ) ,   shipment . getPickupLocation  ( ) . getCoordinate  ( ) ) ;   tentative_coordinates . put  (   shipment . getDeliveryLocation  ( ) . getId  ( ) ,   shipment . getDeliveryLocation  ( ) . getCoordinate  ( ) ) ; } }   private void addJobToFinalJobMapAndCreateActivities  (  Job job )  {  if  (  job instanceof Service )  {  Service  service =  ( Service ) job ;   addService  ( service ) ; } else  if  (  job instanceof Shipment )  {  Shipment  shipment =  ( Shipment ) job ;   addShipment  ( shipment ) ; }   List  < AbstractActivity >  jobActs =  jobActivityFactory . createActivities  ( job ) ;  for ( AbstractActivity act : jobActs )  {   act . setIndex  ( activityIndexCounter ) ;   incActivityIndexCounter  ( ) ; }   activityMap . put  ( job , jobActs ) ; }   public Builder addInitialVehicleRoute  (  VehicleRoute route )  {   addVehicle  (  ( AbstractVehicle )  route . getVehicle  ( ) ) ;  for ( TourActivity act :  route . getActivities  ( ) )  {  AbstractActivity  abstractAct =  ( AbstractActivity ) act ;   abstractAct . setIndex  ( activityIndexCounter ) ;   incActivityIndexCounter  ( ) ;  if  (  act instanceof  TourActivity . JobActivity )  {  Job  job =   (  (  TourActivity . JobActivity ) act ) . getJob  ( ) ;   jobsInInitialRoutes . add  (  job . getId  ( ) ) ;   registerLocation  ( job ) ;   registerJobAndActivity  ( abstractAct , job ) ; } }   initialRoutes . add  ( route ) ;  return this ; }   private void registerLocation  (  Job job )  {  if  (  job instanceof Service )   tentative_coordinates . put  (    (  ( Service ) job ) . getLocation  ( ) . getId  ( ) ,    (  ( Service ) job ) . getLocation  ( ) . getCoordinate  ( ) ) ;  if  (  job instanceof Shipment )  {  Shipment  shipment =  ( Shipment ) job ;   tentative_coordinates . put  (   shipment . getPickupLocation  ( ) . getId  ( ) ,   shipment . getPickupLocation  ( ) . getCoordinate  ( ) ) ;   tentative_coordinates . put  (   shipment . getDeliveryLocation  ( ) . getId  ( ) ,   shipment . getDeliveryLocation  ( ) . getCoordinate  ( ) ) ; } }   private void registerJobAndActivity  (  AbstractActivity abstractAct ,  Job job )  {  if  (  activityMap . containsKey  ( job ) )    activityMap . get  ( job ) . add  ( abstractAct ) ; else  {   List  < AbstractActivity >  actList =  new  ArrayList  < AbstractActivity >  ( ) ;   actList . add  ( abstractAct ) ;   activityMap . put  ( job , actList ) ; } }   public Builder addInitialVehicleRoutes  (   Collection  < VehicleRoute > routes )  {  for ( VehicleRoute r : routes )  {   addInitialVehicleRoute  ( r ) ; }  return this ; }   private void addShipment  (  Shipment job )  {  if  (  jobs . containsKey  (  job . getId  ( ) ) )  {   logger . warn  ( "job {} already in job list. overrides existing job." , job ) ; }   tentative_coordinates . put  (   job . getPickupLocation  ( ) . getId  ( ) ,   job . getPickupLocation  ( ) . getCoordinate  ( ) ) ;   tentative_coordinates . put  (   job . getDeliveryLocation  ( ) . getId  ( ) ,   job . getDeliveryLocation  ( ) . getCoordinate  ( ) ) ;   jobs . put  (  job . getId  ( ) , job ) ; }    @ Deprecated public Builder addVehicle  (  Vehicle vehicle )  {  if  (  !  (  vehicle instanceof AbstractVehicle ) )  throw  new IllegalStateException  ( "vehicle must be an AbstractVehicle" ) ;  return  addVehicle  (  ( AbstractVehicle ) vehicle ) ; }   public Builder addVehicle  (  AbstractVehicle vehicle )  {  if  (  !  uniqueVehicles . contains  ( vehicle ) )  {   vehicle . setIndex  ( vehicleIndexCounter ) ;   incVehicleIndexCounter  ( ) ; }  if  (  typeKeyIndices . containsKey  (  vehicle . getVehicleTypeIdentifier  ( ) ) )  {    vehicle . getVehicleTypeIdentifier  ( ) . setIndex  (  typeKeyIndices . get  (  vehicle . getVehicleTypeIdentifier  ( ) ) ) ; } else  {    vehicle . getVehicleTypeIdentifier  ( ) . setIndex  ( vehicleTypeIdIndexCounter ) ;   typeKeyIndices . put  (  vehicle . getVehicleTypeIdentifier  ( ) , vehicleTypeIdIndexCounter ) ;   incVehicleTypeIdIndexCounter  ( ) ; }   uniqueVehicles . add  ( vehicle ) ;  if  (  !  vehicleTypes . contains  (  vehicle . getType  ( ) ) )  {   vehicleTypes . add  (  vehicle . getType  ( ) ) ; }  String  startLocationId =   vehicle . getStartLocation  ( ) . getId  ( ) ;   tentative_coordinates . put  ( startLocationId ,   vehicle . getStartLocation  ( ) . getCoordinate  ( ) ) ;  if  (  !    vehicle . getEndLocation  ( ) . getId  ( ) . equals  ( startLocationId ) )  {   tentative_coordinates . put  (   vehicle . getEndLocation  ( ) . getId  ( ) ,   vehicle . getEndLocation  ( ) . getCoordinate  ( ) ) ; }  return this ; }   private void incVehicleIndexCounter  ( )  {   vehicleIndexCounter ++ ; }   public Builder setActivityCosts  (  VehicleRoutingActivityCosts activityCosts )  {    this . activityCosts = activityCosts ;  return this ; }   public VehicleRoutingProblem build  ( )  {  if  (  transportCosts == null )  {   transportCosts =  new CrowFlyCosts  (  getLocations  ( ) ) ; }  for ( Job job :  tentativeJobs . values  ( ) )  if  (  !  jobsInInitialRoutes . contains  (  job . getId  ( ) ) )  {   addJobToFinalJobMapAndCreateActivities  ( job ) ; }  return  new VehicleRoutingProblem  ( this ) ; }    @ SuppressWarnings  ( "UnusedDeclaration" ) public Builder addLocation  (  String locationId ,  Coordinate coordinate )  {   tentative_coordinates . put  ( locationId , coordinate ) ;  return this ; }    @ SuppressWarnings  ( "deprecation" ) public Builder addAllJobs  (   Collection  <  ? extends Job > jobs )  {  for ( Job j : jobs )  {   addJob  ( j ) ; }  return this ; }    @ SuppressWarnings  ( "deprecation" ) public Builder addAllVehicles  (   Collection  <  ? extends Vehicle > vehicles )  {  for ( Vehicle v : vehicles )  {   addVehicle  ( v ) ; }  return this ; }   public  Collection  < Vehicle > getAddedVehicles  ( )  {  return  Collections . unmodifiableCollection  ( uniqueVehicles ) ; }   public  Collection  < VehicleType > getAddedVehicleTypes  ( )  {  return  Collections . unmodifiableCollection  ( vehicleTypes ) ; }   public  Collection  < Job > getAddedJobs  ( )  {  return  Collections . unmodifiableCollection  (  tentativeJobs . values  ( ) ) ; }   private Builder addService  (  Service service )  {   tentative_coordinates . put  (   service . getLocation  ( ) . getId  ( ) ,   service . getLocation  ( ) . getCoordinate  ( ) ) ;  if  (  jobs . containsKey  (  service . getId  ( ) ) )  {   logger . warn  ( "service {} already in job list. overrides existing job." , service ) ; }   jobs . put  (  service . getId  ( ) , service ) ;  return this ; } }   public static enum FleetSize  {  FINITE ,  INFINITE }   private final static Logger  logger =  LogManager . getLogger  (  VehicleRoutingProblem . class ) ;   private final VehicleRoutingTransportCosts  transportCosts ;   private final VehicleRoutingActivityCosts  activityCosts ;   private final  Map  < String , Job >  jobs ;   private final  Collection  < Vehicle >  vehicles ;   private final  Collection  < VehicleType >  vehicleTypes ;   private final  Collection  < VehicleRoute >  initialVehicleRoutes ;   private final FleetSize  fleetSize ;   private final Locations  locations ;   private  Map  < Job ,  List  < AbstractActivity > >  activityMap ;   private  int  nuActivities ;   private final JobActivityFactory  jobActivityFactory =  new JobActivityFactory  ( )  {    @ Override public  List  < AbstractActivity > createActivities  (  Job job )  {  return  copyAndGetActivities  ( job ) ; } } ;   private VehicleRoutingProblem  (  Builder builder )  {    this . jobs =  builder . jobs ;    this . fleetSize =  builder . fleetSize ;    this . vehicles =  builder . uniqueVehicles ;    this . vehicleTypes =  builder . vehicleTypes ;    this . initialVehicleRoutes =  builder . initialRoutes ;    this . transportCosts =  builder . transportCosts ;    this . activityCosts =  builder . activityCosts ;    this . locations =  builder . getLocations  ( ) ;    this . activityMap =  builder . activityMap ;    this . nuActivities =  builder . activityIndexCounter ;   logger . info  ( "setup problem: {}" , this ) ; }    @ Override public String toString  ( )  {  return              "[fleetSize=" + fleetSize + "][#jobs=" +  jobs . size  ( ) + "][#vehicles=" +  vehicles . size  ( ) + "][#vehicleTypes=" +  vehicleTypes . size  ( ) + "][" + "transportCost=" + transportCosts + "][activityCosts=" + activityCosts + "]" ; }   public FleetSize getFleetSize  ( )  {  return fleetSize ; }   public  Map  < String , Job > getJobs  ( )  {  return  Collections . unmodifiableMap  ( jobs ) ; }   public  Collection  < VehicleRoute > getInitialVehicleRoutes  ( )  {   Collection  < VehicleRoute >  copiedInitialRoutes =  new  ArrayList  < VehicleRoute >  ( ) ;  for ( VehicleRoute route : initialVehicleRoutes )  {   copiedInitialRoutes . add  (  VehicleRoute . copyOf  ( route ) ) ; }  return copiedInitialRoutes ; }   public  Collection  < VehicleType > getTypes  ( )  {  return  Collections . unmodifiableCollection  ( vehicleTypes ) ; }   public  Collection  < Vehicle > getVehicles  ( )  {  return  Collections . unmodifiableCollection  ( vehicles ) ; }   public VehicleRoutingTransportCosts getTransportCosts  ( )  {  return transportCosts ; }   public VehicleRoutingActivityCosts getActivityCosts  ( )  {  return activityCosts ; }   public Locations getLocations  ( )  {  return locations ; }   public  List  < AbstractActivity > getActivities  (  Job job )  {  return  Collections . unmodifiableList  (  activityMap . get  ( job ) ) ; }   public  int getNuActivities  ( )  {  return nuActivities ; }   public JobActivityFactory getJobActivityFactory  ( )  {  return jobActivityFactory ; }   public  List  < AbstractActivity > copyAndGetActivities  (  Job job )  {   List  < AbstractActivity >  acts =  new  ArrayList  < AbstractActivity >  ( ) ;  if  (  activityMap . containsKey  ( job ) )  {  for ( AbstractActivity act :  activityMap . get  ( job ) )   acts . add  (  ( AbstractActivity )  act . duplicate  ( ) ) ; }  return acts ; } }