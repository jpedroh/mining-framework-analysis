  package      com . graphhopper . jsprit . core . problem . job ;   import      com . graphhopper . jsprit . core . problem . AbstractJob ;  import      com . graphhopper . jsprit . core . problem . Capacity ;  import      com . graphhopper . jsprit . core . problem . Location ;  import      com . graphhopper . jsprit . core . problem . Skills ;  import         com . graphhopper . jsprit . core . problem . solution . route . activity . TimeWindow ;  import         com . graphhopper . jsprit . core . problem . solution . route . activity . TimeWindowsImpl ;  import   java . util . Collection ;   public class Shipment  extends AbstractJob  {   public static class Builder  {   private String  id ;   private  double  pickupServiceTime = 0.0 ;   private  double  deliveryServiceTime = 0.0 ;   private TimeWindow  deliveryTimeWindow =  TimeWindow . newInstance  ( 0.0 ,  Double . MAX_VALUE ) ;   private TimeWindow  pickupTimeWindow =  TimeWindow . newInstance  ( 0.0 ,  Double . MAX_VALUE ) ;   private  Capacity . Builder  capacityBuilder =   Capacity . Builder . newInstance  ( ) ;   private Capacity  capacity ;   private  Skills . Builder  skillBuilder =   Skills . Builder . newInstance  ( ) ;   private Skills  skills ;   private String  name = "no-name" ;   private Location  pickupLocation_ ;   private Location  deliveryLocation_ ;   protected TimeWindowsImpl  deliveryTimeWindows ;   private boolean  deliveryTimeWindowAdded = false ;   private boolean  pickupTimeWindowAdded = false ;   private TimeWindowsImpl  pickupTimeWindows ;   private  int  priority = 2 ;   public  double  maxTimeInVehicle =  Double . MAX_VALUE ;   public static Builder newInstance  (  String id )  {  return  new Builder  ( id ) ; }  Builder  (  String id )  {  if  (  id == null )  throw  new IllegalArgumentException  ( "id must not be null" ) ;    this . id = id ;   pickupTimeWindows =  new TimeWindowsImpl  ( ) ;   pickupTimeWindows . add  ( pickupTimeWindow ) ;   deliveryTimeWindows =  new TimeWindowsImpl  ( ) ;   deliveryTimeWindows . add  ( deliveryTimeWindow ) ; }   public Builder setPickupLocation  (  Location pickupLocation )  {    this . pickupLocation_ = pickupLocation ;  return this ; }   public Builder setPickupServiceTime  (   double serviceTime )  {  if  (  serviceTime < 0.0 )  throw  new IllegalArgumentException  ( "serviceTime must not be < 0.0" ) ;    this . pickupServiceTime = serviceTime ;  return this ; }   public Builder setPickupTimeWindow  (  TimeWindow timeWindow )  {  if  (  timeWindow == null )  throw  new IllegalArgumentException  ( "delivery time-window must not be null" ) ;    this . pickupTimeWindow = timeWindow ;    this . pickupTimeWindows =  new TimeWindowsImpl  ( ) ;    this . pickupTimeWindows . add  ( timeWindow ) ;  return this ; }   public Builder setDeliveryLocation  (  Location deliveryLocation )  {    this . deliveryLocation_ = deliveryLocation ;  return this ; }   public Builder setDeliveryServiceTime  (   double deliveryServiceTime )  {  if  (  deliveryServiceTime < 0.0 )  throw  new IllegalArgumentException  ( "deliveryServiceTime must not be < 0.0" ) ;    this . deliveryServiceTime = deliveryServiceTime ;  return this ; }   public Builder setDeliveryTimeWindow  (  TimeWindow timeWindow )  {  if  (  timeWindow == null )  throw  new IllegalArgumentException  ( "delivery time-window must not be null" ) ;    this . deliveryTimeWindow = timeWindow ;    this . deliveryTimeWindows =  new TimeWindowsImpl  ( ) ;    this . deliveryTimeWindows . add  ( timeWindow ) ;  return this ; }   public Builder addSizeDimension  (   int dimensionIndex ,   int dimensionValue )  {  if  (  dimensionValue < 0 )  throw  new IllegalArgumentException  ( "capacity value cannot be negative" ) ;   capacityBuilder . addDimension  ( dimensionIndex , dimensionValue ) ;  return this ; }   public Shipment build  ( )  {  if  (  pickupLocation_ == null )  throw  new IllegalArgumentException  ( "pickup location is missing" ) ;  if  (  deliveryLocation_ == null )  throw  new IllegalArgumentException  ( "delivery location is missing" ) ;   capacity =  capacityBuilder . build  ( ) ;   skills =  skillBuilder . build  ( ) ;  return  new Shipment  ( this ) ; }   public Builder addRequiredSkill  (  String skill )  {   skillBuilder . addSkill  ( skill ) ;  return this ; }   public Builder setName  (  String name )  {    this . name = name ;  return this ; }   public Builder addDeliveryTimeWindow  (  TimeWindow timeWindow )  {  if  (  timeWindow == null )  throw  new IllegalArgumentException  ( "time-window arg must not be null" ) ;  if  (  ! deliveryTimeWindowAdded )  {   deliveryTimeWindows =  new TimeWindowsImpl  ( ) ;   deliveryTimeWindowAdded = true ; }   deliveryTimeWindows . add  ( timeWindow ) ;  return this ; }   public Builder addDeliveryTimeWindow  (   double earliest ,   double latest )  {   addDeliveryTimeWindow  (  TimeWindow . newInstance  ( earliest , latest ) ) ;  return this ; }   public Builder addPickupTimeWindow  (  TimeWindow timeWindow )  {  if  (  timeWindow == null )  throw  new IllegalArgumentException  ( "time-window arg must not be null" ) ;  if  (  ! pickupTimeWindowAdded )  {   pickupTimeWindows =  new TimeWindowsImpl  ( ) ;   pickupTimeWindowAdded = true ; }   pickupTimeWindows . add  ( timeWindow ) ;  return this ; }   public Builder addPickupTimeWindow  (   double earliest ,   double latest )  {  return  addPickupTimeWindow  (  TimeWindow . newInstance  ( earliest , latest ) ) ; }   public Builder setPriority  (   int priority )  {  if  (   priority < 1 ||  priority > 10 )  throw  new IllegalArgumentException  ( "incorrect priority. only 1 (very high) to 10 (very low) are allowed" ) ;    this . priority = priority ;  return this ; }   public Builder setMaxTimeInVehicle  (   double maxTimeInVehicle )  {  if  (  maxTimeInVehicle < 0 )  throw  new IllegalArgumentException  ( "maxTimeInVehicle should be positive" ) ;    this . maxTimeInVehicle = maxTimeInVehicle ;  return this ; }   public Object  userData ;   public Builder setUserData  (  Object userData )  {    this . userData = userData ;  return this ; } }   private final String  id ;   private final  double  pickupServiceTime ;   private final  double  deliveryServiceTime ;   private final TimeWindow  deliveryTimeWindow ;   private final TimeWindow  pickupTimeWindow ;   private final Capacity  capacity ;   private final Skills  skills ;   private final String  name ;   private final Location  pickupLocation_ ;   private final Location  deliveryLocation_ ;   private final TimeWindowsImpl  deliveryTimeWindows ;   private final TimeWindowsImpl  pickupTimeWindows ;   private final  int  priority ;   private final  double  maxTimeInVehicle ;  Shipment  (  Builder builder )  {   setUserData  (  builder . userData ) ;    this . id =  builder . id ;    this . pickupServiceTime =  builder . pickupServiceTime ;    this . pickupTimeWindow =  builder . pickupTimeWindow ;    this . deliveryServiceTime =  builder . deliveryServiceTime ;    this . deliveryTimeWindow =  builder . deliveryTimeWindow ;    this . capacity =  builder . capacity ;    this . skills =  builder . skills ;    this . name =  builder . name ;    this . pickupLocation_ =  builder . pickupLocation_ ;    this . deliveryLocation_ =  builder . deliveryLocation_ ;    this . deliveryTimeWindows =  builder . deliveryTimeWindows ;    this . pickupTimeWindows =  builder . pickupTimeWindows ;    this . priority =  builder . priority ;    this . maxTimeInVehicle =  builder . maxTimeInVehicle ; }    @ Override public String getId  ( )  {  return id ; }   public Location getPickupLocation  ( )  {  return pickupLocation_ ; }   public  double getPickupServiceTime  ( )  {  return pickupServiceTime ; }   public Location getDeliveryLocation  ( )  {  return deliveryLocation_ ; }   public  double getDeliveryServiceTime  ( )  {  return deliveryServiceTime ; }   public TimeWindow getDeliveryTimeWindow  ( )  {  return    deliveryTimeWindows . getTimeWindows  ( ) . iterator  ( ) . next  ( ) ; }   public  Collection  < TimeWindow > getDeliveryTimeWindows  ( )  {  return  deliveryTimeWindows . getTimeWindows  ( ) ; }   public TimeWindow getPickupTimeWindow  ( )  {  return    pickupTimeWindows . getTimeWindows  ( ) . iterator  ( ) . next  ( ) ; }   public  Collection  < TimeWindow > getPickupTimeWindows  ( )  {  return  pickupTimeWindows . getTimeWindows  ( ) ; }    @ Override public  int hashCode  ( )  {   final  int  prime = 31 ;   int  result = 1 ;   result =   prime * result +  (   (  id == null ) ? 0 :  id . hashCode  ( ) ) ;  return result ; }    @ Override public boolean equals  (  Object obj )  {  if  (  this == obj )  return true ;  if  (  obj == null )  return false ;  if  (   getClass  ( ) !=  obj . getClass  ( ) )  return false ;  Shipment  other =  ( Shipment ) obj ;  if  (  id == null )  {  if  (   other . id != null )  return false ; } else  if  (  !  id . equals  (  other . id ) )  return false ;  return true ; }    @ Override public Capacity getSize  ( )  {  return capacity ; }    @ Override public Skills getRequiredSkills  ( )  {  return skills ; }    @ Override public String getName  ( )  {  return name ; }   public  @ Override  int getPriority  ( )  {  return priority ; }    @ Override public  double getMaxTimeInVehicle  ( )  {  return maxTimeInVehicle ; } }