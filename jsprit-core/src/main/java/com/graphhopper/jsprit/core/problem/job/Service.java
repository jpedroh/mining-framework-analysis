  package      com . graphhopper . jsprit . core . problem . job ;   import      com . graphhopper . jsprit . core . problem . AbstractJob ;  import      com . graphhopper . jsprit . core . problem . Capacity ;  import      com . graphhopper . jsprit . core . problem . Location ;  import      com . graphhopper . jsprit . core . problem . Skills ;  import         com . graphhopper . jsprit . core . problem . solution . route . activity . TimeWindow ;  import         com . graphhopper . jsprit . core . problem . solution . route . activity . TimeWindows ;  import         com . graphhopper . jsprit . core . problem . solution . route . activity . TimeWindowsImpl ;  import      com . graphhopper . jsprit . core . util . Coordinate ;  import   java . util . Collection ;   public class Service  extends AbstractJob  {   public static class Builder  <  T  extends Service >  {   public static Builder newInstance  (  String id )  {  return  new Builder  ( id ) ; }   private String  id ;   protected String  locationId ;   private String  type = "service" ;   protected Coordinate  coord ;   protected  double  serviceTime ;   protected TimeWindow  timeWindow =  TimeWindow . newInstance  ( 0.0 ,  Double . MAX_VALUE ) ;   protected  Capacity . Builder  capacityBuilder =   Capacity . Builder . newInstance  ( ) ;   protected Capacity  capacity ;   protected  Skills . Builder  skillBuilder =   Skills . Builder . newInstance  ( ) ;   protected Skills  skills ;   private String  name = "no-name" ;   protected Location  location ;   protected TimeWindowsImpl  timeWindows ;   private boolean  twAdded = false ;   private  int  priority = 2 ;   protected  double  maxTimeInVehicle =  Double . MAX_VALUE ;  Builder  (  String id )  {    this . id = id ;   timeWindows =  new TimeWindowsImpl  ( ) ;   timeWindows . add  ( timeWindow ) ; }   protected  Builder  < T > setType  (  String name )  {    this . type = name ;  return this ; }   public  Builder  < T > setLocation  (  Location location )  {    this . location = location ;  return this ; }   public  Builder  < T > setServiceTime  (   double serviceTime )  {  if  (  serviceTime < 0 )  throw  new IllegalArgumentException  ( "serviceTime must be greater than or equal to zero" ) ;    this . serviceTime = serviceTime ;  return this ; }   public  Builder  < T > addSizeDimension  (   int dimensionIndex ,   int dimensionValue )  {  if  (  dimensionValue < 0 )  throw  new IllegalArgumentException  ( "capacity value cannot be negative" ) ;   capacityBuilder . addDimension  ( dimensionIndex , dimensionValue ) ;  return this ; }   public  Builder  < T > setTimeWindow  (  TimeWindow tw )  {  if  (  tw == null )  throw  new IllegalArgumentException  ( "time-window arg must not be null" ) ;    this . timeWindow = tw ;    this . timeWindows =  new TimeWindowsImpl  ( ) ;   timeWindows . add  ( tw ) ;  return this ; }   public  Builder  < T > addTimeWindow  (  TimeWindow timeWindow )  {  if  (  timeWindow == null )  throw  new IllegalArgumentException  ( "time-window arg must not be null" ) ;  if  (  ! twAdded )  {   timeWindows =  new TimeWindowsImpl  ( ) ;   twAdded = true ; }   timeWindows . add  ( timeWindow ) ;  return this ; }   public  Builder  < T > addTimeWindow  (   double earliest ,   double latest )  {  return  addTimeWindow  (  TimeWindow . newInstance  ( earliest , latest ) ) ; }   public T build  ( )  {  if  (  location == null )  throw  new IllegalArgumentException  ( "location is missing" ) ;   this . setType  ( "service" ) ;   capacity =  capacityBuilder . build  ( ) ;   skills =  skillBuilder . build  ( ) ;  return  ( T )  new Service  ( this ) ; }   public  Builder  < T > addRequiredSkill  (  String skill )  {   skillBuilder . addSkill  ( skill ) ;  return this ; }   public  Builder  < T > setName  (  String name )  {    this . name = name ;  return this ; }   public  Builder  < T > addAllRequiredSkills  (  Skills skills )  {  for ( String s :  skills . values  ( ) )  {   skillBuilder . addSkill  ( s ) ; }  return this ; }   public  Builder  < T > addAllSizeDimensions  (  Capacity size )  {  for (   int  i = 0 ;  i <  size . getNuOfDimensions  ( ) ;  i ++ )  {   capacityBuilder . addDimension  ( i ,  size . get  ( i ) ) ; }  return this ; }   public  Builder  < T > setPriority  (   int priority )  {  if  (   priority < 1 ||  priority > 10 )  throw  new IllegalArgumentException  ( "incorrect priority. only priority values from 1 to 10 are allowed where 1 = high and 10 is low" ) ;    this . priority = priority ;  return this ; }   public  Builder  < T > setMaxTimeInVehicle  (   double maxTimeInVehicle )  {  throw  new UnsupportedOperationException  ( "maxTimeInVehicle is not yet supported for Pickups and Services (only for Deliveries and Shipments)" ) ; }   protected Object  userData ;   public  Builder  < T > setUserData  (  Object userData )  {    this . userData = userData ;  return this ; } }   private final String  id ;   private final String  type ;   private final  double  serviceTime ;   private final TimeWindow  timeWindow ;   private final Capacity  size ;   private final Skills  skills ;   private final String  name ;   private final Location  location ;   private final TimeWindows  timeWindowManager ;   private final  int  priority ;   private final  double  maxTimeInVehicle ; 
<<<<<<<
 Service  (  Builder builder )  {   id =  builder . id ;   serviceTime =  builder . serviceTime ;   timeWindow =  builder . timeWindow ;   type =  builder . type ;   size =  builder . capacity ;   skills =  builder . skills ;   name =  builder . name ;   location =  builder . location ;   timeWindowManager =  builder . timeWindows ;   priority =  builder . priority ;   maxTimeInVehicle =  builder . maxTimeInVehicle ; }
=======
>>>>>>>
   public  Collection  < TimeWindow > getTimeWindows  ( )  {  return  timeWindowManager . getTimeWindows  ( ) ; }    @ Override public String getId  ( )  {  return id ; }   public Location getLocation  ( )  {  return location ; }   public  double getServiceDuration  ( )  {  return serviceTime ; }   public TimeWindow getTimeWindow  ( )  {  return    timeWindowManager . getTimeWindows  ( ) . iterator  ( ) . next  ( ) ; }   public String getType  ( )  {  return type ; }    @ Override public String toString  ( )  {  return               "[id=" + id + "][name=" + name + "][type=" + type + "][location=" + location + "][capacity=" + size + "][serviceTime=" + serviceTime + "][timeWindow=" + timeWindow + "]" ; }    @ Override public  int hashCode  ( )  {   final  int  prime = 31 ;   int  result = 1 ;   result =   prime * result +  (   (  id == null ) ? 0 :  id . hashCode  ( ) ) ;  return result ; }    @ Override public boolean equals  (  Object obj )  {  if  (  this == obj )  return true ;  if  (  obj == null )  return false ;  if  (   getClass  ( ) !=  obj . getClass  ( ) )  return false ;  Service  other =  ( Service ) obj ;  if  (  id == null )  {  if  (   other . id != null )  return false ; } else  if  (  !  id . equals  (  other . id ) )  return false ;  return true ; }    @ Override public Capacity getSize  ( )  {  return size ; }    @ Override public Skills getRequiredSkills  ( )  {  return skills ; }    @ Override public String getName  ( )  {  return name ; }   public  @ Override  int getPriority  ( )  {  return priority ; }    @ Override public  double getMaxTimeInVehicle  ( )  {  return  this . maxTimeInVehicle ; }  Service  (   Builder  <  ? > builder )  {   setUserData  (  builder . userData ) ;   id =  builder . id ;   serviceTime =  builder . serviceTime ;   timeWindow =  builder . timeWindow ;   type =  builder . type ;   size =  builder . capacity ;   skills =  builder . skills ;   name =  builder . name ;   location =  builder . location ;   timeWindowManager =  builder . timeWindows ;   priority =  builder . priority ; } }