  package   org . cloudfoundry . reactor ;   import     com . fasterxml . jackson . databind . DeserializationFeature ;  import     com . fasterxml . jackson . databind . ObjectMapper ;  import      com . fasterxml . jackson . databind . deser . DeserializationProblemHandler ;  import      com . fasterxml . jackson . datatype . jdk8 . Jdk8Module ;  import   org . cloudfoundry . Nullable ;  import     org . cloudfoundry . reactor . util . DefaultSslCertificateTruster ;  import     org . cloudfoundry . reactor . util . SslCertificateTruster ;  import     org . cloudfoundry . reactor . util . StaticTrustManagerFactory ;  import    org . immutables . value . Value ;  import      reactor . ipc . netty . http . client . HttpClient ;  import     reactor . ipc . netty . resources . LoopResources ;  import     reactor . ipc . netty . resources . PoolResources ;  import   javax . annotation . PreDestroy ;  import   java . time . Duration ;  import   java . util . List ;  import   java . util . Optional ;  import static       com . fasterxml . jackson . annotation . JsonInclude . Include . NON_NULL ;  import static      com . fasterxml . jackson . databind . DeserializationFeature . FAIL_ON_UNKNOWN_PROPERTIES ;  import static     io . netty . channel . ChannelOption . CONNECT_TIMEOUT_MILLIS ;  import static     io . netty . channel . ChannelOption . SO_KEEPALIVE ;  import static     io . netty . channel . ChannelOption . SO_RCVBUF ;  import static     io . netty . channel . ChannelOption . SO_SNDBUF ;  import    io . netty . buffer . ByteBufAllocator ;  import    io . netty . buffer . PooledByteBufAllocator ;  import    reactor . core . publisher . Mono ;  import static     io . netty . channel . ChannelOption . ALLOCATOR ;    @  Value . Immutable abstract class _DefaultConnectionContext  implements  ConnectionContext  {   private static final  int  RECEIVE_BUFFER_SIZE =   10 * 1024 * 1024 ;   private static final  int  SEND_BUFFER_SIZE =   10 * 1024 * 1024 ;    @ PreDestroy public final void dispose  ( )  {    getConnectionPool  ( ) . ifPresent  (  PoolResources :: dispose ) ;    getThreadPool  ( ) . dispose  ( ) ; }    @ Nullable  @  Value . Default public Integer getConnectionPoolSize  ( )  {  return  PoolResources . DEFAULT_POOL_MAX_CONNECTION ; }    @ Override  @  Value . Default public HttpClient getHttpClient  ( )  {  return  HttpClient . create  (  options ->  {       options . 
<<<<<<<
compression
=======
loopResources
>>>>>>>
  ( 
<<<<<<<
true
=======
 getThreadPool  ( )
>>>>>>>
 ) . option  ( ALLOCATOR ,  getAllocator  ( ) ) . option  ( SO_SNDBUF , SEND_BUFFER_SIZE ) . option  ( SO_RCVBUF , RECEIVE_BUFFER_SIZE ) . disablePool  ( ) ;   options . sslSupport  (  ssl ->   getSslCertificateTruster  ( ) . ifPresent  (  trustManager ->  ssl . trustManager  (  new StaticTrustManagerFactory  ( trustManager ) ) ) ) ;    getConnectionPool  ( ) . ifPresent  (  options :: poolResources ) ;    getConnectTimeout  ( ) . ifPresent  (  socketTimeout ->  options . option  ( CONNECT_TIMEOUT_MILLIS ,  (  int )  socketTimeout . toMillis  ( ) ) ) ;    getKeepAlive  ( ) . ifPresent  (  keepAlive ->  options . option  ( SO_KEEPALIVE , keepAlive ) ) ;    getSslHandshakeTimeout  ( ) . ifPresent  (  options :: sslHandshakeTimeout ) ;    getProxyConfiguration  ( ) . ifPresent  (  c ->  c . configure  ( options ) ) ; } ) ; }    @ Override  @  Value . Default public ObjectMapper getObjectMapper  ( )  {  ObjectMapper  objectMapper =      new ObjectMapper  ( ) . disable  ( FAIL_ON_UNKNOWN_PROPERTIES ) . enable  (  DeserializationFeature . ACCEPT_SINGLE_VALUE_AS_ARRAY ) . registerModule  (  new Jdk8Module  ( ) ) . setSerializationInclusion  ( NON_NULL ) ;    getProblemHandlers  ( ) . forEach  (  objectMapper :: addHandler ) ;  return objectMapper ; }    @ Override  @  Value . Default public RootProvider getRootProvider  ( )  {  return       DelegatingRootProvider . builder  ( ) . apiHost  (  getApiHost  ( ) ) . objectMapper  (  getObjectMapper  ( ) ) . port  (  getPort  ( ) ) . secure  (  getSecure  ( ) ) . build  ( ) ; }    @  Value . Default public Integer getThreadPoolSize  ( )  {  return  LoopResources . DEFAULT_IO_WORKER_COUNT ; }    @ Override public  Mono  < Void > trust  (  String host ,   int port )  {  return    getSslCertificateTruster  ( ) . map  (  t ->  t . trust  ( host , port ,  Duration . ofSeconds  ( 30 ) ) ) . orElse  (  Mono . empty  ( ) ) ; }    @ Nullable abstract String getApiHost  ( ) ;   abstract  Optional  < Duration > getConnectTimeout  ( ) ;    @  Value . Derived  Optional  < PoolResources > getConnectionPool  ( )  {  return   Optional . ofNullable  (  getConnectionPoolSize  ( ) ) . map  (  connectionPoolSize ->  PoolResources . fixed  ( "cloudfoundry-client" , connectionPoolSize ) ) ; }   abstract  Optional  < Boolean > getKeepAlive  ( ) ;   abstract  Optional  < Integer > getPort  ( ) ;   abstract  List  < DeserializationProblemHandler > getProblemHandlers  ( ) ;   abstract  Optional  < ProxyConfiguration > getProxyConfiguration  ( ) ;   abstract  Optional  < Boolean > getSecure  ( ) ;   abstract  Optional  < Boolean > getSkipSslValidation  ( ) ;    @  Value . Derived  Optional  < SslCertificateTruster > getSslCertificateTruster  ( )  {  if  (   getSkipSslValidation  ( ) . orElse  ( false ) )  {  return  Optional . of  (  new DefaultSslCertificateTruster  (  getAllocator  ( ) ,  getProxyConfiguration  ( ) ,  getThreadPool  ( ) ) ) ; } else  {  return  Optional . empty  ( ) ; } }   abstract  Optional  < Duration > getSslCloseNotifyFlushTimeout  ( ) ;   abstract  Optional  < Duration > getSslCloseNotifyReadTimeout  ( ) ;   abstract  Optional  < Duration > getSslHandshakeTimeout  ( ) ;    @  Value . Derived LoopResources getThreadPool  ( )  {  return  LoopResources . create  ( "cloudfoundry-client" ,  getThreadPoolSize  ( ) , true ) ; }    @  Value . Derived ByteBufAllocator getAllocator  ( )  {  return  new PooledByteBufAllocator  ( false , 16 , 16 , 8192 , 7 , 512 , 256 , 64 , true , 0 ) ; } }