  package      com . alibaba . easyexcel . test . demo . write ;   import   java . io . File ;  import   java . io . InputStream ;  import   java . net . URL ;  import   java . util . ArrayList ;  import   java . util . Arrays ;  import   java . util . Date ;  import   java . util . HashSet ;  import   java . util . List ;  import   java . util . Set ;  import       com . alibaba . easyexcel . test . core . head . ComplexHeadData ;  import      com . alibaba . easyexcel . test . util . TestFileUtil ;  import    com . alibaba . excel . EasyExcel ;  import    com . alibaba . excel . ExcelWriter ;  import     com . alibaba . excel . annotation . ExcelProperty ;  import      com . alibaba . excel . annotation . format . DateTimeFormat ;  import      com . alibaba . excel . annotation . format . NumberFormat ;  import       com . alibaba . excel . annotation . write . style . ColumnWidth ;  import       com . alibaba . excel . annotation . write . style . ContentRowHeight ;  import       com . alibaba . excel . annotation . write . style . HeadRowHeight ;  import     com . alibaba . excel . enums . CellDataTypeEnum ;  import      com . alibaba . excel . metadata . data . CommentData ;  import      com . alibaba . excel . metadata . data . FormulaData ;  import      com . alibaba . excel . metadata . data . HyperlinkData ;  import       com . alibaba . excel . metadata . data . HyperlinkData . HyperlinkType ;  import      com . alibaba . excel . metadata . data . ImageData ;  import       com . alibaba . excel . metadata . data . ImageData . ImageType ;  import      com . alibaba . excel . metadata . data . RichTextStringData ;  import      com . alibaba . excel . metadata . data . WriteCellData ;  import     com . alibaba . excel . util . BooleanUtils ;  import     com . alibaba . excel . util . FileUtils ;  import     com . alibaba . excel . util . ListUtils ;  import      com . alibaba . excel . write . handler . CellWriteHandler ;  import       com . alibaba . excel . write . handler . context . CellWriteHandlerContext ;  import      com . alibaba . excel . write . merge . LoopMergeStrategy ;  import      com . alibaba . excel . write . metadata . WriteSheet ;  import      com . alibaba . excel . write . metadata . WriteTable ;  import       com . alibaba . excel . write . metadata . style . WriteCellStyle ;  import       com . alibaba . excel . write . metadata . style . WriteFont ;  import      com . alibaba . excel . write . style . HorizontalCellStyleStrategy ;  import       com . alibaba . excel . write . style . column . LongestMatchColumnWidthStyleStrategy ;  import      org . apache . poi . ss . usermodel . Cell ;  import      org . apache . poi . ss . usermodel . CellStyle ;  import      org . apache . poi . ss . usermodel . FillPatternType ;  import      org . apache . poi . ss . usermodel . IndexedColors ;  import      org . apache . poi . ss . usermodel . Workbook ;  import      org . apache . poi . xssf . streaming . SXSSFSheet ;  import     org . junit . jupiter . api . Test ;   public class WriteTest  {    @ Test public void simpleWrite  ( )  {  String  fileName =     TestFileUtil . getPath  ( ) + "simpleWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;     EasyExcel . write  ( fileName ,  DemoData . class ) . sheet  ( "模板" ) . doWrite  (   ( ) ->  {  return  data  ( ) ; } ) ;   fileName =     TestFileUtil . getPath  ( ) + "simpleWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;     EasyExcel . write  ( fileName ,  DemoData . class ) . sheet  ( "模板" ) . doWrite  (  data  ( ) ) ;   fileName =     TestFileUtil . getPath  ( ) + "simpleWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;  try  (  ExcelWriter excelWriter =   EasyExcel . write  ( fileName ,  DemoData . class ) . build  ( ) )  {  WriteSheet  writeSheet =   EasyExcel . writerSheet  ( "模板" ) . build  ( ) ;   excelWriter . write  (  data  ( ) , writeSheet ) ; } }    @ Test public void excludeOrIncludeWrite  ( )  {  String  fileName =     TestFileUtil . getPath  ( ) + "excludeOrIncludeWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;   Set  < String >  excludeColumnFieldNames =  new  HashSet  < >  ( ) ;   excludeColumnFieldNames . add  ( "date" ) ;      EasyExcel . write  ( fileName ,  DemoData . class ) . excludeColumnFieldNames  ( excludeColumnFieldNames ) . sheet  ( "模板" ) . doWrite  (  data  ( ) ) ;   fileName =     TestFileUtil . getPath  ( ) + "excludeOrIncludeWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;   Set  < String >  includeColumnFieldNames =  new  HashSet  < >  ( ) ;   includeColumnFieldNames . add  ( "date" ) ;      EasyExcel . write  ( fileName ,  DemoData . class ) . includeColumnFieldNames  ( includeColumnFieldNames ) . sheet  ( "模板" ) . doWrite  (  data  ( ) ) ; }    @ Test public void indexWrite  ( )  {  String  fileName =     TestFileUtil . getPath  ( ) + "indexWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;     EasyExcel . write  ( fileName ,  IndexData . class ) . sheet  ( "模板" ) . doWrite  (  data  ( ) ) ; }    @ Test public void complexHeadWrite  ( )  {  String  fileName =     TestFileUtil . getPath  ( ) + "complexHeadWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;     EasyExcel . write  ( fileName ,  ComplexHeadData . class ) . sheet  ( "模板" ) . doWrite  (  data  ( ) ) ; }    @ Test public void repeatedWrite  ( )  {  String  fileName =     TestFileUtil . getPath  ( ) + "repeatedWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;  try  (  ExcelWriter excelWriter =   EasyExcel . write  ( fileName ,  DemoData . class ) . build  ( ) )  {  WriteSheet  writeSheet =   EasyExcel . writerSheet  ( "模板" ) . build  ( ) ;  for (   int  i = 0 ;  i < 5 ;  i ++ )  {   List  < DemoData >  data =  data  ( ) ;   excelWriter . write  ( data , writeSheet ) ; } }   fileName =     TestFileUtil . getPath  ( ) + "repeatedWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;  try  (  ExcelWriter excelWriter =   EasyExcel . write  ( fileName ,  DemoData . class ) . build  ( ) )  {  for (   int  i = 0 ;  i < 5 ;  i ++ )  {  WriteSheet  writeSheet =   EasyExcel . writerSheet  ( i ,  "模板" + i ) . build  ( ) ;   List  < DemoData >  data =  data  ( ) ;   excelWriter . write  ( data , writeSheet ) ; } }   fileName =     TestFileUtil . getPath  ( ) + "repeatedWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;  try  (  ExcelWriter excelWriter =   EasyExcel . write  ( fileName ) . build  ( ) )  {  for (   int  i = 0 ;  i < 5 ;  i ++ )  {  WriteSheet  writeSheet =    EasyExcel . writerSheet  ( i ,  "模板" + i ) . head  (  DemoData . class ) . build  ( ) ;   List  < DemoData >  data =  data  ( ) ;   excelWriter . write  ( data , writeSheet ) ; } } }    @ Test public void converterWrite  ( )  {  String  fileName =     TestFileUtil . getPath  ( ) + "converterWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;     EasyExcel . write  ( fileName ,  ConverterData . class ) . sheet  ( "模板" ) . doWrite  (  data  ( ) ) ; }    @ Test public void imageWrite  ( )  throws Exception  {  String  fileName =     TestFileUtil . getPath  ( ) + "imageWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;  String  imagePath =     TestFileUtil . getPath  ( ) + "converter" +  File . separator + "img.jpg" ;  try  (  InputStream inputStream =  FileUtils . openInputStream  (  new File  ( imagePath ) ) )  {   List  < ImageDemoData >  list =  ListUtils . newArrayList  ( ) ;  ImageDemoData  imageDemoData =  new ImageDemoData  ( ) ;   list . add  ( imageDemoData ) ;   imageDemoData . setByteArray  (  FileUtils . readFileToByteArray  (  new File  ( imagePath ) ) ) ;   imageDemoData . setFile  (  new File  ( imagePath ) ) ;   imageDemoData . setString  ( imagePath ) ;   imageDemoData . setInputStream  ( inputStream ) ;   imageDemoData . setUrl  (  new URL  ( "https://raw.githubusercontent.com/alibaba/easyexcel/master/src/test/resources/converter/img.jpg" ) ) ;   WriteCellData  < Void >  writeCellData =  new  WriteCellData  < >  ( ) ;   imageDemoData . setWriteCellDataFile  ( writeCellData ) ;   writeCellData . setType  (  CellDataTypeEnum . STRING ) ;   writeCellData . setStringValue  ( "额外的放一些文字" ) ;   List  < ImageData >  imageDataList =  new  ArrayList  < >  ( ) ;  ImageData  imageData =  new ImageData  ( ) ;   imageDataList . add  ( imageData ) ;   writeCellData . setImageDataList  ( imageDataList ) ;   imageData . setImage  (  FileUtils . readFileToByteArray  (  new File  ( imagePath ) ) ) ;   imageData . setImageType  (  ImageType . PICTURE_TYPE_PNG ) ;   imageData . setTop  ( 5 ) ;   imageData . setRight  ( 40 ) ;   imageData . setBottom  ( 5 ) ;   imageData . setLeft  ( 5 ) ;   imageData =  new ImageData  ( ) ;   imageDataList . add  ( imageData ) ;   writeCellData . setImageDataList  ( imageDataList ) ;   imageData . setImage  (  FileUtils . readFileToByteArray  (  new File  ( imagePath ) ) ) ;   imageData . setImageType  (  ImageType . PICTURE_TYPE_PNG ) ;   imageData . setTop  ( 5 ) ;   imageData . setRight  ( 5 ) ;   imageData . setBottom  ( 5 ) ;   imageData . setLeft  ( 50 ) ;   imageData . setRelativeFirstRowIndex  ( 0 ) ;   imageData . setRelativeFirstColumnIndex  ( 0 ) ;   imageData . setRelativeLastRowIndex  ( 0 ) ;   imageData . setRelativeLastColumnIndex  ( 1 ) ;     EasyExcel . write  ( fileName ,  ImageDemoData . class ) . sheet  ( ) . doWrite  ( list ) ; } }    @ Test public void writeCellDataWrite  ( )  {  String  fileName =     TestFileUtil . getPath  ( ) + "writeCellDataWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;  WriteCellDemoData  writeCellDemoData =  new WriteCellDemoData  ( ) ;   WriteCellData  < String >  hyperlink =  new  WriteCellData  < >  ( "官方网站" ) ;   writeCellDemoData . setHyperlink  ( hyperlink ) ;  HyperlinkData  hyperlinkData =  new HyperlinkData  ( ) ;   hyperlink . setHyperlinkData  ( hyperlinkData ) ;   hyperlinkData . setAddress  ( "https://github.com/alibaba/easyexcel" ) ;   hyperlinkData . setHyperlinkType  (  HyperlinkType . URL ) ;   WriteCellData  < String >  comment =  new  WriteCellData  < >  ( "备注的单元格信息" ) ;   writeCellDemoData . setCommentData  ( comment ) ;  CommentData  commentData =  new CommentData  ( ) ;   comment . setCommentData  ( commentData ) ;   commentData . setAuthor  ( "Jiaju Zhuang" ) ;   commentData . setRichTextStringData  (  new RichTextStringData  ( "这是一个备注" ) ) ;   commentData . setRelativeLastColumnIndex  ( 1 ) ;   commentData . setRelativeLastRowIndex  ( 1 ) ;   WriteCellData  < String >  formula =  new  WriteCellData  < >  ( ) ;   writeCellDemoData . setFormulaData  ( formula ) ;  FormulaData  formulaData =  new FormulaData  ( ) ;   formula . setFormulaData  ( formulaData ) ;   formulaData . setFormulaValue  ( "REPLACE(123456789,1,1,2)" ) ;   WriteCellData  < String >  writeCellStyle =  new  WriteCellData  < >  ( "单元格样式" ) ;   writeCellStyle . setType  (  CellDataTypeEnum . STRING ) ;   writeCellDemoData . setWriteCellStyle  ( writeCellStyle ) ;  WriteCellStyle  writeCellStyleData =  new WriteCellStyle  ( ) ;   writeCellStyle . setWriteCellStyle  ( writeCellStyleData ) ;   writeCellStyleData . setFillPatternType  (  FillPatternType . SOLID_FOREGROUND ) ;   writeCellStyleData . setFillForegroundColor  (   IndexedColors . GREEN . getIndex  ( ) ) ;   WriteCellData  < String >  richTest =  new  WriteCellData  < >  ( ) ;   richTest . setType  (  CellDataTypeEnum . RICH_TEXT_STRING ) ;   writeCellDemoData . setRichText  ( richTest ) ;  RichTextStringData  richTextStringData =  new RichTextStringData  ( ) ;   richTest . setRichTextStringDataValue  ( richTextStringData ) ;   richTextStringData . setTextString  ( "红色绿色默认" ) ;  WriteFont  writeFont =  new WriteFont  ( ) ;   writeFont . setColor  (   IndexedColors . RED . getIndex  ( ) ) ;   richTextStringData . applyFont  ( 0 , 2 , writeFont ) ;   writeFont =  new WriteFont  ( ) ;   writeFont . setColor  (   IndexedColors . GREEN . getIndex  ( ) ) ;   richTextStringData . applyFont  ( 2 , 4 , writeFont ) ;   List  < WriteCellDemoData >  data =  new  ArrayList  < >  ( ) ;   data . add  ( writeCellDemoData ) ;      EasyExcel . write  ( fileName ,  WriteCellDemoData . class ) . inMemory  ( true ) . sheet  ( "模板" ) . doWrite  ( data ) ; }    @ Test public void templateWrite  ( )  {  String  templateFileName =     TestFileUtil . getPath  ( ) + "demo" +  File . separator + "demo.xlsx" ;  String  fileName =     TestFileUtil . getPath  ( ) + "templateWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;      EasyExcel . write  ( fileName ,  DemoData . class ) . withTemplate  ( templateFileName ) . sheet  ( ) . doWrite  (  data  ( ) ) ; }    @ Test public void widthAndHeightWrite  ( )  {  String  fileName =     TestFileUtil . getPath  ( ) + "widthAndHeightWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;     EasyExcel . write  ( fileName ,  WidthAndHeightData . class ) . sheet  ( "模板" ) . doWrite  (  data  ( ) ) ; }    @ Test public void annotationStyleWrite  ( )  {  String  fileName =     TestFileUtil . getPath  ( ) + "annotationStyleWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;     EasyExcel . write  ( fileName ,  DemoStyleData . class ) . sheet  ( "模板" ) . doWrite  (  data  ( ) ) ; }    @ Test public void handlerStyleWrite  ( )  {  String  fileName =     TestFileUtil . getPath  ( ) + "handlerStyleWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;  WriteCellStyle  headWriteCellStyle =  new WriteCellStyle  ( ) ;   headWriteCellStyle . setFillForegroundColor  (   IndexedColors . RED . getIndex  ( ) ) ;  WriteFont  headWriteFont =  new WriteFont  ( ) ;   headWriteFont . setFontHeightInPoints  (  (  short ) 20 ) ;   headWriteCellStyle . setWriteFont  ( headWriteFont ) ;  WriteCellStyle  contentWriteCellStyle =  new WriteCellStyle  ( ) ;   contentWriteCellStyle . setFillPatternType  (  FillPatternType . SOLID_FOREGROUND ) ;   contentWriteCellStyle . setFillForegroundColor  (   IndexedColors . GREEN . getIndex  ( ) ) ;  WriteFont  contentWriteFont =  new WriteFont  ( ) ;   contentWriteFont . setFontHeightInPoints  (  (  short ) 20 ) ;   contentWriteCellStyle . setWriteFont  ( contentWriteFont ) ;  HorizontalCellStyleStrategy  horizontalCellStyleStrategy =  new HorizontalCellStyleStrategy  ( headWriteCellStyle , contentWriteCellStyle ) ;      EasyExcel . write  ( fileName ,  DemoData . class ) . registerWriteHandler  ( horizontalCellStyleStrategy ) . sheet  ( "模板" ) . doWrite  (  data  ( ) ) ;   fileName =     TestFileUtil . getPath  ( ) + "handlerStyleWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;      EasyExcel . write  ( fileName ,  DemoData . class ) . registerWriteHandler  (  new CellWriteHandler  ( )  {    @ Override public void afterCellDispose  (  CellWriteHandlerContext context )  {  if  (  BooleanUtils . isNotTrue  (  context . getHead  ( ) ) )  {   WriteCellData  <  ? >  cellData =  context . getFirstCellData  ( ) ;  WriteCellStyle  writeCellStyle =  cellData . getOrCreateStyle  ( ) ;   writeCellStyle . setFillForegroundColor  (   IndexedColors . RED . getIndex  ( ) ) ;   writeCellStyle . setFillPatternType  (  FillPatternType . SOLID_FOREGROUND ) ; } } } ) . sheet  ( "模板" ) . doWrite  (  data  ( ) ) ;   fileName =     TestFileUtil . getPath  ( ) + "handlerStyleWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;      EasyExcel . write  ( fileName ,  DemoData . class ) . registerWriteHandler  (  new CellWriteHandler  ( )  {    @ Override public void afterCellDispose  (  CellWriteHandlerContext context )  {  if  (  BooleanUtils . isNotTrue  (  context . getHead  ( ) ) )  {  Cell  cell =  context . getCell  ( ) ;  Workbook  workbook =   context . getWriteWorkbookHolder  ( ) . getWorkbook  ( ) ;  CellStyle  cellStyle =  workbook . createCellStyle  ( ) ;   cellStyle . setFillForegroundColor  (   IndexedColors . RED . getIndex  ( ) ) ;   cellStyle . setFillPattern  (  FillPatternType . SOLID_FOREGROUND ) ;   cell . setCellStyle  ( cellStyle ) ;    context . getFirstCellData  ( ) . setWriteCellStyle  ( null ) ; } } } ) . sheet  ( "模板" ) . doWrite  (  data  ( ) ) ; }    @ Test public void mergeWrite  ( )  {  String  fileName =     TestFileUtil . getPath  ( ) + "mergeWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;     EasyExcel . write  ( fileName ,  DemoMergeData . class ) . sheet  ( "模板" ) . doWrite  (  data  ( ) ) ;   fileName =     TestFileUtil . getPath  ( ) + "mergeWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;  LoopMergeStrategy  loopMergeStrategy =  new LoopMergeStrategy  ( 2 , 0 ) ;      EasyExcel . write  ( fileName ,  DemoData . class ) . registerWriteHandler  ( loopMergeStrategy ) . sheet  ( "模板" ) . doWrite  (  data  ( ) ) ; }    @ Test public void tableWrite  ( )  {  String  fileName =     TestFileUtil . getPath  ( ) + "tableWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;  try  (  ExcelWriter excelWriter =   EasyExcel . write  ( fileName ,  DemoData . class ) . build  ( ) )  {  WriteSheet  writeSheet =    EasyExcel . writerSheet  ( "模板" ) . needHead  (  Boolean . FALSE ) . build  ( ) ;  WriteTable  writeTable0 =    EasyExcel . writerTable  ( 0 ) . needHead  (  Boolean . TRUE ) . build  ( ) ;  WriteTable  writeTable1 =    EasyExcel . writerTable  ( 1 ) . needHead  (  Boolean . TRUE ) . build  ( ) ;   excelWriter . write  (  data  ( ) , writeSheet , writeTable0 ) ;   excelWriter . write  (  data  ( ) , writeSheet , writeTable1 ) ; } }    @ Test public void dynamicHeadWrite  ( )  {  String  fileName =     TestFileUtil . getPath  ( ) + "dynamicHeadWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;      EasyExcel . write  ( fileName ) . head  (  head  ( ) ) . sheet  ( "模板" ) . doWrite  (  data  ( ) ) ; }    @ Test public void longestMatchColumnWidthWrite  ( )  {  String  fileName =     TestFileUtil . getPath  ( ) + "longestMatchColumnWidthWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;      EasyExcel . write  ( fileName ,  LongestMatchColumnWidthData . class ) . registerWriteHandler  (  new LongestMatchColumnWidthStyleStrategy  ( ) ) . sheet  ( "模板" ) . doWrite  (  dataLong  ( ) ) ; }    @ Test public void customHandlerWrite  ( )  {  String  fileName =     TestFileUtil . getPath  ( ) + "customHandlerWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;       EasyExcel . write  ( fileName ,  DemoData . class ) . registerWriteHandler  (  new CustomSheetWriteHandler  ( ) ) . registerWriteHandler  (  new CustomCellWriteHandler  ( ) ) . sheet  ( "模板" ) . doWrite  (  data  ( ) ) ; }    @ Test public void commentWrite  ( )  {  String  fileName =     TestFileUtil . getPath  ( ) + "commentWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;       EasyExcel . write  ( fileName ,  DemoData . class ) . inMemory  (  Boolean . TRUE ) . registerWriteHandler  (  new CommentWriteHandler  ( ) ) . sheet  ( "模板" ) . doWrite  (  data  ( ) ) ; }    @ Test public void variableTitleWrite  ( )  {  String  fileName =     TestFileUtil . getPath  ( ) + "variableTitleWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;      EasyExcel . write  ( fileName ,  ConverterData . class ) . head  (  variableTitleHead  ( ) ) . sheet  ( "模板" ) . doWrite  (  data  ( ) ) ; }    @ Test public void noModelWrite  ( )  {  String  fileName =     TestFileUtil . getPath  ( ) + "noModelWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;      EasyExcel . write  ( fileName ) . head  (  head  ( ) ) . sheet  ( "模板" ) . doWrite  (  dataList  ( ) ) ; }    @ Test public void DataValidationHandlerWrite  ( )  {  String  fileName =     TestFileUtil . getPath  ( ) + "customHandlerWrite" +  System . currentTimeMillis  ( ) + ".xlsx" ;      EasyExcel . write  ( fileName ,  DemoData . class ) . registerWriteHandler  (  new DataValidationSheetWriteHandler  ( ) ) . sheet  ( "模板" ) . doWrite  (  new  ArrayList  < >  ( ) ) ; }   private  List  < LongestMatchColumnWidthData > dataLong  ( )  {   List  < LongestMatchColumnWidthData >  list =  ListUtils . newArrayList  ( ) ;  for (   int  i = 0 ;  i < 10 ;  i ++ )  {  LongestMatchColumnWidthData  data =  new LongestMatchColumnWidthData  ( ) ;   data . setString  (  "测试很长的字符串测试很长的字符串测试很长的字符串" + i ) ;   data . setDate  (  new Date  ( ) ) ;   data . setDoubleData  ( 1000000000000.0 ) ;   list . add  ( data ) ; }  return list ; }   private  List  <  List  < String > > variableTitleHead  ( )  {   List  <  List  < String > >  list =  ListUtils . newArrayList  ( ) ;   List  < String >  head0 =  ListUtils . newArrayList  ( ) ;   head0 . add  (  "string" +  System . currentTimeMillis  ( ) ) ;   List  < String >  head1 =  ListUtils . newArrayList  ( ) ;   head1 . add  (  "number" +  System . currentTimeMillis  ( ) ) ;   List  < String >  head2 =  ListUtils . newArrayList  ( ) ;   head2 . add  (  "date" +  System . currentTimeMillis  ( ) ) ;   list . add  ( head0 ) ;   list . add  ( head1 ) ;   list . add  ( head2 ) ;  return list ; }   private  List  <  List  < String > > head  ( )  {   List  <  List  < String > >  list =  ListUtils . newArrayList  ( ) ;   List  < String >  head0 =  ListUtils . newArrayList  ( ) ;   head0 . add  (  "字符串" +  System . currentTimeMillis  ( ) ) ;   List  < String >  head1 =  ListUtils . newArrayList  ( ) ;   head1 . add  (  "数字" +  System . currentTimeMillis  ( ) ) ;   List  < String >  head2 =  ListUtils . newArrayList  ( ) ;   head2 . add  (  "日期" +  System . currentTimeMillis  ( ) ) ;   list . add  ( head0 ) ;   list . add  ( head1 ) ;   list . add  ( head2 ) ;  return list ; }   private  List  <  List  < Object > > dataList  ( )  {   List  <  List  < Object > >  list =  ListUtils . newArrayList  ( ) ;  for (   int  i = 0 ;  i < 10 ;  i ++ )  {   List  < Object >  data =  ListUtils . newArrayList  ( ) ;   data . add  (  "字符串" + i ) ;   data . add  ( 0.56 ) ;   data . add  (  new Date  ( ) ) ;   list . add  ( data ) ; }  return list ; }   private  List  < DemoData > data  ( )  {   List  < DemoData >  list =  ListUtils . newArrayList  ( ) ;  for (   int  i = 0 ;  i < 10 ;  i ++ )  {  DemoData  data =  new DemoData  ( ) ;   data . setString  (  "字符串" + i ) ;   data . setDate  (  new Date  ( ) ) ;   data . setDoubleData  ( 0.56 ) ;   list . add  ( data ) ; }  return list ; } }