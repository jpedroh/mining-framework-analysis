  package   org . jgrapht . generate ;   import  java . util .  * ;  import  org . jgrapht .  * ;   public class WattsStrogatzGraphGenerator  <  V ,  E >  implements   GraphGenerator  < V , E , V >  {   private static final boolean  DEFAULT_ADD_INSTEAD_OF_REWIRE = false ;   private final Random  rng ;   private final  int  n ;   private final  int  k ;   private final  double  p ;   private final boolean  addInsteadOfRewire ;   public WattsStrogatzGraphGenerator  (   int n ,   int k ,   double p )  {  this  ( n , k , p , DEFAULT_ADD_INSTEAD_OF_REWIRE ,  new Random  ( ) ) ; }   public WattsStrogatzGraphGenerator  (   int n ,   int k ,   double p ,   long seed )  {  this  ( n , k , p , DEFAULT_ADD_INSTEAD_OF_REWIRE ,  new Random  ( seed ) ) ; }   public WattsStrogatzGraphGenerator  (   int n ,   int k ,   double p ,  boolean addInsteadOfRewire ,  Random rng )  {  if  (  n < 3 )  {  throw  new IllegalArgumentException  ( "number of vertices must be at least 3" ) ; }    this . n = n ;  if  (  k < 1 )  {  throw  new IllegalArgumentException  ( "number of k-nearest neighbors must be positive" ) ; }  if  (   k % 2 == 1 )  {  throw  new IllegalArgumentException  ( "number of k-nearest neighbors must be even" ) ; }  if  (  k >   n - 2 +  (  n % 2 ) )  {  throw  new IllegalArgumentException  ( "invalid k-nearest neighbors" ) ; }    this . k = k ;  if  (   p < 0.0 ||  p > 1.0 )  {  throw  new IllegalArgumentException  ( "invalid probability" ) ; }    this . p = p ;    this . rng =  Objects . requireNonNull  ( rng , "Random number generator cannot be null" ) ;    this . addInsteadOfRewire = addInsteadOfRewire ; }    @ Override public void generateGraph  (   Graph  < V , E > target ,   Map  < String , V > resultMap )  {  if  (  n == 0 )  {  return ; } else  if  (  n == 1 )  {   target . addVertex  ( ) ;  return ; }   List  < V >  ring =  new  ArrayList  < >  ( n ) ;   Map  < V ,  List  < E > >  adj =  new  LinkedHashMap  < >  ( n ) ;  for (   int  i = 0 ;  i < n ;  i ++ )  {  V  v =  target . addVertex  ( ) ;  if  (  v == null )  {  throw  new IllegalArgumentException  ( "Invalid vertex factory" ) ; }   ring . add  ( v ) ;   adj . put  ( v ,  new  ArrayList  < >  ( k ) ) ; }  for (   int  i = 0 ;  i < n ;  i ++ )  {  V  vi =  ring . get  ( i ) ;   List  < E >  viAdj =  adj . get  ( i ) ;  for (   int  j = 1 ;  j <=  k / 2 ;  j ++ )  {   viAdj . add  (  target . addEdge  ( vi ,  ring . get  (   (  i + j ) % n ) ) ) ; } }  for (   int  r = 0 ;  r <  k / 2 ;  r ++ )  {  for (   int  i = 0 ;  i < n ;  i ++ )  {  V  v =  ring . get  ( i ) ;  E  e =   adj . get  ( i ) . get  ( r ) ;  if  (   rng . nextDouble  ( ) < p )  {  V  other =  ring . get  (  rng . nextInt  ( n ) ) ;  if  (   !  other . equals  ( v ) &&  !  target . containsEdge  ( v , other ) )  {  if  (  ! addInsteadOfRewire )  {   target . removeEdge  ( e ) ; }   target . addEdge  ( v , other ) ; } } } } } }