  package   org . jgrapht . generate ;   import  java . util .  * ;  import  org . jgrapht .  * ;   public class HyperCubeGraphGenerator  <  V ,  E >  implements   GraphGenerator  < V , E , V >  {   private  int  dim ;   public HyperCubeGraphGenerator  (   int dim )  {    this . dim = dim ; }    @ Override public void generateGraph  (   Graph  < V , E > target ,   Map  < String , V > resultMap )  {   int  order =  (  int )  Math . pow  ( 2 , dim ) ;   LinkedList  < V >  vertices =  new  LinkedList  < >  ( ) ;  for (   int  i = 0 ;  i < order ;  i ++ )  {  V  newVertex =  target . addVertex  ( ) ;   vertices . add  ( newVertex ) ;  if  (  resultMap != null )  {  String  s =  Integer . toBinaryString  ( i ) ;  while  (   s . length  ( ) < dim )  {   s =  "0" + s ; }   resultMap . put  ( s , newVertex ) ; } }  for (   int  i = 0 ;  i < order ;  i ++ )  {  for (   int  j =  i + 1 ;  j < order ;  j ++ )  {  for (   int  z = 0 ;  z < dim ;  z ++ )  {  if  (   (  j ^ i ) ==  (  1 << z ) )  {   target . addEdge  (  vertices . get  ( i ) ,  vertices . get  ( j ) ) ;  break ; } } } } } 
<<<<<<<
=======
   @ Override public void generateGraph  (   Graph  < V , E > target ,   final  VertexFactory  < V > vertexFactory ,   Map  < String , V > resultMap )  {   int  order =  (  int )  Math . pow  ( 2 , dim ) ;   LinkedList  < V >  vertices =  new  LinkedList  < >  ( ) ;  for (   int  i = 0 ;  i < order ;  i ++ )  {  V  newVertex =  vertexFactory . createVertex  ( ) ;   target . addVertex  ( newVertex ) ;   vertices . add  ( newVertex ) ;  if  (  resultMap != null )  {  StringBuilder  s =  new StringBuilder  (  Integer . toBinaryString  ( i ) ) ;  while  (   s . length  ( ) < dim )  {   s . insert  ( 0 , "0" ) ; }   resultMap . put  (  s . toString  ( ) , newVertex ) ; } }  for (   int  i = 0 ;  i < order ;  i ++ )  {  for (   int  j =  i + 1 ;  j < order ;  j ++ )  {  for (   int  z = 0 ;  z < dim ;  z ++ )  {  if  (   (  j ^ i ) ==  (  1 << z ) )  {   target . addEdge  (  vertices . get  ( i ) ,  vertices . get  ( j ) ) ;  break ; } } } } }
>>>>>>>
 }