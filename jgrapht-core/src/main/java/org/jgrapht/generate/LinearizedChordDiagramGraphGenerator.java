  package   org . jgrapht . generate ;   import  java . util .  * ;  import  org . jgrapht .  * ;  import   org . jgrapht . graph .  * ;   public class LinearizedChordDiagramGraphGenerator  <  V ,  E >  implements   GraphGenerator  < V , E , V >  {   private final Random  rng ;   private final  int  m ;   private final  int  n ;   public LinearizedChordDiagramGraphGenerator  (   int n ,   int m )  {  this  ( n , m ,  new Random  ( ) ) ; }   public LinearizedChordDiagramGraphGenerator  (   int n ,   int m ,   long seed )  {  this  ( n , m ,  new Random  ( seed ) ) ; }   public LinearizedChordDiagramGraphGenerator  (   int n ,   int m ,  Random rng )  {  if  (  n <= 0 )  {  throw  new IllegalArgumentException  ( "invalid number of nodes: must be positive" ) ; }    this . n = n ;  if  (  m <= 0 )  {  throw  new IllegalArgumentException  (   "invalid edges per node (" + m + " <= 0" ) ; }    this . m = m ;    this . rng =  Objects . requireNonNull  ( rng , "Random number generator cannot be null" ) ; }    @ Override public void generateGraph  (   Graph  < V , E > target ,   Map  < String , V > resultMap )  {   List  < V >  nodes =  new  ArrayList  < >  (   2 * n * m ) ;  for (   int  t = 0 ;  t < n ;  t ++ )  {  V  vt =  target . addVertex  ( ) ;  if  (  vt == null )  {  throw  new IllegalArgumentException  ( "Invalid vertex supplier" ) ; }  for (   int  j = 0 ;  j < m ;  j ++ )  {   nodes . add  ( vt ) ;  V  vs =  nodes . get  (  rng . nextInt  (  nodes . size  ( ) ) ) ;  if  (   target . addEdge  ( vt , vs ) == null )  {  throw  new IllegalArgumentException  ( "Graph does not permit parallel-edges." ) ; }   nodes . add  ( vs ) ; } } } }