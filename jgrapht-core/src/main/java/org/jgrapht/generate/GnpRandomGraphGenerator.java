  package   org . jgrapht . generate ;   import   java . util . HashMap ;  import   java . util . Map ;  import   java . util . Objects ;  import   java . util . Random ;  import   org . jgrapht . Graph ;   public class GnpRandomGraphGenerator  <  V ,  E >  implements   GraphGenerator  < V , E , V >  {   private static final boolean  DEFAULT_ALLOW_LOOPS = false ;   private final Random  rng ;   private final  int  n ;   private final  double  p ;   private final boolean  loops ;   public GnpRandomGraphGenerator  (   int n ,   double p )  {  this  ( n , p ,  new Random  ( ) , DEFAULT_ALLOW_LOOPS ) ; }   public GnpRandomGraphGenerator  (   int n ,   double p ,   long seed )  {  this  ( n , p ,  new Random  ( seed ) , DEFAULT_ALLOW_LOOPS ) ; }   public GnpRandomGraphGenerator  (   int n ,   double p ,   long seed ,  boolean loops )  {  this  ( n , p ,  new Random  ( seed ) , loops ) ; }   public GnpRandomGraphGenerator  (   int n ,   double p ,  Random rng ,  boolean loops )  {  if  (  n < 0 )  {  throw  new IllegalArgumentException  ( "number of vertices must be non-negative" ) ; }    this . n = n ;  if  (   p < 0.0 ||  p > 1.0 )  {  throw  new IllegalArgumentException  ( "not valid probability of edge existence" ) ; }    this . p = p ;    this . rng =  Objects . requireNonNull  ( rng ) ;    this . loops = loops ; }    @ Override public void generateGraph  (   Graph  < V , E > target ,   Map  < String , V > resultMap )  {  if  (  n == 0 )  {  return ; }  boolean  createLoops = loops ;  if  (  createLoops &&  !   target . getType  ( ) . isAllowingSelfLoops  ( ) )  {  throw  new IllegalArgumentException  ( "Provided graph does not support self-loops" ) ; }   int  previousVertexSetSize =   target . vertexSet  ( ) . size  ( ) ;   Map  < Integer , V >  vertices =  new  HashMap  < >  ( n ) ;  for (   int  i = 0 ;  i < n ;  i ++ )  {  V  v =  target . addVertex  ( ) ;   vertices . put  ( i , v ) ; }  if  (    target . vertexSet  ( ) . size  ( ) !=  previousVertexSetSize + n )  {  throw  new IllegalArgumentException  (   "Vertex factory did not produce " + n + " distinct vertices." ) ; }  boolean  isDirected =   target . getType  ( ) . isDirected  ( ) ;  for (   int  i = 0 ;  i < n ;  i ++ )  {  for (   int  j = i ;  j < n ;  j ++ )  {  V  s =  vertices . get  ( i ) ;  V  t =  vertices . get  ( j ) ;  if  (  i == j )  {  if  (  ! createLoops )  {  continue ; } }  if  (   rng . nextDouble  ( ) < p )  {   target . addEdge  ( s , t ) ; }  if  ( isDirected )  {  if  (   rng . nextDouble  ( ) < p )  {   target . addEdge  ( t , s ) ; } } } } } }