  package   org . jgrapht . graph ;   import  java . util .  * ;  import  org . jgrapht .  * ;   public class MaskSubgraph  <  V ,  E >  extends  AbstractGraph  < V , E >  {   private static final String  UNMODIFIABLE = "this graph is unmodifiable" ;   private  Graph  < V , E >  base ;   private  Set  < E >  edges ;   private  MaskFunctor  < V , E >  mask ;   private  Set  < V >  vertices ;   public MaskSubgraph  (   Graph  < V , E > base ,   MaskFunctor  < V , E > mask )  {  super  ( ) ;    this . base = base ;    this . mask = mask ;    this . vertices =  new  MaskVertexSet  < >  (  base . vertexSet  ( ) , mask ) ;    this . edges =  new  MaskEdgeSet  < >  ( base ,  base . edgeSet  ( ) , mask ) ; }    @ Override public E addEdge  (  V sourceVertex ,  V targetVertex )  {  throw  new UnsupportedOperationException  ( UNMODIFIABLE ) ; }    @ Override public boolean addEdge  (  V sourceVertex ,  V targetVertex ,  E edge )  {  throw  new UnsupportedOperationException  ( UNMODIFIABLE ) ; }    @ Override public boolean addVertex  (  V v )  {  throw  new UnsupportedOperationException  ( UNMODIFIABLE ) ; }    @ Override public boolean containsEdge  (  E e )  {  return   edgeSet  ( ) . contains  ( e ) ; }    @ Override public boolean containsVertex  (  V v )  {  return   vertexSet  ( ) . contains  ( v ) ; }   public  int degreeOf  (  V vertex )  {  return   edgesOf  ( vertex ) . size  ( ) ; }    @ Override public  Set  < E > edgeSet  ( )  {  return  this . edges ; }    @ Override public  Set  < E > edgesOf  (  V vertex )  {   assertVertexExist  ( vertex ) ;  return  new  MaskEdgeSet  < >  (  this . base ,   this . base . edgesOf  ( vertex ) ,  this . mask ) ; }    @ Override public  Set  < E > getAllEdges  (  V sourceVertex ,  V targetVertex )  {  if  (   containsVertex  ( sourceVertex ) &&  containsVertex  ( targetVertex ) )  {  return  new  MaskEdgeSet  < >  (  this . base ,   this . base . getAllEdges  ( sourceVertex , targetVertex ) ,  this . mask ) ; } else  return null ; }    @ Override public E getEdge  (  V sourceVertex ,  V targetVertex )  {   Set  < E >  edges =  getAllEdges  ( sourceVertex , targetVertex ) ;  if  (   (  edges == null ) ||  edges . isEmpty  ( ) )  {  return null ; } else  {  return   edges . iterator  ( ) . next  ( ) ; } }    @ Override public  EdgeFactory  < V , E > getEdgeFactory  ( )  {  return   this . base . getEdgeFactory  ( ) ; }    @ Override public V getEdgeSource  (  E edge )  {  assert  (   edgeSet  ( ) . contains  ( edge ) ) ;  return   this . base . getEdgeSource  ( edge ) ; }    @ Override public V getEdgeTarget  (  E edge )  {  assert  (   edgeSet  ( ) . contains  ( edge ) ) ;  return   this . base . getEdgeTarget  ( edge ) ; }    @ Override public  double getEdgeWeight  (  E edge )  {  assert  (   edgeSet  ( ) . contains  ( edge ) ) ;  return   this . base . getEdgeWeight  ( edge ) ; }   public  Set  < E > incomingEdgesOf  (  V vertex )  {   assertVertexExist  ( vertex ) ;  return  new  MaskEdgeSet  < >  (  this . base ,   (  (  DirectedGraph  < V , E > )  this . base ) . incomingEdgesOf  ( vertex ) ,  this . mask ) ; }   public  int inDegreeOf  (  V vertex )  {  return   incomingEdgesOf  ( vertex ) . size  ( ) ; }   public  int outDegreeOf  (  V vertex )  {  return   outgoingEdgesOf  ( vertex ) . size  ( ) ; }   public  Set  < E > outgoingEdgesOf  (  V vertex )  {   assertVertexExist  ( vertex ) ;  return  new  MaskEdgeSet  < >  (  this . base ,   (  (  DirectedGraph  < V , E > )  this . base ) . outgoingEdgesOf  ( vertex ) ,  this . mask ) ; }    @ Override public boolean removeAllEdges  (   Collection  <  ? extends E > edges )  {  throw  new UnsupportedOperationException  ( UNMODIFIABLE ) ; }    @ Override public  Set  < E > removeAllEdges  (  V sourceVertex ,  V targetVertex )  {  throw  new UnsupportedOperationException  ( UNMODIFIABLE ) ; }    @ Override public boolean removeAllVertices  (   Collection  <  ? extends V > vertices )  {  throw  new UnsupportedOperationException  ( UNMODIFIABLE ) ; }    @ Override public boolean removeEdge  (  E e )  {  throw  new UnsupportedOperationException  ( UNMODIFIABLE ) ; }    @ Override public E removeEdge  (  V sourceVertex ,  V targetVertex )  {  throw  new UnsupportedOperationException  ( UNMODIFIABLE ) ; }    @ Override public boolean removeVertex  (  V v )  {  throw  new UnsupportedOperationException  ( UNMODIFIABLE ) ; }    @ Override public  Set  < V > vertexSet  ( )  {  return  this . vertices ; } }