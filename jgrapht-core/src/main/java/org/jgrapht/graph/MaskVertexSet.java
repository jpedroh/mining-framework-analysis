  package   org . jgrapht . graph ;   import  java . util .  * ;  import   org . jgrapht . util .  * ;  import    org . jgrapht . util . PrefetchIterator .  * ;  class MaskVertexSet  <  V ,  E >  extends  AbstractSet  < V >  {   private  MaskFunctor  < V , E >  mask ;   private  Set  < V >  vertexSet ;   private transient  TypeUtil  < V >  vertexTypeDecl = null ;   public MaskVertexSet  (   Set  < V > vertexSet ,   MaskFunctor  < V , E > mask )  {    this . vertexSet = vertexSet ;    this . mask = mask ; }    @ Override public boolean contains  (  Object o )  {  V  v =  ( V ) o ;  return   vertexSet . contains  ( v ) &&  !  mask . isVertexMasked  ( v ) &&   this . vertexSet . contains  ( o ) ; }    @ Override public  Iterator  < V > iterator  ( )  {  return  new  PrefetchIterator  < V >  (  new MaskVertexSetNextElementFunctor  ( ) ) ; }    @ Override public  int size  ( )  { 
<<<<<<<
 if  (   this . size ==  - 1 )  {    this . size = 0 ;  for (   Iterator  < V >  iter =  iterator  ( ) ;  iter . hasNext  ( ) ;  iter . next  ( ) )  {    this . size ++ ; } }
=======
>>>>>>>
  return  (  int )    vertexSet . stream  ( ) . filter  (  v ->  contains  ( v ) ) . count  ( ) ; }   private class MaskVertexSetNextElementFunctor  implements   NextElementFunctor  < V >  {   private  Iterator  < V >  iter ;   public MaskVertexSetNextElementFunctor  ( )  {    this . iter =    MaskVertexSet . this . vertexSet . iterator  ( ) ; }    @ Override public V nextElement  ( )  throws NoSuchElementException  {  V  element =   this . iter . next  ( ) ;  while  (    MaskVertexSet . this . mask . isVertexMasked  ( element ) )  {   element =   this . iter . next  ( ) ; }  return element ; } } }