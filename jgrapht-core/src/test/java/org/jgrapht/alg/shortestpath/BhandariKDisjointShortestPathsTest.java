  package    org . jgrapht . alg . shortestpath ;   import static   org . junit . Assert .  * ;  import  java . util .  * ;  import  org . jgrapht .  * ;  import    org . jgrapht . alg . interfaces .  * ;  import   org . jgrapht . graph .  * ;  import  org . junit .  * ;   public class BhandariKDisjointShortestPathsTest  extends KDisjointShortestPathsTestCase  {    @ Test public void testTwoDisjointPathsNegative  ( )  {   DefaultDirectedWeightedGraph  < Integer , DefaultWeightedEdge >  graph =  new  DefaultDirectedWeightedGraph  < >  (  DefaultWeightedEdge . class ) ;   graph . addVertex  ( 1 ) ;   graph . addVertex  ( 2 ) ;   graph . addVertex  ( 3 ) ;   graph . addVertex  ( 4 ) ;   graph . addVertex  ( 5 ) ;   graph . addVertex  ( 6 ) ;  DefaultWeightedEdge  e12 =  graph . addEdge  ( 1 , 2 ) ;  DefaultWeightedEdge  e23 =  graph . addEdge  ( 2 , 3 ) ;  DefaultWeightedEdge  e34 =  graph . addEdge  ( 3 , 4 ) ;  DefaultWeightedEdge  e15 =  graph . addEdge  ( 1 , 5 ) ;  DefaultWeightedEdge  e53 =  graph . addEdge  ( 5 , 3 ) ;  DefaultWeightedEdge  e26 =  graph . addEdge  ( 2 , 6 ) ;  DefaultWeightedEdge  e64 =  graph . addEdge  ( 6 , 4 ) ;   graph . setEdgeWeight  ( e12 ,  - 20 ) ;   graph . setEdgeWeight  ( e23 ,  - 1 ) ;   graph . setEdgeWeight  ( e34 ,  - 10 ) ;   graph . setEdgeWeight  ( e15 ,  - 2 ) ;   graph . setEdgeWeight  ( e53 , 2 ) ;   graph . setEdgeWeight  ( e26 ,  - 3 ) ;   graph . setEdgeWeight  ( e64 , 3 ) ;   BhandariKDisjointShortestPaths  < Integer , DefaultWeightedEdge >  alg =  new  BhandariKDisjointShortestPaths  < >  ( graph ) ;   List  <  GraphPath  < Integer , DefaultWeightedEdge > >  pathList =  alg . getPaths  ( 1 , 4 , 5 ) ;   assertEquals  ( 2 ,  pathList . size  ( ) ) ;   GraphPath  < Integer , DefaultWeightedEdge >  expectedP1 =  new  GraphWalk  < >  ( graph ,  Arrays . asList  ( 1 , 2 , 6 , 4 ) ,  - 20 ) ;   assertEquals  ( expectedP1 ,  pathList . get  ( 0 ) ) ;   assertEquals  ( 3 ,   pathList . get  ( 0 ) . getLength  ( ) ) ;   assertEquals  (  - 20.0 ,   pathList . get  ( 0 ) . getWeight  ( ) , 0.0 ) ;   GraphPath  < Integer , DefaultWeightedEdge >  expectedP2 =  new  GraphWalk  < >  ( graph ,  Arrays . asList  ( 1 , 5 , 3 , 4 ) ,  - 10 ) ;   assertEquals  ( expectedP2 ,  pathList . get  ( 1 ) ) ;   assertEquals  ( 3 ,   pathList . get  ( 1 ) . getLength  ( ) ) ;   assertEquals  (  - 10.0 ,   pathList . get  ( 1 ) . getWeight  ( ) , 0.0 ) ; }    @ Override protected  <  V ,  E >  KShortestPathAlgorithm  < V , E > getKShortestPathAlgorithm  (   Graph  < V , E > graph )  {  return  new  BhandariKDisjointShortestPaths  < >  ( graph ) ; } }