  package     org . wicketopia . example . web . application ;   import    org . apache . wicket . RuntimeConfigurationType ;  import      org . apache . wicket . protocol . http . WebApplication ;  import     org . apache . wicket . spring . ISpringContextLocator ;  import       org . apache . wicket . spring . injection . annot . SpringComponentInjector ;  import    org . springframework . beans . BeansException ;  import      org . springframework . beans . factory . annotation . Autowired ;  import      org . springframework . beans . factory . annotation . Value ;  import    org . springframework . context . ApplicationContext ;  import    org . springframework . context . ApplicationContextAware ;  import     org . springframework . orm . hibernate3 . LocalSessionFactoryBean ;  import    org . springframework . stereotype . Component ;  import   org . wicketopia . Wicketopia ;  import      org . wicketopia . example . web . page . HomePage ;  import      org . wicketopia . persistence . hibernate . decorator . HibernatePropertyDecorator ;  import    org . apache . wicket . Page ;  import     org . apache . wicket . ajax . AjaxRequestTarget ;  import     org . apache . wicket . model . PropertyModel ;  import    org . hibernate . cfg . Configuration ;  import        org . wicketopia . example . web . page . custom . viewer . ImageBooleanViewer ;  import     org . wicketopia . listener . ajax . AutoFeedbackListener ;    @ Component  ( "wicketApplication" ) public class WicketApplication  extends WebApplication  implements  ISpringContextLocator , ApplicationContextAware  {   private static final  long  serialVersionUID =  - 6044515824643215562L ;   private String  configurationType =   RuntimeConfigurationType . DEVELOPMENT . name  ( ) ;   private ApplicationContext  applicationContext ;    @ Autowired private LocalSessionFactoryBean  sessionFactoryBean ;   public WicketApplication  ( )  { }   public void setApplicationContext  (  ApplicationContext applicationContext )  throws BeansException  {    this . applicationContext = applicationContext ; }   public ApplicationContext getSpringContext  ( )  {  return applicationContext ; }    @ Value  ( "${wicket.configuration}" ) public void setConfigurationType  (  String configurationType )  {    this . configurationType = configurationType ; }    @ Override public  Class  < HomePage > getHomePage  ( )  {  return  HomePage . class ; }   protected void init  ( )  {   super . init  ( ) ;  Wicketopia  plugin =  new Wicketopia  ( ) ;   plugin . addPropertyMetaDataDecorator  (  new HibernatePropertyDecorator  (  new  PropertyModel  < Configuration >  ( sessionFactoryBean , "configuration" ) ) ) ;   plugin . addPropertyViewerProvider  ( "image-boolean" ,  ImageBooleanViewer . getProvider  ( ) ) ;   plugin . install  ( this ) ;    getComponentInstantiationListeners  ( ) . add  (  new SpringComponentInjector  ( this ,  getSpringContext  ( ) , true ) ) ; }    @ Override public AjaxRequestTarget newAjaxRequestTarget  (  Page page )  {  AjaxRequestTarget  target =  super . newAjaxRequestTarget  ( page ) ;   target . addListener  (  new AutoFeedbackListener  ( ) ) ;  return target ; } }