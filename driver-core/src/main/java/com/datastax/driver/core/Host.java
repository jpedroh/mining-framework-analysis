  package    com . datastax . driver . core ;   import   java . net . InetAddress ;  import    java . util . concurrent . ScheduledFuture ;  import     java . util . concurrent . atomic . AtomicReference ;  import     com . google . common . collect . ImmutableList ;   public class Host  {   private final InetAddress  address ;   private volatile String  datacenter ;   private volatile String  rack ;   private volatile boolean  isUp ;   private final ConvictionPolicy  policy ;   final  AtomicReference  <  ScheduledFuture  <  ? > >  reconnectionAttempt =  new  AtomicReference  <  ScheduledFuture  <  ? > >  ( ) ;   final ExecutionInfo  defaultExecutionInfo ;  Host  (  InetAddress address ,   ConvictionPolicy . Factory policy )  {  if  (   address == null ||  policy == null )  throw  new NullPointerException  ( ) ;    this . address = address ;    this . policy =  policy . create  ( this ) ;    this . defaultExecutionInfo =  new ExecutionInfo  (  ImmutableList . of  ( this ) ) ; }  void setLocationInfo  (  String datacenter ,  String rack )  {    this . datacenter = datacenter ;    this . rack = rack ; }   public InetAddress getAddress  ( )  {  return address ; }   public String getDatacenter  ( )  {  return datacenter ; }   public String getRack  ( )  {  return rack ; }   public boolean isUp  ( )  {  return isUp ; }    @ Override public final  int hashCode  ( )  {  return  address . hashCode  ( ) ; }    @ Override public final boolean equals  (  Object o )  {  if  (  !  (  o instanceof Host ) )  return false ;  return  address . equals  (   (  ( Host ) o ) . address ) ; }    @ Override public String toString  ( )  {  return  address . toString  ( ) ; }  void setDown  ( )  {   isUp = false ; }  void setUp  ( )  {   policy . reset  ( ) ;   isUp = true ; }  boolean signalConnectionFailure  (  ConnectionException exception )  {  return  policy . addFailure  ( exception ) ; }   public interface StateListener  {   public void onAdd  (  Host host ) ;   public void onUp  (  Host host ) ;   public void onDown  (  Host host ) ;   public void onRemove  (  Host host ) ; } }