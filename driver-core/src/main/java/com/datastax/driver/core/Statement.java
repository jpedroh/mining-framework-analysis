  package    com . datastax . driver . core ;   import   java . nio . ByteBuffer ;  import      com . datastax . driver . core . policies . RetryPolicy ;   public abstract class Statement  {   static final Statement  DEFAULT =  new Statement  ( )  {    @ Override public ByteBuffer getRoutingKey  ( )  {  return null ; }    @ Override public String getKeyspace  ( )  {  return null ; } } ;   private volatile ConsistencyLevel  consistency ;   private volatile ConsistencyLevel  serialConsistency ;   private volatile boolean  traceQuery ;   private volatile  int  fetchSize ;   private volatile RetryPolicy  retryPolicy ;   protected Statement  ( )  { }   public Statement setConsistencyLevel  (  ConsistencyLevel consistency )  {    this . consistency = consistency ;  return this ; }   public ConsistencyLevel getConsistencyLevel  ( )  {  return consistency ; }   public Statement setSerialConsistencyLevel  (  ConsistencyLevel serialConsistency )  {  if  (   serialConsistency !=  ConsistencyLevel . SERIAL &&  serialConsistency !=  ConsistencyLevel . LOCAL_SERIAL )  throw  new IllegalArgumentException  ( ) ;    this . serialConsistency = serialConsistency ;  return this ; }   public ConsistencyLevel getSerialConsistencyLevel  ( )  {  return serialConsistency ; }   public Statement enableTracing  ( )  {    this . traceQuery = true ;  return this ; }   public Statement disableTracing  ( )  {    this . traceQuery = false ;  return this ; }   public boolean isTracing  ( )  {  return traceQuery ; }   public abstract ByteBuffer getRoutingKey  ( ) ;   public abstract String getKeyspace  ( ) ;   public Statement setRetryPolicy  (  RetryPolicy policy )  {    this . retryPolicy = policy ;  return this ; }   public RetryPolicy getRetryPolicy  ( )  {  return retryPolicy ; }   public Statement setFetchSize  (   int fetchSize )  {    this . fetchSize = fetchSize ;  return this ; }   public  int getFetchSize  ( )  {  return fetchSize ; } }