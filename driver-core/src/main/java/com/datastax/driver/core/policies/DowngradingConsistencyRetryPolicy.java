  package     com . datastax . driver . core . policies ;   import     com . datastax . driver . core . ConsistencyLevel ;  import     com . datastax . driver . core . Query ;  import     com . datastax . driver . core . WriteType ;   public class DowngradingConsistencyRetryPolicy  implements  RetryPolicy  {   public static final DowngradingConsistencyRetryPolicy  INSTANCE =  new DowngradingConsistencyRetryPolicy  ( ) ;   private DowngradingConsistencyRetryPolicy  ( )  { }   private RetryDecision maxLikelyToWorkCL  (   int knownOk )  {  if  (  knownOk >= 3 )  return  RetryDecision . retry  (  ConsistencyLevel . THREE ) ; else  if  (  knownOk >= 2 )  return  RetryDecision . retry  (  ConsistencyLevel . TWO ) ; else  if  (  knownOk >= 1 )  return  RetryDecision . retry  (  ConsistencyLevel . ONE ) ; else  return  RetryDecision . rethrow  ( ) ; }    @ Override public RetryDecision onReadTimeout  (  Statement statement ,  ConsistencyLevel cl ,   int requiredResponses ,   int receivedResponses ,  boolean dataRetrieved ,   int nbRetry )  {  if  (  nbRetry != 0 )  return  RetryDecision . rethrow  ( ) ;  if  (   cl ==  ConsistencyLevel . SERIAL ||  cl ==  ConsistencyLevel . LOCAL_SERIAL )  return  RetryDecision . rethrow  ( ) ;  if  (  receivedResponses < requiredResponses )  {  return  maxLikelyToWorkCL  ( receivedResponses ) ; }  return   ! dataRetrieved ?  RetryDecision . retry  ( cl ) :  RetryDecision . rethrow  ( ) ; }    @ Override public RetryDecision onWriteTimeout  (  Statement statement ,  ConsistencyLevel cl ,  WriteType writeType ,   int requiredAcks ,   int receivedAcks ,   int nbRetry )  {  if  (  nbRetry != 0 )  return  RetryDecision . rethrow  ( ) ;  switch  ( writeType )  {   case SIMPLE :   case BATCH :  return  RetryDecision . ignore  ( ) ;   case UNLOGGED_BATCH :  return  maxLikelyToWorkCL  ( receivedAcks ) ;   case BATCH_LOG :  return  RetryDecision . retry  ( cl ) ; }  return  RetryDecision . rethrow  ( ) ; }    @ Override public RetryDecision onUnavailable  (  Statement statement ,  ConsistencyLevel cl ,   int requiredReplica ,   int aliveReplica ,   int nbRetry )  {  if  (  nbRetry != 0 )  return  RetryDecision . rethrow  ( ) ;  return  maxLikelyToWorkCL  ( aliveReplica ) ; } }