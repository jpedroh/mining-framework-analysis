  package    com . datastax . driver . core ;   import    org . testng . annotations . Test ;  import static     com . datastax . driver . core . TestUtils .  * ;  import static    org . testng . Assert . assertEquals ;   public class StateListenerTest  {    @ Test  (  groups = "long" ) public void listenerTest  ( )  throws Throwable  {   CCMBridge . CCMCluster  c =  CCMBridge . buildCluster  ( 1 ,  Cluster . builder  ( ) ) ;  Cluster  cluster =  c . cluster ;  try  {  CountingListener  listener =  new CountingListener  ( ) ;   cluster . register  ( listener ) ;    c . cassandraCluster . bootstrapNode  ( 2 ) ;   waitFor  (   CCMBridge . IP_PREFIX + "2" , cluster ) ;   Thread . sleep  ( 500 ) ;   assertEquals  (  listener . adds , 1 ) ;    c . cassandraCluster . forceStop  ( 1 ) ;   waitForDown  (   CCMBridge . IP_PREFIX + "1" , cluster ) ;   Thread . sleep  ( 500 ) ;   assertEquals  (  listener . downs , 1 ) ;    c . cassandraCluster . start  ( 1 ) ;   waitFor  (   CCMBridge . IP_PREFIX + "1" , cluster ) ;   Thread . sleep  ( 500 ) ;   assertEquals  (  listener . ups , 1 ) ;    c . cassandraCluster . decommissionNode  ( 2 ) ;   waitForDecommission  (   CCMBridge . IP_PREFIX + "2" , cluster ) ;   Thread . sleep  ( 500 ) ;   assertEquals  (  listener . removes , 1 ) ; }  catch (   Throwable e )  {   c . errorOut  ( ) ;  throw e ; }  finally  {   c . discard  ( ) ; } }   private static class CountingListener  implements   Host . StateListener  {   public  int  adds ;   public  int  removes ;   public  int  ups ;   public  int  downs ;   public void onAdd  (  Host host )  {   adds ++ ; }   public void onUp  (  Host host )  {   ups ++ ; }   public void onDown  (  Host host )  {   downs ++ ; }   public void onRemove  (  Host host )  {   removes ++ ; } } }