  package    com . datastax . driver . core ;   import     com . datastax . driver . core . exceptions .  * ;  import    org . testng . annotations . Test ;  import static      com . datastax . driver . core . TestUtils . waitForDown ;  import static    org . testng . Assert . assertEquals ;  import static    org . testng . Assert . assertTrue ;   public class ExceptionsTest  {    @ Test  (  groups = "short" ) public void alreadyExistsException  ( )  throws Throwable  {   Cluster . Builder  builder =  Cluster . builder  ( ) ;   CCMBridge . CCMCluster  c =  CCMBridge . buildCluster  ( 1 , builder ) ;  try  {  String  keyspace = "TestKeyspace" ;  String  table = "TestTable" ;   String  [ ]  cqlCommands =  new String  [ ]  {  String . format  (  TestUtils . CREATE_KEYSPACE_SIMPLE_FORMAT , keyspace , 1 ) ,  "USE " + keyspace ,  String . format  (  TestUtils . CREATE_TABLE_SIMPLE_FORMAT , table ) } ;    c . session . execute  (  cqlCommands [ 0 ] ) ;    c . session . execute  (  cqlCommands [ 1 ] ) ;    c . session . execute  (  cqlCommands [ 2 ] ) ;  try  {    c . session . execute  (  cqlCommands [ 0 ] ) ; }  catch (   AlreadyExistsException e )  {  String  expected =  String . format  ( "Keyspace %s already exists" ,  keyspace . toLowerCase  ( ) ) ;   assertEquals  (  e . getMessage  ( ) , expected ) ;   assertEquals  (  e . getKeyspace  ( ) ,  keyspace . toLowerCase  ( ) ) ;   assertEquals  (  e . getTable  ( ) , null ) ;   assertEquals  (  e . wasTableCreation  ( ) , false ) ; }    c . session . execute  (  cqlCommands [ 1 ] ) ;  try  {    c . session . execute  (  cqlCommands [ 2 ] ) ; }  catch (   AlreadyExistsException e )  {   assertEquals  (  e . getKeyspace  ( ) ,  keyspace . toLowerCase  ( ) ) ;   assertEquals  (  e . getTable  ( ) ,  table . toLowerCase  ( ) ) ;   assertEquals  (  e . wasTableCreation  ( ) , true ) ; } }  catch (   Throwable e )  {  throw e ; }  finally  {   c . discard  ( ) ; } }    @ Test  (  groups = "unit" ) public void driverInternalError  ( )  throws Exception  {  String  errorMessage = "Test Message" ;  try  {  throw  new DriverInternalError  ( errorMessage ) ; }  catch (   DriverInternalError e1 )  {  try  {  throw  new DriverInternalError  ( e1 ) ; }  catch (   DriverInternalError e2 )  {   assertTrue  (   e2 . getMessage  ( ) . contains  ( errorMessage ) ) ;  DriverInternalError  copy =  ( DriverInternalError )  e2 . copy  ( ) ;   assertEquals  (  copy . getMessage  ( ) ,  e2 . getMessage  ( ) ) ; } } }    @ Test  (  groups = "unit" ) public void invalidConfigurationInQueryException  ( )  throws Exception  {  String  errorMessage = "Test Message" ;  try  {  throw  new InvalidConfigurationInQueryException  ( errorMessage ) ; }  catch (   InvalidConfigurationInQueryException e )  {   assertEquals  (  e . getMessage  ( ) , errorMessage ) ; } }    @ Test  (  groups = "unit" ) public void invalidQueryException  ( )  throws Exception  {  String  errorMessage = "Test Message" ;  try  {  throw  new InvalidQueryException  ( errorMessage ) ; }  catch (   InvalidQueryException e )  {   assertEquals  (  e . getMessage  ( ) , errorMessage ) ;  InvalidQueryException  copy =  ( InvalidQueryException )  e . copy  ( ) ;   assertEquals  (  copy . getMessage  ( ) ,  e . getMessage  ( ) ) ; } }    @ Test  (  groups = "unit" ) public void invalidTypeException  ( )  throws Exception  {  String  errorMessage = "Test Message" ;  try  {  throw  new InvalidTypeException  ( errorMessage ) ; }  catch (   InvalidTypeException e )  {   assertEquals  (  e . getMessage  ( ) , errorMessage ) ;  InvalidTypeException  copy =  ( InvalidTypeException )  e . copy  ( ) ;   assertEquals  (  copy . getMessage  ( ) ,  e . getMessage  ( ) ) ; } }    @ Test  (  groups = "short" ) public void noHostAvailableException  ( )  throws Exception  {  try  {     Cluster . builder  ( ) . addContactPoints  ( "255.255.255.255" ) . build  ( ) ; }  catch (   NoHostAvailableException e )  {   assertEquals  (   e . getErrors  ( ) . size  ( ) , 1 ) ;   assertTrue  (       e . getErrors  ( ) . values  ( ) . iterator  ( ) . next  ( ) . toString  ( ) . contains  ( "[/255.255.255.255] Cannot connect" ) ) ;  NoHostAvailableException  copy =  ( NoHostAvailableException )  e . copy  ( ) ;   assertEquals  (  copy . getMessage  ( ) ,  e . getMessage  ( ) ) ;   assertEquals  (  copy . getErrors  ( ) ,  e . getErrors  ( ) ) ; } }    @ Test  (  groups = "long" ) public void readTimeoutException  ( )  throws Throwable  {   Cluster . Builder  builder =  Cluster . builder  ( ) ;   CCMBridge . CCMCluster  c =  CCMBridge . buildCluster  ( 3 , builder ) ;  try  {  String  keyspace = "TestKeyspace" ;  String  table = "TestTable" ;   int  replicationFactor = 3 ;  String  key = "1" ;    c . session . execute  (  String . format  (  TestUtils . CREATE_KEYSPACE_SIMPLE_FORMAT , keyspace , replicationFactor ) ) ;    c . session . execute  (  "USE " + keyspace ) ;    c . session . execute  (  String . format  (  TestUtils . CREATE_TABLE_SIMPLE_FORMAT , table ) ) ;    c . session . execute  (   new SimpleStatement  (  String . format  (  TestUtils . INSERT_FORMAT , table , key , "foo" , 42 , 24.03f ) ) . setConsistencyLevel  (  ConsistencyLevel . ALL ) ) ;    c . session . execute  (   new SimpleStatement  (  String . format  (  TestUtils . SELECT_ALL_FORMAT , table ) ) . setConsistencyLevel  (  ConsistencyLevel . ALL ) ) ;    c . cassandraCluster . forceStop  ( 2 ) ;  try  {    c . session . execute  (   new SimpleStatement  (  String . format  (  TestUtils . SELECT_ALL_FORMAT , table ) ) . setConsistencyLevel  (  ConsistencyLevel . ALL ) ) ; }  catch (   ReadTimeoutException e )  {   assertEquals  (  e . getConsistencyLevel  ( ) ,  ConsistencyLevel . ALL ) ;   assertEquals  (  e . getReceivedAcknowledgements  ( ) , 2 ) ;   assertEquals  (  e . getRequiredAcknowledgements  ( ) , 3 ) ;   assertEquals  (  e . wasDataRetrieved  ( ) , true ) ;  ReadTimeoutException  copy =  ( ReadTimeoutException )  e . copy  ( ) ;   assertEquals  (  copy . getMessage  ( ) ,  e . getMessage  ( ) ) ;   assertEquals  (  copy . wasDataRetrieved  ( ) ,  e . wasDataRetrieved  ( ) ) ; } }  catch (   Throwable e )  {  throw e ; }  finally  {   c . discard  ( ) ; } }    @ Test  (  groups = "unit" ) public void syntaxError  ( )  throws Exception  {  String  errorMessage = "Test Message" ;  try  {  throw  new SyntaxError  ( errorMessage ) ; }  catch (   SyntaxError e )  {   assertEquals  (  e . getMessage  ( ) , errorMessage ) ;  SyntaxError  copy =  ( SyntaxError )  e . copy  ( ) ;   assertEquals  (  copy . getMessage  ( ) ,  e . getMessage  ( ) ) ; } }    @ Test  (  groups = "unit" ) public void traceRetrievalException  ( )  throws Exception  {  String  errorMessage = "Test Message" ;  try  {  throw  new TraceRetrievalException  ( errorMessage ) ; }  catch (   TraceRetrievalException e )  {   assertEquals  (  e . getMessage  ( ) , errorMessage ) ;  TraceRetrievalException  copy =  ( TraceRetrievalException )  e . copy  ( ) ;   assertEquals  (  copy . getMessage  ( ) ,  e . getMessage  ( ) ) ; } }    @ Test  (  groups = "unit" ) public void truncateException  ( )  throws Exception  {  String  errorMessage = "Test Message" ;  try  {  throw  new TruncateException  ( errorMessage ) ; }  catch (   TruncateException e )  {   assertEquals  (  e . getMessage  ( ) , errorMessage ) ;  TruncateException  copy =  ( TruncateException )  e . copy  ( ) ;   assertEquals  (  copy . getMessage  ( ) ,  e . getMessage  ( ) ) ; } }    @ Test  (  groups = "unit" ) public void unauthorizedException  ( )  throws Exception  {  String  errorMessage = "Test Message" ;  try  {  throw  new UnauthorizedException  ( errorMessage ) ; }  catch (   UnauthorizedException e )  {   assertEquals  (  e . getMessage  ( ) , errorMessage ) ;  UnauthorizedException  copy =  ( UnauthorizedException )  e . copy  ( ) ;   assertEquals  (  copy . getMessage  ( ) ,  e . getMessage  ( ) ) ; } }    @ Test  (  groups = "long" ) public void unavailableException  ( )  throws Throwable  {   Cluster . Builder  builder =  Cluster . builder  ( ) ;   CCMBridge . CCMCluster  c =  CCMBridge . buildCluster  ( 3 , builder ) ;  try  {  String  keyspace = "TestKeyspace" ;  String  table = "TestTable" ;   int  replicationFactor = 3 ;  String  key = "1" ;    c . session . execute  (  String . format  (  TestUtils . CREATE_KEYSPACE_SIMPLE_FORMAT , keyspace , replicationFactor ) ) ;    c . session . execute  (  "USE " + keyspace ) ;    c . session . execute  (  String . format  (  TestUtils . CREATE_TABLE_SIMPLE_FORMAT , table ) ) ;    c . session . execute  (   new SimpleStatement  (  String . format  (  TestUtils . INSERT_FORMAT , table , key , "foo" , 42 , 24.03f ) ) . setConsistencyLevel  (  ConsistencyLevel . ALL ) ) ;    c . session . execute  (   new SimpleStatement  (  String . format  (  TestUtils . SELECT_ALL_FORMAT , table ) ) . setConsistencyLevel  (  ConsistencyLevel . ALL ) ) ;    c . cassandraCluster . stop  ( 2 ) ;   waitForDown  (   CCMBridge . IP_PREFIX + "2" ,  c . cluster ) ;  try  {    c . session . execute  (   new SimpleStatement  (  String . format  (  TestUtils . SELECT_ALL_FORMAT , table ) ) . setConsistencyLevel  (  ConsistencyLevel . ALL ) ) ; }  catch (   UnavailableException e )  {  String  expectedError =  String . format  ( "Not enough replica available for query at consistency %s (%d required but only %d alive)" , "ALL" , 3 , 2 ) ;   assertEquals  (  e . getMessage  ( ) , expectedError ) ;   assertEquals  (  e . getConsistencyLevel  ( ) ,  ConsistencyLevel . ALL ) ;   assertEquals  (  e . getRequiredReplicas  ( ) , replicationFactor ) ;   assertEquals  (  e . getAliveReplicas  ( ) ,  replicationFactor - 1 ) ; }  try  {    c . session . execute  (   new SimpleStatement  (  String . format  (  TestUtils . INSERT_FORMAT , table , key , "foo" , 42 , 24.03f ) ) . setConsistencyLevel  (  ConsistencyLevel . ALL ) ) ; }  catch (   UnavailableException e )  {  String  expectedError =  String . format  ( "Not enough replica available for query at consistency %s (%d required but only %d alive)" , "ALL" , 3 , 2 ) ;   assertEquals  (  e . getMessage  ( ) , expectedError ) ;   assertEquals  (  e . getConsistencyLevel  ( ) ,  ConsistencyLevel . ALL ) ;   assertEquals  (  e . getRequiredReplicas  ( ) , replicationFactor ) ;   assertEquals  (  e . getAliveReplicas  ( ) ,  replicationFactor - 1 ) ; } }  catch (   Throwable e )  {  throw e ; }  finally  {   c . discard  ( ) ; } }    @ Test  (  groups = "long" ) public void writeTimeoutException  ( )  throws Throwable  {   Cluster . Builder  builder =  Cluster . builder  ( ) ;   CCMBridge . CCMCluster  c =  CCMBridge . buildCluster  ( 3 , builder ) ;  try  {  String  keyspace = "TestKeyspace" ;  String  table = "TestTable" ;   int  replicationFactor = 3 ;  String  key = "1" ;    c . session . execute  (  String . format  (  TestUtils . CREATE_KEYSPACE_SIMPLE_FORMAT , keyspace , replicationFactor ) ) ;    c . session . execute  (  "USE " + keyspace ) ;    c . session . execute  (  String . format  (  TestUtils . CREATE_TABLE_SIMPLE_FORMAT , table ) ) ;    c . session . execute  (   new SimpleStatement  (  String . format  (  TestUtils . INSERT_FORMAT , table , key , "foo" , 42 , 24.03f ) ) . setConsistencyLevel  (  ConsistencyLevel . ALL ) ) ;    c . session . execute  (   new SimpleStatement  (  String . format  (  TestUtils . SELECT_ALL_FORMAT , table ) ) . setConsistencyLevel  (  ConsistencyLevel . ALL ) ) ;    c . cassandraCluster . forceStop  ( 2 ) ;  try  {    c . session . execute  (   new SimpleStatement  (  String . format  (  TestUtils . INSERT_FORMAT , table , key , "foo" , 42 , 24.03f ) ) . setConsistencyLevel  (  ConsistencyLevel . ALL ) ) ; }  catch (   WriteTimeoutException e )  {   assertEquals  (  e . getConsistencyLevel  ( ) ,  ConsistencyLevel . ALL ) ;   assertEquals  (  e . getReceivedAcknowledgements  ( ) , 2 ) ;   assertEquals  (  e . getRequiredAcknowledgements  ( ) , 3 ) ;   assertEquals  (  e . getWriteType  ( ) ,  WriteType . SIMPLE ) ; } }  catch (   Throwable e )  {  throw e ; }  finally  {   c . discard  ( ) ; } } }