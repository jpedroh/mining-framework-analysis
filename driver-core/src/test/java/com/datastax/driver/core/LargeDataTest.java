  package    com . datastax . driver . core ;   import   java . nio . ByteBuffer ;  import      com . datastax . driver . core . querybuilder . Batch ;  import      com . datastax . driver . core . querybuilder . Insert ;  import static      com . datastax . driver . core . TestUtils . CREATE_KEYSPACE_SIMPLE_FORMAT ;  import static      com . datastax . driver . core . querybuilder . QueryBuilder .  * ;  import    org . testng . annotations . Test ;  import static    org . testng . Assert . assertEquals ;  import static    org . testng . Assert . assertTrue ;   public class LargeDataTest  {   private void testWideRows  (   CCMBridge . CCMCluster c ,   int key )  throws Throwable  {  for (   int  i = 0 ;  i < 1000000 ;  ++ i )  {    c . session . execute  (     insertInto  ( "wide_rows" ) . value  ( "k" , key ) . value  ( "i" , i ) . setConsistencyLevel  (  ConsistencyLevel . QUORUM ) ) ; }  ResultSet  rs =   c . session . execute  (    select  ( "i" ) . from  ( "wide_rows" ) . where  (  eq  ( "k" , key ) ) ) ;   int  i = 0 ;  for ( Row row : rs )  {   assertTrue  (   row . getInt  ( "i" ) ==  i ++ ) ; } }   private void testWideBatchRows  (   CCMBridge . CCMCluster c ,   int key )  throws Throwable  {  Batch  q =  batch  ( ) ;  for (   int  i = 0 ;  i < 10000 ;  ++ i )  {   q =  q . add  (    insertInto  ( "wide_batch_rows" ) . value  ( "k" , key ) . value  ( "i" , i ) ) ; }    c . session . execute  (  q . setConsistencyLevel  (  ConsistencyLevel . QUORUM ) ) ;  ResultSet  rs =   c . session . execute  (    select  ( "i" ) . from  ( "wide_batch_rows" ) . where  (  eq  ( "k" , key ) ) ) ;   int  i = 0 ;  for ( Row row : rs )  {   assertTrue  (   row . getInt  ( "i" ) ==  i ++ ) ; } }   private void testByteRows  (   CCMBridge . CCMCluster c ,   int key )  throws Throwable  {  ByteBuffer  bb =  ByteBuffer . allocate  ( 58 ) ;   bb . putShort  (  (  short ) 0xCAFE ) ;   bb . flip  ( ) ;  for (   int  i = 0 ;  i < 1000000 ;  ++ i )  {    c . session . execute  (     insertInto  ( "wide_byte_rows" ) . value  ( "k" , key ) . value  ( "i" , bb ) . setConsistencyLevel  (  ConsistencyLevel . QUORUM ) ) ; }  ResultSet  rs =   c . session . execute  (    select  ( "i" ) . from  ( "wide_byte_rows" ) . where  (  eq  ( "k" , key ) ) ) ;  for ( Row row : rs )  {   assertEquals  (  row . getBytes  ( "i" ) , bb ) ; } }   private void testLargeText  (   CCMBridge . CCMCluster c ,   int key )  throws Throwable  {  StringBuilder  b =  new StringBuilder  ( ) ;  for (   int  i = 0 ;  i < 1000000 ;  ++ i )  {   b . append  ( i ) ; }    c . session . execute  (     insertInto  ( "large_text" ) . value  ( "k" , key ) . value  ( "txt" ,  b . toString  ( ) ) . setConsistencyLevel  (  ConsistencyLevel . QUORUM ) ) ;  Row  row =    c . session . execute  (     select  ( ) . all  ( ) . from  ( "large_text" ) . where  (  eq  ( "k" , key ) ) ) . one  ( ) ;   assertTrue  (   b . toString  ( ) . equals  (  row . getString  ( "txt" ) ) ) ; }   private static String createColumnName  (   int i )  {   String  [ ]  letters =  { "a" , "b" , "c" , "d" , "e" , "f" , "g" , "h" , "i" , "j" } ;  StringBuilder  columnName ;   int  currentI ;   currentI = i ;   columnName =  new StringBuilder  ( ) ;  while  ( true )  {   columnName . append  (  letters [  currentI % 10 ] ) ;   currentI /= 10 ;  if  (  currentI == 0 )  break ; }  return  columnName . toString  ( ) ; }   private void testWideTable  (   CCMBridge . CCMCluster c ,   int key )  throws Throwable  {  Insert  insertStatement =   insertInto  ( "wide_table" ) . value  ( "k" , key ) ;  for (   int  i = 0 ;  i < 330 ;  ++ i )  {   insertStatement =  insertStatement . value  (  createColumnName  ( i ) , i ) ; }    c . session . execute  (  insertStatement . setConsistencyLevel  (  ConsistencyLevel . QUORUM ) ) ;  Row  row =    c . session . execute  (     select  ( ) . all  ( ) . from  ( "wide_table" ) . where  (  eq  ( "k" , key ) ) ) . one  ( ) ;  for (   int  i = 0 ;  i < 330 ;  ++ i )  {   assertTrue  (   row . getInt  (  createColumnName  ( i ) ) == i ) ; } }    @ Test  (  groups = "integration" ) public void wideRows  ( )  throws Throwable  {   Cluster . Builder  builder =  Cluster . builder  ( ) ;   CCMBridge . CCMCluster  c =  CCMBridge . buildCluster  ( 1 , builder ) ;    c . session . execute  (  String . format  ( CREATE_KEYSPACE_SIMPLE_FORMAT , "large_data" , 1 ) ) ;    c . session . execute  ( "USE large_data" ) ;    c . session . execute  (  String . format  ( "CREATE TABLE %s (k INT, i INT, PRIMARY KEY(k, i))" , "wide_rows" ) ) ;  try  {   testWideRows  ( c , 0 ) ; }  catch (   Throwable e )  {   c . errorOut  ( ) ;  throw e ; }  finally  {   c . discard  ( ) ; } }    @ Test  (  groups = "integration" ) public void wideBatchRows  ( )  throws Throwable  {   Cluster . Builder  builder =  Cluster . builder  ( ) ;   CCMBridge . CCMCluster  c =  CCMBridge . buildCluster  ( 1 , builder ) ;    c . session . execute  (  String . format  ( CREATE_KEYSPACE_SIMPLE_FORMAT , "large_data" , 1 ) ) ;    c . session . execute  ( "USE large_data" ) ;    c . session . execute  (  String . format  ( "CREATE TABLE %s (k INT, i INT, PRIMARY KEY(k, i))" , "wide_batch_rows" ) ) ;  try  {   testWideBatchRows  ( c , 0 ) ; }  catch (   Throwable e )  {   c . errorOut  ( ) ;  throw e ; }  finally  {   c . discard  ( ) ; } }    @ Test  (  groups = "integration" ) public void wideByteRows  ( )  throws Throwable  {   Cluster . Builder  builder =  Cluster . builder  ( ) ;   CCMBridge . CCMCluster  c =  CCMBridge . buildCluster  ( 1 , builder ) ;    c . session . execute  (  String . format  ( CREATE_KEYSPACE_SIMPLE_FORMAT , "large_data" , 1 ) ) ;    c . session . execute  ( "USE large_data" ) ;    c . session . execute  (  String . format  ( "CREATE TABLE %s (k INT, i BLOB, PRIMARY KEY(k, i))" , "wide_byte_rows" ) ) ;  try  {   testByteRows  ( c , 0 ) ; }  catch (   Throwable e )  {   c . errorOut  ( ) ;  throw e ; }  finally  {   c . discard  ( ) ; } }    @ Test  (  groups = "integration" ) public void largeText  ( )  throws Throwable  {   Cluster . Builder  builder =  Cluster . builder  ( ) ;   CCMBridge . CCMCluster  c =  CCMBridge . buildCluster  ( 1 , builder ) ;    c . session . execute  (  String . format  ( CREATE_KEYSPACE_SIMPLE_FORMAT , "large_data" , 1 ) ) ;    c . session . execute  ( "USE large_data" ) ;    c . session . execute  (  String . format  ( "CREATE TABLE %s (k int PRIMARY KEY, txt text)" , "large_text" ) ) ;  try  {   testLargeText  ( c , 0 ) ; }  catch (   Throwable e )  {   c . errorOut  ( ) ;  throw e ; }  finally  {   c . discard  ( ) ; } }    @ Test  (  groups = "integration" ) public void wideTable  ( )  throws Throwable  {   Cluster . Builder  builder =  Cluster . builder  ( ) ;   CCMBridge . CCMCluster  c =  CCMBridge . buildCluster  ( 1 , builder ) ;    c . session . execute  (  String . format  ( CREATE_KEYSPACE_SIMPLE_FORMAT , "large_data" , 1 ) ) ;    c . session . execute  ( "USE large_data" ) ;  StringBuilder  tableDeclaration =  new StringBuilder  ( ) ;   tableDeclaration . append  ( "CREATE TABLE wide_table (" ) ;   tableDeclaration . append  ( "k INT PRIMARY KEY" ) ;  for (   int  i = 0 ;  i < 330 ;  ++ i )  {   tableDeclaration . append  (  String . format  ( ", %s INT" ,  createColumnName  ( i ) ) ) ; }   tableDeclaration . append  ( ")" ) ;    c . session . execute  (  tableDeclaration . toString  ( ) ) ;  try  {   testWideTable  ( c , 0 ) ; }  catch (   Throwable e )  {   c . errorOut  ( ) ;  throw e ; }  finally  {   c . discard  ( ) ; } }    @ Test  (  groups = "duration" ) public void mixedDurationTest  ( )  throws Throwable  {   Cluster . Builder  builder =  Cluster . builder  ( ) ;   CCMBridge . CCMCluster  c =  CCMBridge . buildCluster  ( 3 , builder ) ;    c . session . execute  (  String . format  ( CREATE_KEYSPACE_SIMPLE_FORMAT , "large_data" , 3 ) ) ;    c . session . execute  ( "USE large_data" ) ;    c . session . execute  (  String . format  ( "CREATE TABLE %s (k INT, i INT, PRIMARY KEY(k, i))" , "wide_rows" ) ) ;    c . session . execute  (  String . format  ( "CREATE TABLE %s (k INT, i INT, PRIMARY KEY(k, i))" , "wide_batch_rows" ) ) ;    c . session . execute  (  String . format  ( "CREATE TABLE %s (k INT, i BLOB, PRIMARY KEY(k, i))" , "wide_byte_rows" ) ) ;    c . session . execute  (  String . format  ( "CREATE TABLE %s (k int PRIMARY KEY, txt text)" , "large_text" ) ) ;  StringBuilder  tableDeclaration =  new StringBuilder  ( ) ;   tableDeclaration . append  ( "CREATE TABLE wide_table (" ) ;   tableDeclaration . append  ( "k INT PRIMARY KEY" ) ;  for (   int  i = 0 ;  i < 330 ;  ++ i )  {   tableDeclaration . append  (  String . format  ( ", %s INT" ,  createColumnName  ( i ) ) ) ; }   tableDeclaration . append  ( ")" ) ;    c . session . execute  (  tableDeclaration . toString  ( ) ) ;  try  {  for (   int  i = 0 ;  i < 10 ;  ++ i )  {  switch  (  (  int )  (   Math . random  ( ) * 5 ) )  {   case 0 :   testWideRows  ( c , 0 ) ;  break ;   case 1 :   testWideBatchRows  ( c , 0 ) ;  break ;   case 2 :   testByteRows  ( c , 0 ) ;  break ;   case 3 :   testLargeText  ( c , 0 ) ;  break ;   case 4 :   testWideTable  ( c , 0 ) ;  break ;   default :  break ; } } }  catch (   Throwable e )  {   c . errorOut  ( ) ;  throw e ; }  finally  {   c . discard  ( ) ; } } }