  package    com . datastax . driver . core ;   import    org . testng . annotations . Test ;  import static    org . testng . Assert . assertEquals ;  import static    org . testng . Assert . assertTrue ;  import static    org . testng . Assert . fail ;  import  java . util .  * ;  import    java . util . concurrent . CountDownLatch ;  import    java . util . concurrent . ExecutorService ;  import    java . util . concurrent . Executors ;  import    java . util . concurrent . TimeUnit ;   public class SessionTest  extends  CCMBridge . PerClassSingleNodeCluster  {   private static final String  TABLE1 = "test1" ;   private static final String  TABLE2 = "test2" ;   private static final String  TABLE3 = "test3" ;   private static final String  COUNTER_TABLE = "counters" ;    @ Override protected  Collection  < String > getTableDefinitions  ( )  {  return  Arrays . asList  (  String . format  (  TestUtils . CREATE_TABLE_SIMPLE_FORMAT , TABLE1 ) ,  String . format  (  TestUtils . CREATE_TABLE_SIMPLE_FORMAT , TABLE2 ) ,  String . format  (  TestUtils . CREATE_TABLE_SIMPLE_FORMAT , TABLE3 ) ,  String . format  ( "CREATE TABLE %s (k text PRIMARY KEY, c counter)" , COUNTER_TABLE ) ) ; }    @ Test  (  groups = "short" ) public void executeTest  ( )  throws Exception  {  String  key = "execute_test" ;  ResultSet  rs =  session . execute  (  String . format  (  Locale . US ,  TestUtils . INSERT_FORMAT , TABLE1 , key , "foo" , 42 , 24.03f ) ) ;   assertTrue  (  rs . isExhausted  ( ) ) ;   checkExecuteResultSet  (  session . execute  (  String . format  (  TestUtils . SELECT_ALL_FORMAT , TABLE1 ) ) , key ) ;   checkExecuteResultSet  (  session . execute  (   new SimpleStatement  (  String . format  (  TestUtils . SELECT_ALL_FORMAT , TABLE1 ) ) . setConsistencyLevel  (  ConsistencyLevel . ONE ) ) , key ) ;   checkExecuteResultSet  (   session . executeAsync  (  String . format  (  TestUtils . SELECT_ALL_FORMAT , TABLE1 ) ) . getUninterruptibly  ( ) , key ) ;   checkExecuteResultSet  (   session . executeAsync  (   new SimpleStatement  (  String . format  (  TestUtils . SELECT_ALL_FORMAT , TABLE1 ) ) . setConsistencyLevel  (  ConsistencyLevel . ONE ) ) . getUninterruptibly  ( ) , key ) ; }    @ Test  (  groups = "short" ) public void executePreparedTest  ( )  throws Exception  {  String  key = "execute_prepared_test" ;  ResultSet  rs =  session . execute  (  String . format  (  Locale . US ,  TestUtils . INSERT_FORMAT , TABLE2 , key , "foo" , 42 , 24.03f ) ) ;   assertTrue  (  rs . isExhausted  ( ) ) ;  PreparedStatement  p =  session . prepare  (  String . format  (   TestUtils . SELECT_ALL_FORMAT + " WHERE k = ?" , TABLE2 ) ) ;  BoundStatement  bs =  p . bind  ( key ) ;   checkExecuteResultSet  (  session . execute  ( bs ) , key ) ;   checkExecuteResultSet  (  session . execute  (  bs . setConsistencyLevel  (  ConsistencyLevel . ONE ) ) , key ) ;   checkExecuteResultSet  (   session . executeAsync  ( bs ) . getUninterruptibly  ( ) , key ) ;   checkExecuteResultSet  (   session . executeAsync  (  bs . setConsistencyLevel  (  ConsistencyLevel . ONE ) ) . getUninterruptibly  ( ) , key ) ; }   private static void checkExecuteResultSet  (  ResultSet rs ,  String key )  {   assertTrue  (  !  rs . isExhausted  ( ) ) ;  Row  row =  rs . one  ( ) ;   assertTrue  (  rs . isExhausted  ( ) ) ;   assertEquals  (  row . getString  ( "k" ) , key ) ;   assertEquals  (  row . getString  ( "t" ) , "foo" ) ;   assertEquals  (  row . getInt  ( "i" ) , 42 ) ;   assertEquals  (  row . getFloat  ( "f" ) , 24.03f , 0.1f ) ; }    @ Test  (  groups = "short" ) public void executePreparedCounterTest  ( )  throws Exception  {  PreparedStatement  p =  session . prepare  (   "UPDATE " + COUNTER_TABLE + " SET c = c + ? WHERE k = ?" ) ;   session . execute  (  p . bind  ( 1L , "row" ) ) ;   session . execute  (  p . bind  ( 1L , "row" ) ) ;  ResultSet  rs =  session . execute  (  "SELECT * FROM " + COUNTER_TABLE ) ;   List  < Row >  rows =  rs . all  ( ) ;   assertEquals  (  rows . size  ( ) , 1 ) ;   assertEquals  (   rows . get  ( 0 ) . getLong  ( "c" ) , 2L ) ; }    @ Test  (  groups = "short" ) public void compressionTest  ( )  throws Exception  {     cluster . getConfiguration  ( ) . getProtocolOptions  ( ) . setCompression  (   ProtocolOptions . Compression . SNAPPY ) ;  try  {  Session  compressedSession =  cluster . connect  ( keyspace ) ;  String  key = "execute_compressed_test" ;  ResultSet  rs =  compressedSession . execute  (  String . format  (  Locale . US ,  TestUtils . INSERT_FORMAT , TABLE3 , key , "foo" , 42 , 24.03f ) ) ;   assertTrue  (  rs . isExhausted  ( ) ) ;  String  SELECT_ALL =  String . format  (   TestUtils . SELECT_ALL_FORMAT + " WHERE k = '%s'" , TABLE3 , key ) ;   checkExecuteResultSet  (  compressedSession . execute  ( SELECT_ALL ) , key ) ;   checkExecuteResultSet  (  compressedSession . execute  (   new SimpleStatement  ( SELECT_ALL ) . setConsistencyLevel  (  ConsistencyLevel . ONE ) ) , key ) ;   checkExecuteResultSet  (   compressedSession . executeAsync  ( SELECT_ALL ) . getUninterruptibly  ( ) , key ) ;   checkExecuteResultSet  (   compressedSession . executeAsync  (   new SimpleStatement  ( SELECT_ALL ) . setConsistencyLevel  (  ConsistencyLevel . ONE ) ) . getUninterruptibly  ( ) , key ) ; }  finally  {     cluster . getConfiguration  ( ) . getProtocolOptions  ( ) . setCompression  (   ProtocolOptions . Compression . NONE ) ; } }    @ Test  (  groups = "short" ) public void getStateTest  ( )  throws Exception  {   Session . State  state =  session . getState  ( ) ;  Host  host =    state . getConnectedHosts  ( ) . iterator  ( ) . next  ( ) ;  String  hostAddress =  String . format  ( "/%s1" ,  CCMBridge . IP_PREFIX ) ;   assertEquals  (   state . getConnectedHosts  ( ) . size  ( ) , 1 ) ;   assertEquals  (   host . getAddress  ( ) . toString  ( ) , hostAddress ) ;   assertEquals  (  host . getDatacenter  ( ) , "datacenter1" ) ;   assertEquals  (  host . getRack  ( ) , "rack1" ) ;   assertEquals  (   host . getSocketAddress  ( ) . toString  ( ) ,  hostAddress + ":9042" ) ;   assertEquals  (  state . getOpenConnections  ( host ) ,  TestUtils . numberOfLocalCoreConnections  ( cluster ) ) ;   assertEquals  (  state . getInFlightQueries  ( host ) , 0 ) ;   assertEquals  (  state . getSession  ( ) , session ) ; } 
<<<<<<<
   @ Test  (  groups = "short" ) public void connectionLeakTest  ( )  throws Exception  {   Thread . sleep  ( 10 ) ;  Cluster  cluster =    Cluster . builder  ( ) . addContactPoints  (   CCMBridge . IP_PREFIX + '1' ) . build  ( ) ;   assertEquals  (    cluster . manager . sessions . size  ( ) , 0 ) ;   assertEquals  (  (  int )    cluster . getMetrics  ( ) . getOpenConnections  ( ) . getValue  ( ) , 0 ) ;  Session  session =  cluster . connect  ( ) ;   assertEquals  (    cluster . manager . sessions . size  ( ) , 1 ) ;   int  coreConnections =  TestUtils . numberOfLocalCoreConnections  ( cluster ) ;   assertEquals  (  (  int )    cluster . getMetrics  ( ) . getOpenConnections  ( ) . getValue  ( ) ,  1 + coreConnections ) ;   session . close  ( ) ;   assertEquals  (    cluster . manager . sessions . size  ( ) , 0 ) ;   assertEquals  (  (  int )    cluster . getMetrics  ( ) . getOpenConnections  ( ) . getValue  ( ) , 1 ) ;  try  {  Session  thisSession ;   cassandraCluster . bootstrapNode  ( 2 ) ;   assertEquals  (    cluster . manager . sessions . size  ( ) , 0 ) ;   assertEquals  (  (  int )    cluster . getMetrics  ( ) . getOpenConnections  ( ) . getValue  ( ) , 1 ) ;   thisSession =  cluster . connect  ( ) ;   assertEquals  (    cluster . manager . sessions . size  ( ) , 1 ) ;   assertEquals  (  (  int )    cluster . getMetrics  ( ) . getOpenConnections  ( ) . getValue  ( ) ,  1 +  coreConnections * 2 ) ;   thisSession . close  ( ) ;   assertEquals  (    cluster . manager . sessions . size  ( ) , 0 ) ;   assertEquals  (  (  int )    cluster . getMetrics  ( ) . getOpenConnections  ( ) . getValue  ( ) , 1 ) ; }  finally  {   cassandraCluster . decommissionNode  ( 2 ) ;   assertEquals  (    cluster . manager . sessions . size  ( ) , 0 ) ;   assertEquals  (  (  int )    cluster . getMetrics  ( ) . getOpenConnections  ( ) . getValue  ( ) , 1 ) ;   cluster . close  ( ) ; } }
=======
>>>>>>>
    @ Test  (  groups = "short" ) public void closeDuringClusterInitTest  ( )  throws InterruptedException  {  for (   int  i = 0 ;  i < 500 ;  i ++ )  {   final Cluster  cluster =    Cluster . builder  ( ) . addContactPointsWithPorts  (  Collections . singletonList  ( hostAddress ) ) . build  ( ) ;   final Session  session =  cluster . newSession  ( ) ;  ExecutorService  executor =  Executors . newFixedThreadPool  ( 2 ) ;   final CountDownLatch  startLatch =  new CountDownLatch  ( 1 ) ;   executor . execute  (  new Runnable  ( )  {    @ Override public void run  ( )  {  try  {   startLatch . await  ( ) ;   cluster . init  ( ) ; }  catch (   InterruptedException e )  {   fail  ( "unexpected interruption" , e ) ; } } } ) ;   executor . execute  (  new Runnable  ( )  {    @ Override public void run  ( )  {  try  {   startLatch . await  ( ) ;    TimeUnit . MILLISECONDS . sleep  ( 10 ) ;   session . close  ( ) ; }  catch (   InterruptedException e )  {   fail  ( "unexpected interruption" , e ) ; } } } ) ;   startLatch . countDown  ( ) ;   executor . shutdown  ( ) ;  boolean  normalShutdown =  executor . awaitTermination  ( 1 ,  TimeUnit . SECONDS ) ;   assertTrue  ( normalShutdown ) ;   cluster . close  ( ) ; } } 
<<<<<<<
=======
   @ Test  (  groups = "long" ) public void sessionMemoryLeakTest  ( )  throws Exception  {   Thread . sleep  ( 10 ) ;   int  corePoolSize = 2 ;  PoolingOptions  poolingOptions =   new PoolingOptions  ( ) . setCoreConnectionsPerHost  (  HostDistance . LOCAL , corePoolSize ) ;  Cluster  cluster =     Cluster . builder  ( ) . addContactPointsWithPorts  (  Collections . singletonList  ( hostAddress ) ) . withPoolingOptions  ( poolingOptions ) . build  ( ) ;   assertEquals  (    cluster . manager . sessions . size  ( ) , 0 ) ;   assertEquals  (  (  int )    cluster . getMetrics  ( ) . getOpenConnections  ( ) . getValue  ( ) , 0 ) ;  Session  session =  cluster . connect  ( ) ;   assertEquals  (    cluster . manager . sessions . size  ( ) , 1 ) ;   assertEquals  (  (  int )    cluster . getMetrics  ( ) . getOpenConnections  ( ) . getValue  ( ) ,  1 + corePoolSize ) ;   session . close  ( ) ;   assertEquals  (    cluster . manager . sessions . size  ( ) , 0 ) ;   assertEquals  (  (  int )    cluster . getMetrics  ( ) . getOpenConnections  ( ) . getValue  ( ) , 1 ) ;   Thread . sleep  ( 10 ) ;  try  {  for (   int  i = 0 ;  i < 10000 ;  ++ i )  {   assertEquals  (    cluster . manager . sessions . size  ( ) , 0 ) ;   assertEquals  (  (  int )    cluster . getMetrics  ( ) . getOpenConnections  ( ) . getValue  ( ) , 1 ) ;   session =  cluster . connect  ( ) ;   assertEquals  (    cluster . manager . sessions . size  ( ) , 1 ) ;   assertEquals  (  (  int )    cluster . getMetrics  ( ) . getOpenConnections  ( ) . getValue  ( ) ,  1 + corePoolSize ) ;   session . close  ( ) ;   Thread . sleep  ( 10 ) ;   assertEquals  (    cluster . manager . sessions . size  ( ) , 0 ) ;   assertEquals  (  (  int )    cluster . getMetrics  ( ) . getOpenConnections  ( ) . getValue  ( ) , 1 ) ; } }  finally  {   cluster . close  ( ) ; } }
>>>>>>>
 }