  package     com . watopi . chosen . client . gwt ;   import      com . google . gwt . core . client . GWT ;  import      com . google . gwt . core . client . JsArrayString ;  import      com . google . gwt . dom . client . Document ;  import      com . google . gwt . dom . client . Element ;  import      com . google . gwt . dom . client . NodeList ;  import      com . google . gwt . dom . client . OptionElement ;  import      com . google . gwt . dom . client . SelectElement ;  import        com . google . gwt . event . dom . client . DomEvent . Type ;  import      com . google . gwt . event . shared . EventHandler ;  import      com . google . gwt . event . shared . LegacyHandlerWrapper ;  import       com . google . gwt . i18n . client . HasDirection . Direction ;  import      com . google . gwt . query . client . GQuery ;  import       com . google . gwt . user . client . ui . ListBox ;  import       com . google . gwt . user . client . ui . RootPanel ;  import       com . google . gwt . user . client . ui . Widget ;  import       com . google . web . bindery . event . shared . EventBus ;  import       com . google . web . bindery . event . shared . HandlerRegistration ;  import       com . google . web . bindery . event . shared . SimpleEventBus ;  import     com . watopi . chosen . client . ChosenImpl ;  import     com . watopi . chosen . client . ChosenOptions ;  import      com . watopi . chosen . client . event . ChosenChangeEvent ;  import       com . watopi . chosen . client . event . ChosenChangeEvent . ChosenChangeHandler ;  import      com . watopi . chosen . client . event . HasAllChosenHandlers ;  import      com . watopi . chosen . client . event . HidingDropDownEvent ;  import       com . watopi . chosen . client . event . HidingDropDownEvent . HidingDropDownHandler ;  import      com . watopi . chosen . client . event . MaxSelectedEvent ;  import       com . watopi . chosen . client . event . MaxSelectedEvent . MaxSelectedHandler ;  import      com . watopi . chosen . client . event . ReadyEvent ;  import       com . watopi . chosen . client . event . ReadyEvent . ReadyHandler ;  import      com . watopi . chosen . client . event . ShowingDropDownEvent ;  import       com . watopi . chosen . client . event . ShowingDropDownEvent . ShowingDropDownHandler ;  import      com . watopi . chosen . client . event . UpdatedEvent ;  import       com . watopi . chosen . client . event . UpdatedEvent . UpdatedHandler ;  import      com . watopi . chosen . client . resources . Resources ;  import static       com . google . gwt . query . client . GQuery . $ ;  import static      com . watopi . chosen . client . Chosen . CHOSEN_DATA_KEY ;  import static      com . watopi . chosen . client . Chosen . Chosen ;   public class ChosenListBox  extends ListBox  implements  HasAllChosenHandlers  {   public static boolean isSupported  ( )  {  return      com . watopi . chosen . client . Chosen . isSupported  ( ) ; }   public static ChosenListBox wrap  (  Element element )  {  assert    Document . get  ( ) . getBody  ( ) . isOrHasChild  ( element ) ;  ChosenListBox  listBox =  new ChosenListBox  ( element ) ;   listBox . onAttach  ( ) ;   RootPanel . detachOnWindowClose  ( listBox ) ;  return listBox ; }   private static String  OPTGROUP_TAG = "optgroup" ;   private EventBus  chznHandlerManager ;   private ChosenOptions  options ;   private boolean  visible = true ;   public ChosenListBox  ( )  {  this  ( false ) ; }   public ChosenListBox  (  ChosenOptions options )  {  this  ( false , options ) ; }   public ChosenListBox  (  boolean isMultipleSelect )  {  this  ( isMultipleSelect ,  new ChosenOptions  ( ) ) ; }   public ChosenListBox  (  boolean isMultipleSelect ,  ChosenOptions options )  {  super  (   Document . get  ( ) . createSelectElement  ( isMultipleSelect ) ) ;    this . options = options ;  if  (   options . getResources  ( ) == null )  {   options . setResources  (  GWT .  < Resources > create  (  Resources . class ) ) ; } }   protected ChosenListBox  (  Element element )  {  super  ( element ) ; }    @ Override  @ Deprecated public      com . google . gwt . event . shared . HandlerRegistration addChangeHandler  (   final       com . google . gwt . event . dom . client . ChangeHandler handler )  {   final HandlerRegistration  registration =  addChosenChangeHandler  (  new ChosenChangeHandler  ( )  {   public void onChange  (  ChosenChangeEvent event )  {   handler . onChange  ( null ) ; } } ) ;  return  new LegacyHandlerWrapper  ( registration ) ; }   public HandlerRegistration addChosenChangeHandler  (  ChosenChangeHandler handler )  {  return   ensureChosenHandlers  ( ) . addHandler  (  ChosenChangeEvent . getType  ( ) , handler ) ; }   public void addGroup  (  String label )  {   insertGroup  ( label ,  - 1 ) ; }   public void addGroup  (  String label ,  String groupId )  {   insertGroup  ( label , groupId ,  - 1 ) ; }   public HandlerRegistration addHidingDropDownHandler  (  HidingDropDownHandler handler )  {  return   ensureChosenHandlers  ( ) . addHandler  (  HidingDropDownEvent . getType  ( ) , handler ) ; }   public void addStyledItem  (  String label ,  String value ,  String className )  {   addStyledItem  ( label , value , className , 0 ) ; }   public void addStyledItem  (  String label ,  String value ,  String className ,   int indentLevel )  {  if  (  indentLevel < 0 )  {  throw  new IllegalArgumentException  ( "[indentLevel] must be non-negative." ) ; }  GQuery  $selectElem =  $  (  getElement  ( ) ) ;  OptionElement  option =   Document . get  ( ) . createOptionElement  ( ) ;   option . setValue  ( value ) ;   option . setText  ( label ) ;  if  (  !  (   className == null ||   className . trim  ( ) . isEmpty  ( ) ) )  {   option . addClassName  ( className ) ; }  if  (  indentLevel > 0 )  {   int  leftPadding =     options . getResources  ( ) . css  ( ) . indent  ( ) * indentLevel ;   option . setAttribute  ( "style" ,   "padding-left: " + leftPadding + "px;" ) ; }   $selectElem . append  ( option ) ; }   public void addItemToGroup  (  String item )  {   insertItemToGroup  ( item ,  - 1 ,  - 1 ) ; }   public void addItemToGroup  (  String item ,   int groupIndex )  {   insertItemToGroup  ( item , groupIndex ,  - 1 ) ; }   public void addItemToGroup  (  String item ,  String value )  {   insertItemToGroup  ( item , value ,  - 1 ,  - 1 ) ; }   public void addItemToGroup  (  String item ,  String value ,   int groupIndex )  {   insertItemToGroup  ( item , value , groupIndex ,  - 1 ) ; }   public HandlerRegistration addMaxSelectedHandler  (  MaxSelectedHandler handler )  {  return   ensureChosenHandlers  ( ) . addHandler  (  MaxSelectedEvent . getType  ( ) , handler ) ; }   public HandlerRegistration addReadyHandler  (  ReadyHandler handler )  {  return   ensureChosenHandlers  ( ) . addHandler  (  ReadyEvent . getType  ( ) , handler ) ; }   public HandlerRegistration addShowingDropDownHandler  (  ShowingDropDownHandler handler )  {  return   ensureChosenHandlers  ( ) . addHandler  (  ShowingDropDownEvent . getType  ( ) , handler ) ; }   public HandlerRegistration addUpdatedHandler  (  UpdatedHandler handler )  {  return   ensureChosenHandlers  ( ) . addHandler  (  UpdatedEvent . getType  ( ) , handler ) ; }    @ Override public void clear  ( )  {   clear  ( true ) ; }   public void clear  (  boolean update )  {    $  (  getElement  ( ) ) . html  ( "" ) ;  if  ( update )  {   update  ( ) ; } }    @ Override public void setEnabled  (  boolean enabled )  {   super . setEnabled  ( enabled ) ;   update  ( ) ; }   public void forceRedraw  ( )  {      $  (  getElement  ( ) ) . as  ( Chosen ) . destroy  ( ) . chosen  ( options ,  ensureChosenHandlers  ( ) ) ; }   public GQuery getChosenElement  ( )  {  ChosenImpl  impl =   $  (  getElement  ( ) ) . data  ( CHOSEN_DATA_KEY ,  ChosenImpl . class ) ;  if  (  impl != null )  {  return  impl . getContainer  ( ) ; }  return  $  ( ) ; }   public  int getDisableSearchThreshold  ( )  {  return  options . getDisableSearchThreshold  ( ) ; }   public  int getMaxSelectedOptions  ( )  {  return  options . getMaxSelectedOptions  ( ) ; }   public String getNoResultsText  ( )  {  return  options . getNoResultsText  ( ) ; }   public String getPlaceholderText  ( )  {  return  options . getPlaceholderText  ( ) ; }   public String getPlaceholderTextMultiple  ( )  {  return  options . getPlaceholderTextMultiple  ( ) ; }   public String getPlaceholderTextSingle  ( )  {  return  options . getPlaceholderTextSingle  ( ) ; }   public String getValue  ( )  {   int  selectedIndex =  getSelectedIndex  ( ) ;  return   selectedIndex !=  - 1 ?  getValue  ( selectedIndex ) : null ; }   public  String  [ ] getValues  ( )  {  if  (  !  isMultipleSelect  ( ) )  {  return  new String  [ ]  {  getValue  ( ) } ; }  JsArrayString  values =   JsArrayString . createArray  ( ) . cast  ( ) ;   NodeList  < OptionElement >  options =   SelectElement . as  (  getElement  ( ) ) . getOptions  ( ) ;  for (   int  i = 0 ;  i <  options . getLength  ( ) ;  i ++ )  {  OptionElement  option =  options . getItem  ( i ) ;  if  (  option . isSelected  ( ) )  {   values . push  (  option . getValue  ( ) ) ; } }   String  [ ]  result =  new String  [  values . length  ( ) ] ;  for (   int  i = 0 ;  i <  values . length  ( ) ;  i ++ )  {    result [ i ] =  values . get  ( i ) ; }  return result ; }   public void insertGroup  (  String label ,   int index )  {   insertGroup  ( label , null , index ) ; }   public void insertGroup  (  String label ,  String id ,   int index )  {  GQuery  optGroup =   $  ( "<optgroup></optgroup>" ) . attr  ( "label" , label ) ;  if  (  id != null )  {   optGroup . attr  ( "id" , id ) ; }  GQuery  select =  $  (  getElement  ( ) ) ;   int  itemCount =   SelectElement . as  (  getElement  ( ) ) . getLength  ( ) ;  if  (   index < 0 ||  index > itemCount )  {   select . append  ( optGroup ) ; } else  {  GQuery  before =   select . children  ( ) . eq  ( index ) ;   before . before  ( optGroup ) ; } }   public void insertItemToGroup  (  String item ,  Direction dir ,  String value ,   int groupIndex ,   int itemIndex )  {  GQuery  optgroupList =  $  ( OPTGROUP_TAG ,  getElement  ( ) ) ;   int  groupCount =  optgroupList . size  ( ) ;  if  (  groupCount == 0 )  {   insertItem  ( item , dir , value , itemIndex ) ;  return ; }  if  (   groupIndex < 0 ||  groupIndex >  groupCount - 1 )  {   groupIndex =  groupCount - 1 ; }  GQuery  optgroup =  optgroupList . eq  ( groupIndex ) ;  OptionElement  option =   Document . get  ( ) . createOptionElement  ( ) ;   setOptionText  ( option , item , dir ) ;   option . setValue  ( value ) ;  Element  optGroupElement =  optgroup . get  ( 0 ) ;   int  itemCount =  optGroupElement . getChildCount  ( ) ;  if  (   itemIndex < 0 ||  itemIndex >  itemCount - 1 )  {   optgroup . append  ( option ) ; } else  {  GQuery  before =  $  (  optGroupElement . getChild  ( itemIndex ) ) ;   before . before  ( option ) ; } }   public void insertItemToGroup  (  String item ,   int groupIndex ,   int itemIndex )  {   insertItemToGroup  ( item , null , item , groupIndex , itemIndex ) ; }   public void insertItemToGroup  (  String item ,  String value ,   int groupIndex ,   int itemIndex )  {   insertItemToGroup  ( item , null , value , groupIndex , itemIndex ) ; }   public boolean isAllowSingleDeselect  ( )  {  return  options . isAllowSingleDeselect  ( ) ; }   public boolean isSearchContains  ( )  {  return  options . isSearchContains  ( ) ; }   public boolean isSingleBackstrokeDelete  ( )  {  return  options . isSingleBackstrokeDelete  ( ) ; }   public void removeGroup  (   int index )  {     $  ( OPTGROUP_TAG ,  getElement  ( ) ) . eq  ( index ) . remove  ( ) ;   update  ( ) ; }   public void removeGroupById  (  String id )  {    $  (  "#" + id ,  getElement  ( ) ) . remove  ( ) ;   update  ( ) ; }   public void removeGroupByLabel  (  String label )  {    $  (    OPTGROUP_TAG + "[label='" + label + "']" ,  getElement  ( ) ) . remove  ( ) ;   update  ( ) ; }   public void setAllowSingleDeselect  (  boolean allowSingleDeselect )  {   options . setAllowSingleDeselect  ( allowSingleDeselect ) ; }   public void setDisableSearchThreshold  (   int disableSearchThreshold )  {   options . setDisableSearchThreshold  ( disableSearchThreshold ) ; }    @ Override public void setFocus  (  boolean focused )  {  GQuery  focusElement =  getFocusableElement  ( ) ;  if  ( focused )  {   focusElement . focus  ( ) ; } else  {   focusElement . blur  ( ) ; } }   public void setMaxSelectedOptions  (   int maxSelectedOptions )  {   options . setMaxSelectedOptions  ( maxSelectedOptions ) ; }   public void setNoResultsText  (  String noResultsText )  {   options . setNoResultsText  ( noResultsText ) ; }   public void setPlaceholderText  (  String placeholderText )  {   options . setPlaceholderText  ( placeholderText ) ; }   public void setPlaceholderTextMultiple  (  String placeholderTextMultiple )  {   options . setPlaceholderTextMultiple  ( placeholderTextMultiple ) ; }   public void setPlaceholderTextSingle  (  String placeholderTextSingle )  {   options . setPlaceholderTextSingle  ( placeholderTextSingle ) ; }   public void setSearchContains  (  boolean searchContains )  {   options . setSearchContains  ( searchContains ) ; }    @ Override public void setSelectedIndex  (   int index )  {   super . setSelectedIndex  ( index ) ;   update  ( ) ; }   public void setSingleBackstrokeDelete  (  boolean singleBackstrokeDelete )  {   options . setSingleBackstrokeDelete  ( singleBackstrokeDelete ) ; }   public void setSelectedValue  (  String ...  values )  {  for ( String value : values )  {  Element  element =   $  (   "option[value='" + value + "']" , this ) . get  ( 0 ) ;  if  (  element != null )  {    OptionElement . as  ( element ) . setSelected  ( true ) ; } }   update  ( ) ; }    @ Override public void setVisible  (  boolean visible )  {    this . visible = visible ;  if  (  isSupported  ( ) )  {  GQuery  chosenElement =  getChosenElement  ( ) ;  if  ( visible )  {   chosenElement . show  ( ) ; } else  {   chosenElement . hide  ( ) ; } } else  {   super . setVisible  ( visible ) ; } }   public void update  ( )  {    ensureChosenHandlers  ( ) . fireEvent  (  new UpdatedEvent  ( ) ) ; }   protected final  <  H  extends EventHandler > HandlerRegistration addChosenHandler  (  H handler ,   Type  < H > type )  {  return   ensureChosenHandlers  ( ) . addHandler  ( type , handler ) ; }   protected EventBus ensureChosenHandlers  ( )  {  return   chznHandlerManager == null ?  chznHandlerManager =  new SimpleEventBus  ( ) : chznHandlerManager ; }   protected EventBus getChosenHandlerManager  ( )  {  return chznHandlerManager ; }    @ Override protected void onLoad  ( )  {   super . onLoad  ( ) ;     $  (  getElement  ( ) ) . as  ( Chosen ) . chosen  ( options ,  ensureChosenHandlers  ( ) ) ;   setVisible  ( visible ) ; }    @ Override protected void onUnload  ( )  {   super . onUnload  ( ) ;     $  (  getElement  ( ) ) . as  ( Chosen ) . destroy  ( ) ; }   private GQuery getFocusableElement  ( )  {  GQuery  chosen =  getChosenElement  ( ) ;  GQuery  focusableElement =  chosen . children  ( "a" ) ;  if  (  focusableElement . isEmpty  ( ) )  {   focusableElement =  chosen . find  ( "input" ) ; }  return focusableElement ; }   public void setHighlightSearchTerm  (  boolean highlightSearchTerm )  {   options . setHighlightSearchTerm  ( highlightSearchTerm ) ; } }