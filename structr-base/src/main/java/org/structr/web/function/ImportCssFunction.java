  package    org . structr . web . function ;   import     com . steadystate . css . parser . CSSOMParser ;  import     com . steadystate . css . parser . SACParserCSS3 ;  import     org . apache . commons . lang . StringUtils ;  import     org . structr . common . error . FrameworkException ;  import     org . structr . core . app . App ;  import     org . structr . core . app . StructrApp ;  import     org . structr . core . graph . NodeInterface ;  import     org . structr . core . storage . StorageProviderFactory ;  import     org . structr . schema . action . ActionContext ;  import     org . structr . web . entity . File ;  import      org . structr . web . entity . css . CssDeclaration ;  import      org . structr . web . entity . css . CssRule ;  import      org . structr . web . entity . css . CssSelector ;  import     org . w3c . css . sac . InputSource ;  import     org . w3c . dom . css . CSSRule ;  import     org . w3c . dom . css . CSSRuleList ;  import     org . w3c . dom . css . CSSStyleSheet ;  import   java . io . InputStreamReader ;  import   java . util . LinkedList ;  import   java . util . List ;  import    org . structr . storage . StorageProviderFactory ;   public class ImportCssFunction  extends UiAdvancedFunction  {   public static final String  ERROR_MESSAGE_IMPORT_CSS = "Usage: ${import_css(file)}. Example: ${import_css(cssFile)}" ;   public static final String  ERROR_MESSAGE_IMPORT_CSS_JS = "Usage: ${{Structr.importCss(file)}}. Example: ${{Structr.importCss(cssFile)}}" ;    @ Override public String getName  ( )  {  return "import_css" ; }    @ Override public String getSignature  ( )  {  return "file" ; }    @ Override public Object apply  (   final ActionContext ctx ,   final Object caller ,   Object  [ ] sources )  throws FrameworkException  {   assertArrayHasMinLengthAndAllElementsNotNull  ( sources , 1 ) ;  if  (   sources [ 0 ] instanceof File )  {   final File  file =  ( File )  sources [ 0 ] ;  if  (    StorageProviderFactory . getStorageProvider  ( file ) . size  ( ) == 0 )  {  return "" ; }  try  (   final InputStreamReader reader =  new InputStreamReader  (   StorageProviderFactory . getStorageProvider  ( file ) . getInputStream  ( ) ) )  {   logger . info  ( "Parsing CSS from {}.." ,  file . getName  ( ) ) ;   final InputSource  source =  new InputSource  ( reader ) ;   final CSSOMParser  parser =  new CSSOMParser  (  new SACParserCSS3  ( ) ) ;   final CSSStyleSheet  styleSheet =  parser . parseStyleSheet  ( source , null , null ) ;   final CSSRuleList  rules =  styleSheet . getCssRules  ( ) ;   int  count = 0 ;   logger . info  ( "{} rules" ,   styleSheet . getCssRules  ( ) . getLength  ( ) ) ;  for (   int  i = 0 ;  i <  rules . getLength  ( ) ;  i ++ )  {   final CSSRule  rule =  rules . item  ( i ) ;   importCSSRule  ( rule ) ;   count ++ ; }   logger . info  ( "{} rules imported" , count ) ;  return true ; }  catch (   final  Exception e )  {   logParameterError  ( caller , sources ,  ctx . isJavaScriptContext  ( ) ) ;  return  usage  (  ctx . isJavaScriptContext  ( ) ) ; } }  return  usage  (  ctx . isJavaScriptContext  ( ) ) ; }    @ Override public String usage  (  boolean inJavaScriptContext )  {  return  (  inJavaScriptContext ? ERROR_MESSAGE_IMPORT_CSS_JS : ERROR_MESSAGE_IMPORT_CSS ) ; }    @ Override public String shortDescription  ( )  {  return "Imports CSS classes, media queries etc. from given CSS file." ; }   private NodeInterface importCSSRule  (   final CSSRule rule )  throws FrameworkException  {   final String  cssText =  rule . getCssText  ( ) ;   final String  selectorsString =  StringUtils . trim  (  StringUtils . substringBefore  ( cssText , "{" ) ) ;   final App  app =  StructrApp . getInstance  ( ) ;   final NodeInterface  existingRuleNode =  ( NodeInterface )    app . nodeQuery  (  CssRule . class ) . andName  ( selectorsString ) . getFirst  ( ) ;  if  (  existingRuleNode != null )  {  return existingRuleNode ; }   final NodeInterface  cssRuleNode =  app . create  (  CssRule . class , selectorsString ) ;   cssRuleNode . setProperty  (  StructrApp . key  (  CssRule . class , "cssText" ) , cssText ) ;   cssRuleNode . setProperty  (  StructrApp . key  (  CssRule . class , "ruleType" ) ,  Short . toUnsignedInt  (  rule . getType  ( ) ) ) ;   final  List  < NodeInterface >  cssSelectors =  new  LinkedList  < >  ( ) ;   final  String  [ ]  selectors =  StringUtils . split  ( selectorsString , "," ) ;  for (  final String selector : selectors )  {   final NodeInterface  cssSelectorNode =  app . create  (  CssSelector . class ,  StringUtils . trim  ( selector ) ) ;   cssSelectors . add  ( cssSelectorNode ) ; }   cssRuleNode . setProperty  (  StructrApp . key  (  CssRule . class , "selectors" ) , cssSelectors ) ;   final  List  < NodeInterface >  cssDeclarations =  new  LinkedList  < >  ( ) ;   final String  declarationsString =  StringUtils . stripEnd  (  StringUtils . substringAfter  ( cssText , "{" ) , "}" ) ;   final  String  [ ]  declarations =  StringUtils . split  ( declarationsString , ";" ) ;  for (  final String declaration : declarations )  {  if  (  StringUtils . isNotBlank  ( declaration ) )  {   final NodeInterface  cssDeclarationNode =  app . create  (  CssDeclaration . class ,  StringUtils . trim  ( declaration ) ) ;   cssDeclarations . add  ( cssDeclarationNode ) ; } }   cssRuleNode . setProperty  (  StructrApp . key  (  CssRule . class , "declarations" ) , cssDeclarations ) ;  CSSRule  parentRule =  rule . getParentRule  ( ) ;  if  (  parentRule != null )  {   final NodeInterface  parentRuleNode =  importCSSRule  ( parentRule ) ;   cssRuleNode . setProperty  (  StructrApp . key  (  CssRule . class , "parentRule" ) , parentRuleNode ) ; }  return cssRuleNode ; } }