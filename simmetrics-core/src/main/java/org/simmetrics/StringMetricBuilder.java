  package  org . simmetrics ;   import static      com . google . common . base . Preconditions . checkNotNull ;  import   java . util . ArrayList ;  import   java . util . Collection ;  import   java . util . List ;  import   java . util . Set ;  import    org . simmetrics . simplifiers . PassThroughSimplifier ;  import    org . simmetrics . simplifiers . Simplifier ;  import    org . simmetrics . tokenizers . Tokenizer ;  import    org . simmetrics . utils . CachingSimplifier ;  import    org . simmetrics . utils . CachingTokenizer ;  import    org . simmetrics . utils . CompositeSimplifier ;  import    org . simmetrics . utils . CompositeStringMetric ;  import    org . simmetrics . utils . CompositeListMetric ;  import    org . simmetrics . utils . CompositeSetMetric ;  import    org . simmetrics . utils . FilteringTokenizer ;  import    org . simmetrics . utils . CompositeTokenizer ;  import    org . simmetrics . utils . SimplifyingSimplifier ;  import    org . simmetrics . utils . TokenizingTokenizer ;  import     com . google . common . base . Predicate ;  import     com . google . common . base . Predicates ;   public class StringMetricBuilder  {   public static StringMetricSimplifierStep with  (  StringMetric metric )  {  return  new CompositeStringMetricBuilder  ( metric ) ; }   public static CompositeListMetricBuilder with  (   ListMetric  < String > metric )  {  return  new CompositeListMetricBuilder  ( metric ) ; }   public static CompositeSetMetricBuilder with  (   SetMetric  < String > metric )  {  return  new CompositeSetMetricBuilder  ( metric ) ; }    @ SuppressWarnings  ( "javadoc" ) public interface BuildStep  {  StringMetric build  ( ) ; }    @ SuppressWarnings  ( "javadoc" ) public interface StringMetricSimplifierStep  {  StringMetricSimplifierCacheStep simplify  (  Simplifier simplifier ) ;  StringMetric build  ( ) ; }    @ SuppressWarnings  ( "javadoc" ) public interface StringMetricSimplifierCacheStep  {  StringMetricSimplifierCacheStep simplify  (  Simplifier simplifier ) ;  BuildStep setSimplifierCache  (  SimplifyingSimplifier cache ) ;  BuildStep setSimplifierCache  (   int initialCapacity ,   int maximumSize ) ;  BuildStep setSimplifierCache  ( ) ;  StringMetric build  ( ) ; }    @ SuppressWarnings  ( "javadoc" ) public interface CollectionMetricStep  {  CollectionMetricSimplifierStep simplify  (  Simplifier simplifier ) ;  CollectionMetricTokenizerCacheStep tokenize  (  Tokenizer tokenizer ) ; }    @ SuppressWarnings  ( "javadoc" ) public interface CollectionMetricSimplifierStep  {  CollectionMetricSimplifierStep simplify  (  Simplifier simplifier ) ;  CollectionMetricTokenizerStep setSimplifierCache  (  SimplifyingSimplifier cache ) ;  CollectionMetricTokenizerStep setSimplifierCache  (   int initialCapacity ,   int maximumSize ) ;  CollectionMetricTokenizerStep setSimplifierCache  ( ) ;  CollectionMetricTokenizerCacheStep tokenize  (  Tokenizer tokenizer ) ; }    @ SuppressWarnings  ( "javadoc" ) public interface CollectionMetricTokenizerStep  {  CollectionMetricTokenizerCacheStep tokenize  (  Tokenizer tokenizer ) ; }    @ SuppressWarnings  ( "javadoc" ) public interface CollectionMetricTokenizerCacheStep  {  CollectionMetricTokenizerCacheStep tokenize  (  Tokenizer tokenizer ) ;  CollectionMetricTokenizerCacheStep filter  (   Predicate  < String > predicate ) ;  BuildStep setTokenizerCache  (  TokenizingTokenizer cache ) ;  BuildStep setTokenizerCache  (   int initialCapacity ,   int maximumSize ) ;  BuildStep setTokenizerCache  ( ) ;  StringMetric build  ( ) ; }    @ SuppressWarnings  ( "javadoc" ) public final static class CompositeStringMetricBuilder  implements  StringMetricSimplifierStep , StringMetricSimplifierCacheStep , BuildStep  {   private final StringMetric  metric ;   private static final  int  CACHE_SIZE = 2 ;   private final  List  < Simplifier >  simplifiers =  new  ArrayList  < >  ( ) ;   private SimplifyingSimplifier  cache ;  CompositeStringMetricBuilder  (  StringMetric metric )  {   checkNotNull  ( metric ) ;    this . metric = metric ; }    @ Override public StringMetric build  ( )  {  if  (  simplifiers . isEmpty  ( ) )  {  return metric ; }  Simplifier  simplifier ;  if  (   simplifiers . size  ( ) == 1 )  {   simplifier =  simplifiers . get  ( 0 ) ; } else  {   simplifier =  new CompositeSimplifier  ( simplifiers ) ; }  if  (  cache != null )  {   cache . setSimplifier  ( simplifier ) ;  return  new CompositeStringMetric  ( metric , cache ) ; } else  {  return  new CompositeStringMetric  ( metric , simplifier ) ; } }    @ Override public BuildStep setSimplifierCache  (  SimplifyingSimplifier cache )  {   checkNotNull  ( cache ) ;    this . cache = cache ;  return this ; }    @ Override public BuildStep setSimplifierCache  (   int initialCapacity ,   int maximumSize )  {  return  setSimplifierCache  (  new CachingSimplifier  ( initialCapacity , maximumSize ) ) ; }    @ Override public BuildStep setSimplifierCache  ( )  {  return  setSimplifierCache  ( CACHE_SIZE , CACHE_SIZE ) ; }    @ Override public StringMetricSimplifierCacheStep simplify  (  Simplifier simplifier )  {   checkNotNull  ( simplifier ) ;    this . simplifiers . add  ( simplifier ) ;  return this ; } }    @ SuppressWarnings  ( "javadoc" ) public abstract class CompositeCollectionMetricBuilder  <  T  extends  Collection  < String > >  implements  BuildStep , CollectionMetricStep , CollectionMetricSimplifierStep , CollectionMetricTokenizerStep , CollectionMetricTokenizerCacheStep  {   private final  Metric  < T >  metric ;   private static final  int  CACHE_SIZE = 2 ;   private final  List  < Simplifier >  simplifiers =  new  ArrayList  < >  ( ) ;   private final  List  < Tokenizer >  tokenizers =  new  ArrayList  < >  ( ) ;   private SimplifyingSimplifier  stringCache ;   private TokenizingTokenizer  tokenCache ;  CompositeCollectionMetricBuilder  (   Metric  < T > metric )  {   checkNotNull  ( metric ) ;    this . metric = metric ; }   public StringMetric build  ( )  {  Simplifier  simplifier ;  if  (  simplifiers . isEmpty  ( ) )  {   simplifier =  new PassThroughSimplifier  ( ) ; } else  if  (   simplifiers . size  ( ) == 1 )  {   simplifier =  simplifiers . get  ( 0 ) ; } else  {   simplifier =  new CompositeSimplifier  ( simplifiers ) ; }  if  (  stringCache != null )  {   stringCache . setSimplifier  ( simplifier ) ;   simplifier = stringCache ; }  Tokenizer  tokenizer ;  if  (   tokenizers . size  ( ) == 1 )  {   tokenizer =  tokenizers . get  ( 0 ) ; } else  {   tokenizer =  new CompositeTokenizer  ( tokenizers ) ; }  if  (  tokenCache != null )  {   tokenCache . setTokenizer  ( tokenizer ) ;   tokenizer = tokenCache ; }  return  build  ( metric , simplifier , tokenizer ) ; }   abstract StringMetric build  (   Metric  < T > metric ,  Simplifier simplifier ,  Tokenizer tokenizer ) ;    @ Override public BuildStep setTokenizerCache  (  TokenizingTokenizer cache )  {   checkNotNull  ( cache ) ;    this . tokenCache = cache ;  return this ; }    @ Override public BuildStep setTokenizerCache  (   int initialCapacity ,   int maximumSize )  {  return  setTokenizerCache  (  new CachingTokenizer  ( initialCapacity , maximumSize ) ) ; }    @ Override public BuildStep setTokenizerCache  ( )  {  return  setTokenizerCache  ( CACHE_SIZE , CACHE_SIZE ) ; }    @ Override public CollectionMetricTokenizerStep setSimplifierCache  (  SimplifyingSimplifier cache )  {   checkNotNull  ( cache ) ;    this . stringCache = cache ;  return this ; }    @ Override public CollectionMetricTokenizerStep setSimplifierCache  (   int initialCapacity ,   int maximumSize )  {  return  setSimplifierCache  (  new CachingSimplifier  ( initialCapacity , maximumSize ) ) ; }    @ Override public CollectionMetricTokenizerStep setSimplifierCache  ( )  {  return  setSimplifierCache  ( CACHE_SIZE , CACHE_SIZE ) ; }    @ Override public CollectionMetricSimplifierStep simplify  (  Simplifier simplifier )  {   checkNotNull  ( simplifier ) ;   simplifiers . add  ( simplifier ) ;  return this ; }    @ Override public CollectionMetricTokenizerCacheStep tokenize  (  Tokenizer tokenizer )  {   checkNotNull  ( tokenizer ) ;   tokenizers . add  ( tokenizer ) ;  return this ; }    @ Override public CollectionMetricTokenizerCacheStep filter  (   Predicate  < String > predicate )  {   checkNotNull  ( predicate ) ;  Tokenizer  tokenizer ;  if  (   tokenizers . size  ( ) == 1 )  {   tokenizer =  tokenizers . get  ( 0 ) ; } else  {   tokenizer =  new CompositeTokenizer  (  new  ArrayList  < >  ( tokenizers ) ) ; }   tokenizers . clear  ( ) ;  FilteringTokenizer  filter =  new FilteringTokenizer  ( tokenizer , predicate ) ;   tokenizers . add  ( filter ) ;  return this ; } }    @ SuppressWarnings  ( "javadoc" ) public final static class CompositeListMetricBuilder  extends  CompositeCollectionMetricBuilder  <  List  < String > >  {  CompositeListMetricBuilder  (   Metric  <  List  < String > > metric )  {  super  ( metric ) ; }    @ Override StringMetric build  (   Metric  <  List  < String > > metric ,  Simplifier simplifier ,  Tokenizer tokenizer )  {  return  new CompositeListMetric  ( metric , simplifier , tokenizer ) ; } }    @ SuppressWarnings  ( "javadoc" ) public final static class CompositeSetMetricBuilder  extends  CompositeCollectionMetricBuilder  <  Set  < String > >  {  CompositeSetMetricBuilder  (   Metric  <  Set  < String > > metric )  {  super  ( metric ) ; }    @ Override StringMetric build  (   Metric  <  Set  < String > > metric ,  Simplifier simplifier ,  Tokenizer tokenizer )  {  return  new CompositeSetMetric  ( metric , simplifier , tokenizer ) ; } } 
<<<<<<<
=======
  public static abstract class SimplyfingBuilder  <  T >  {   protected final T  metric ;   protected Simplifier  simplifier =  new PassThroughSimplifier  ( ) ;  SimplyfingBuilder  (  T metric )  {   checkNotNull  ( metric ) ;    this . metric = metric ; }  void setSimplifier  (  Simplifier simplifier )  {    this . simplifier = simplifier ; }   public abstract SimplifierChainBuilder simplify  (  Simplifier simplifier ) ; }
>>>>>>>
 
<<<<<<<
=======
  public static abstract class CollectionMetricBuilder  <  T >  extends  SimplyfingBuilder  < T >  {   protected Tokenizer  tokenizer ;  CollectionMetricBuilder  (  T metric )  {  super  ( metric ) ; }  void setTokenizer  (  Tokenizer tokenizer )  {   checkNotNull  ( tokenizer ) ;    this . tokenizer = tokenizer ; }   public TokenizingChainBuilder tokenize  (  Tokenizer tokenizer )  {  return  new TokenizingChainBuilder  ( this , tokenizer ) ; }    @ Override public  TokenSimplifierChainBuilder  < T > simplify  (  Simplifier simplifier )  {  return  new  TokenSimplifierChainBuilder  < >  ( this , simplifier ) ; }   abstract StringMetric build  ( ) ; }
>>>>>>>
 
<<<<<<<
=======
  public static final class TokenSimplifierChainBuilder  <  T >  extends SimplifierChainBuilder  {   private final  CollectionMetricBuilder  < T >  builder ;  TokenSimplifierChainBuilder  (   CollectionMetricBuilder  < T > builder ,  Simplifier simplifier )  {  super  ( simplifier ) ;    this . builder = builder ; }    @ Override public  TokenSimplifierChainBuilder  < T > simplify  (  Simplifier simplifier )  {   super . simplify  ( simplifier ) ;  return this ; }   public TokenizingChainBuilder tokenize  (  Tokenizer tokenizer )  {   builder . setSimplifier  (  innerBuild  ( ) ) ;  return  builder . tokenize  ( tokenizer ) ; }    @ Override public  TokenSimplifierChainBuilder  < T > setSimplifierCache  (  SimplifyingSimplifier cache )  {   super . setSimplifierCache  ( cache ) ;  return this ; }    @ Override public  TokenSimplifierChainBuilder  < T > setSimplifierCache  (   int initialCapacity ,   int maximumSize )  {   super . setSimplifierCache  ( initialCapacity , maximumSize ) ;  return this ; }    @ Override public  TokenSimplifierChainBuilder  < T > setSimplifierCache  ( )  {   super . setSimplifierCache  ( ) ;  return this ; } }
>>>>>>>
 
<<<<<<<
=======
  public static abstract class SimplifierChainBuilder  {   private static final  int  CACHE_SIZE = 2 ;   private final  List  < Simplifier >  simplifiers =  new  ArrayList  < >  ( ) ;   private SimplifyingSimplifier  cache ;  SimplifierChainBuilder  (  Simplifier simplifier )  {   checkNotNull  ( simplifier ) ;    this . simplifiers . add  ( simplifier ) ; }   public SimplifierChainBuilder simplify  (  Simplifier simplifier )  {   simplifiers . add  ( simplifier ) ;  return this ; }   public SimplifierChainBuilder setSimplifierCache  (  SimplifyingSimplifier cache )  {   Preconditions . checkNotNull  ( cache ) ;    this . cache = cache ;  return this ; }   public SimplifierChainBuilder setSimplifierCache  (   int initialCapacity ,   int maximumSize )  {  return  setSimplifierCache  (  new CachingSimplifier  ( initialCapacity , maximumSize ) ) ; }   public SimplifierChainBuilder setSimplifierCache  ( )  {  return  setSimplifierCache  ( CACHE_SIZE , CACHE_SIZE ) ; }  Simplifier innerBuild  ( )  {  Simplifier  simplifier ;  if  (   simplifiers . size  ( ) == 1 )  {   simplifier =  simplifiers . get  ( 0 ) ; } else  {   simplifier =  new CompositeSimplifier  ( simplifiers ) ; }  if  (  cache != null )  {   cache . setSimplifier  ( simplifier ) ;   simplifier = cache ; }  return simplifier ; } }
>>>>>>>
 
<<<<<<<
=======
  public static final class StringSimplifierChainBuilder  extends SimplifierChainBuilder  {   private final CompositeStringMetricBuilder  builder ;  StringSimplifierChainBuilder  (  CompositeStringMetricBuilder builder ,  Simplifier simplifier )  {  super  ( simplifier ) ;    this . builder = builder ; }    @ Override public StringSimplifierChainBuilder simplify  (  Simplifier simplifier )  {   super . simplify  ( simplifier ) ;  return this ; }    @ Override public StringSimplifierChainBuilder setSimplifierCache  (  SimplifyingSimplifier cache )  {   super . setSimplifierCache  ( cache ) ;  return this ; }    @ Override public StringSimplifierChainBuilder setSimplifierCache  (   int initialCapacity ,   int maximumSize )  {   super . setSimplifierCache  ( initialCapacity , maximumSize ) ;  return this ; }    @ Override public StringSimplifierChainBuilder setSimplifierCache  ( )  {   super . setSimplifierCache  ( ) ;  return this ; }   public StringMetric build  ( )  {   builder . setSimplifier  (  innerBuild  ( ) ) ;  return  builder . build  ( ) ; } }
>>>>>>>
 
<<<<<<<
=======
  public static final class TokenizingChainBuilder  {   private static final  int  CACHE_SIZE = 2 ;   private final  CollectionMetricBuilder  <  ? >  builder ;   private final  List  < Tokenizer >  tokenizers =  new  ArrayList  < >  ( ) ;   private TokenizingTokenizer  cache ;  TokenizingChainBuilder  (   CollectionMetricBuilder  <  ? > builder ,  Tokenizer tokenizer )  {   checkNotNull  ( tokenizer ) ;    this . builder = builder ;    this . tokenizers . add  ( tokenizer ) ; }   public TokenizingChainBuilder tokenize  (  Tokenizer tokenizer )  {   Preconditions . checkNotNull  ( tokenizer ) ;    this . tokenizers . add  ( tokenizer ) ;  return this ; }   public TokenizingChainBuilder filter  (   Predicate  < String > predicate )  {   Preconditions . checkNotNull  ( predicate ) ;  Tokenizer  tokenizer =  innerBuild  ( ) ;    this . tokenizers . add  (  new FilteringTokenizer  ( tokenizer , predicate ) ) ;  return this ; }   public TokenizingChainBuilder setTokenizerCache  (  TokenizingTokenizer cache )  {   Preconditions . checkNotNull  ( cache ) ;    this . cache = cache ;  return this ; }   public TokenizingChainBuilder setTokenizerCache  ( )  {  return  setTokenizerCache  ( CACHE_SIZE , CACHE_SIZE ) ; }   public TokenizingChainBuilder setTokenizerCache  (   int initialCapacity ,   int maximumSize )  {  return  setTokenizerCache  (  new CachingTokenizer  ( initialCapacity , maximumSize ) ) ; }   private Tokenizer innerBuild  ( )  {  Tokenizer  tokenizer ;  if  (   tokenizers . size  ( ) == 1 )  {   tokenizer =  tokenizers . get  ( 0 ) ; } else  {   tokenizer =  new CompositeTokenizer  (  new  ArrayList  < >  ( tokenizers ) ) ; }  if  (  cache != null )  {   cache . setTokenizer  ( tokenizer ) ;   tokenizer = cache ; }  return tokenizer ; }   public StringMetric build  ( )  {   builder . setTokenizer  (  innerBuild  ( ) ) ;  return  builder . build  ( ) ; } }
>>>>>>>
 }