  package   org . simmetrics . metrics ;   import static    java . lang . Math . max ;  import static    java . lang . Math . min ;  import   org . simmetrics . StringMetric ;   public class Jaro  implements  StringMetric  {    @ Override public  float compare  (   final String a ,   final String b )  {  if  (   a . isEmpty  ( ) &&  b . isEmpty  ( ) )  {  return 1.0f ; }  if  (   a . isEmpty  ( ) ||  b . isEmpty  ( ) )  {  return 0.0f ; }   final  int  halfLength =  max  ( 0 ,    max  (  a . length  ( ) ,  b . length  ( ) ) / 2 - 1 ) ;   final   char  [ ]  charsA =  a . toCharArray  ( ) ;   final   char  [ ]  commonA =  getCommonCharacters  ( charsA ,  b . toCharArray  ( ) , halfLength ) ;   final   char  [ ]  commonB =  getCommonCharacters  (  b . toCharArray  ( ) , charsA , halfLength ) ;   float  transpositions = 0 ;   int  commonCharacters = 0 ;  for (   int  length =  commonA . length ;   commonCharacters < length &&   commonA [ commonCharacters ] > 0 ;  commonCharacters ++ )  {  if  (   commonA [ commonCharacters ] !=  commonB [ commonCharacters ] )  {   transpositions ++ ; } }  if  (  commonCharacters == 0 )  {  return 0.0f ; }   float  aCommonRatio =  commonCharacters /  (  float )  a . length  ( ) ;   float  bCommonRatio =  commonCharacters /  (  float )  b . length  ( ) ;   float  transpositionRatio =   (  commonCharacters -  transpositions / 2.0f ) / commonCharacters ;  return   (   aCommonRatio + bCommonRatio + transpositionRatio ) / 3.0f ; }   private static   char  [ ] getCommonCharacters  (   final   char  [ ] charsA ,   final   char  [ ] charsB ,   final  int separation )  {   final   char  [ ]  common =  new  char  [  min  (  charsA . length ,  charsB . length ) ] ;   int  commonIndex = 0 ;  for (   int  i = 0 ,  length =  charsA . length ;  i < length ;  i ++ )  {   final  char  character =  charsA [ i ] ;   int  index =  indexOf  ( character , charsB ,  i - separation ,   i + separation + 1 ) ;  if  (  index >  - 1 )  {    common [  commonIndex ++ ] = character ;    charsB [ index ] =  (  char ) 0 ; } }  return common ; }   private static  int indexOf  (   char character ,    char  [ ] buffer ,   int fromIndex ,   int toIndex )  {  for (   int  j =  max  ( 0 , fromIndex ) ,  length =  min  ( toIndex ,  buffer . length ) ;  j < length ;  j ++ )  {  if  (   buffer [ j ] == character )  {  return j ; } }  return  - 1 ; }    @ Override public String toString  ( )  {  return "Jaro" ; } }