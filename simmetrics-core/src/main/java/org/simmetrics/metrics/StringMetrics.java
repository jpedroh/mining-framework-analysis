  package   org . simmetrics . metrics ;   import static      com . google . common . base . Preconditions . checkNotNull ;  import static     org . simmetrics . simplifiers . Simplifiers . chain ;  import static     org . simmetrics . tokenizers . Tokenizers . chain ;  import static     org . simmetrics . tokenizers . Tokenizers . qGram ;  import static     org . simmetrics . tokenizers . Tokenizers . whitespace ;  import   java . util . List ;  import   java . util . Set ;  import   org . simmetrics . Metric ;  import   org . simmetrics . StringMetric ;  import    org . simmetrics . builders . StringMetricBuilder ;  import    org . simmetrics . simplifiers . Simplifier ;  import    org . simmetrics . simplifiers . Soundex ;  import    org . simmetrics . tokenizers . Tokenizer ;  import    org . simmetrics . tokenizers . Tokenizers ;  import     com . google . common . collect . Multiset ;   public final class StringMetrics  {   public static StringMetric cosineSimilarity  ( )  {  return  createForMultisetMetric  (  new  CosineSimilarity  < String >  ( ) ,  whitespace  ( ) ) ; }   public static StringMetric blockDistance  ( )  {  return  createForMultisetMetric  (  new  BlockDistance  < String >  ( ) ,  whitespace  ( ) ) ; }   public static StringMetric damerauLevenshtein  ( )  {  return  new DamerauLevenshtein  ( ) ; }   public static StringMetric dice  ( )  {  return  createForSetMetric  (  new  Dice  < String >  ( ) ,  whitespace  ( ) ) ; }   public static StringMetric euclideanDistance  ( )  {  return  createForMultisetMetric  (  new  EuclideanDistance  < String >  ( ) ,  whitespace  ( ) ) ; }   public static StringMetric generalizedJaccard  ( )  {  return  createForMultisetMetric  (  new  GeneralizedJaccard  < String >  ( ) ,  whitespace  ( ) ) ; }   public static StringMetric identity  ( )  {  return  create  (  new  Identity  < String >  ( ) ) ; }   public static StringMetric jaccard  ( )  {  return  createForSetMetric  (  new  Jaccard  < String >  ( ) ,  whitespace  ( ) ) ; }   public static StringMetric jaro  ( )  {  return  new Jaro  ( ) ; }   public static StringMetric jaroWinkler  ( )  {  return  new JaroWinkler  ( ) ; }   public static StringMetric levenshtein  ( )  {  return  new Levenshtein  ( ) ; }   public static StringMetric mongeElkan  ( )  {  return  createForListMetric  (  new MongeElkan  (  new SmithWatermanGotoh  ( ) ) ,  whitespace  ( ) ) ; }   public static StringMetric needlemanWunch  ( )  {  return  new NeedlemanWunch  ( ) ; }   public static StringMetric overlapCoefficient  ( )  {  return  createForSetMetric  (  new  OverlapCoefficient  < String >  ( ) ,  whitespace  ( ) ) ; }   public static StringMetric qGramsDistance  ( )  {  return  createForMultisetMetric  (  new  BlockDistance  < String >  ( ) ,  Tokenizers . qGramWithPadding  ( 3 ) ) ; }   public static StringMetric simonWhite  ( )  {  return  createForMultisetMetric  (  new  SimonWhite  < String >  ( ) ,  chain  (  whitespace  ( ) ,  qGram  ( 2 ) ) ) ; }   public static StringMetric smithWaterman  ( )  {  return  new SmithWaterman  ( ) ; }   public static StringMetric smithWatermanGotoh  ( )  {  return  new SmithWatermanGotoh  ( ) ; }   public static  @ Deprecated StringMetric soundex  ( )  {  return  create  (  new JaroWinkler  ( ) ,  new Soundex  ( ) ) ; }   public static StringMetric create  (   Metric  < String > metric )  {  if  (  metric instanceof StringMetric )  {  return  ( StringMetric ) metric ; }  return  new ForString  ( metric ) ; }   public static StringMetric create  (   Metric  < String > metric ,  Simplifier simplifier )  {  if  (  metric instanceof ForString )  {  ForString  forString =  ( ForString ) metric ;  return  new ForStringWithSimplifier  (  forString . getMetric  ( ) , simplifier ) ; } else  if  (  metric instanceof ForStringWithSimplifier )  {  ForStringWithSimplifier  fsws =  ( ForStringWithSimplifier ) metric ;  return  new ForStringWithSimplifier  (  fsws . getMetric  ( ) ,  chain  ( simplifier ,  fsws . getSimplifier  ( ) ) ) ; } else  if  (  metric instanceof ForList )  {  ForList  fl =  ( ForList ) metric ;  return  createForListMetric  (  fl . getMetric  ( ) , simplifier ,  fl . getTokenizer  ( ) ) ; } else  if  (  metric instanceof ForListWithSimplifier )  {  ForListWithSimplifier  fl =  ( ForListWithSimplifier ) metric ;  return  createForListMetric  (  fl . getMetric  ( ) ,  chain  ( simplifier ,  fl . getSimplifier  ( ) ) ,  fl . getTokenizer  ( ) ) ; } else  if  (  metric instanceof ForSet )  {  ForSet  fl =  ( ForSet ) metric ;  return  createForSetMetric  (  fl . getMetric  ( ) , simplifier ,  fl . getTokenizer  ( ) ) ; } else  if  (  metric instanceof ForSetWithSimplifier )  {  ForSetWithSimplifier  fl =  ( ForSetWithSimplifier ) metric ;  return  createForSetMetric  (  fl . getMetric  ( ) ,  chain  ( simplifier ,  fl . getSimplifier  ( ) ) ,  fl . getTokenizer  ( ) ) ; }  return  new ForStringWithSimplifier  ( metric , simplifier ) ; }   public static StringMetric createForListMetric  (   Metric  <  List  < String > > metric ,  Simplifier simplifier ,  Tokenizer tokenizer )  {  return  new ForListWithSimplifier  ( metric , simplifier , tokenizer ) ; }   public static StringMetric createForListMetric  (   Metric  <  List  < String > > metric ,  Tokenizer tokenizer )  {  return  new ForList  ( metric , tokenizer ) ; }   public static StringMetric createForSetMetric  (   Metric  <  Set  < String > > metric ,  Simplifier simplifier ,  Tokenizer tokenizer )  {  return  new ForSetWithSimplifier  ( metric , simplifier , tokenizer ) ; }   public static StringMetric createForSetMetric  (   Metric  <  Set  < String > > metric ,  Tokenizer tokenizer )  {  return  new ForSet  ( metric , tokenizer ) ; }   public static StringMetric createForMultisetMetric  (   Metric  <  Multiset  < String > > metric ,  Simplifier simplifier ,  Tokenizer tokenizer )  {  return  new ForMultisetWithSimplifier  ( metric , simplifier , tokenizer ) ; }   public static StringMetric createForMultisetMetric  (   Metric  <  Multiset  < String > > metric ,  Tokenizer tokenizer )  {  return  new ForMultiset  ( metric , tokenizer ) ; }   static final class ForList  implements  StringMetric  {   private final  Metric  <  List  < String > >  metric ;   private final Tokenizer  tokenizer ;  ForList  (   Metric  <  List  < String > > metric ,  Tokenizer tokenizer )  {   checkNotNull  ( metric ) ;   checkNotNull  ( tokenizer ) ;    this . metric = metric ;    this . tokenizer = tokenizer ; }    @ Override public  float compare  (  String a ,  String b )  {  return  metric . compare  (  tokenizer . tokenizeToList  ( a ) ,  tokenizer . tokenizeToList  ( b ) ) ; }   Metric  <  List  < String > > getMetric  ( )  {  return metric ; }  Tokenizer getTokenizer  ( )  {  return tokenizer ; }    @ Override public String toString  ( )  {  return    metric + " [" + tokenizer + "]" ; } }   static final class ForListWithSimplifier  implements  StringMetric  {   private final  Metric  <  List  < String > >  metric ;   private final Simplifier  simplifier ;   private final Tokenizer  tokenizer ;  ForListWithSimplifier  (   Metric  <  List  < String > > metric ,  Simplifier simplifier ,  Tokenizer tokenizer )  {   checkNotNull  ( metric ) ;   checkNotNull  ( simplifier ) ;   checkNotNull  ( tokenizer ) ;    this . metric = metric ;    this . simplifier = simplifier ;    this . tokenizer = tokenizer ; }    @ Override public  float compare  (  String a ,  String b )  {  return  metric . compare  (  tokenizer . tokenizeToList  (  simplifier . simplify  ( a ) ) ,  tokenizer . tokenizeToList  (  simplifier . simplify  ( b ) ) ) ; }   Metric  <  List  < String > > getMetric  ( )  {  return metric ; }  Simplifier getSimplifier  ( )  {  return simplifier ; }  Tokenizer getTokenizer  ( )  {  return tokenizer ; }    @ Override public String toString  ( )  {  return      metric + " [" + simplifier + " -> " + tokenizer + "]" ; } }   static final class ForSet  implements  StringMetric  {   private final  Metric  <  Set  < String > >  metric ;   private final Tokenizer  tokenizer ;  ForSet  (   Metric  <  Set  < String > > metric ,  Tokenizer tokenizer )  {   checkNotNull  ( metric ) ;   checkNotNull  ( tokenizer ) ;    this . metric = metric ;    this . tokenizer = tokenizer ; }    @ Override public  float compare  (  String a ,  String b )  {  return  metric . compare  (  tokenizer . tokenizeToSet  ( a ) ,  tokenizer . tokenizeToSet  ( b ) ) ; }   Metric  <  Set  < String > > getMetric  ( )  {  return metric ; }  Tokenizer getTokenizer  ( )  {  return tokenizer ; }    @ Override public String toString  ( )  {  return    metric + " [" + tokenizer + "]" ; } }   static final class ForSetWithSimplifier  implements  StringMetric  {   private final  Metric  <  Set  < String > >  metric ;   private final Simplifier  simplifier ;   private final Tokenizer  tokenizer ;  ForSetWithSimplifier  (   Metric  <  Set  < String > > metric ,  Simplifier simplifier ,  Tokenizer tokenizer )  {   checkNotNull  ( metric ) ;   checkNotNull  ( simplifier ) ;   checkNotNull  ( tokenizer ) ;    this . metric = metric ;    this . simplifier = simplifier ;    this . tokenizer = tokenizer ; }    @ Override public  float compare  (  String a ,  String b )  {  return  metric . compare  (  tokenizer . tokenizeToSet  (  simplifier . simplify  ( a ) ) ,  tokenizer . tokenizeToSet  (  simplifier . simplify  ( b ) ) ) ; }   Metric  <  Set  < String > > getMetric  ( )  {  return metric ; }  Simplifier getSimplifier  ( )  {  return simplifier ; }  Tokenizer getTokenizer  ( )  {  return tokenizer ; }    @ Override public String toString  ( )  {  return      metric + " [" + simplifier + " -> " + tokenizer + "]" ; } }   static final class ForMultiset  implements  StringMetric  {   private final  Metric  <  Multiset  < String > >  metric ;   private final Tokenizer  tokenizer ;  ForMultiset  (   Metric  <  Multiset  < String > > metric ,  Tokenizer tokenizer )  {   checkNotNull  ( metric ) ;   checkNotNull  ( tokenizer ) ;    this . metric = metric ;    this . tokenizer = tokenizer ; }    @ Override public  float compare  (  String a ,  String b )  {  return  metric . compare  (  tokenizer . tokenizeToMultiset  ( a ) ,  tokenizer . tokenizeToMultiset  ( b ) ) ; }   Metric  <  Multiset  < String > > getMetric  ( )  {  return metric ; }  Tokenizer getTokenizer  ( )  {  return tokenizer ; }    @ Override public String toString  ( )  {  return    metric + " [" + tokenizer + "]" ; } }   static final class ForMultisetWithSimplifier  implements  StringMetric  {   private final  Metric  <  Multiset  < String > >  metric ;   private final Simplifier  simplifier ;   private final Tokenizer  tokenizer ;  ForMultisetWithSimplifier  (   Metric  <  Multiset  < String > > metric ,  Simplifier simplifier ,  Tokenizer tokenizer )  {   checkNotNull  ( metric ) ;   checkNotNull  ( simplifier ) ;   checkNotNull  ( tokenizer ) ;    this . metric = metric ;    this . simplifier = simplifier ;    this . tokenizer = tokenizer ; }    @ Override public  float compare  (  String a ,  String b )  {  return  metric . compare  (  tokenizer . tokenizeToMultiset  (  simplifier . simplify  ( a ) ) ,  tokenizer . tokenizeToMultiset  (  simplifier . simplify  ( b ) ) ) ; }   Metric  <  Multiset  < String > > getMetric  ( )  {  return metric ; }  Simplifier getSimplifier  ( )  {  return simplifier ; }  Tokenizer getTokenizer  ( )  {  return tokenizer ; }    @ Override public String toString  ( )  {  return      metric + " [" + simplifier + " -> " + tokenizer + "]" ; } }   static final class ForString  implements  StringMetric  {   private final  Metric  < String >  metric ;  ForString  (   Metric  < String > metric )  {    this . metric = metric ; }    @ Override public  float compare  (  String a ,  String b )  {  return  metric . compare  ( a , b ) ; }    @ Override public String toString  ( )  {  return  metric . toString  ( ) ; }   Metric  < String > getMetric  ( )  {  return metric ; } }   static final class ForStringWithSimplifier  implements  StringMetric  {   private final  Metric  < String >  metric ;   private final Simplifier  simplifier ;  ForStringWithSimplifier  (   Metric  < String > metric ,  Simplifier simplifier )  {   checkNotNull  ( metric ) ;   checkNotNull  ( simplifier ) ;    this . metric = metric ;    this . simplifier = simplifier ; }    @ Override public  float compare  (  String a ,  String b )  {  return  metric . compare  (  simplifier . simplify  ( a ) ,  simplifier . simplify  ( b ) ) ; }   Metric  < String > getMetric  ( )  {  return metric ; }  Simplifier getSimplifier  ( )  {  return simplifier ; }    @ Override public String toString  ( )  {  return    metric + " [" + simplifier + "]" ; } }   private StringMetrics  ( )  { } }