  package   org . simmetrics . simplifiers ;   import static      com . google . common . base . Joiner . on ;  import static      com . google . common . base . Preconditions . checkArgument ;  import static      com . google . common . base . Preconditions . checkNotNull ;  import static      com . google . common . collect . Lists . asList ;  import   java . text . Normalizer ;  import   java . util . ArrayList ;  import   java . util . List ;  import   java . util . Locale ;  import    java . util . regex . Matcher ;  import    java . util . regex . Pattern ;  import    org . simmetrics . builders . StringMetricBuilder ;  import     com . google . common . collect . ImmutableList ;   public final class Simplifiers  {   static final class ChainSimplifier  implements  Simplifier  {   private final  List  < Simplifier >  simplifiers ;  ChainSimplifier  (   List  < Simplifier > simplifiers )  {   checkArgument  (  !  simplifiers . contains  ( null ) ) ;    this . simplifiers =  ImmutableList . copyOf  ( simplifiers ) ; }   List  < Simplifier > getSimplifiers  ( )  {  return simplifiers ; }    @ Override public String simplify  (  String input )  {   checkNotNull  ( input ) ;  String  output = input ;  for ( Simplifier s : simplifiers )  {   output =  s . simplify  ( output ) ; }  return output ; }    @ Override public String toString  ( )  {  return   on  ( " -> " ) . join  ( simplifiers ) ; } }   static final class RemoveDiacritics  implements  Simplifier  {   private static final Pattern  DIACRITICS_AND_FRIENDS =  Pattern . compile  ( "[\\p{InCombiningDiacriticalMarks}\\p{IsLm}\\p{IsSk}]+" ) ;  RemoveDiacritics  ( )  { }    @ Override public String simplify  (  String input )  {  return   DIACRITICS_AND_FRIENDS . matcher  (  Normalizer . normalize  ( input ,   Normalizer . Form . NFD ) ) . replaceAll  ( "" ) ; }    @ Override public String toString  ( )  {  return "RemoveDiacritics" ; } }   static final class ReplaceAll  implements  Simplifier  {   private final Pattern  pattern ;   private final String  repplacement ;   public ReplaceAll  (  Pattern pattern ,  String replacement )  {   checkNotNull  ( replacement ) ;   checkNotNull  ( pattern ) ;    this . pattern = pattern ;    this . repplacement = replacement ; }    @ Override public String simplify  (  String input )  {  return   pattern . matcher  ( input ) . replaceAll  ( repplacement ) ; }    @ Override public String toString  ( )  {  return     "Replace [" + pattern + " -> '" + repplacement + "' ]" ; } }   static final class ToLowerCase  implements  Simplifier  {   private final Locale  locale ;  ToLowerCase  (  Locale locale )  {    this . locale = locale ; }    @ Override public String simplify  (  String s )  {  return  s . toLowerCase  ( locale ) ; }    @ Override public String toString  ( )  {  return   "ToLowerCase [locale=" + locale + "]" ; } }   static final class ToUpperCase  implements  Simplifier  {   private final Locale  locale ;  ToUpperCase  (  Locale locale )  {    this . locale = locale ; }    @ Override public String simplify  (  String s )  {  return  s . toUpperCase  ( locale ) ; }    @ Override public String toString  ( )  {  return   "ToUpperCase [locale=" + locale + "]" ; } }   public static Simplifier chain  (   List  < Simplifier > simplifiers )  {  if  (   simplifiers . size  ( ) == 1 )  {  return  simplifiers . get  ( 0 ) ; }  return  new ChainSimplifier  (  flatten  ( simplifiers ) ) ; }   public static Simplifier chain  (  Simplifier simplifier ,  Simplifier ...  simplifiers )  {   checkArgument  (  simplifier != null ) ;  if  (   simplifiers . length == 0 )  {  return simplifier ; }  return  chain  (  asList  ( simplifier , simplifiers ) ) ; }   private static  List  < Simplifier > flatten  (   List  < Simplifier > simplifiers )  {   final  List  < Simplifier >  flattend =  new  ArrayList  < >  (  simplifiers . size  ( ) ) ;  for ( Simplifier s : simplifiers )  {  if  (  s instanceof ChainSimplifier )  {   final ChainSimplifier  c =  ( ChainSimplifier ) s ;   flattend . addAll  (  c . getSimplifiers  ( ) ) ; } else  {   flattend . add  ( s ) ; } }  return flattend ; }   public static Simplifier removeAll  (  String regex )  {  return  removeAll  (  Pattern . compile  ( regex ) ) ; }   public static Simplifier removeAll  (  Pattern pattern )  {  return  new ReplaceAll  ( pattern , "" ) ; }   public static Simplifier removeDiacritics  ( )  {  return  new RemoveDiacritics  ( ) ; }   public static Simplifier removeNonWord  ( )  {  return  removeNonWord  ( "" ) ; }   public static Simplifier removeNonWord  (  String replacement )  {  return  removeAll  ( "\\W+" ) ; }   public static Simplifier replaceAll  (  String regex ,  String replacement )  {  return  replaceAll  (  Pattern . compile  ( regex ) , replacement ) ; }   public static Simplifier replaceAll  (  Pattern pattern ,  String replacement )  {  return  new ReplaceAll  ( pattern , replacement ) ; }   public static Simplifier replaceNonWord  ( )  {  return  replaceNonWord  ( " " ) ; }   public static Simplifier replaceNonWord  (  String replacement )  {  return  replaceAll  ( "\\W" , replacement ) ; }   public static Simplifier toLowerCase  ( )  {  return  toLowerCase  (  Locale . getDefault  ( ) ) ; }   public static Simplifier toLowerCase  (  Locale l )  {  return  new ToLowerCase  ( l ) ; }   public static Simplifier toUpperCase  ( )  {  return  toUpperCase  (  Locale . getDefault  ( ) ) ; }   public static Simplifier toUpperCase  (  Locale l )  {  return  new ToUpperCase  ( l ) ; }   private Simplifiers  ( )  { } }