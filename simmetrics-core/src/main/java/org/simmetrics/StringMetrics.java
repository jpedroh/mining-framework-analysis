  package  org . simmetrics ;   import   java . util . List ;  import    org . simmetrics . metrics . BlockDistance ;  import    org . simmetrics . metrics . CosineSimilarity ;  import    org . simmetrics . metrics . DiceSimilarity ;  import    org . simmetrics . metrics . EuclideanDistance ;  import    org . simmetrics . metrics . JaccardSimilarity ;  import    org . simmetrics . metrics . Jaro ;  import    org . simmetrics . metrics . JaroWinkler ;  import    org . simmetrics . metrics . Levenshtein ;  import    org . simmetrics . metrics . MatchingCoefficient ;  import    org . simmetrics . metrics . MongeElkan ;  import    org . simmetrics . metrics . NeedlemanWunch ;  import    org . simmetrics . metrics . OverlapCoefficient ;  import    org . simmetrics . metrics . SimonWhite ;  import    org . simmetrics . metrics . SmithWaterman ;  import    org . simmetrics . metrics . SmithWatermanGotoh ;  import    org . simmetrics . metrics . SmithWatermanGotohWindowedAffine ;  import    org . simmetrics . simplifiers . SoundexSimplifier ;  import    org . simmetrics . tokenizers . QGramExtendedTokenizer ;  import    org . simmetrics . tokenizers . QGramTokenizer ;  import    org . simmetrics . tokenizers . WhitespaceTokenizer ;  import static    org . simmetrics . StringMetricBuilder . with ;   public final class StringMetrics  {   private StringMetrics  ( )  { }   public static final   float  [ ] compare  (  StringMetric metric ,   final String c ,   final  List  < String > strings )  {   final   float  [ ]  results =  new  float  [  strings . size  ( ) ] ;   int  i = 0 ;  for ( String s : strings )  {    results [  i ++ ] =  metric . compare  ( c , s ) ; }  return results ; }   public static final   float  [ ] compare  (  StringMetric metric ,   final String c ,   final String ...  strings )  {   final   float  [ ]  results =  new  float  [  strings . length ] ;  for (   int  i = 0 ;  i <  strings . length ;  i ++ )  {    results [ i ] =  metric . compare  ( c ,  strings [ i ] ) ; }  return results ; }   public static final   float  [ ] compareArrays  (  StringMetric metric ,   final  String  [ ] a ,   final  String  [ ] b )  {  if  (   a . length !=  b . length )  {  throw  new IllegalArgumentException  ( "arrays must have the same size" ) ; }   final   float  [ ]  results =  new  float  [  a . length ] ;  for (   int  i = 0 ;  i <  a . length ;  i ++ )  {    results [ i ] =  metric . compare  (  a [ i ] ,  b [ i ] ) ; }  return results ; }   public static StringMetric blockDistance  ( )  {  return    with  (  new  BlockDistance  < String >  ( ) ) . tokenize  (  new WhitespaceTokenizer  ( ) ) . build  ( ) ; }   public static StringMetric cosineSimilarity  ( )  {  return    with  (  new  CosineSimilarity  < String >  ( ) ) . tokenize  (  new WhitespaceTokenizer  ( ) ) . build  ( ) ; }   public static StringMetric diceSimilarity  ( )  {  return    with  (  new  DiceSimilarity  < String >  ( ) ) . tokenize  (  new WhitespaceTokenizer  ( ) ) . build  ( ) ; }   public static StringMetric euclideanDistance  ( )  {  return    with  (  new  EuclideanDistance  < String >  ( ) ) . tokenize  (  new WhitespaceTokenizer  ( ) ) . build  ( ) ; }   public static StringMetric jaccardSimilarity  ( )  {  return    with  (  new  JaccardSimilarity  < String >  ( ) ) . tokenize  (  new WhitespaceTokenizer  ( ) ) . build  ( ) ; }   public static StringMetric jaro  ( )  {  return  new Jaro  ( ) ; }   public static StringMetric jaroWinkler  ( )  {  return  new JaroWinkler  ( ) ; }   public static StringMetric levenshtein  ( )  {  return  new Levenshtein  ( ) ; }   public static StringMetric matchingCoefficient  ( )  {  return    with  (  new  MatchingCoefficient  < String >  ( ) ) . tokenize  (  new WhitespaceTokenizer  ( ) ) . build  ( ) ; }   public static StringMetric mongeElkan  ( )  {  return    with  (  new MongeElkan  (  new SmithWatermanGotoh  ( ) ) ) . tokenize  (  new WhitespaceTokenizer  ( ) ) . build  ( ) ; }   public static StringMetric needlemanWunch  ( )  {  return  new NeedlemanWunch  ( ) ; }   public static StringMetric overlapCoefficient  ( )  {  return    with  (  new  OverlapCoefficient  < String >  ( ) ) . tokenize  (  new WhitespaceTokenizer  ( ) ) . build  ( ) ; }   public static StringMetric qGramsDistance  ( )  {  return    with  (  new  BlockDistance  < String >  ( ) ) . tokenize  (  new QGramExtendedTokenizer  ( 3 ) ) . build  ( ) ; }   public static StringMetric simonWhite  ( )  {  return     with  (  new  SimonWhite  < String >  ( ) ) . tokenize  (  new WhitespaceTokenizer  ( ) ) . tokenize  (  new QGramTokenizer  ( 2 ) ) . build  ( ) ; }   public static StringMetric smithWaterman  ( )  {  return  new SmithWaterman  ( ) ; }   public static StringMetric smithWatermanGotoh  ( )  {  return  new SmithWatermanGotoh  ( ) ; }   public static StringMetric smithWatermanGotohWindowedAffine  ( )  {  return  new SmithWatermanGotohWindowedAffine  ( ) ; }   public static StringMetric soundex  ( )  {  return    with  (  new JaroWinkler  ( ) ) . simplify  (  new SoundexSimplifier  ( ) ) . build  ( ) ; } }