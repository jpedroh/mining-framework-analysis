  package     org . imixs . workflow . engine . solr ;   import   java . io . StringReader ;  import   java . text . NumberFormat ;  import   java . text . SimpleDateFormat ;  import   java . util . ArrayList ;  import   java . util . List ;  import   java . util . NoSuchElementException ;  import    java . util . logging . Level ;  import    java . util . logging . Logger ;  import    jakarta . annotation . security . DeclareRoles ;  import    jakarta . annotation . security . RolesAllowed ;  import   jakarta . inject . Inject ;  import      org . eclipse . microprofile . config . inject . ConfigProperty ;  import    org . imixs . workflow . ItemCollection ;  import     org . imixs . workflow . engine . DocumentService ;  import      org . imixs . workflow . engine . index . Category ;  import      org . imixs . workflow . engine . index . DefaultOperator ;  import      org . imixs . workflow . engine . index . SchemaService ;  import      org . imixs . workflow . engine . index . SearchService ;  import      org . imixs . workflow . engine . index . SortOrder ;  import     org . imixs . workflow . exceptions . QueryException ;  import     org . imixs . workflow . util . JSONParser ;  import   jakarta . ejb . Stateless ;  import   jakarta . json . Json ;  import    jakarta . json . stream . JsonParser ;  import     jakarta . json . stream . JsonParser . Event ;    @ DeclareRoles  (  { "org.imixs.ACCESSLEVEL.NOACCESS" , "org.imixs.ACCESSLEVEL.READERACCESS" , "org.imixs.ACCESSLEVEL.AUTHORACCESS" , "org.imixs.ACCESSLEVEL.EDITORACCESS" , "org.imixs.ACCESSLEVEL.MANAGERACCESS" } )  @ RolesAllowed  (  { "org.imixs.ACCESSLEVEL.NOACCESS" , "org.imixs.ACCESSLEVEL.READERACCESS" , "org.imixs.ACCESSLEVEL.AUTHORACCESS" , "org.imixs.ACCESSLEVEL.EDITORACCESS" , "org.imixs.ACCESSLEVEL.MANAGERACCESS" } )  @ Stateless public class SolrSearchService  implements  SearchService  {   public static final  int  DEFAULT_MAX_SEARCH_RESULT = 9999 ;   public static final  int  DEFAULT_PAGE_SIZE = 100 ;    @ Inject  @ ConfigProperty  (  name = "solr.core" ,  defaultValue = "imixs-workflow" ) private String  core ;    @ Inject private SchemaService  schemaService ;    @ Inject private SolrIndexService  solarIndexService ;    @ Inject private DocumentService  documentService ;   private static Logger  logger =  Logger . getLogger  (   SolrSearchService . class . getName  ( ) ) ;   private SimpleDateFormat  luceneDateFormat =  new SimpleDateFormat  ( "yyyyMMddHHmmss" ) ;    @ Override public  List  < ItemCollection > search  (  String _searchTerm ,   int pageSize ,   int pageIndex ,  SortOrder sortOrder ,  DefaultOperator defaultOperator ,  boolean loadStubs )  throws QueryException  {  boolean  debug =  logger . isLoggable  (  Level . FINE ) ;   long  ltime =  System . currentTimeMillis  ( ) ;  if  (  pageSize <= 0 )  {   pageSize = DEFAULT_PAGE_SIZE ; }  if  (  pageIndex < 0 )  {   pageIndex = 0 ; }  if  ( debug )  {   logger . finest  (    "......solr search: pageNumber=" + pageIndex + " pageSize=" + pageSize ) ; }   ArrayList  < ItemCollection >  workitems =  new  ArrayList  < ItemCollection >  ( ) ;  String  searchTerm =  adaptSearchTerm  ( _searchTerm ) ;  if  (   searchTerm == null ||  "" . equals  ( searchTerm ) )  {  return workitems ; }  String  result =  solarIndexService . query  ( searchTerm , pageSize , pageIndex , sortOrder , defaultOperator , loadStubs ) ;  if  ( debug )  {   logger . finest  (  "......Result = " + result ) ; }  if  (   result != null &&  !  result . isEmpty  ( ) )  {   List  < ItemCollection >  documentStubs =  parseQueryResult  ( result ) ;  if  ( loadStubs )  {   workitems . addAll  ( documentStubs ) ; } else  {  for ( ItemCollection stub : documentStubs )  {  ItemCollection  document =  documentService . load  (  stub . getUniqueID  ( ) ) ;  if  (  document != null )  {   workitems . add  ( document ) ; } } } }  if  ( debug )  {   logger . fine  (    "...search result computed in " +  (   System . currentTimeMillis  ( ) - ltime ) + " ms - loadStubs=" + loadStubs ) ; }  return workitems ; }    @ Override public  int getTotalHits  (   final String _searchTerm ,   final  int _maxResult ,   final DefaultOperator defaultOperator )  throws QueryException  {   long  l =  System . currentTimeMillis  ( ) ;   int  hits = 0 ;  String  searchTerm =  adaptSearchTerm  ( _searchTerm ) ;  if  (   searchTerm == null ||  "" . equals  ( searchTerm ) )  {  return 0 ; }  String  result =  solarIndexService . query  ( searchTerm , 0 , 0 , null , defaultOperator , true ) ;  try  {  String  response =  JSONParser . getKey  ( "response" , result ) ;   hits =  Integer . parseInt  (  JSONParser . getKey  ( "numFound" , response ) ) ; }  catch (   NumberFormatException e )  {   logger . severe  (  "getTotalHits - failed to parse solr result object! - " +  e . getMessage  ( ) ) ;   hits = 0 ; }   logger . info  (   "......computed totalHits in " +  (   System . currentTimeMillis  ( ) - l ) + "ms" ) ;  return hits ; }   public  List  < Category > getTaxonomy  (  String ...  categories )  {   logger . warning  ( "method getTaxonomy not implemented" ) ;  return null ; }   protected  List  < ItemCollection > parseQueryResult  (  String json )  {  boolean  debug =  logger . isLoggable  (  Level . FINE ) ;   long  l =  System . currentTimeMillis  ( ) ;   List  < ItemCollection >  result =  new  ArrayList  < ItemCollection >  ( ) ;  JsonParser  parser =  Json . createParser  (  new StringReader  ( json ) ) ;  Event  event = null ;  while  ( true )  {  try  {   event =  parser . next  ( ) ;  if  (  event == null )  {  break ; }  if  (   event . name  ( ) . equals  (   Event . KEY_NAME . toString  ( ) ) )  {  String  jsonkey =  parser . getString  ( ) ;  if  (  "docs" . equals  ( jsonkey ) )  {   event =  parser . next  ( ) ;  if  (   event . name  ( ) . equals  (   Event . START_ARRAY . toString  ( ) ) )  {   event =  parser . next  ( ) ;  while  (   event . name  ( ) . equals  (   Event . START_OBJECT . toString  ( ) ) )  {  if  ( debug )  {   logger . finest  ( "......parse doc...." ) ; }  ItemCollection  itemCol =  parseDoc  ( parser ) ;   result . add  ( itemCol ) ;   event =  parser . next  ( ) ; }  if  (   event . name  ( ) . equals  (   Event . END_ARRAY . toString  ( ) ) )  {  break ; } } } } }  catch (   NoSuchElementException e )  {  break ; } }  if  ( debug )  {   logger . finest  (   "......total parsing time " +  (   System . currentTimeMillis  ( ) - l ) + "ms" ) ; }  return result ; }   private ItemCollection parseDoc  (  JsonParser parser )  {  boolean  debug =  logger . isLoggable  (  Level . FINE ) ;  ItemCollection  document =  new ItemCollection  ( ) ;  Event  event = null ;   event =  parser . next  ( ) ;  while  (   event . name  ( ) . equals  (   Event . KEY_NAME . toString  ( ) ) )  {  String  itemName =  parser . getString  ( ) ;  if  ( debug )  {   logger . finest  (  "......found item " + itemName ) ; }   List  <  ? >  itemValue =  parseItem  ( parser ) ;   itemName =  solarIndexService . adaptSolrFieldName  ( itemName ) ;   document . replaceItemValue  ( itemName , itemValue ) ;   event =  parser . next  ( ) ; }  return document ; }   private  List  < Object > parseItem  (  JsonParser parser )  {   List  < Object >  result =  new  ArrayList  < Object >  ( ) ;  Event  event = null ;  while  ( true )  {   event =  parser . next  ( ) ;  if  (   event . name  ( ) . equals  (   Event . START_ARRAY . toString  ( ) ) )  {  while  ( true )  {   event =  parser . next  ( ) ;  if  (   event . name  ( ) . equals  (   Event . VALUE_STRING . toString  ( ) ) )  {   result . add  (  convertLuceneValue  (  parser . getString  ( ) ) ) ; }  if  (   event . name  ( ) . equals  (   Event . VALUE_NUMBER . toString  ( ) ) )  {   result . add  (  convertLuceneValue  (  parser . getString  ( ) ) ) ; }  if  (   event . name  ( ) . equals  (   Event . VALUE_TRUE . toString  ( ) ) )  {   result . add  ( true ) ; }  if  (   event . name  ( ) . equals  (   Event . VALUE_FALSE . toString  ( ) ) )  {   result . add  ( false ) ; }  if  (   event . name  ( ) . equals  (   Event . END_ARRAY . toString  ( ) ) )  {  break ; } } }  if  (   event . name  ( ) . equals  (   Event . VALUE_STRING . toString  ( ) ) )  {   result . add  (  parser . getString  ( ) ) ; }  if  (   event . name  ( ) . equals  (   Event . VALUE_NUMBER . toString  ( ) ) )  {   result . add  (  parser . getBigDecimal  ( ) ) ; }  if  (   event . name  ( ) . equals  (   Event . VALUE_TRUE . toString  ( ) ) )  {   result . add  ( true ) ; }  if  (   event . name  ( ) . equals  (   Event . VALUE_FALSE . toString  ( ) ) )  {   result . add  ( false ) ; }  break ; }  return result ; }   private Object convertLuceneValue  (  String stringValue )  {  Object  objectValue = null ;  if  (  isNumeric  ( stringValue ) )  {  if  (    stringValue . length  ( ) == 14 &&  !  stringValue . contains  ( "." ) )  {  try  {   objectValue =  luceneDateFormat . parse  ( stringValue ) ; }  catch (     java . text . ParseException e )  { } }  if  (  objectValue == null )  {  try  {  Number  number =   NumberFormat . getInstance  ( ) . parse  ( stringValue ) ;   objectValue = number ; }  catch (     java . text . ParseException e )  { } } }  if  (  objectValue == null )  {   objectValue = stringValue ; }  return objectValue ; }   private static boolean isNumeric  (  String str )  {  boolean  dot = false ;  if  (   str == null ||  str . isEmpty  ( ) )  {  return false ; }  for (  char c :  str . toCharArray  ( ) )  {  if  (   c == '.' &&  dot == false )  {   dot = true ;  continue ; }  if  (   c < '0' ||  c > '9' )  {  return false ; } }  return true ; }   private String adaptSearchTerm  (  String _serachTerm )  throws QueryException  {  if  (   _serachTerm == null ||  "" . equals  ( _serachTerm ) )  {  return _serachTerm ; }  String  searchTerm =  schemaService . getExtendedSearchTerm  ( _serachTerm ) ;   searchTerm =  adaptQueryFieldNames  ( searchTerm ) ;  return searchTerm ; }   private String adaptQueryFieldNames  (  String _query )  {  String  result = _query ;  if  (  schemaService == null )  {  return result ; }  if  (   _query == null ||  !  _query . contains  ( "$" ) )  {  return result ; }  for ( String imixsItemName :  schemaService . getUniqueFieldList  ( ) )  {  if  (   imixsItemName . charAt  ( 0 ) == '$' )  {  while  (  result . contains  (  imixsItemName + ":" ) )  {  String  solrField =  "_" +  imixsItemName . substring  ( 1 ) ;   result =  result . replace  (  imixsItemName + ":" ,  solrField + ":" ) ; } } }  return result ; }    @ Override public  List  < Category > getTaxonomyByQuery  (  String searchTerm ,  String ...  categories )  {   logger . warning  ( "method getTaxonomy not implemented" ) ;  return null ; } }