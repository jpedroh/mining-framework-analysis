  package       org . apache . roller . weblogger . ui . struts2 . admin ;   import  java . util .  * ;  import    javax . servlet . http . HttpServletRequest ;  import     org . apache . commons . lang3 . StringUtils ;  import     org . apache . commons . logging . Log ;  import     org . apache . commons . logging . LogFactory ;  import     org . apache . roller . weblogger . WebloggerException ;  import      org . apache . roller . weblogger . business . PropertiesManager ;  import      org . apache . roller . weblogger . business . WeblogManager ;  import      org . apache . roller . weblogger . business . WebloggerFactory ;  import       org . apache . roller . weblogger . business . plugins . PluginManager ;  import        org . apache . roller . weblogger . business . plugins . comment . WeblogEntryCommentPlugin ;  import      org . apache . roller . weblogger . config . WebloggerRuntimeConfig ;  import       org . apache . roller . weblogger . config . runtime . ConfigDef ;  import       org . apache . roller . weblogger . config . runtime . PropertyDef ;  import       org . apache . roller . weblogger . config . runtime . RuntimeConfigDefs ;  import      org . apache . roller . weblogger . pojos . GlobalPermission ;  import      org . apache . roller . weblogger . pojos . RuntimeConfigProperty ;  import      org . apache . roller . weblogger . pojos . Weblog ;  import        org . apache . roller . weblogger . ui . struts2 . util . UIAction ;  import      org . apache . roller . weblogger . util . Utilities ;  import     org . apache . struts2 . interceptor . ParameterAware ;  import     org . apache . struts2 . interceptor . ServletRequestAware ;   public class GlobalConfig  extends UIAction  implements  ParameterAware , ServletRequestAware  {   private static Log  log =  LogFactory . getLog  (  GlobalConfig . class ) ;   private  Map  < String ,  String  [ ] >  params =  Collections . emptyMap  ( ) ;   private  Map  < String , RuntimeConfigProperty >  properties =  Collections . emptyMap  ( ) ;   private ConfigDef  globalConfigDef = null ;   private  List  < WeblogEntryCommentPlugin >  pluginsList =  Collections . emptyList  ( ) ;   private  String  [ ]  commentPlugins =  new String  [ 0 ] ;   private String  httpMethod = "GET" ;   private ResourceBundle  bundle =  ResourceBundle . getBundle  ( "ApplicationResources" ) ;   private  Collection  < Weblog >  weblogs ;   public GlobalConfig  ( )  {    this . actionName = "globalConfig" ;    this . desiredMenu = "admin" ;    this . pageTitle = "configForm.title" ; }    @ Override public boolean isWeblogRequired  ( )  {  return false ; }    @ Override public  List  < String > requiredGlobalPermissionActions  ( )  {  return  Collections . singletonList  (  GlobalPermission . ADMIN ) ; }    @ Override public void myPrepare  ( )  {  try  {  PropertiesManager  mgr =   WebloggerFactory . getWeblogger  ( ) . getPropertiesManager  ( ) ;   setProperties  (  mgr . getProperties  ( ) ) ; }  catch (   WebloggerException ex )  {   log . error  ( "Error getting runtime properties map" , ex ) ;   addError  ( "Unexpected error accessing Roller properties" ) ; }  try  {  WeblogManager  mgr =   WebloggerFactory . getWeblogger  ( ) . getWeblogManager  ( ) ;   setWeblogs  (  mgr . getWeblogs  ( true , null , null , null , 0 ,  - 1 ) ) ; }  catch (   WebloggerException ex )  {   log . error  ( "Error getting weblogs" , ex ) ;   addError  ( "frontpageConfig.weblogs.error" ) ; }  RuntimeConfigDefs  defs =  WebloggerRuntimeConfig . getRuntimeConfigDefs  ( ) ;   List  < ConfigDef >  configDefs =  defs . getConfigDefs  ( ) ;  for ( ConfigDef configDef : configDefs )  {  if  (  "global-properties" . equals  (  configDef . getName  ( ) ) )  {   setGlobalConfigDef  ( configDef ) ; } }  PluginManager  pmgr =   WebloggerFactory . getWeblogger  ( ) . getPluginManager  ( ) ;   setPluginsList  (  pmgr . getCommentPlugins  ( ) ) ; }    @ Override public String execute  ( )  {  if  (  !  StringUtils . isEmpty  (  WebloggerRuntimeConfig . getProperty  ( "users.comments.plugins" ) ) )  {   setCommentPlugins  (  StringUtils . split  (  WebloggerRuntimeConfig . getProperty  ( "users.comments.plugins" ) , "," ) ) ; }  return SUCCESS ; }   public String save  ( )  {  if  (  !  "POST" . equals  ( httpMethod ) )  {  return ERROR ; }  RuntimeConfigProperty  updProp ;  String  incomingProp ;  for ( String propName :   getProperties  ( ) . keySet  ( ) )  {   updProp =   getProperties  ( ) . get  ( propName ) ;   incomingProp =  this . getParameter  (  updProp . getName  ( ) ) ;  PropertyDef  propertyDef =  globalConfigDef . getPropertyDef  ( propName ) ;  if  (  propertyDef == 
<<<<<<<
null
=======
 (      updProp . getValue  ( ) . equals  ( "true" ) ||   updProp . getValue  ( ) . equals  ( "false" ) ||   updProp . getValue  ( ) . equals  ( "on" ) ||   updProp . getValue  ( ) . equals  ( "off" ) )
>>>>>>>
 )  { 
<<<<<<<
 continue ;
=======
 if  (   incomingProp != null &&  (   incomingProp . equalsIgnoreCase  ( "true" ) ||  incomingProp . equalsIgnoreCase  ( "on" ) ) )  {   incomingProp = "true" ; } else  {   incomingProp = "false" ; }
>>>>>>>
 }  if  (   propertyDef . getType  ( ) . equals  ( "boolean" ) )  {  try  {   Boolean . parseBoolean  ( incomingProp ) ;   updProp . setValue  ( incomingProp ) ;   log . debug  (    "Set boolean " + propName + " = " + incomingProp ) ; }  catch (   Exception nfe )  {  String  propDesc =  bundle . getString  (  propertyDef . getKey  ( ) ) ;   addError  ( "ConfigForm.invalidBooleanProperty" ,  Arrays . asList  (  new Object  [ ]  { propDesc , propName } ) ) ; } } else  if  (   propertyDef . getType  ( ) . equals  ( "integer" ) )  {  try  {   Integer . parseInt  ( incomingProp ) ;   updProp . setValue  ( incomingProp ) ;   log . debug  (    "Set integer " + propName + " = " + incomingProp ) ; }  catch (   NumberFormatException nfe )  {  String  propDesc =  bundle . getString  (  propertyDef . getKey  ( ) ) ;   addError  ( "ConfigForm.invalidIntegerProperty" ,  Arrays . asList  (  new Object  [ ]  { propDesc , propName } ) ) ; } } else  if  (   propertyDef . getType  ( ) . equals  ( "float" ) )  {  try  {   Float . parseFloat  ( incomingProp ) ;   updProp . setValue  ( incomingProp ) ;   log . debug  (    "Set float " + propName + " = " + incomingProp ) ; }  catch (   NumberFormatException nfe )  {  String  propDesc =  bundle . getString  (  propertyDef . getKey  ( ) ) ;   addError  ( "ConfigForm.invalidFloatProperty" ,  Arrays . asList  (  new Object  [ ]  { propDesc , propName } ) ) ; } } else  if  (  incomingProp != null )  {   updProp . setValue  (  incomingProp . trim  ( ) ) ;   log . debug  (    "Set something " + propName + " = " + incomingProp ) ; } else  if  (   propertyDef . getName  ( ) . equals  ( "users.comments.plugins" ) )  { } else  {   addError  ( "ConfigForm.invalidProperty" , propName ) ; } }  if  (  this . hasActionErrors  ( ) )  {  return ERROR ; }  String  enabledPlugins = "" ;  if  (    getCommentPlugins  ( ) . length > 0 )  {   enabledPlugins =  StringUtils . join  (  getCommentPlugins  ( ) , "," ) ; }  RuntimeConfigProperty  prop =   getProperties  ( ) . get  ( "users.comments.plugins" ) ;   prop . setValue  ( enabledPlugins ) ;  try  {  PropertiesManager  mgr =   WebloggerFactory . getWeblogger  ( ) . getPropertiesManager  ( ) ;   mgr . saveProperties  (  getProperties  ( ) ) ;    WebloggerFactory . getWeblogger  ( ) . flush  ( ) ;   addMessage  ( "generic.changes.saved" ) ; }  catch (   WebloggerException ex )  {   log . error  ( "Error saving roller properties" , ex ) ;   addError  ( "generic.error.check.logs" ) ; }  return SUCCESS ; }   public void setParameters  (   Map  < String ,  String  [ ] > parameters )  {    this . params = parameters ;  if  (  log . isDebugEnabled  ( ) )  {   log . debug  ( "Parameter map:" ) ;  for (   Map . Entry  < String ,  String  [ ] > entry :  parameters . entrySet  ( ) )  {   log . debug  (    entry . getKey  ( ) + " = " +  Utilities . stringArrayToString  (  entry . getValue  ( ) , "," ) ) ; } } }   private String getParameter  (  String key )  {   String  [ ]  p =   this . params . get  ( key ) ;  if  (   p != null &&   p . length > 0 )  {  return  p [ 0 ] ; }  return null ; }   public  Map  < String , RuntimeConfigProperty > getProperties  ( )  {  return properties ; }   public void setProperties  (   Map  < String , RuntimeConfigProperty > properties )  {    this . properties = properties ;  for (   Map . Entry  < String , RuntimeConfigProperty > entry :  properties . entrySet  ( ) )  {   log . debug  (    "Got " +  entry . getKey  ( ) + " = " +   entry . getValue  ( ) . getValue  ( ) ) ; } }   public ConfigDef getGlobalConfigDef  ( )  {  return globalConfigDef ; }   public void setGlobalConfigDef  (  ConfigDef globalConfigDef )  {    this . globalConfigDef = globalConfigDef ; }   public  List  < WeblogEntryCommentPlugin > getPluginsList  ( )  {  return pluginsList ; }   public void setPluginsList  (   List  < WeblogEntryCommentPlugin > pluginsList )  {    this . pluginsList = pluginsList ; }   public  String  [ ] getCommentPlugins  ( )  {  return  commentPlugins . clone  ( ) ; }   public void setCommentPlugins  (   String  [ ] commentPlugins )  {    this . commentPlugins =  commentPlugins . clone  ( ) ; }   public void setServletRequest  (  HttpServletRequest req )  {   httpMethod =  req . getMethod  ( ) ; }   public  Collection  < Weblog > getWeblogs  ( )  {  return weblogs ; }   public void setWeblogs  (   Collection  < Weblog > weblogs )  {    this . weblogs = weblogs ; } }