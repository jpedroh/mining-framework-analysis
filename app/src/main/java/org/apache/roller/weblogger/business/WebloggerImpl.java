  package     org . apache . roller . weblogger . business ;   import     org . apache . commons . logging . Log ;  import     org . apache . commons . logging . LogFactory ;  import      org . apache . roller . planet . business . PlanetManager ;  import       org . apache . roller . planet . business . fetcher . FeedFetcher ;  import     org . apache . roller . weblogger . WebloggerException ;  import       org . apache . roller . weblogger . business . pings . AutoPingManager ;  import       org . apache . roller . weblogger . business . pings . PingQueueManager ;  import       org . apache . roller . weblogger . business . pings . PingTargetManager ;  import       org . apache . roller . weblogger . business . plugins . PluginManager ;  import       org . apache . roller . weblogger . business . runnable . ThreadManager ;  import       org . apache . roller . weblogger . business . search . IndexManager ;  import       org . apache . roller . weblogger . business . themes . ThemeManager ;  import      org . apache . roller . weblogger . config . PingConfig ;  import   java . io . IOException ;  import   java . util . Properties ;  import      org . apache . roller . weblogger . config . WebloggerConfig ;  import      org . apache . roller . weblogger . config . WebloggerRuntimeConfig ;  import     org . apache . xmlrpc . util . SAXParsers ;  import      org . springframework . security . access . method . P ;  import    org . xml . sax . SAXNotRecognizedException ;  import    org . xml . sax . SAXNotSupportedException ;  import    javax . xml . parsers . ParserConfigurationException ;  import    javax . xml . parsers . SAXParserFactory ;    @    com . google . inject . Singleton public abstract class WebloggerImpl  implements  Weblogger  {   private static Log  log =  LogFactory . getLog  (  WebloggerImpl . class ) ;   private final AutoPingManager  autoPingManager ;   private final BookmarkManager  bookmarkManager ;   private final IndexManager  indexManager ;   private final MediaFileManager  mediaFileManager ;   private final FileContentManager  fileContentManager ;   private final PingQueueManager  pingQueueManager ;   private final PingTargetManager  pingTargetManager ;   private final PluginManager  pluginManager ;   private final PropertiesManager  propertiesManager ;   private final ThemeManager  themeManager ;   private final ThreadManager  threadManager ;   private final UserManager  userManager ;   private final WeblogManager  weblogManager ;   private final WeblogEntryManager  weblogEntryManager ;   private final OAuthManager  oauthManager ;   private final FeedFetcher  feedFetcher ;   private final PlanetManager  planetManager ;   private final URLStrategy  urlStrategy ;   private final      org . apache . roller . planet . business . PlanetURLStrategy  planetUrlStrategy ;   private final String  version ;   private final String  revision ;   private final String  buildTime ;   private final String  buildUser ;   protected WebloggerImpl  (  AutoPingManager autoPingManager ,  BookmarkManager bookmarkManager ,  IndexManager indexManager ,  MediaFileManager mediaFileManager ,  FileContentManager fileContentManager ,  PingQueueManager pingQueueManager ,  PingTargetManager pingTargetManager ,  PluginManager pluginManager ,  PropertiesManager propertiesManager ,  ThemeManager themeManager ,  ThreadManager threadManager ,  UserManager userManager ,  WeblogManager weblogManager ,  WeblogEntryManager weblogEntryManager ,  OAuthManager oauthManager ,  FeedFetcher feedFetcher ,  PlanetManager planetManager ,       org . apache . roller . planet . business . PlanetURLStrategy planetUrlStrategy ,  URLStrategy urlStrategy )  throws WebloggerException  {    this . autoPingManager = autoPingManager ;    this . bookmarkManager = bookmarkManager ;    this . indexManager = indexManager ;    this . mediaFileManager = mediaFileManager ;    this . fileContentManager = fileContentManager ;    this . pingQueueManager = pingQueueManager ;    this . pingTargetManager = pingTargetManager ;    this . pluginManager = pluginManager ;    this . propertiesManager = propertiesManager ;    this . themeManager = themeManager ;    this . threadManager = threadManager ;    this . userManager = userManager ;    this . weblogManager = weblogManager ;    this . weblogEntryManager = weblogEntryManager ;    this . oauthManager = oauthManager ;    this . urlStrategy = urlStrategy ;    this . feedFetcher = feedFetcher ;    this . planetManager = planetManager ;    this . planetUrlStrategy = planetUrlStrategy ;  Properties  props =  new Properties  ( ) ;  try  {   props . load  (   getClass  ( ) . getResourceAsStream  ( "/roller-version.properties" ) ) ; }  catch (   IOException e )  {   log . error  ( "roller-version.properties not found" , e ) ; }   version =  props . getProperty  ( "ro.version" , "UNKNOWN" ) ;   revision =  props . getProperty  ( "ro.revision" , "UNKNOWN" ) ;   buildTime =  props . getProperty  ( "ro.buildTime" , "UNKNOWN" ) ;   buildUser =  props . getProperty  ( "ro.buildUser" , "UNKNOWN" ) ; }   public ThreadManager getThreadManager  ( )  {  return threadManager ; }   public IndexManager getIndexManager  ( )  {  return indexManager ; }   public ThemeManager getThemeManager  ( )  {  return themeManager ; }   public UserManager getUserManager  ( )  {  return userManager ; }   public BookmarkManager getBookmarkManager  ( )  {  return bookmarkManager ; }   public MediaFileManager getMediaFileManager  ( )  {  return mediaFileManager ; }   public FileContentManager getFileContentManager  ( )  {  return fileContentManager ; }   public WeblogEntryManager getWeblogEntryManager  ( )  {  return weblogEntryManager ; }   public WeblogManager getWeblogManager  ( )  {  return weblogManager ; }   public PropertiesManager getPropertiesManager  ( )  {  return propertiesManager ; }   public PingQueueManager getPingQueueManager  ( )  {  return pingQueueManager ; }   public AutoPingManager getAutopingManager  ( )  {  return autoPingManager ; }   public PingTargetManager getPingTargetManager  ( )  {  return pingTargetManager ; }   public PluginManager getPluginManager  ( )  {  return pluginManager ; }   public OAuthManager getOAuthManager  ( )  {  return oauthManager ; }   public URLStrategy getUrlStrategy  ( )  {  return urlStrategy ; }   public FeedFetcher getFeedFetcher  ( )  {  return feedFetcher ; }   public PlanetManager getPlanetManager  ( )  {  return planetManager ; }   public      org . apache . roller . planet . business . PlanetURLStrategy getPlanetURLStrategy  ( )  {  return planetUrlStrategy ; }   public void release  ( )  {  try  {   autoPingManager . release  ( ) ;   bookmarkManager . release  ( ) ;   mediaFileManager . release  ( ) ;   fileContentManager . release  ( ) ;   pingTargetManager . release  ( ) ;   pingQueueManager . release  ( ) ;   pluginManager . release  ( ) ;   threadManager . release  ( ) ;   userManager . release  ( ) ;   weblogManager . release  ( ) ; }  catch (   Exception e )  {   log . error  ( "Error calling Roller.release()" , e ) ; } }   public void initialize  ( )  throws InitializationException  {   log . info  ( "Initializing Roller Weblogger business tier" ) ;    getPropertiesManager  ( ) . initialize  ( ) ;    getThemeManager  ( ) . initialize  ( ) ;    getThreadManager  ( ) . initialize  ( ) ;    getIndexManager  ( ) . initialize  ( ) ;    getMediaFileManager  ( ) . initialize  ( ) ;  SAXParserFactory  spf =  SAXParsers . getSAXParserFactory  ( ) ;  try  {   spf . setFeature  ( "http://apache.org/xml/features/disallow-doctype-decl" , true ) ;   spf . setFeature  ( "http://apache.org/xml/features/nonvalidating/load-external-dtd" , false ) ; }  catch (   ParserConfigurationException | SAXNotRecognizedException | SAXNotSupportedException e )  {  String  message = "Unable to turn off External DTD support in SAXParser. XML-RLC is vulnerable" ;  if  (  log . isDebugEnabled  ( ) )  {   log . error  ( message , e ) ; } else  {   log . error  ( message ) ; } }  try  {   PingConfig . initializeCommonTargets  ( ) ;   PingConfig . initializePingVariants  ( ) ;  if  (  PingConfig . getDisablePingUsage  ( ) )  {   log . info  ( "Ping usage has been disabled.  Removing any existing auto ping configurations." ) ;     WebloggerFactory . getWeblogger  ( ) . getAutopingManager  ( ) . removeAllAutoPings  ( ) ; } }  catch (   Exception e )  {  throw  new InitializationException  ( "Error initializing ping systems" , e ) ; }  try  {   flush  ( ) ; }  catch (   WebloggerException ex )  {  throw  new InitializationException  ( "Error flushing after initialization" , ex ) ; }   log . info  ( "Roller Weblogger business tier successfully initialized" ) ; }   public void shutdown  ( )  {  try  {    HitCountQueue . getInstance  ( ) . shutdown  ( ) ;  if  (  indexManager != null )  {   indexManager . shutdown  ( ) ; }  if  (  threadManager != null )  {   threadManager . shutdown  ( ) ; } }  catch (   Exception e )  {   log . error  ( "Error calling Roller.shutdown()" , e ) ; } }   public String getVersion  ( )  {  return version ; }   public String getRevision  ( )  {  return revision ; }   public String getBuildTime  ( )  {  return buildTime ; }   public String getBuildUser  ( )  {  return buildUser ; } }