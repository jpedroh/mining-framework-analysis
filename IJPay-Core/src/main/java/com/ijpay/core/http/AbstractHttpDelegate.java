  package    com . ijpay . core . http ;   import     cn . hutool . core . io . FileUtil ;  import     cn . hutool . core . net . SSLContextBuilder ;  import     cn . hutool . core . net . SSLProtocols ;  import    cn . hutool . http . HttpRequest ;  import    cn . hutool . http . HttpResponse ;  import    cn . hutool . http . HttpUtil ;  import    com . ijpay . core . IJPayHttpResponse ;  import    javax . net . ssl . KeyManager ;  import    javax . net . ssl . KeyManagerFactory ;  import    javax . net . ssl . SSLSocketFactory ;  import   java . io . File ;  import   java . io . InputStream ;  import   java . net . Proxy ;  import    java . nio . file . Files ;  import    java . nio . file . Paths ;  import   java . security . KeyStore ;  import   java . security . SecureRandom ;  import   java . util . Map ;  import    cn . hutool . http . HttpInterceptor ;   public abstract class AbstractHttpDelegate  {   public Proxy getProxy  ( )  {  return null ; }   public String get  (  String url )  {  return  HttpUtil . get  ( url ) ; }   public String get  (  String url ,   Map  < String , Object > paramMap )  {  return  HttpUtil . get  ( url , paramMap ) ; }   public IJPayHttpResponse get  (  String url ,   Map  < String , Object > paramMap ,   Map  < String , String > headers )  {  IJPayHttpResponse  response =  new IJPayHttpResponse  ( ) ;  HttpResponse  httpResponse =  getToResponse  ( url , paramMap , headers ) ;  if  (  httpResponse . isGzip  ( ) )  {   response . setBodyByte  (  httpResponse . bodyBytes  ( ) ) ; } else  {   response . setBody  (  httpResponse . body  ( ) ) ; }   response . setStatus  (  httpResponse . getStatus  ( ) ) ;   response . setHeaders  (  httpResponse . headers  ( ) ) ;  return response ; }   public String post  (  String url ,  String data )  {  return  HttpUtil . post  ( url , data ) ; }   public String post  (  String url ,   Map  < String , Object > paramMap )  {  return  HttpUtil . post  ( url , paramMap ) ; }   public IJPayHttpResponse post  (  String url ,   Map  < String , Object > paramMap ,   Map  < String , String > headers )  {  IJPayHttpResponse  response =  new IJPayHttpResponse  ( ) ;  HttpResponse  httpResponse =  postToResponse  ( url , headers , paramMap ) ;   response . setBody  (  httpResponse . body  ( ) ) ;   response . setStatus  (  httpResponse . getStatus  ( ) ) ;   response . setHeaders  (  httpResponse . headers  ( ) ) ;  return response ; }   public IJPayHttpResponse post  (  String url ,  String data ,   Map  < String , String > headers )  {  IJPayHttpResponse  response =  new IJPayHttpResponse  ( ) ;  HttpResponse  httpResponse =  postToResponse  ( url , headers , data ) ;   response . setBody  (  httpResponse . body  ( ) ) ;   response . setStatus  (  httpResponse . getStatus  ( ) ) ;   response . setHeaders  (  httpResponse . headers  ( ) ) ;  return response ; }   public IJPayHttpResponse patch  (  String url ,   Map  < String , Object > paramMap ,   Map  < String , String > headers )  {  IJPayHttpResponse  response =  new IJPayHttpResponse  ( ) ;  HttpResponse  httpResponse =  patchToResponse  ( url , headers , paramMap ) ;   response . setBody  (  httpResponse . body  ( ) ) ;   response . setStatus  (  httpResponse . getStatus  ( ) ) ;   response . setHeaders  (  httpResponse . headers  ( ) ) ;  return response ; }   public IJPayHttpResponse patch  (  String url ,  String data ,   Map  < String , String > headers )  {  IJPayHttpResponse  response =  new IJPayHttpResponse  ( ) ;  HttpResponse  httpResponse =  patchToResponse  ( url , headers , data ) ;   response . setBody  (  httpResponse . body  ( ) ) ;   response . setStatus  (  httpResponse . getStatus  ( ) ) ;   response . setHeaders  (  httpResponse . headers  ( ) ) ;  return response ; }   public IJPayHttpResponse delete  (  String url ,   Map  < String , Object > paramMap ,   Map  < String , String > headers )  {  IJPayHttpResponse  response =  new IJPayHttpResponse  ( ) ;  HttpResponse  httpResponse =  deleteToResponse  ( url , headers , paramMap ) ;   response . setBody  (  httpResponse . body  ( ) ) ;   response . setStatus  (  httpResponse . getStatus  ( ) ) ;   response . setHeaders  (  httpResponse . headers  ( ) ) ;  return response ; }   public IJPayHttpResponse delete  (  String url ,  String data ,   Map  < String , String > headers )  {  IJPayHttpResponse  response =  new IJPayHttpResponse  ( ) ;  HttpResponse  httpResponse =  deleteToResponse  ( url , headers , data ) ;   response . setBody  (  httpResponse . body  ( ) ) ;   response . setStatus  (  httpResponse . getStatus  ( ) ) ;   response . setHeaders  (  httpResponse . headers  ( ) ) ;  return response ; }   public IJPayHttpResponse put  (  String url ,   Map  < String , Object > paramMap ,   Map  < String , String > headers )  {  IJPayHttpResponse  response =  new IJPayHttpResponse  ( ) ;  HttpResponse  httpResponse =  putToResponse  ( url , headers , paramMap ) ;   response . setBody  (  httpResponse . body  ( ) ) ;   response . setStatus  (  httpResponse . getStatus  ( ) ) ;   response . setHeaders  (  httpResponse . headers  ( ) ) ;  return response ; }   public IJPayHttpResponse put  (  String url ,  String data ,   Map  < String , String > headers )  {  IJPayHttpResponse  response =  new IJPayHttpResponse  ( ) ;  HttpResponse  httpResponse =  putToResponse  ( url , headers , data ) ;   response . setBody  (  httpResponse . body  ( ) ) ;   response . setStatus  (  httpResponse . getStatus  ( ) ) ;   response . setHeaders  (  httpResponse . headers  ( ) ) ;  return response ; }   public String upload  (  String url ,  String data ,  String certPath ,  String certPass ,  String filePath ,  String protocol )  {  try  {  File  file =  FileUtil . newFile  ( filePath ) ;  SSLSocketFactory  sslSocketFactory =  getSslSocketFactory  ( certPath , null , certPass , protocol ) ;  return         HttpRequest . post  ( url ) . setProxy  (  getProxy  ( ) ) . setSSLSocketFactory  ( sslSocketFactory ) . header  ( "Content-Type" , "multipart/form-data;boundary=\"boundary\"" ) . form  ( "file" , file ) . form  ( "meta" , data ) . execute  ( ) . body  ( ) ; }  catch (   Exception e )  {  throw  new RuntimeException  ( e ) ; } }   public String upload  (  String url ,  String data ,  String certPath ,  String certPass ,  String filePath )  {  return  upload  ( url , data , certPath , certPass , filePath ,  SSLProtocols . TLSv1 ) ; }   public String post  (  String url ,  String data ,  String certPath ,  String certPass ,  String protocol )  {  try  {  SSLSocketFactory  socketFactory =  getSslSocketFactory  ( certPath , null , certPass , protocol ) ;  return       HttpRequest . post  ( url ) . setProxy  (  getProxy  ( ) ) . setSSLSocketFactory  ( socketFactory ) . body  ( data ) . execute  ( ) . body  ( ) ; }  catch (   Exception e )  {  throw  new RuntimeException  ( e ) ; } }   public String post  (  String url ,  String data ,  String certPath ,  String certPass )  {  return  post  ( url , data , certPath , certPass ,  SSLProtocols . TLSv1 ) ; }   public String post  (  String url ,  String data ,  InputStream certFile ,  String certPass ,  String protocol )  {  try  {  SSLSocketFactory  sslSocketFactory =  getSslSocketFactory  ( null , certFile , certPass , protocol ) ;  return       HttpRequest . post  ( url ) . setProxy  (  getProxy  ( ) ) . setSSLSocketFactory  ( sslSocketFactory ) . body  ( data ) . execute  ( ) . body  ( ) ; }  catch (   Exception e )  {  throw  new RuntimeException  ( e ) ; } }   public String post  (  String url ,  String data ,  InputStream certFile ,  String certPass )  {  return  post  ( url , data , certFile , certPass ,  SSLProtocols . TLSv1 ) ; }   private HttpResponse getToResponse  (  String url ,   Map  < String , Object > paramMap ,   Map  < String , String > headers )  {  return      HttpRequest . get  ( url ) . setProxy  (  getProxy  ( ) ) . addHeaders  ( headers ) . form  ( paramMap ) . execute  ( ) ; }   private HttpResponse postToResponse  (  String url ,   Map  < String , String > headers ,  String data )  {  return      HttpRequest . post  ( url ) . setProxy  (  getProxy  ( ) ) . addHeaders  ( headers ) . body  ( data ) . execute  ( ) ; }   private HttpResponse postToResponse  (  String url ,   Map  < String , String > headers ,   Map  < String , Object > paramMap )  {  return      HttpRequest . post  ( url ) . setProxy  (  getProxy  ( ) ) . addHeaders  ( headers ) . form  ( paramMap ) . execute  ( ) ; }   private HttpResponse patchToResponse  (  String url ,   Map  < String , String > headers ,   Map  < String , Object > paramMap )  {  return      HttpRequest . patch  ( url ) . setProxy  (  getProxy  ( ) ) . addHeaders  ( headers ) . form  ( paramMap ) . execute  ( ) ; }   private HttpResponse patchToResponse  (  String url ,   Map  < String , String > headers ,  String data )  {  return      HttpRequest . patch  ( url ) . setProxy  (  getProxy  ( ) ) . addHeaders  ( headers ) . body  ( data ) . execute  ( ) ; }   private HttpResponse deleteToResponse  (  String url ,   Map  < String , String > headers ,  String data )  {  return      HttpRequest . delete  ( url ) . setProxy  (  getProxy  ( ) ) . addHeaders  ( headers ) . body  ( data ) . execute  ( ) ; }   private HttpResponse deleteToResponse  (  String url ,   Map  < String , String > headers ,   Map  < String , Object > paramMap )  {  return      HttpRequest . delete  ( url ) . setProxy  (  getProxy  ( ) ) . addHeaders  ( headers ) . form  ( paramMap ) . execute  ( ) ; }   private HttpResponse putToResponse  (  String url ,   Map  < String , String > headers ,  String data )  {  return      HttpRequest . put  ( url ) . setProxy  (  getProxy  ( ) ) . addHeaders  ( headers ) . body  ( data ) . execute  ( ) ; }   private HttpResponse putToResponse  (  String url ,   Map  < String , String > headers ,   Map  < String , Object > paramMap )  {  return      HttpRequest . put  ( url ) . setProxy  (  getProxy  ( ) ) . addHeaders  ( headers ) . form  ( paramMap ) . execute  ( ) ; }   private  KeyManager  [ ] getKeyManager  (  String certPass ,  String certPath ,  InputStream certFile )  throws Exception  {  KeyStore  clientStore =  KeyStore . getInstance  ( "PKCS12" ) ;  if  (  certFile != null )  {   clientStore . load  ( certFile ,  certPass . toCharArray  ( ) ) ; } else  {   clientStore . load  (  Files . newInputStream  (  Paths . get  ( certPath ) ) ,  certPass . toCharArray  ( ) ) ; }  KeyManagerFactory  kmf =  KeyManagerFactory . getInstance  (  KeyManagerFactory . getDefaultAlgorithm  ( ) ) ;   kmf . init  ( clientStore ,  certPass . toCharArray  ( ) ) ;  return  kmf . getKeyManagers  ( ) ; }   private SSLSocketFactory getSslSocketFactory  (  String certPath ,  InputStream certFile ,  String certPass ,  String protocol )  throws Exception  {  SSLContextBuilder  sslContextBuilder =  SSLContextBuilder . create  ( ) ;   sslContextBuilder . setProtocol  ( protocol ) ;   sslContextBuilder . setKeyManagers  (  getKeyManager  ( certPass , certPath , certFile ) ) ;   sslContextBuilder . setSecureRandom  (  new SecureRandom  ( ) ) ;  return   sslContextBuilder . buildChecked  ( ) . getSocketFactory  ( ) ; } ; }