[#ftl]
[#--

    Copyright Â© 2006-2016 Web Cohesion (info@webcohesion.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

--]
[#-- @ftlvariable name="type" type="com.webcohesion.enunciate.modules.jaxb.model.TypeDefinition" --]
[#-- @ftlvariable name="rootEl" type="com.webcohesion.enunciate.modules.jaxb.model.RootElementDeclaration" --]
[#-- @ftlvariable name="generatedCodeLicense" type="java.lang.String" --]
[#import "jaxb-metadata.fmt" as libJaxbMetadata/]
[#--template for the client-side complex type.--]
[@file name=(simpleNameFor(type, false) + ".java") package=packageFor(type) charset="utf-8"]
/**
 * ${(generatedCodeLicense!"")?replace("\n", "\n * ")}
 *
 * Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
 */
package ${packageFor(type)};

/**
 * ${(type.docComment!"(no documentation provided)")?chop_linebreak?replace("\n", "\n * ")}
 */
[@libJaxbMetadata.writeTypeMetadata typeDef=type /]
[#if rootEl??]
@javax.xml.bind.annotation.XmlRootElement (
  name = "${rootEl.name}",
  namespace = "${rootEl.namespace!""}"
)
[/#if]
public [#if type.final]final [/#if]class ${simpleNameFor(type)} [#if !type.baseObject]extends ${classnameFor(type.superclass)} [#else]implements java.io.Serializable [/#if]{

  [#list type.attributes as attribute]
    [#if !isFacetExcluded(attribute)]
  private ${classnameFor(attribute)} _${attribute.simpleName};
    [/#if]
  [/#list]
  [#if type.value??]
    [#if !isFacetExcluded(type.value)]
  private ${classnameFor(type.value)} _${type.value.simpleName};
    [/#if]
  [#else]
    [#list type.elements as element]
      [#if !isFacetExcluded(element)]
  private ${classnameFor(element)} _${element.simpleName};
      [/#if]
    [/#list]
  [/#if]
  [#if type.anyElement??]
  private java.util.List<Object> _${type.anyElement.simpleName};
  [/#if]
  [#if type.hasAnyAttribute]
  private java.util.Map<javax.xml.namespace.QName, String> otherAttributes;
  [/#if]
  [#list type.attributes as attribute]
    [#if !isFacetExcluded(attribute)]

  /**
   * ${(attribute.javaDoc.return!attribute.docValue!"(no documentation provided)")?chop_linebreak?replace("\n", "\n   * ")}
   */
  [@libJaxbMetadata.writeAccessorMetadata accessor=attribute /]
  public ${classnameFor(attribute)} get${attribute.simpleNameString?cap_first}() {
    return this._${attribute.simpleName};
  }

  /**
   * ${(attribute.javaDoc.return!attribute.docValue!"(no documentation provided)")?chop_linebreak?replace("\n", "\n   * ")}
   */
  public void set${attribute.simpleNameString?cap_first}(${classnameFor(attribute)} _${attribute.simpleName}) {
    this._${attribute.simpleName} = _${attribute.simpleName};
  }
      [#if attribute.referencesQNameEnum!false]

  /**
   * Convenience accessor for the known value of a ${attribute.simpleName} property.
   *
   * @see ${classnameFor(attribute.QNameEnumRef)}#convertFromKnownQName
   */
  @javax.xml.bind.annotation.XmlTransient
  public ${classnameFor(attribute.QNameEnumRef)} getKnown${attribute.simpleNameString?cap_first}() {
    return ${classnameFor(attribute.QNameEnumRef)}.convertFromKnownQName(get${attribute.simpleNameString?cap_first}());
  }

  /**
   * Convenience accessor for the known value of a ${attribute.simpleName} property.
   *
   * @see ${classnameFor(attribute.QNameEnumRef)}#convertToKnownQName
   */
  public void setKnown${attribute.simpleNameString?cap_first}(${classnameFor(attribute.QNameEnumRef)} _${attribute.simpleName}) {
    set${attribute.simpleNameString?cap_first}(${classnameFor(attribute.QNameEnumRef)}.convertToKnownQName(_${attribute.simpleName})[#if attribute.resolvedAccessorType.isInstanceOf("java.lang.String")].toString()[/#if]);
  }
      [/#if]
    [/#if]
  [/#list]
  [#if type.value??]
    [#if !isFacetExcluded(type.value)]

  /**
   * ${(type.value.javaDoc.return!type.value.docValue!"(no documentation provided)")?chop_linebreak?replace("\n", "\n   * ")}
   */
  [@libJaxbMetadata.writeAccessorMetadata accessor=type.value /]
  public ${classnameFor(type.value)} get${type.value.simpleNameString?cap_first}() {
    return this._${type.value.simpleName};
  }

  /**
   * ${(type.value.javaDoc.return!type.value.docValue!"(no documentation provided)")?chop_linebreak?replace("\n", "\n   * ")}
   */
  public void set${type.value.simpleNameString?cap_first}(${classnameFor(type.value)} _${type.value.simpleName}) {
    this._${type.value.simpleName} = _${type.value.simpleName};
  }
      [#if type.value.referencesQNameEnum!false]

  /**
   * Convenience accessor for the known value of a ${type.value.simpleName} property.
   *
   * @see ${classnameFor(type.value.QNameEnumRef)}#convertFromKnownQName
   */
  @javax.xml.bind.annotation.XmlTransient
  public ${classnameFor(type.value.QNameEnumRef)} getKnown${type.value.simpleNameString?cap_first}() {
    return ${classnameFor(type.value.QNameEnumRef)}.convertFromKnownQName(get${type.value.simpleNameString?cap_first}());
  }

  /**
   * Convenience accessor for the known value of a ${type.value.simpleName} property.
   *
   * @see ${classnameFor(type.value.QNameEnumRef)}#convertToKnownQName
   */
  public void setKnown${type.value.simpleNameString?cap_first}(${classnameFor(type.value.QNameEnumRef)} _${type.value.simpleName}) {
    set${type.value.simpleNameString?cap_first}(${classnameFor(type.value.QNameEnumRef)}.convertToKnownQName(_${type.value.simpleName})[#if type.value.resolvedAccessorType.isInstanceOf("java.lang.String")].toString()[/#if]);
  }
      [/#if]
    [/#if]
  [#else]
    [#list type.elements as element]
      [#if !isFacetExcluded(element)]

  /**
   * ${(element.javaDoc.return!element.docValue!"(no documentation provided)")?chop_linebreak?replace("\n", "\n   * ")}
   */
  [@libJaxbMetadata.writeAccessorMetadata accessor=element /]
  public ${classnameFor(element)} get${element.simpleNameString?cap_first}() {
    return this._${element.simpleName};
  }

  /**
   * ${(element.javaDoc.return!element.docValue!"(no documentation provided)")?chop_linebreak?replace("\n", "\n   * ")}
   */
  public void set${element.simpleNameString?cap_first}(${classnameFor(element)} _${element.simpleName}) {
    this._${element.simpleName} = _${element.simpleName};
  }
       [#if element.referencesQNameEnum!false]

  /**
   * Convenience accessor for the known value of a ${element.simpleName} property.
   *
   * @see ${classnameFor(element.QNameEnumRef)}#convertFromKnownQName
   */
  @javax.xml.bind.annotation.XmlTransient
  public ${classnameFor(element.QNameEnumRef)} getKnown${element.simpleNameString?cap_first}() {
    return ${classnameFor(element.QNameEnumRef)}.convertFromKnownQName(get${element.simpleNameString?cap_first}());
  }

  /**
   * Convenience accessor for the known value of a ${element.simpleName} property.
   *
   * @see ${classnameFor(element.QNameEnumRef)}#convertToKnownQName
   */
  public void setKnown${element.simpleNameString?cap_first}(${classnameFor(element.QNameEnumRef)} _${element.simpleName}) {
    set${element.simpleNameString?cap_first}(${classnameFor(element.QNameEnumRef)}.convertToKnownQName(_${element.simpleName})[#if element.resolvedAccessorType.isInstanceOf("java.lang.String")].toString()[/#if]);
  }
        [/#if]
      [/#if]
    [/#list]
  [/#if]
  [#if type.anyElement??]

  /**
   * ${(type.anyElement.javaDoc.return!type.anyElement.docValue!"(no documentation provided)")?chop_linebreak?replace("\n", "\n   * ")}
   */
  @javax.xml.bind.annotation.XmlAnyElement[#if type.anyElement.lax!false]( lax = true )[/#if]
  public java.util.List<Object> get${type.anyElement.simpleNameString?cap_first}() {
    return this._${type.anyElement.simpleName};
  }

  /**
   * ${(type.anyElement.javaDoc.return!type.anyElement.docValue!"(no documentation provided)")?chop_linebreak?replace("\n", "\n   * ")}
   */
  public void set${type.anyElement.simpleNameString?cap_first}(java.util.List<Object> _${type.anyElement.simpleName}) {
    this._${type.anyElement.simpleName} = _${type.anyElement.simpleName};
  }
  [/#if]
  [#if type.hasAnyAttribute]

  /**
   * The other attributes.
   *
   * @return The other attributes.
   */
  @javax.xml.bind.annotation.XmlAnyAttribute
  public java.util.Map<javax.xml.namespace.QName, String> getOtherAttributes() {
    return this.otherAttributes;
  }

  /**
   * The other attributes.
   *
   * @param otherAttributes The other attributes.
   */
  public void setOtherAttributes(java.util.Map<javax.xml.namespace.QName, String> otherAttributes) {
    this.otherAttributes = otherAttributes;
  }
    [#if type.anyAttributeQNameEnumRef??]

  /**
   * Get a known attribute.
   *
   * @return The value of the known attribute.
   */
  public String getKnownAttribute(${classnameFor(type.anyAttributeQNameEnumRef)} attr) {
    return this.otherAttributes == null ? null : this.otherAttributes.get(${classnameFor(type.anyAttributeQNameEnumRef)}.convertToKnownQName(attr));
  }

  /**
   * Set a known attribute.
   *
   * @param key The key.
   * @param value The value.
   */
  public void setKnownAttribute(${classnameFor(type.anyAttributeQNameEnumRef)} key, String value) {
    if (this.otherAttributes == null) {
      this.otherAttributes = new java.util.HashMap<javax.xml.namespace.QName, String>();
    }
    this.otherAttributes.put(${classnameFor(type.anyAttributeQNameEnumRef)}.convertToKnownQName(key), value);
  }
    [/#if]
  [/#if]

}
[/@file]