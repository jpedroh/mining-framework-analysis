[#ftl]
[#--

    Copyright Â© 2006-2016 Web Cohesion (info@webcohesion.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

--]
[#-- @ftlvariable name="endpointInterface" type="com.webcohesion.enunciate.modules.jaxws.model.EndpointInterface" --]
[#-- @ftlvariable name="generatedCodeLicense" type="java.lang.String" --]
[#-- @ftlvariable name="baseUri" type="java.lang.String" --]
[#-- @ftlvariable name="seeAlsoBeans" type="java.util.Set<java.lang.String>" --]
[#-- @ftlvariable name="wsdlFileName" type="java.lang.String" --]
[#--template for the client-side endpoint interface.--]
[@file name=(endpointInterface.simpleName + "Impl.java")  package=(packageFor(endpointInterface) + ".impl") charset="utf-8"]
/**
 * ${(generatedCodeLicense!"")?replace("\n", "\n * ")}
 *
 * Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
 */
package ${packageFor(endpointInterface) + ".impl"};

import ${packageFor(endpointInterface) + "." + endpointInterface.simpleName};

/**
 * Implementation of the {@link ${endpointInterface.simpleName}}.
 */
public class ${endpointInterface.simpleName}Impl implements ${endpointInterface.simpleName} {

  private final ${endpointInterface.simpleName} proxy;
[#if baseUri??]

  /**
   * Construct a ${endpointInterface.simpleName} that points to the default endpoint ("${baseUri}${endpointInterface.path?substring(1)}").
   *
   * @param features The features to include (e.g. MTOM).
   */
  public ${endpointInterface.simpleName}Impl([#if !(wsdlFileName??)]java.net.URL wsdl, [/#if]jakarta.xml.ws.WebServiceFeature... features) {
    this([#if !(wsdlFileName??)]wsdl, [/#if]"${baseUri}${endpointInterface.path?substring(1)}", features);
  }
[/#if]

  /**
   * Construct a ${endpointInterface.simpleName} that points to the endpoint at the specified host and port.
   *
[#if !(wsdlFileName??)]
   * @param wsdl The URL to the wsdl describing the interface for which this endpoint is a client.
[/#if]
   * @param host The host.
   * @param port The port.
   * @param features The features (e.g. MTOM).
   */
  public ${endpointInterface.simpleName}Impl([#if !(wsdlFileName??)]java.net.URL wsdl, [/#if]String host, int port, jakarta.xml.ws.WebServiceFeature... features) {
    this.proxy = jakarta.xml.ws.spi.Provider.provider().createServiceDelegate([#if wsdlFileName??]getClass().getResource("/${wsdlFileName}")[#else]wsdl[/#if], new javax.xml.namespace.QName("${endpointInterface.targetNamespace}", "${endpointInterface.serviceName}"), jakarta.xml.ws.Service.class).getPort(${endpointInterface.simpleName}.class, features);
    try {
      java.net.URL baseUrl = new java.net.URL("http://localhost:8080/${endpointInterface.path?substring(1)}");
      _getBindingProvider().getRequestContext().put(jakarta.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY, new java.net.URL(baseUrl.getProtocol(), host, port, baseUrl.getFile()).toString());
    }
    catch (java.net.MalformedURLException e) {
      throw new IllegalStateException(e);
    }
  }

  /**
   * Construct a ${endpointInterface.simpleName} that points to the specified endpoint.
   *
[#if !(wsdlFileName??)]
   * @param wsdl The URL to the wsdl describing the interface for which this endpoint is a client.
[/#if]
   * @param endpoint The endpoint to point to.
   * @param features The features (e.g. MTOM).
   */
  public ${endpointInterface.simpleName}Impl([#if !(wsdlFileName??)]java.net.URL wsdl, [/#if]String endpoint, jakarta.xml.ws.WebServiceFeature... features) {
    this.proxy = jakarta.xml.ws.spi.Provider.provider().createServiceDelegate([#if wsdlFileName??]getClass().getResource("/${wsdlFileName}")[#else]wsdl[/#if], new javax.xml.namespace.QName("${endpointInterface.targetNamespace}", "${endpointInterface.serviceName}"), jakarta.xml.ws.Service.class).getPort(${endpointInterface.simpleName}.class, features);
    _getBindingProvider().getRequestContext().put(jakarta.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY, endpoint);
  }

  /**
   * Get the binding provider supporting this service.
   */
  public jakarta.xml.ws.BindingProvider _getBindingProvider() {
    return (jakarta.xml.ws.BindingProvider) this.proxy;
  }

  [#list endpointInterface.webMethods as webMethod]

  // Inherited.
  public ${classnameFor(webMethod.webResult)} ${webMethod.simpleName}([#list webMethod.webParameters as param]${classnameFor(param)} ${param.simpleName}[#if param_has_next], [/#if][/#list]) [#if webMethod.webFaults?size > 0]throws [#list webMethod.webFaults as fault]${classnameFor(fault)}[#if fault_has_next], [/#if][/#list][/#if] {
    [#if !webMethod.returnType.void]return [/#if]proxy.${webMethod.simpleName}([#list webMethod.webParameters as param]${param.simpleName}[#if param_has_next], [/#if][/#list]); 
  }
  [/#list]
}
[/@file]