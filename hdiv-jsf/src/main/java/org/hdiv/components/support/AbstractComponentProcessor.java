  package    org . hdiv . components . support ;   import   java . util . ArrayList ;  import   java . util . List ;  import    javax . faces . component . UIComponent ;  import    javax . faces . component . UIParameter ;  import    javax . faces . context . FacesContext ;  import    org . hdiv . config . HDIVConfig ;  import    org . hdiv . urlProcessor . LinkUrlProcessor ;  import    javax . servlet . http . HttpServletRequest ;  import    org . hdiv . util . HDIVUtil ;   public abstract class AbstractComponentProcessor  {   protected HDIVConfig  config ;   protected LinkUrlProcessor  linkUrlProcessor ;   public void removeHdivStateUIParameter  (  FacesContext context ,  UIComponent component )  {  HttpServletRequest  request =  ( HttpServletRequest )   context . getExternalContext  ( ) . getRequest  ( ) ;  String  hdivParameter =  HDIVUtil . getHdivStateParameterName  ( request ) ;   List  < Integer >  toRemoveList =  new  ArrayList  < Integer >  ( ) ;  for ( UIComponent comp :  component . getChildren  ( ) )  {  if  (  comp instanceof UIParameter )  {  UIParameter  param =  ( UIParameter ) comp ;  String  name =  param . getName  ( ) ;  if  (   name != null &&  name . equals  ( hdivParameter ) )  {  Integer  index =   component . getChildren  ( ) . indexOf  ( param ) ;   toRemoveList . add  ( index ) ; } } }  for ( Integer index : toRemoveList )  {    component . getChildren  ( ) . remove  (  index . intValue  ( ) ) ; } }   public void setConfig  (  HDIVConfig config )  {    this . config = config ; }   public void setLinkUrlProcessor  (  LinkUrlProcessor linkUrlProcessor )  {    this . linkUrlProcessor = linkUrlProcessor ; } }