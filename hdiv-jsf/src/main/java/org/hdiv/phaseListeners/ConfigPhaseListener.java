  package   org . hdiv . phaseListeners ;   import    javax . faces . component . UIViewRoot ;  import    javax . faces . context . ExternalContext ;  import    javax . faces . context . FacesContext ;  import    javax . faces . event . PhaseEvent ;  import    javax . faces . event . PhaseId ;  import    javax . faces . event . PhaseListener ;  import   javax . servlet . ServletContext ;  import    javax . servlet . http . HttpSession ;  import     org . apache . commons . logging . Log ;  import     org . apache . commons . logging . LogFactory ;  import    org . hdiv . config . HDIVConfig ;  import    org . hdiv . events . HDIVFacesEventListener ;  import    org . hdiv . exception . HDIVException ;  import    org . hdiv . util . HDIVUtil ;  import    org . hdiv . util . HDIVUtilJsf ;  import     org . springframework . web . context . WebApplicationContext ;  import     org . springframework . web . jsf . FacesContextUtils ;   public class ConfigPhaseListener  implements  PhaseListener  {   private static final  long  serialVersionUID =  - 3803869221110488120L ;   private static final Log  log =  LogFactory . getLog  (  ConfigPhaseListener . class ) ;   private static final String  HDIV_USER_TOKEN_ATTR_NAME = "HDIV_USER_TOKEN" ;   private boolean  initialized = false ;   public PhaseId getPhaseId  ( )  {  return  PhaseId . ANY_PHASE ; }   public void beforePhase  (  PhaseEvent event )  {  if  (   event . getPhaseId  ( ) . equals  (  PhaseId . RESTORE_VIEW ) )  {  if  (  !  this . initialized )  {  if  (  log . isDebugEnabled  ( ) )  {   log . debug  ( "Initialize ConfigPhaseListener dependencies." ) ; }  FacesContext  context =  event . getFacesContext  ( ) ;   this . checkSupportedFeatures  ( context ) ;  WebApplicationContext  wac =  FacesContextUtils . getRequiredWebApplicationContext  ( context ) ;  HDIVFacesEventListener  facesEventListener =  wac . getBean  (  HDIVFacesEventListener . class ) ;   HDIVUtilJsf . setFacesEventListener  ( facesEventListener , context ) ; } }  if  (   event . getPhaseId  ( ) . equals  (  PhaseId . RENDER_RESPONSE ) )  {  FacesContext  context =  event . getFacesContext  ( ) ;   this . addUserUniqueTokenToState  ( context ) ; } }   public void afterPhase  (  PhaseEvent event )  { }   private void addUserUniqueTokenToState  (  FacesContext facesContext )  {  UIViewRoot  viewRoot =  facesContext . getViewRoot  ( ) ;  if  (  viewRoot != null )  {  String  userToken =  ( String )   viewRoot . getAttributes  ( ) . get  ( HDIV_USER_TOKEN_ATTR_NAME ) ;  if  (  userToken == null )  {  HttpSession  session =  ( HttpSession )   facesContext . getExternalContext  ( ) . getSession  ( false ) ;  if  (  session != null )  {    viewRoot . getAttributes  ( ) . put  ( HDIV_USER_TOKEN_ATTR_NAME ,  session . getId  ( ) ) ; } } } }   private void checkSupportedFeatures  (  FacesContext context )  {  ExternalContext  externalContext =  context . getExternalContext  ( ) ;  ServletContext  servletContext =  ( ServletContext )  externalContext . getContext  ( ) ;  HDIVConfig  config =  HDIVUtil . getHDIVConfig  ( servletContext ) ;  if  (   Boolean . TRUE . equals  (  config . getConfidentiality  ( ) ) )  {  throw  new HDIVException  ( "Confidentiality is not implemented in HDIV for JSF, disable it in hdiv-config.xml" ) ; } } }