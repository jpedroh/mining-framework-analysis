  package   org . unigram . docvalidator ;   import   org . slf4j . Logger ;  import   org . slf4j . LoggerFactory ;  import     org . unigram . docvalidator . parser . Parser ;  import     org . unigram . docvalidator . parser . DocumentParserFactory ;  import     org . unigram . docvalidator . model . DocumentCollection ;  import     org . unigram . docvalidator . util . DVResource ;  import     org . unigram . docvalidator . util . DocumentValidatorException ;   public final class DocumentGenerator  { 
<<<<<<<
  static DocumentCollection generate  (   String  [ ] inputFileNames ,  DVResource resource ,  String format )  {  Parser  docparser ;  try  {   docparser =  DocumentParserFactory . generate  ( format , resource ) ; }  catch (   DocumentValidatorException e )  {   LOG . error  (  "Failed to create documentCollection parser: " +  e . getMessage  ( ) ) ;  return null ; }  DocumentCollection  documentCollection =  new DocumentCollection  ( ) ;  for ( String inputFileName : inputFileNames )  {  try  {   documentCollection . addDocument  (  docparser . generateDocument  ( inputFileName ) ) ; }  catch (   DocumentValidatorException e )  {   e . printStackTrace  ( ) ;  return null ; } }  return documentCollection ; }
=======
>>>>>>>
   private static final Logger  LOG =  LoggerFactory . getLogger  (  DocumentGenerator . class ) ;   private DocumentGenerator  ( )  {  super  ( ) ; }   static Document generate  (   String  [ ] inputFileNames ,  DVResource resource ,   Parser . Type format )  {  Parser  docparser ;  try  {   docparser =  DocumentParserFactory . generate  ( format , resource ) ; }  catch (   DocumentValidatorException e )  {   LOG . error  (  "Failed to create document parser: " +  e . getMessage  ( ) ) ;  return null ; }  Document  document =  new Document  ( ) ;  for ( String inputFileName : inputFileNames )  {  try  {   document . appendFile  (  docparser . generateDocument  ( inputFileName ) ) ; }  catch (   DocumentValidatorException e )  {   e . printStackTrace  ( ) ;  return null ; } }  return document ; } }