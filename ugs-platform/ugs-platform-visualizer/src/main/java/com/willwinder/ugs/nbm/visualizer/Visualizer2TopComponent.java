  package     com . willwinder . ugs . nbm . visualizer ;   import    com . jogamp . opengl . GLCapabilities ;  import     com . jogamp . opengl . awt . GLJPanel ;  import     com . jogamp . opengl . util . FPSAnimator ;  import       com . willwinder . ugs . nbm . visualizer . options . VisualizerOptionsPanel ;  import       com . willwinder . ugs . nbm . visualizer . shared . GcodeRenderer ;  import       com . willwinder . ugs . nbp . lib . lookup . CentralLookup ;  import       com . willwinder . ugs . nbp . lib . services . LocalizingService ;  import       com . willwinder . ugs . nbp . lib . services . TopComponentLocalizer ;  import     com . willwinder . universalgcodesender . i18n . Localization ;  import     com . willwinder . universalgcodesender . model . BackendAPI ;  import     org . apache . commons . lang3 . StringUtils ;  import    org . openide . awt . ActionID ;  import    org . openide . awt . ActionReference ;  import    org . openide . modules . OnStart ;  import    org . openide . util . Lookup ;  import    org . openide . util . NbPreferences ;  import    org . openide . windows . Mode ;  import    org . openide . windows . TopComponent ;  import    org . openide . windows . WindowManager ;  import  java . awt .  * ;  import   java . io . File ;  import    java . util . logging . Level ;  import    java . util . logging . Logger ;  import    java . util . prefs . Preferences ;  import static        com . willwinder . ugs . nbp . lib . services . LocalizingService . lang ;  import  javax . swing .  * ;    @  TopComponent . Description  (  preferredID = "VisualizerTopComponent" )  @  TopComponent . Registration  (  mode = "editor_secondary" ,  openAtStartup = true )  @ ActionID  (  category =  Visualizer2TopComponent . VisualizerCategory ,  id =  Visualizer2TopComponent . VisualizerActionId )  @ ActionReference  (  path =  Visualizer2TopComponent . VisualizerWindowPath )  @  TopComponent . OpenActionRegistration  (  displayName = "<Not localized:VisualizerTopComponent>" ,  preferredID = "VisualizerTopComponent" ) public final class Visualizer2TopComponent  extends TopComponent  {   private static final Logger  logger =  Logger . getLogger  (   Visualizer2TopComponent . class . getName  ( ) ) ;   private GLJPanel  panel ;   private RendererInputHandler  rih ;   private final BackendAPI  backend ;   public final static String  VisualizerTitle =  Localization . getString  ( "platform.window.visualizer" , lang ) ;   public final static String  VisualizerTooltip =  Localization . getString  ( "platform.window.visualizer.tooltip" , lang ) ;   public final static String  VisualizerWindowPath =  LocalizingService . MENU_WINDOW ;   public final static String  VisualizerActionId = "com.willwinder.ugs.nbm.visualizer.Visualizer2TopComponent" ;   public final static String  VisualizerCategory =  LocalizingService . CATEGORY_WINDOW ;    @ OnStart public static class Localizer  extends TopComponentLocalizer  {   public Localizer  ( )  {  super  ( VisualizerCategory , VisualizerActionId , VisualizerTitle ) ; } }   public Visualizer2TopComponent  ( )  {   backend =   CentralLookup . getDefault  ( ) . lookup  (  BackendAPI . class ) ;   setMinimumSize  (  new   java . awt . Dimension  ( 50 , 50 ) ) ;   setPreferredSize  (  new   java . awt . Dimension  ( 200 , 200 ) ) ;   setLayout  (  new   java . awt . BorderLayout  ( ) ) ; }   private void cleanup  ( )  {  Mode  mode =   WindowManager . getDefault  ( ) . findMode  ( this ) ;  if  (   mode != null &&  StringUtils . equals  ( "visualizer" ,  mode . getName  ( ) ) )  {   this . close  ( ) ; } }    @ Override protected void componentOpened  ( )  {   cleanup  ( ) ;   setName  ( VisualizerTitle ) ;   setToolTipText  ( VisualizerTooltip ) ;   super . componentOpened  ( ) ;   removeAll  ( ) ;   add  (  new VisualizerToolBar  ( ) ,  BorderLayout . NORTH ) ;   panel =  makeWindow  ( ) ;  JPanel  borderedPanel =  new JPanel  ( ) ;   borderedPanel . setLayout  (  new BorderLayout  ( ) ) ;   borderedPanel . setBorder  (  BorderFactory . createLineBorder  (  Color . DARK_GRAY , 1 ) ) ;   borderedPanel . add  ( panel ,  BorderLayout . CENTER ) ;   add  ( borderedPanel ,  BorderLayout . CENTER ) ; }    @ Override protected void componentClosed  ( )  {   super . componentClosed  ( ) ;  if  (  rih != null )  {   backend . removeUGSEventListener  ( rih ) ; }   logger . log  (  Level . INFO ,  "Component closed, panel = " + panel ) ;  if  (  panel == null )  return ;   remove  ( panel ) ;   panel . destroy  ( ) ;   panel = null ; }    @ Override protected void componentActivated  ( )  {   super . componentActivated  ( ) ;  if  (  panel != null )  {   panel . setSize  (  getSize  ( ) ) ;   invalidate  ( ) ;  if  (   getTopLevelAncestor  ( ) != null )  {    getTopLevelAncestor  ( ) . invalidate  ( ) ;    getTopLevelAncestor  ( ) . revalidate  ( ) ; } } }   private GLJPanel makeWindow  ( )  {  GLCapabilities  glCaps =  new GLCapabilities  ( null ) ;   final GLJPanel  p =  new GLJPanel  ( glCaps ) ;  GcodeRenderer  renderer =   Lookup . getDefault  ( ) . lookup  (  GcodeRenderer . class ) ;  if  (  renderer == null )  {  throw  new IllegalArgumentException  ( "Failed to access GcodeRenderer." ) ; }  FPSAnimator  animator =  new FPSAnimator  ( p , 15 ) ;    this . rih =  new RendererInputHandler  ( renderer , animator , backend ) ;  Preferences  pref =  NbPreferences . forModule  (  VisualizerOptionsPanel . class ) ;   pref . addPreferenceChangeListener  (  this . rih ) ;  File  f =   (   backend . getProcessedGcodeFile  ( ) != null ) ?  backend . getProcessedGcodeFile  ( ) :  backend . getGcodeFile  ( ) ;  if  (  f != null )  {    this . rih . setGcodeFile  (  f . getAbsolutePath  ( ) ) ; }   backend . addUGSEventListener  (  this . rih ) ;   p . addKeyListener  (  this . rih ) ;   p . addMouseWheelListener  (  this . rih ) ;   p . addMouseMotionListener  (  this . rih ) ;   p . addMouseListener  (  this . rih ) ;   p . addGLEventListener  ( renderer ) ;  return p ; } }