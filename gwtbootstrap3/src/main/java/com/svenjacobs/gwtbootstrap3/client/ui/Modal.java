  package     com . svenjacobs . gwtbootstrap3 . client . ui ;   import      com . google . gwt . dom . client . Element ;  import      com . google . gwt . user . client . Event ;  import       com . google . gwt . user . client . ui . Widget ;  import       com . svenjacobs . gwtbootstrap3 . client . shared . event . ModalHiddenEvent ;  import       com . svenjacobs . gwtbootstrap3 . client . shared . event . ModalHideEvent ;  import       com . svenjacobs . gwtbootstrap3 . client . shared . event . ModalShowEvent ;  import       com . svenjacobs . gwtbootstrap3 . client . shared . event . ModalShownEvent ;  import        com . svenjacobs . gwtbootstrap3 . client . ui . base . helper . StyleHelper ;  import        com . svenjacobs . gwtbootstrap3 . client . ui . base . modal . ModalContent ;  import        com . svenjacobs . gwtbootstrap3 . client . ui . base . modal . ModalDialog ;  import       com . svenjacobs . gwtbootstrap3 . client . ui . constants . Attributes ;  import       com . svenjacobs . gwtbootstrap3 . client . ui . constants . ModalBackdrop ;  import       com . svenjacobs . gwtbootstrap3 . client . ui . constants . Styles ;   public class Modal  extends FlowPanel  implements  IsClosable , HasResponsiveness  {   private final ModalContent  content =  new ModalContent  ( ) ;   private ModalHeader  header =  new ModalHeader  ( ) ;   public Modal  ( )  {   setStyleName  (  Styles . MODAL ) ;   final ModalDialog  dialog =  new ModalDialog  ( ) ;   content . add  ( header ) ;   dialog . add  ( content ) ;   add  ( dialog ) ;   bindJavaScriptEvents  (  getElement  ( ) ) ; }    @ Override public void add  (   final Widget w )  {  if  (  w instanceof ModalHeader )  {   header . removeFromParent  ( ) ;   header =  ( ModalHeader ) w ; }  if  (  w instanceof ModalComponent )  {   content . add  ( w ) ; } else  {   super . add  ( w ) ; } }   public void setTitle  (   final String title )  {   header . setTitle  ( title ) ; }    @ Override public void setClosable  (   final boolean closable )  {   header . setClosable  ( closable ) ; }    @ Override public boolean isClosable  ( )  {  return  header . isClosable  ( ) ; }    @ Override public void setVisibleOn  (   final String deviceSizeString )  {   StyleHelper . setVisibleOn  ( this , deviceSizeString ) ; }    @ Override public void setHiddenOn  (   final String deviceSizeString )  {   StyleHelper . setHiddenOn  ( this , deviceSizeString ) ; }   public void setFade  (   final boolean fade )  {  if  ( fade )  {   addStyleName  (  Styles . FADE ) ; } else  {   removeStyleName  (  Styles . FADE ) ; } }   public void setBackdrop  (   final ModalBackdrop backdrop )  {  if  (  backdrop != null )  {    getElement  ( ) . setAttribute  (  Attributes . DATA_BACKDROP ,  backdrop . getBackdrop  ( ) ) ; } else  {    getElement  ( ) . removeAttribute  (  Attributes . DATA_BACKDROP ) ; } }   public void setKeyboard  (   final boolean keyboard )  {    getElement  ( ) . setAttribute  (  Attributes . DATA_KEYBOARD ,  Boolean . toString  ( keyboard ) ) ; }   public void toggle  ( )  {   modal  (  getElement  ( ) , "toggle" ) ; }   public void show  ( )  {   modal  (  getElement  ( ) , "show" ) ; }   public void hide  ( )  {   modal  (  getElement  ( ) , "hide" ) ; }   protected void onShow  (   final Event evt )  {   fireEvent  (  new ModalShowEvent  ( this , evt ) ) ; }   protected void onShown  (   final Event evt )  {   fireEvent  (  new ModalShownEvent  ( this , evt ) ) ; }   protected void onHide  (   final Event evt )  {   fireEvent  (  new ModalHideEvent  ( this , evt ) ) ; }   protected void onHidden  (   final Event evt )  {   fireEvent  (  new ModalHiddenEvent  ( this , evt ) ) ; }   private native void bindJavaScriptEvents  (   final Element e ) ;   private native void modal  (   final Element e ,   final String arg ) ; }