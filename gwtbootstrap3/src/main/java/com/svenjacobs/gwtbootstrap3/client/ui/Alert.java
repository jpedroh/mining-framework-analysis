  package     com . svenjacobs . gwtbootstrap3 . client . ui ;   import      com . google . gwt . dom . client . Element ;  import      com . google . gwt . safehtml . shared . SafeHtml ;  import      com . google . gwt . user . client . Event ;  import       com . svenjacobs . gwtbootstrap3 . client . shared . event . AlertCloseEvent ;  import       com . svenjacobs . gwtbootstrap3 . client . shared . event . AlertClosedEvent ;  import        com . svenjacobs . gwtbootstrap3 . client . ui . base . button . CloseButton ;  import        com . svenjacobs . gwtbootstrap3 . client . ui . base . helper . StyleHelper ;  import       com . svenjacobs . gwtbootstrap3 . client . ui . constants . AlertType ;  import       com . svenjacobs . gwtbootstrap3 . client . ui . constants . ButtonDismiss ;  import       com . svenjacobs . gwtbootstrap3 . client . ui . constants . Styles ;   public class Alert  extends HTMLPanel  implements   HasType  < AlertType > , HasResponsiveness  {   private final CloseButton  closeButton =  new CloseButton  ( ) ;   public Alert  (   final String html )  {  super  ( html ) ;   setStyleName  (  Styles . ALERT ) ;   setType  (  AlertType . WARNING ) ;   closeButton . setDismiss  (  ButtonDismiss . ALERT ) ;   bindJavaScriptEvents  (  getElement  ( ) ) ; }   public Alert  (   final String html ,   final AlertType type )  {  this  ( html ) ;   setType  ( type ) ; }   public Alert  (   final SafeHtml safeHtml )  {  this  (  safeHtml . asString  ( ) ) ; }   public Alert  (   final SafeHtml safeHtml ,   final AlertType type )  {  this  (  safeHtml . asString  ( ) , type ) ; }    @ Override public void setType  (   final AlertType type )  {   StyleHelper . addUniqueEnumStyleName  ( this ,  AlertType . class , type ) ; }    @ Override public AlertType getType  ( )  {  return  AlertType . fromStyleName  (  getStyleName  ( ) ) ; }   public void setDismissable  (   final boolean dismissable )  {  if  ( dismissable )  {   insert  ( closeButton ,  getElement  ( ) , 0 , true ) ;   addStyleName  (  Styles . ALERT_DISMISSABLE ) ; } else  {   closeButton . removeFromParent  ( ) ;   removeStyleName  (  Styles . ALERT_DISMISSABLE ) ; } }   public boolean isDismissable  ( )  {  return   closeButton . getParent  ( ) != null ; }   public void close  ( )  {   alert  (  getElement  ( ) , "close" ) ; }   protected void onClose  (   final Event evt )  {   fireEvent  (  new AlertCloseEvent  ( evt ) ) ; }   protected void onClosed  (   final Event evt )  {   fireEvent  (  new AlertClosedEvent  ( evt ) ) ; }    @ Override public void setVisibleOn  (   final String deviceSizeString )  {   StyleHelper . setVisibleOn  ( this , deviceSizeString ) ; }    @ Override public void setHiddenOn  (   final String deviceSizeString )  {   StyleHelper . setHiddenOn  ( this , deviceSizeString ) ; }   private native void alert  (   final Element e ,   final String arg ) ;   private native void bindJavaScriptEvents  (   final Element e ) ; }