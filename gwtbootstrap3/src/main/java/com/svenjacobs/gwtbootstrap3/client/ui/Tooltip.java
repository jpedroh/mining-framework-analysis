  package     com . svenjacobs . gwtbootstrap3 . client . ui ;   import      com . google . gwt . dom . client . Element ;  import       com . google . gwt . event . logical . shared . AttachEvent ;  import      com . google . gwt . user . client . Event ;  import       com . google . gwt . user . client . ui . HasOneWidget ;  import       com . google . gwt . user . client . ui . HasWidgets ;  import       com . google . gwt . user . client . ui . IsWidget ;  import       com . google . gwt . user . client . ui . Widget ;  import      com . svenjacobs . gwtbootstrap3 . client . shared . event .  * ;  import       com . svenjacobs . gwtbootstrap3 . client . ui . constants . Placement ;  import       com . svenjacobs . gwtbootstrap3 . client . ui . constants . Trigger ;  import   java . util . Iterator ;  import   java . util . NoSuchElementException ;   public class Tooltip  implements  IsWidget , HasWidgets , HasOneWidget , HasId , HasHover  {   private boolean  isAnimated = true ;   private boolean  isHTML = false ;   private Placement  placement =  Placement . TOP ;   private Trigger  trigger =  Trigger . HOVER ;   private String  title = "" ;   private  int  hideDelayMs = 0 ;   private  int  showDelayMs = 0 ;   private String  container = null ;   private final String  selector = null ;   private Widget  widget ;   private String  id ;   public Tooltip  ( )  { }   public Tooltip  (   final Widget w )  {   setWidget  ( w ) ; }    @ Override public void setWidget  (   final Widget w )  {  if  (  w == widget )  {  return ; }  if  (  w != null )  {   w . removeFromParent  ( ) ; }  if  (  widget != null )  {   remove  ( widget ) ; }   widget = w ;  if  (  widget == null )  {  return ; }   bindJsEvents  (  widget . getElement  ( ) ) ;   widget . addAttachHandler  (  new  AttachEvent . Handler  ( )  {    @ Override public void onAttachOrDetach  (   final AttachEvent event )  {   reconfigure  ( ) ; } } ) ; }    @ Override public void add  (   final Widget child )  {  if  (   getWidget  ( ) != null )  {  throw  new IllegalStateException  ( "Can only contain one child widget" ) ; }   setWidget  ( child ) ; }    @ Override public void setWidget  (   final IsWidget w )  {   widget =   (  w == null ) ? null :  w . asWidget  ( ) ; }    @ Override public Widget getWidget  ( )  {  return widget ; }    @ Override public void setId  (   final String id )  {    this . id = id ;  if  (  widget != null )  {    widget . getElement  ( ) . setId  ( id ) ; } }    @ Override public String getId  ( )  {  return   (  widget == null ) ? id :   widget . getElement  ( ) . getId  ( ) ; }    @ Override public void setIsAnimated  (   final boolean isAnimated )  {    this . isAnimated = isAnimated ; }    @ Override public boolean isAnimated  ( )  {  return isAnimated ; }    @ Override public void setIsHtml  (   final boolean isHTML )  {    this . isHTML = isHTML ; }    @ Override public boolean isHtml  ( )  {  return isHTML ; }    @ Override public void setPlacement  (   final Placement placement )  {    this . placement = placement ; }    @ Override public Placement getPlacement  ( )  {  return placement ; }    @ Override public void setTrigger  (   final Trigger trigger )  {    this . trigger = trigger ; }    @ Override public Trigger getTrigger  ( )  {  return trigger ; }    @ Override public void setShowDelayMs  (   final  int showDelayMs )  {    this . showDelayMs = showDelayMs ; }    @ Override public  int getShowDelayMs  ( )  {  return showDelayMs ; }    @ Override public void setHideDelayMs  (   final  int hideDelayMs )  {    this . hideDelayMs = hideDelayMs ; }    @ Override public  int getHideDelayMs  ( )  {  return hideDelayMs ; }    @ Override public void setContainer  (   final String container )  {    this . container = container ; }    @ Override public String getContainer  ( )  {  return container ; }   public String getTitle  ( )  {  return title ; }   public void setText  (   final String text )  {   setTitle  ( text ) ; }   public void setTitle  (   final String title )  {    this . title = title ; }   public void reconfigure  ( )  {   destroy  ( ) ;  if  (   container != null &&  selector != null )  {   tooltip  (  widget . getElement  ( ) , isAnimated , isHTML ,  placement . getCssName  ( ) , selector , title ,  trigger . getCssName  ( ) , showDelayMs , hideDelayMs , container ) ; } else  if  (  container != null )  {   tooltip  (  widget . getElement  ( ) , isAnimated , isHTML ,  placement . getCssName  ( ) , title ,  trigger . getCssName  ( ) , showDelayMs , hideDelayMs , container ) ; } else  if  (  selector != null )  {   tooltip  (  widget . getElement  ( ) , isAnimated , isHTML ,  placement . getCssName  ( ) , selector , title ,  trigger . getCssName  ( ) , showDelayMs , hideDelayMs ) ; } else  {   tooltip  (  widget . getElement  ( ) , isAnimated , isHTML ,  placement . getCssName  ( ) , title ,  trigger . getCssName  ( ) , showDelayMs , hideDelayMs ) ; } }   public void toggle  ( )  {   call  (  widget . getElement  ( ) , "toggle" ) ; }   public void show  ( )  {   call  (  widget . getElement  ( ) , "show" ) ; }   public void hide  ( )  {   call  (  widget . getElement  ( ) , "hide" ) ; }   public void destroy  ( )  {   call  (  widget . getElement  ( ) , "destroy" ) ; }   protected void onShow  (   final Event evt )  {   widget . fireEvent  (  new ShowEvent  ( evt ) ) ; }   protected void onShown  (   final Event evt )  {   widget . fireEvent  (  new ShownEvent  ( evt ) ) ; }   protected void onHide  (   final Event evt )  {   widget . fireEvent  (  new HideEvent  ( evt ) ) ; }   protected void onHidden  (   final Event evt )  {   widget . fireEvent  (  new HiddenEvent  ( evt ) ) ; }   public void addShowHandler  (   final ShowHandler showHandler )  {   widget . addHandler  ( showHandler ,  ShowEvent . getType  ( ) ) ; }   public void addShownHandler  (   final ShownHandler shownHandler )  {   widget . addHandler  ( shownHandler ,  ShownEvent . getType  ( ) ) ; }   public void addHideHandler  (   final HideHandler hideHandler )  {   widget . addHandler  ( hideHandler ,  HideEvent . getType  ( ) ) ; }   public void addHiddenHandler  (   final HiddenHandler hiddenHandler )  {   widget . addHandler  ( hiddenHandler ,  HiddenEvent . getType  ( ) ) ; }    @ Override public void clear  ( )  {   widget = null ; }    @ Override public  Iterator  < Widget > iterator  ( )  {  return  new  Iterator  < Widget >  ( )  {  boolean  hasElement =  widget != null ;  Widget  returned = null ;    @ Override public boolean hasNext  ( )  {  return hasElement ; }    @ Override public Widget next  ( )  {  if  (   ! hasElement ||  (  widget == null ) )  {  throw  new NoSuchElementException  ( ) ; }   hasElement = false ;  return  (  returned = widget ) ; }    @ Override public void remove  ( )  {  if  (  returned != null )  {    Tooltip . this . remove  ( returned ) ; } } } ; }    @ Override public boolean remove  (   final Widget w )  {  if  (  widget != w )  {  return false ; }   clear  ( ) ;  return true ; }    @ Override public Widget asWidget  ( )  {  return widget ; }   private native void bindJsEvents  (   final Element e ) ;   private native void call  (   final Element e ,   final String arg ) ;   private native void tooltip  (  Element e ,  boolean animation ,  boolean html ,  String placement ,  String selector ,  String title ,  String trigger ,   int showDelay ,   int hideDelay ,  String container ) ;   private native void tooltip  (  Element e ,  boolean animation ,  boolean html ,  String placement ,  String title ,  String trigger ,   int showDelay ,   int hideDelay ,  String container ) ;   private native void tooltip  (  Element e ,  boolean animation ,  boolean html ,  String placement ,  String selector ,  String title ,  String trigger ,   int showDelay ,   int hideDelay ) ;   private native void tooltip  (  Element e ,  boolean animation ,  boolean html ,  String placement ,  String title ,  String trigger ,   int showDelay ,   int hideDelay ) ; }