  package    io . jsonwebtoken . impl . compression ;   import   io . jsonwebtoken . CompressionCodec ;  import   io . jsonwebtoken . CompressionCodecResolver ;  import   io . jsonwebtoken . CompressionCodecs ;  import   io . jsonwebtoken . CompressionException ;  import   io . jsonwebtoken . Header ;  import   io . jsonwebtoken . Locator ;  import    io . jsonwebtoken . impl . IdRegistry ;  import     io . jsonwebtoken . impl . lang . Registry ;  import     io . jsonwebtoken . impl . lang . Services ;  import    io . jsonwebtoken . lang . Assert ;  import    io . jsonwebtoken . lang . Strings ;  import   java . util . Collection ;  import   java . util . Collections ;  import   java . util . LinkedHashSet ;  import   java . util . Set ;   public class DefaultCompressionCodecResolver  implements  CompressionCodecResolver ,  Locator  < CompressionCodec >  {   private static final String  MISSING_COMPRESSION_MESSAGE =     "Unable to find an implementation for compression " + "algorithm [%s] using java.util.ServiceLoader or via any specified extra CompressionCodec instances. " + "Ensure you include a backing implementation .jar in the classpath, for example jjwt-impl.jar, or " + "your own .jar for custom implementations, or use the JwtParser.addCompressionCodecs configuration " + "method." ;   private final  Registry  < String , CompressionCodec >  codecs ;   public DefaultCompressionCodecResolver  ( )  {  this  (  Collections .  < CompressionCodec > emptySet  ( ) ) ; }   public DefaultCompressionCodecResolver  (   Collection  < CompressionCodec > extraCodecs )  {   Assert . notNull  ( extraCodecs , "extraCodecs cannot be null." ) ;   Set  < CompressionCodec >  codecs =  new  LinkedHashSet  < >  (  Services . loadAll  (  CompressionCodec . class ) ) ;   codecs . addAll  ( extraCodecs ) ;   codecs . add  (  CompressionCodecs . DEFLATE ) ;   codecs . add  (  CompressionCodecs . GZIP ) ;    this . codecs =  new  IdRegistry  < >  ( codecs ) ; }    @ Override public CompressionCodec locate  (   Header  <  ? > header )  {   Assert . notNull  ( header , "Header cannot be null." ) ;  String  id =  header . getCompressionAlgorithm  ( ) ;  if  (  !  Strings . hasText  ( id ) )  {  return null ; }  CompressionCodec  codec =  codecs . apply  ( id ) ;  if  (  codec == null )  {  String  msg =  String . format  ( MISSING_COMPRESSION_MESSAGE , id ) ;  throw  new CompressionException  ( msg ) ; }  return codec ; }    @ Override public CompressionCodec resolveCompressionCodec  (   Header  <  ? > header )  {  return  locate  ( header ) ; } }