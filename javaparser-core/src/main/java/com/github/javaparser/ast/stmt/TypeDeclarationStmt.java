  package     com . github . javaparser . ast . stmt ;   import    com . github . javaparser . Range ;  import      com . github . javaparser . ast . body . ClassOrInterfaceDeclaration ;  import      com . github . javaparser . ast . body . TypeDeclaration ;  import      com . github . javaparser . ast . observer . ObservableProperty ;  import      com . github . javaparser . ast . visitor . GenericVisitor ;  import      com . github . javaparser . ast . visitor . VoidVisitor ;  import static      com . github . javaparser . utils . Utils . assertNotNull ;   public final class TypeDeclarationStmt  extends Statement  {   private TypeDeclaration  typeDeclaration ;   public TypeDeclarationStmt  ( )  {  this  ( null ,  new ClassOrInterfaceDeclaration  ( ) ) ; }   public TypeDeclarationStmt  (   final TypeDeclaration typeDeclaration )  {  this  ( null , typeDeclaration ) ; }   public TypeDeclarationStmt  (  Range range ,   final TypeDeclaration typeDeclaration )  {  super  ( range ) ;   setTypeDeclaration  ( typeDeclaration ) ; }    @ Override public  <  R ,  A > R accept  (   final  GenericVisitor  < R , A > v ,   final A arg )  {  return  v . visit  ( this , arg ) ; }    @ Override public  <  A > void accept  (   final  VoidVisitor  < A > v ,   final A arg )  {   v . visit  ( this , arg ) ; }   public TypeDeclaration getTypeDeclaration  ( )  {  return typeDeclaration ; }   public TypeDeclarationStmt setTypeDeclaration  (   final TypeDeclaration typeDecl )  {   notifyPropertyChange  (  ObservableProperty . TYPE_DECLARATION ,  this . typeDeclaration , typeDecl ) ;    this . typeDeclaration =  assertNotNull  ( typeDecl ) ;   setAsParentNodeOf  (  this . typeDeclaration ) ;  return this ; } }