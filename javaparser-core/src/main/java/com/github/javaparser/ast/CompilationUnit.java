  package    com . github . javaparser . ast ;   import    com . github . javaparser . JavaParser ;  import    com . github . javaparser . Range ;  import     com . github . javaparser . ast . body .  * ;  import      com . github . javaparser . ast . comments . Comment ;  import      com . github . javaparser . ast . comments . JavadocComment ;  import      com . github . javaparser . ast . expr . Name ;  import      com . github . javaparser . ast . imports . ImportDeclaration ;  import      com . github . javaparser . ast . observer . ObservableProperty ;  import      com . github . javaparser . ast . visitor . GenericVisitor ;  import      com . github . javaparser . ast . visitor . VoidVisitor ;  import     com . github . javaparser . utils . ClassUtils ;  import   java . util . Arrays ;  import   java . util . EnumSet ;  import   java . util . List ;  import   java . util . Optional ;  import    java . util . stream . Collectors ;  import static      com . github . javaparser . utils . Utils . assertNotNull ;   public final class CompilationUnit  extends Node  {   private PackageDeclaration  packageDeclaration ;   private  NodeList  < ImportDeclaration >  imports ;   private  NodeList  <  TypeDeclaration  <  ? > >  types ;   public CompilationUnit  ( )  {  this  ( null , null ,  new  NodeList  < >  ( ) ,  new  NodeList  < >  ( ) ) ; }   public CompilationUnit  (  PackageDeclaration packageDeclaration ,   NodeList  < ImportDeclaration > imports ,   NodeList  <  TypeDeclaration  <  ? > > types )  {  this  ( null , packageDeclaration , imports , types ) ; }   public CompilationUnit  (  Range range ,  PackageDeclaration packageDeclaration ,   NodeList  < ImportDeclaration > imports ,   NodeList  <  TypeDeclaration  <  ? > > types )  {  super  ( range ) ;   setPackageDeclaration  ( packageDeclaration ) ;   setImports  ( imports ) ;   setTypes  ( types ) ; }    @ Override public  <  R ,  A > R accept  (   GenericVisitor  < R , A > v ,  A arg )  {  return  v . visit  ( this , arg ) ; }    @ Override public  <  A > void accept  (   VoidVisitor  < A > v ,  A arg )  {   v . visit  ( this , arg ) ; }   public  List  < Comment > getComments  ( )  {  return  this . getAllContainedComments  ( ) ; }   public  NodeList  < ImportDeclaration > getImports  ( )  {  return imports ; }   public ImportDeclaration getImport  (   int i )  {  return   getImports  ( ) . get  ( i ) ; }   public  Optional  < PackageDeclaration > getPackageDeclaration  ( )  {  return  Optional . ofNullable  ( packageDeclaration ) ; }   public  NodeList  <  TypeDeclaration  <  ? > > getTypes  ( )  {  return types ; }   public  TypeDeclaration  <  ? > getType  (   int i )  {  return   getTypes  ( ) . get  ( i ) ; }   public CompilationUnit setImports  (   NodeList  < ImportDeclaration > imports )  {   notifyPropertyChange  (  ObservableProperty . IMPORTS ,  this . imports , imports ) ;    this . imports =  assertNotNull  ( imports ) ;   setAsParentNodeOf  (  this . imports ) ;  return this ; }   public CompilationUnit setPackageDeclaration  (  PackageDeclaration pakage )  {   notifyPropertyChange  (  ObservableProperty . PACKAGE_DECLARATION ,  this . packageDeclaration , pakage ) ;    this . packageDeclaration = pakage ;   setAsParentNodeOf  (  this . packageDeclaration ) ;  return this ; }   public CompilationUnit setTypes  (   NodeList  <  TypeDeclaration  <  ? > > types )  {   notifyPropertyChange  (  ObservableProperty . TYPES ,  this . types , types ) ;    this . types =  assertNotNull  ( types ) ;   setAsParentNodeOf  (  this . types ) ;  return this ; }   public CompilationUnit setPackageName  (  String name )  {   setPackageDeclaration  (  new PackageDeclaration  (  Name . parse  ( name ) ) ) ;  return this ; }   public CompilationUnit addImport  (  String name )  {  return  addImport  ( name , false , false ) ; }   public CompilationUnit addImport  (   Class  <  ? > clazz )  {  if  (   ClassUtils . isPrimitiveOrWrapper  ( clazz ) ||   clazz . getName  ( ) . startsWith  ( "java.lang" ) )  return this ; else  if  (    clazz . isArray  ( ) &&  !  ClassUtils . isPrimitiveOrWrapper  (  clazz . getComponentType  ( ) ) &&  !    clazz . getComponentType  ( ) . getName  ( ) . startsWith  ( "java.lang" ) )  return  addImport  (   clazz . getComponentType  ( ) . getName  ( ) ) ;  return  addImport  (  clazz . getName  ( ) ) ; }   public CompilationUnit addImport  (  String name ,  boolean isStatic ,  boolean isAsterisk )  {   final StringBuilder  i =  new StringBuilder  ( "import " ) ;  if  ( isStatic )  {   i . append  ( "static " ) ; }   i . append  ( name ) ;  if  ( isAsterisk )  {   i . append  ( ".*" ) ; }   i . append  ( ";" ) ;  ImportDeclaration  importDeclaration =  JavaParser . parseImport  (  i . toString  ( ) ) ;  if  (    getImports  ( ) . stream  ( ) . anyMatch  (  im ->   im . toString  ( ) . equals  (  importDeclaration . toString  ( ) ) ) )  return this ; else  {    getImports  ( ) . add  ( importDeclaration ) ;   importDeclaration . setParentNode  ( this ) ;  return this ; } }   public ClassOrInterfaceDeclaration addClass  (  String name )  {  return  addClass  ( name ,  Modifier . PUBLIC ) ; }   public ClassOrInterfaceDeclaration addClass  (  String name ,  Modifier ...  modifiers )  {  ClassOrInterfaceDeclaration  classOrInterfaceDeclaration =  new ClassOrInterfaceDeclaration  (   Arrays . stream  ( modifiers ) . collect  (  Collectors . toCollection  (   ( ) ->  EnumSet . noneOf  (  Modifier . class ) ) ) , false , name ) ;    getTypes  ( ) . add  ( classOrInterfaceDeclaration ) ;   classOrInterfaceDeclaration . setParentNode  ( this ) ;  return classOrInterfaceDeclaration ; }   public ClassOrInterfaceDeclaration addInterface  (  String name )  {  return  addInterface  ( name ,  Modifier . PUBLIC ) ; }   public ClassOrInterfaceDeclaration addInterface  (  String name ,  Modifier ...  modifiers )  {  ClassOrInterfaceDeclaration  classOrInterfaceDeclaration =  new ClassOrInterfaceDeclaration  (   Arrays . stream  ( modifiers ) . collect  (  Collectors . toCollection  (   ( ) ->  EnumSet . noneOf  (  Modifier . class ) ) ) , true , name ) ;    getTypes  ( ) . add  ( classOrInterfaceDeclaration ) ;   classOrInterfaceDeclaration . setParentNode  ( this ) ;  return classOrInterfaceDeclaration ; }   public EnumDeclaration addEnum  (  String name )  {  return  addEnum  ( name ,  Modifier . PUBLIC ) ; }   public EnumDeclaration addEnum  (  String name ,  Modifier ...  modifiers )  {  EnumDeclaration  enumDeclaration =  new EnumDeclaration  (   Arrays . stream  ( modifiers ) . collect  (  Collectors . toCollection  (   ( ) ->  EnumSet . noneOf  (  Modifier . class ) ) ) , name ) ;    getTypes  ( ) . add  ( enumDeclaration ) ;   enumDeclaration . setParentNode  ( this ) ;  return enumDeclaration ; }   public AnnotationDeclaration addAnnotationDeclaration  (  String name )  {  return  addAnnotationDeclaration  ( name ,  Modifier . PUBLIC ) ; }   public AnnotationDeclaration addAnnotationDeclaration  (  String name ,  Modifier ...  modifiers )  {  AnnotationDeclaration  annotationDeclaration =  new AnnotationDeclaration  (   Arrays . stream  ( modifiers ) . collect  (  Collectors . toCollection  (   ( ) ->  EnumSet . noneOf  (  Modifier . class ) ) ) , name ) ;    getTypes  ( ) . add  ( annotationDeclaration ) ;   annotationDeclaration . setParentNode  ( this ) ;  return annotationDeclaration ; }   public ClassOrInterfaceDeclaration getClassByName  (  String className )  {  return  ( ClassOrInterfaceDeclaration )      getTypes  ( ) . stream  ( ) . filter  (  type ->     type . getNameAsString  ( ) . equals  ( className ) &&  type instanceof ClassOrInterfaceDeclaration &&  !   (  ( ClassOrInterfaceDeclaration ) type ) . isInterface  ( ) ) . findFirst  ( ) . orElse  ( null ) ; }   public ClassOrInterfaceDeclaration getInterfaceByName  (  String interfaceName )  {  return  ( ClassOrInterfaceDeclaration )      getTypes  ( ) . stream  ( ) . filter  (  type ->     type . getNameAsString  ( ) . equals  ( interfaceName ) &&  type instanceof ClassOrInterfaceDeclaration &&   (  ( ClassOrInterfaceDeclaration ) type ) . isInterface  ( ) ) . findFirst  ( ) . orElse  ( null ) ; }   public EnumDeclaration getEnumByName  (  String enumName )  {  return  ( EnumDeclaration )      getTypes  ( ) . stream  ( ) . filter  (  type ->    type . getNameAsString  ( ) . equals  ( enumName ) &&  type instanceof EnumDeclaration ) . findFirst  ( ) . orElse  ( null ) ; }   public AnnotationDeclaration getAnnotationDeclarationByName  (  String annotationName )  {  return  ( AnnotationDeclaration )      getTypes  ( ) . stream  ( ) . filter  (  type ->    type . getNameAsString  ( ) . equals  ( annotationName ) &&  type instanceof AnnotationDeclaration ) . findFirst  ( ) . orElse  ( null ) ; }    @ Override public  List  <  NodeList  <  ? > > getNodeLists  ( )  {  return  Arrays . asList  ( imports , types ) ; }   public CompilationUnit setPackageDeclaration  (  String s )  {  return  setPackageDeclaration  (  new PackageDeclaration  (  Name . parse  (  assertNotNull  ( s ) ) ) ) ; } }