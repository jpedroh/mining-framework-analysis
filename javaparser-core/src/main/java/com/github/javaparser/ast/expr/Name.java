  package     com . github . javaparser . ast . expr ;   import    com . github . javaparser . JavaParser ;  import    com . github . javaparser . Range ;  import     com . github . javaparser . ast . AllFieldsConstructor ;  import     com . github . javaparser . ast . Node ;  import     com . github . javaparser . ast . NodeList ;  import      com . github . javaparser . ast . nodeTypes . NodeWithAnnotations ;  import      com . github . javaparser . ast . nodeTypes . NodeWithIdentifier ;  import      com . github . javaparser . ast . observer . ObservableProperty ;  import      com . github . javaparser . ast . visitor . CloneVisitor ;  import      com . github . javaparser . ast . visitor . GenericVisitor ;  import      com . github . javaparser . ast . visitor . VoidVisitor ;  import     com . github . javaparser . metamodel . JavaParserMetaModel ;  import     com . github . javaparser . metamodel . NameMetaModel ;  import     com . github . javaparser . metamodel . NonEmptyProperty ;  import   java . util . Arrays ;  import   java . util . List ;  import   java . util . Optional ;  import static      com . github . javaparser . utils . Utils . assertNonEmpty ;  import static      com . github . javaparser . utils . Utils . assertNotNull ;  import   javax . annotation . Generated ;   public class Name  extends Node  implements   NodeWithIdentifier  < Name > ,  NodeWithAnnotations  < Name >  {    @ NonEmptyProperty private String  identifier ;   private Name  qualifier ;   private  NodeList  < AnnotationExpr >  annotations ;   public Name  ( )  {  this  ( null , null , "empty" ,  new  NodeList  < >  ( ) ) ; }   public Name  (   final String identifier )  {  this  ( null , null , identifier ,  new  NodeList  < >  ( ) ) ; }   public Name  (  Name qualifier ,   final String identifier )  {  this  ( null , qualifier , identifier ,  new  NodeList  < >  ( ) ) ; }    @ AllFieldsConstructor public Name  (  Name qualifier ,   final String identifier ,   NodeList  < AnnotationExpr > annotations )  {  this  ( null , qualifier , identifier , annotations ) ; }   public  @ Generated  ( "com.github.javaparser.generator.core.node.MainConstructorGenerator" ) Name  (  Range range ,  Name qualifier ,  String identifier ,   NodeList  < AnnotationExpr > annotations )  {  super  ( range ) ;   setQualifier  ( qualifier ) ;   setIdentifier  ( identifier ) ;   setAnnotations  ( annotations ) ;   customInitialization  ( ) ; }    @ Override public  <  R ,  A > R accept  (   final  GenericVisitor  < R , A > v ,   final A arg )  {  return  v . visit  ( this , arg ) ; }    @ Override public  <  A > void accept  (   final  VoidVisitor  < A > v ,   final A arg )  {   v . visit  ( this , arg ) ; }   public  @ Generated  ( "com.github.javaparser.generator.core.node.PropertyGenerator" ) String getIdentifier  ( )  {  return identifier ; }   public  @ Generated  ( "com.github.javaparser.generator.core.node.PropertyGenerator" ) Name setIdentifier  (   final String identifier )  {   assertNonEmpty  ( identifier ) ;  if  (  identifier ==  this . identifier )  {  return  ( Name ) this ; }   notifyPropertyChange  (  ObservableProperty . IDENTIFIER ,  this . identifier , identifier ) ;    this . identifier = identifier ;  return this ; }    @ Deprecated public static Name parse  (  String qualifiedName )  {   assertNonEmpty  ( qualifiedName ) ;  return  JavaParser . parseName  ( qualifiedName ) ; }   public String asString  ( )  {  if  (  qualifier != null )  {  return    qualifier . asString  ( ) + "." + identifier ; }  return identifier ; }   public  @ Generated  ( "com.github.javaparser.generator.core.node.PropertyGenerator" )  Optional  < Name > getQualifier  ( )  {  return  Optional . ofNullable  ( qualifier ) ; }   public  @ Generated  ( "com.github.javaparser.generator.core.node.PropertyGenerator" ) Name setQualifier  (   final Name qualifier )  {  if  (  qualifier ==  this . qualifier )  {  return  ( Name ) this ; }   notifyPropertyChange  (  ObservableProperty . QUALIFIER ,  this . qualifier , qualifier ) ;  if  (   this . qualifier != null )    this . qualifier . setParentNode  ( null ) ;    this . qualifier = qualifier ;   setAsParentNodeOf  ( qualifier ) ;  return this ; }    @ Override public  @ Generated  ( "com.github.javaparser.generator.core.node.RemoveMethodGenerator" ) boolean remove  (  Node node )  {  if  (  node == null )  return false ;  for (   int  i = 0 ;  i <  annotations . size  ( ) ;  i ++ )  {  if  (   annotations . get  ( i ) == node )  {   annotations . remove  ( i ) ;  return true ; } }  if  (  qualifier != null )  {  if  (  node == qualifier )  {   removeQualifier  ( ) ;  return true ; } }  return  super . remove  ( node ) ; }   public  @ Generated  ( "com.github.javaparser.generator.core.node.RemoveMethodGenerator" ) Name removeQualifier  ( )  {  return  setQualifier  (  ( Name ) null ) ; }   public  @ Generated  ( "com.github.javaparser.generator.core.node.PropertyGenerator" )  NodeList  < AnnotationExpr > getAnnotations  ( )  {  return annotations ; }   public  @ Generated  ( "com.github.javaparser.generator.core.node.PropertyGenerator" ) Name setAnnotations  (   final  NodeList  < AnnotationExpr > annotations )  {   assertNotNull  ( annotations ) ;  if  (  annotations ==  this . annotations )  {  return  ( Name ) this ; }   notifyPropertyChange  (  ObservableProperty . ANNOTATIONS ,  this . annotations , annotations ) ;  if  (   this . annotations != null )    this . annotations . setParentNode  ( null ) ;    this . annotations = annotations ;   setAsParentNodeOf  ( annotations ) ;  return this ; }    @ Override public  @ Generated  ( "com.github.javaparser.generator.core.node.GetNodeListsGenerator" )  List  <  NodeList  <  ? > > getNodeLists  ( )  {  return  Arrays . asList  (  getAnnotations  ( ) ) ; }    @ Override public  @ Generated  ( "com.github.javaparser.generator.core.node.CloneGenerator" ) Name clone  ( )  {  return  ( Name )  accept  (  new CloneVisitor  ( ) , null ) ; }    @ Override public  @ Generated  ( "com.github.javaparser.generator.core.node.GetMetaModelGenerator" ) NameMetaModel getMetaModel  ( )  {  return  JavaParserMetaModel . nameMetaModel ; } }