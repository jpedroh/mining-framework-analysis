  package      org . uma . jmetal . auto . algorithm . nsgaii ;   import     org . uma . jmetal . algorithm . Algorithm ;  import       org . uma . jmetal . algorithm . multiobjective . nsgaii . NSGAIIBuilder ;  import       org . uma . jmetal . algorithm . multiobjective . smpso . SMPSOBuilder ;  import      org . uma . jmetal . auto . algorithm . EvolutionaryAlgorithm ;  import     org . uma . jmetal . experiment . Experiment ;  import     org . uma . jmetal . experiment . ExperimentBuilder ;  import      org . uma . jmetal . experiment . component . GenerateWilcoxonTestTablesWithR ;  import      org . uma . jmetal . experiment . util . ExperimentAlgorithm ;  import      org . uma . jmetal . experiment . util . ExperimentProblem ;  import       org . uma . jmetal . operator . crossover . impl . SBXCrossover ;  import       org . uma . jmetal . operator . mutation . impl . PolynomialMutation ;  import     org . uma . jmetal . problem . Problem ;  import      org . uma . jmetal . problem . doubleproblem . DoubleProblem ;  import      org . uma . jmetal . problem . multiobjective . dtlz .  * ;  import      org . uma . jmetal . problem . multiobjective . wfg .  * ;  import      org . uma . jmetal . qualityindicator . impl . Epsilon ;  import      org . uma . jmetal . qualityindicator . impl . InvertedGenerationalDistancePlus ;  import      org . uma . jmetal . qualityindicator . impl . Spread ;  import       org . uma . jmetal . qualityindicator . impl . hypervolume . PISAHypervolume ;  import      org . uma . jmetal . solution . doublesolution . DoubleSolution ;  import     org . uma . jmetal . util . JMetalException ;  import       org . uma . jmetal . util . archive . impl . CrowdingDistanceArchive ;  import       org . uma . jmetal . util . evaluator . impl . SequentialSolutionListEvaluator ;  import  picocli . CommandLine ;  import   java . io . IOException ;  import   java . util . ArrayList ;  import   java . util . Arrays ;  import   java . util . List ;   public class AutoNSGAIIStudy  {   private static final  int  INDEPENDENT_RUNS = 25 ;   public static void main  (   String  [ ] args )  throws IOException  {  if  (   args . length != 1 )  {  throw  new JMetalException  ( "Missing argument: experimentBaseDirectory" ) ; }  String  experimentBaseDirectory =  args [ 0 ] ;   List  <  ExperimentProblem  < DoubleSolution > >  problemList =  new  ArrayList  < >  ( ) ;   problemList . add  (   new  ExperimentProblem  < >  (  new DTLZ1  ( ) ) . changeReferenceFrontTo  ( "DTLZ1.2D.pf" ) ) ;   problemList . add  (   new  ExperimentProblem  < >  (  new DTLZ3  ( ) ) . changeReferenceFrontTo  ( "DTLZ3.2D.pf" ) ) ;   problemList . add  (   new  ExperimentProblem  < >  (  new WFG8  ( ) ) . changeReferenceFrontTo  ( "WFG8.2D.pf" ) ) ;   List  <  ExperimentAlgorithm  < DoubleSolution ,  List  < DoubleSolution > > >  algorithmList =  configureAlgorithmList  ( problemList ) ;   Experiment  < DoubleSolution ,  List  < DoubleSolution > >  experiment =            new  ExperimentBuilder  < DoubleSolution ,  List  < DoubleSolution > >  ( "AutoNSGAIIStudy2" ) . setAlgorithmList  ( algorithmList ) . setProblemList  ( problemList ) . setExperimentBaseDirectory  ( experimentBaseDirectory ) . setOutputParetoFrontFileName  ( "FUN" ) . setOutputParetoSetFileName  ( "VAR" ) . setReferenceFrontDirectory  ( "/pareto_fronts" ) . setIndicatorList  (  Arrays . asList  (  new  Epsilon  < DoubleSolution >  ( ) ,  new  Spread  < DoubleSolution >  ( ) ,  new  PISAHypervolume  < DoubleSolution >  ( ) ,  new  InvertedGenerationalDistancePlus  < DoubleSolution >  ( ) ) ) . setIndependentRuns  ( INDEPENDENT_RUNS ) . setNumberOfCores  ( 8 ) . build  ( ) ;    new  ComputeQualityIndicators  < >  ( experiment ) . run  ( ) ;    new GenerateLatexTablesWithStatistics  ( experiment ) . run  ( ) ;    new  GenerateWilcoxonTestTablesWithR  < >  ( experiment ) . run  ( ) ;    new  GenerateFriedmanTestTables  < >  ( experiment ) . run  ( ) ;      new  GenerateBoxplotsWithR  < >  ( experiment ) . setRows  ( 5 ) . setColumns  ( 5 ) . run  ( ) ; }   static  List  <  ExperimentAlgorithm  < DoubleSolution ,  List  < DoubleSolution > > > configureAlgorithmList  (   List  <  ExperimentProblem  < DoubleSolution > > problemList )  {   List  <  ExperimentAlgorithm  < DoubleSolution ,  List  < DoubleSolution > > >  algorithms =  new  ArrayList  < >  ( ) ;  for (   int  run = 0 ;  run < INDEPENDENT_RUNS ;  run ++ )  {  for (   int  i = 0 ;  i <  problemList . size  ( ) ;  i ++ )  {   Algorithm  <  List  < DoubleSolution > >  algorithm =    new  NSGAIIBuilder  < >  (   problemList . get  ( i ) . getProblem  ( ) ,  new SBXCrossover  ( 1.0 , 5 ) ,  new PolynomialMutation  (  1.0 /    problemList . get  ( i ) . getProblem  ( ) . getNumberOfVariables  ( ) , 10.0 ) , 100 ) . setMaxEvaluations  ( 25000 ) . build  ( ) ;   algorithms . add  (  new  ExperimentAlgorithm  < >  ( algorithm , "NSGAII" ,  problemList . get  ( i ) , run ) ) ; }  for (   int  i = 0 ;  i <  problemList . size  ( ) ;  i ++ )  {   double  mutationProbability =  1.0 /    problemList . get  ( i ) . getProblem  ( ) . getNumberOfVariables  ( ) ;   double  mutationDistributionIndex = 20.0 ;   Algorithm  <  List  < DoubleSolution > >  algorithm =       new SMPSOBuilder  (  ( DoubleProblem )   problemList . get  ( i ) . getProblem  ( ) ,  new  CrowdingDistanceArchive  < DoubleSolution >  ( 100 ) ) . setMutation  (  new PolynomialMutation  ( mutationProbability , mutationDistributionIndex ) ) . setMaxIterations  ( 250 ) . setSwarmSize  ( 100 ) . setSolutionListEvaluator  (  new  SequentialSolutionListEvaluator  < DoubleSolution >  ( ) ) . build  ( ) ;   algorithms . add  (  new  ExperimentAlgorithm  < >  ( algorithm ,  problemList . get  ( i ) , run ) ) ; }  for (   int  i = 0 ;  i <  problemList . size  ( ) ;  i ++ )  {  String  problemName =     problemList . get  ( i ) . getProblem  ( ) . getClass  ( ) . toString  ( ) ;   problemName =  problemName . substring  ( 6 ) ;  String  argumentString =           "--problemName " + problemName + " --referenceFront " +   problemList . get  ( i ) . getReferenceFront  ( ) + " --algorithmResult externalArchive --populationSizeWithArchive 20 --offspringPopulationSize 5 " + "--variation crossoverAndMutationVariation --createInitialSolutions latinHypercubeSampling " + "--crossover SBX --crossoverProbability 0.9791 " + "--crossoverRepairStrategy round --sbxCrossoverDistributionIndex 5.0587 " + "--mutation uniform --mutationProbability 0.0463 " + "--mutationRepairStrategy random --uniformMutationPerturbation 0.2307 " + "--selection tournament --selectionTournamentSize 4  " ;   String  [ ]  arguments =  argumentString . split  ( " " ) ;  AutoNSGAIIConfigurator  configurator =  CommandLine . populateCommand  (  new AutoNSGAIIConfigurator  ( ) , arguments ) ;   EvolutionaryAlgorithm  < DoubleSolution >  algorithm =  configurator . configureAndGetAlgorithm  ( ) ;   algorithms . add  (  new  ExperimentAlgorithm  < >  ( algorithm , "AutoNSGAIIb" ,  problemList . get  ( i ) , run ) ) ; } }  return algorithms ; } }