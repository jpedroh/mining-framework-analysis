  package    com . sonar . it . php ;   import   java . io . IOException ;  import   java . io . InputStream ;  import   java . net . URI ;  import    java . nio . charset . Charset ;  import    java . nio . charset . StandardCharsets ;  import    java . nio . file . Files ;  import    java . nio . file . Path ;  import   java . util . ArrayList ;  import   java . util . List ;  import   org . junit . AfterClass ;  import   org . junit . BeforeClass ;  import   org . junit . ClassRule ;  import   org . junit . Test ;  import    org . junit . rules . TemporaryFolder ;  import     org . sonarsource . sonarlint . core . StandaloneSonarLintEngineImpl ;  import       org . sonarsource . sonarlint . core . analysis . api . ClientInputFile ;  import         org . sonarsource . sonarlint . core . client . api . common . analysis . Issue ;  import        org . sonarsource . sonarlint . core . client . api . standalone . StandaloneAnalysisConfiguration ;  import        org . sonarsource . sonarlint . core . client . api . standalone . StandaloneGlobalConfiguration ;  import        org . sonarsource . sonarlint . core . client . api . standalone . StandaloneSonarLintEngine ;  import      org . sonarsource . sonarlint . core . commons . IssueSeverity ;  import      org . sonarsource . sonarlint . core . commons . Language ;  import static      org . assertj . core . api . Assertions . assertThat ;  import static      org . assertj . core . api . Assertions . tuple ;   public class SonarLintTest  {    @ ClassRule public static TemporaryFolder  temp =  new TemporaryFolder  ( ) ;   private static StandaloneSonarLintEngine  sonarlintEngine ;   private static Path  baseDir ;    @ BeforeClass public static void prepare  ( )  throws Exception  {  StandaloneGlobalConfiguration  sonarLintConfig =       StandaloneGlobalConfiguration . builder  ( ) . addPlugin  (    Tests . PHP_PLUGIN_LOCATION . getFile  ( ) . toPath  ( ) ) . addEnabledLanguages  (  Language . PHP ) . setSonarLintUserHome  (   temp . newFolder  ( ) . toPath  ( ) ) . setLogOutput  (   ( formattedMessage , level ) ->  { } ) . build  ( ) ;   sonarlintEngine =  new StandaloneSonarLintEngineImpl  ( sonarLintConfig ) ;   baseDir =   temp . newFolder  ( ) . toPath  ( ) ; }    @ AfterClass public static void stop  ( )  {   sonarlintEngine . stop  ( ) ; }    @ Test public void shouldRaiseIssue  ( )  throws IOException  {  Path  filePath =    Tests . projectDirectoryFor  ( "sonarlint" ) . toPath  ( ) . resolve  ( "Math.php" ) ;   filePath =  Files . copy  ( filePath ,  baseDir . resolve  ( "Math.php" ) ) ;  ClientInputFile  inputFile =  createInputFile  ( filePath , false ) ;   List  < Issue >  issues =  new  ArrayList  < >  ( ) ;  StandaloneAnalysisConfiguration  configuration =     StandaloneAnalysisConfiguration . builder  ( ) . setBaseDir  ( baseDir ) . addInputFile  ( inputFile ) . build  ( ) ;   sonarlintEngine . analyze  ( configuration ,  issues :: add , null , null ) ;     assertThat  ( issues ) . extracting  ( "ruleKey" , "startLine" , "inputFile.path" , "severity" ) . containsOnly  (  tuple  ( "php:S101" , 4 ,  inputFile . relativePath  ( ) ,  IssueSeverity . MINOR ) ,  tuple  ( "php:S1808" , 18 ,  inputFile . relativePath  ( ) ,  IssueSeverity . MINOR ) ) ; }   private ClientInputFile createInputFile  (   final Path path ,   final boolean isTest )  {  return  new ClientInputFile  ( )  {    @ Override public String getPath  ( )  {  return  path . toString  ( ) ; }    @ Override public boolean isTest  ( )  {  return isTest ; }    @ Override public Charset getCharset  ( )  {  return  StandardCharsets . UTF_8 ; }    @ Override public  <  G > G getClientObject  ( )  {  return null ; }    @ Override public String contents  ( )  throws IOException  {  return  new String  (  Files . readAllBytes  ( path ) ,  StandardCharsets . UTF_8 ) ; }    @ Override public String relativePath  ( )  {  return  path . toString  ( ) ; }    @ Override public URI uri  ( )  {  return  path . toUri  ( ) ; }    @ Override public InputStream inputStream  ( )  throws IOException  {  return  Files . newInputStream  ( path ) ; } } ; } 
<<<<<<<
=======
   @ Test public void should_raise_issues  ( )  throws IOException  {  Path  filePath =    Tests . projectDirectoryFor  ( "sonarlint" ) . toPath  ( ) . resolve  ( "Math.php" ) ;   filePath =  Files . copy  ( filePath ,  baseDir . resolve  ( "Math.php" ) ) ;  ClientInputFile  inputFile =  prepareInputFile  ( filePath , false ) ;   List  < Issue >  issues =  new  ArrayList  < >  ( ) ;  StandaloneAnalysisConfiguration  configuration =      StandaloneAnalysisConfiguration . builder  ( ) . setBaseDir  ( baseDir ) . addInputFile  ( inputFile ) . addIncludedRules  (  RuleKey . parse  ( "php:S101" ) ,  RuleKey . parse  ( "php:S2964" ) ,  RuleKey . parse  ( "php:S1808" ) ,  RuleKey . parse  ( "php:S6600" ) ) . build  ( ) ;   sonarlintEngine . analyze  ( configuration ,  issues :: add , null , null ) ;     assertThat  ( issues ) . extracting  ( "ruleKey" , "startLine" , "inputFile.path" , "severity" ) . containsOnly  (  tuple  ( "php:S101" , 4 ,  inputFile . getPath  ( ) , "MINOR" ) ,  tuple  ( "php:S2964" , 9 ,  inputFile . getPath  ( ) , "MINOR" ) ,  tuple  ( "php:S1808" , 18 ,  inputFile . getPath  ( ) , "MINOR" ) ,  tuple  ( "php:S6600" , 10 ,  inputFile . getPath  ( ) , "CRITICAL" ) ,  tuple  ( "php:S6600" , 15 ,  inputFile . getPath  ( ) , "CRITICAL" ) ) ; }
>>>>>>>
 }