  package    org . gephi . desktop . appearance ;   import   java . awt . BorderLayout ;  import    java . awt . event . ActionEvent ;  import    java . awt . event . ActionListener ;  import    java . awt . event . ItemEvent ;  import    java . awt . event . ItemListener ;  import    java . awt . geom . Point2D ;  import   java . beans . PropertyChangeEvent ;  import   java . util . ArrayList ;  import   java . util . Collections ;  import   java . util . List ;  import   javax . swing . Box ;  import   javax . swing . DefaultComboBoxModel ;  import   javax . swing . JPanel ;  import   javax . swing . JToggleButton ;  import   javax . swing . SwingUtilities ;  import   javax . swing . UIManager ;  import     org . gephi . appearance . api . Function ;  import     org . gephi . appearance . api . Interpolator ;  import     org . gephi . appearance . api . RankingFunction ;  import     org . gephi . appearance . spi . TransformerUI ;  import      org . gephi . ui . components . splineeditor . SplineEditor ;  import     org . gephi . ui . utils . UIUtils ;  import     org . netbeans . api . settings . ConvertAsProperties ;  import    org . openide . awt . ActionID ;  import    org . openide . awt . ActionReference ;  import    org . openide . util . ImageUtilities ;  import    org . openide . util . Lookup ;  import    org . openide . util . NbBundle ;  import    org . openide . windows . TopComponent ;    @ ConvertAsProperties  (  dtd = "-//org.gephi.desktop.appearance//Appearance//EN" ,  autostore = false )  @  TopComponent . Description  (  preferredID = "AppearanceTopComponent" ,  iconBase = "org/gephi/desktop/appearance/resources/small.png" ,  persistenceType =  TopComponent . PERSISTENCE_ALWAYS )  @  TopComponent . Registration  (  mode = "rankingmode" ,  openAtStartup = true ,  roles =  { "overview" } )  @ ActionID  (  category = "Window" ,  id = "org.gephi.desktop.appearance.AppearanceTopComponent" )  @ ActionReference  (  path = "Menu/Window" ,  position = 1100 )  @  TopComponent . OpenActionRegistration  (  displayName = "#CTL_AppearanceAction" ,  preferredID = "AppearanceTopComponent" ) public class AppearanceTopComponent  extends TopComponent  implements   Lookup . Provider , AppearanceUIModelListener  {   private final String  NO_SELECTION =  NbBundle . getMessage  (  AppearanceTopComponent . class , "AppearanceTopComponent.choose.text" ) ;   private transient final AppearanceToolbar  toolbar ;   private transient final AppearanceUIController  controller ;   private transient JPanel  transformerPanel ;   private transient JToggleButton  listButton ;   private transient ItemListener  attributeListener ;   private transient SplineEditor  splineEditor ;   private transient AppearanceUIModel  model ;   private   javax . swing . JButton  applyButton ;   private   javax . swing . JComboBox  attibuteBox ;   private   javax . swing . JPanel  attributePanel ;   private   javax . swing . JToggleButton  autoApplyButton ;   private   javax . swing . JToolBar  autoApplyToolbar ;   private   javax . swing . JToolBar  categoryToolbar ;   private   javax . swing . JPanel  centerPanel ;   private   javax . swing . JPanel  controlPanel ;   private   javax . swing . JToolBar  controlToolbar ;   private   javax . swing . JToggleButton  enableAutoButton ;   private   javax . swing . JToggleButton  rankingLocalScaleButton ;   private   javax . swing . JToggleButton  partitionLocalScaleButton ;   private   javax . swing . JToggleButton  transformNullValuesButton ;   private   javax . swing . JPanel  mainPanel ;   private    org . jdesktop . swingx . JXHyperlink  splineButton ;   private   javax . swing . JToggleButton  stopAutoApplyButton ;   private   javax . swing . JToolBar  tranformerToolbar ;   public AppearanceTopComponent  ( )  {   setName  (  NbBundle . getMessage  (  AppearanceTopComponent . class , "CTL_AppearanceTopComponent" ) ) ;   controller =   Lookup . getDefault  ( ) . lookup  (  AppearanceUIController . class ) ;   model =  controller . getModel  ( ) ;   controller . addPropertyChangeListener  ( this ) ;   toolbar =  new AppearanceToolbar  ( controller ) ;   initComponents  ( ) ;   initControls  ( ) ;  if  (  UIUtils . isAquaLookAndFeel  ( ) )  {   mainPanel . setBackground  (  UIManager . getColor  ( "NbExplorerView.background" ) ) ;   centerPanel . setBackground  (  UIManager . getColor  ( "NbExplorerView.background" ) ) ; }   refreshModel  ( model ) ; }    @ Override public void propertyChange  (  PropertyChangeEvent pce )  {  if  (   pce . getPropertyName  ( ) . equals  (  AppearanceUIModelEvent . MODEL ) )  {   refreshModel  (  ( AppearanceUIModel )  pce . getNewValue  ( ) ) ; } else  if  (     pce . getPropertyName  ( ) . equals  (  AppearanceUIModelEvent . SELECTED_CATEGORY ) ||   pce . getPropertyName  ( ) . equals  (  AppearanceUIModelEvent . SELECTED_ELEMENT_CLASS ) ||   pce . getPropertyName  ( ) . equals  (  AppearanceUIModelEvent . SELECTED_TRANSFORMER_UI ) )  {   refreshCenterPanel  ( ) ;   refreshCombo  ( ) ;   refreshControls  ( ) ; } else  if  (   pce . getPropertyName  ( ) . equals  (  AppearanceUIModelEvent . SELECTED_FUNCTION ) )  {   refreshCenterPanel  ( ) ;   refreshCombo  ( ) ;   refreshControls  ( ) ; } else  if  (   pce . getPropertyName  ( ) . equals  (  AppearanceUIModelEvent . SET_AUTO_APPLY ) )  {   refreshControls  ( ) ; } else  if  (   pce . getPropertyName  ( ) . equals  (  AppearanceUIModelEvent . START_STOP_AUTO_APPLY ) )  {   refreshControls  ( ) ; } else  if  (   pce . getPropertyName  ( ) . equals  (  AppearanceUIModelEvent . SET_LOCAL_SCALE ) )  {   refreshControls  ( ) ; } else  if  (   pce . getPropertyName  ( ) . equals  (  AppearanceUIModelEvent . ATTRIBUTE_LIST ) )  {   refreshCombo  ( ) ; } else  if  (   pce . getPropertyName  ( ) . equals  (  AppearanceUIModelEvent . REFRESH_FUNCTION ) )  {   refreshCenterPanel  ( ) ; } else  if  (   pce . getPropertyName  ( ) . equals  (  AppearanceUIModelEvent . SET_TRANSFORM_NULL_VALUES ) )  {   refreshControls  ( ) ;   refreshCenterPanel  ( ) ; } }   public void refreshModel  (  AppearanceUIModel model )  {    this . model = model ;   refreshEnable  ( ) ;   refreshCenterPanel  ( ) ;   refreshCombo  ( ) ;   refreshControls  ( ) ; }   private void refreshCenterPanel  ( )  {   SwingUtilities . invokeLater  (  new Runnable  ( )  {    @ Override public void run  ( )  {  if  (  transformerPanel != null )  {   centerPanel . remove  ( transformerPanel ) ;   transformerPanel = null ; }  if  (  model != null )  {  TransformerUI  ui =  model . getSelectedTransformerUI  ( ) ;  if  (  ui != null )  {  boolean  attribute =  model . isAttributeTransformerUI  ( ui ) ;   attributePanel . setVisible  ( attribute ) ;  if  ( attribute )  {  Function  function =  model . getSelectedFunction  ( ) ;  if  (  function != null )  {   ui =  function . getUI  ( ) ;   transformerPanel =  ui . getPanel  ( function ) ; } } else  {  Function  function =  model . getSelectedFunction  ( ) ;   transformerPanel =  ui . getPanel  ( function ) ; }  if  (  transformerPanel != null )  {   transformerPanel . setOpaque  ( true ) ;   centerPanel . add  ( transformerPanel ,  BorderLayout . CENTER ) ; }   centerPanel . revalidate  ( ) ;   centerPanel . repaint  ( ) ;  return ; } }   attributePanel . setVisible  ( false ) ; } } ) ; }   private void refreshCombo  ( )  {  if  (    model != null &&   model . getSelectedTransformerUI  ( ) != null &&  model . isAttributeTransformerUI  (  model . getSelectedTransformerUI  ( ) ) )  {   final  List  < Function >  rows =  new  ArrayList  < >  (  model . getFunctions  ( ) ) ;   Collections . sort  ( rows ,   ( o1 , o2 ) ->  {  if  (   o1 . isAttribute  ( ) &&  !  o2 . isAttribute  ( ) )  {  return 1 ; } else  if  (   !  o1 . isAttribute  ( ) &&  o2 . isAttribute  ( ) )  {  return  - 1 ; }  return   o1 . toString  ( ) . compareTo  (  o2 . toString  ( ) ) ; } ) ;   SwingUtilities . invokeLater  (   ( ) ->  {   final DefaultComboBoxModel  comboBoxModel =  new DefaultComboBoxModel  ( ) ;  Function  selectedColumn =  model . getSelectedFunction  ( ) ;   attibuteBox . removeItemListener  ( attributeListener ) ;   comboBoxModel . addElement  ( NO_SELECTION ) ;   comboBoxModel . setSelectedItem  ( NO_SELECTION ) ;  for ( Function r : rows )  {   comboBoxModel . addElement  ( r ) ;  if  (   selectedColumn != null &&  selectedColumn . equals  ( r ) )  {   comboBoxModel . setSelectedItem  ( r ) ; } }   attributeListener =  new ItemListener  ( )  {    @ Override public void itemStateChanged  (  ItemEvent e )  {  if  (  model != null )  {  if  (  !   attibuteBox . getSelectedItem  ( ) . equals  ( NO_SELECTION ) )  {  Function  selectedItem =  ( Function )  attibuteBox . getSelectedItem  ( ) ;  Function  selectedFunction =  model . getSelectedFunction  ( ) ;  if  (  selectedFunction != selectedItem )  {   controller . setSelectedFunction  ( selectedItem ) ; } } else  {   controller . setSelectedFunction  ( null ) ; } } } } ;   attibuteBox . addItemListener  ( attributeListener ) ;   attibuteBox . setModel  ( comboBoxModel ) ; } ) ; } else  {   SwingUtilities . invokeLater  (   ( ) ->  {   attibuteBox . setModel  (  new DefaultComboBoxModel  ( ) ) ; } ) ; } }   private void refreshControls  ( )  {   SwingUtilities . invokeLater  (  new Runnable  ( )  {    @ Override public void run  ( )  {  if  (   model != null &&   model . getSelectedFunction  ( ) != null )  {   enableAutoButton . setEnabled  ( true ) ;  if  (   model . getAutoApplyTransformer  ( ) != null )  {   applyButton . setVisible  ( false ) ;   enableAutoButton . setSelected  ( true ) ;  AutoAppyTransformer  aat =  model . getAutoApplyTransformer  ( ) ;  if  (  aat . isRunning  ( ) )  {   autoApplyButton . setVisible  ( false ) ;   stopAutoApplyButton . setVisible  ( true ) ;   stopAutoApplyButton . setSelected  ( true ) ; } else  {   autoApplyButton . setVisible  ( true ) ;   autoApplyButton . setSelected  ( false ) ;   stopAutoApplyButton . setVisible  ( false ) ; } } else  {   autoApplyButton . setVisible  ( false ) ;   stopAutoApplyButton . setVisible  ( false ) ;   enableAutoButton . setSelected  ( false ) ;   applyButton . setVisible  ( true ) ;   applyButton . setEnabled  ( true ) ; }   rankingLocalScaleButton . setSelected  (  model . isRankingLocalScale  ( ) ) ;   partitionLocalScaleButton . setSelected  (  model . isPartitionLocalScale  ( ) ) ;   transformNullValuesButton . setSelected  (  model . isTransformNullValues  ( ) ) ;  return ; }   stopAutoApplyButton . setVisible  ( false ) ;   autoApplyButton . setVisible  ( false ) ;   applyButton . setVisible  ( true ) ;   applyButton . setEnabled  ( false ) ;   enableAutoButton . setEnabled  ( false ) ; } } ) ; }   private void initControls  ( )  {   toolbar . addRankingControl  ( splineButton ) ;   toolbar . addRankingControl  ( rankingLocalScaleButton ) ;   toolbar . addRankingControl  ( transformNullValuesButton ) ;   toolbar . addPartitionControl  ( partitionLocalScaleButton ) ;   toolbar . addPartitionControl  ( transformNullValuesButton ) ;   rankingLocalScaleButton . addActionListener  (  new ActionListener  ( )  {    @ Override public void actionPerformed  (  ActionEvent e )  {    controller . getAppearanceController  ( ) . setUseRankingLocalScale  (  rankingLocalScaleButton . isSelected  ( ) ) ; } } ) ;   partitionLocalScaleButton . addActionListener  (  new ActionListener  ( )  {    @ Override public void actionPerformed  (  ActionEvent e )  {    controller . getAppearanceController  ( ) . setUsePartitionLocalScale  (  partitionLocalScaleButton . isSelected  ( ) ) ; } } ) ;   transformNullValuesButton . addActionListener  (  new ActionListener  ( )  {    @ Override public void actionPerformed  (  ActionEvent e )  {    controller . getAppearanceController  ( ) . setTransformNullValues  (  transformNullValuesButton . isSelected  ( ) ) ; } } ) ;   splineButton . addActionListener  (  new ActionListener  ( )  {    @ Override public void actionPerformed  (  ActionEvent e )  {  RankingFunction  function =  ( RankingFunction )  model . getSelectedFunction  ( ) ;  if  (  splineEditor == null )  {   splineEditor =  new SplineEditor  (  NbBundle . getMessage  (  AppearanceTopComponent . class , "AppearanceTopComponent.splineEditor.title" ) ) ; }  Interpolator  interpolator =  function . getInterpolator  ( ) ;  if  (  interpolator instanceof  Interpolator . BezierInterpolator )  {   Interpolator . BezierInterpolator  bezierInterpolator =  (  Interpolator . BezierInterpolator ) interpolator ;   splineEditor . setControl1  (  bezierInterpolator . getControl1  ( ) ) ;   splineEditor . setControl2  (  bezierInterpolator . getControl2  ( ) ) ; } else  {   splineEditor . setControl1  (  new  Point2D . Float  ( 0 , 0 ) ) ;   splineEditor . setControl2  (  new  Point2D . Float  ( 1 , 1 ) ) ; }   splineEditor . setVisible  ( true ) ;   function . setInterpolator  (  new  Interpolator . BezierInterpolator  (  (  float )   splineEditor . getControl1  ( ) . getX  ( ) ,  (  float )   splineEditor . getControl1  ( ) . getY  ( ) ,  (  float )   splineEditor . getControl2  ( ) . getX  ( ) ,  (  float )   splineEditor . getControl2  ( ) . getY  ( ) ) ) ; } } ) ;   applyButton . addActionListener  (  new ActionListener  ( )  {    @ Override public void actionPerformed  (  ActionEvent e )  {   controller . transform  (  model . getSelectedFunction  ( ) ) ; } } ) ;   autoApplyButton . addActionListener  (  new ActionListener  ( )  {    @ Override public void actionPerformed  (  ActionEvent e )  {   controller . startAutoApply  ( ) ; } } ) ;   stopAutoApplyButton . addActionListener  (  new ActionListener  ( )  {    @ Override public void actionPerformed  (  ActionEvent e )  {   controller . stopAutoApply  ( ) ; } } ) ;   enableAutoButton . addActionListener  (  new ActionListener  ( )  {    @ Override public void actionPerformed  (  ActionEvent e )  {   controller . setAutoApply  (   model . getAutoApplyTransformer  ( ) == null ) ; } } ) ;   stopAutoApplyButton . setVisible  ( false ) ;   autoApplyButton . setVisible  ( false ) ; }   private void refreshEnable  ( )  {  boolean  modelEnabled =  isModelEnabled  ( ) ; }   private boolean isModelEnabled  ( )  {  return  model != null ; }   private void initComponents  ( )  {    java . awt . GridBagConstraints  gridBagConstraints ;   mainPanel =  new   javax . swing . JPanel  ( ) ;   categoryToolbar =  toolbar . getCategoryToolbar  ( ) ;   tranformerToolbar =  toolbar . getTransformerToolbar  ( ) ;   attributePanel =  new   javax . swing . JPanel  ( ) ;   attibuteBox =  new   javax . swing . JComboBox  ( ) ;   centerPanel =  new   javax . swing . JPanel  ( ) ;   controlToolbar =  toolbar . getControlToolbar  ( ) ;   rankingLocalScaleButton =  new   javax . swing . JToggleButton  ( ) ;   partitionLocalScaleButton =  new   javax . swing . JToggleButton  ( ) ;   transformNullValuesButton =  new   javax . swing . JToggleButton  ( ) ;   splineButton =  new    org . jdesktop . swingx . JXHyperlink  ( ) ;   controlPanel =  new   javax . swing . JPanel  ( ) ;   applyButton =  new   javax . swing . JButton  ( ) ;   stopAutoApplyButton =  new   javax . swing . JToggleButton  ( ) ;   autoApplyToolbar =  new   javax . swing . JToolBar  ( ) ;   enableAutoButton =  new   javax . swing . JToggleButton  ( ) ;   autoApplyButton =  new   javax . swing . JToggleButton  ( ) ;   setOpaque  ( true ) ;   setLayout  (  new   java . awt . BorderLayout  ( ) ) ;   mainPanel . setLayout  (  new   java . awt . GridBagLayout  ( ) ) ;   mainPanel . setOpaque  ( true ) ;   categoryToolbar . setFloatable  ( false ) ;   categoryToolbar . setRollover  ( true ) ;   categoryToolbar . setOpaque  ( true ) ;   gridBagConstraints =  new   java . awt . GridBagConstraints  ( ) ;    gridBagConstraints . gridx = 0 ;    gridBagConstraints . gridy = 0 ;    gridBagConstraints . fill =    java . awt . GridBagConstraints . HORIZONTAL ;    gridBagConstraints . anchor =    java . awt . GridBagConstraints . NORTH ;    gridBagConstraints . weightx = 1.0 ;   mainPanel . add  ( categoryToolbar , gridBagConstraints ) ;   tranformerToolbar . setFloatable  ( false ) ;   tranformerToolbar . setRollover  ( true ) ;   tranformerToolbar . setOpaque  ( true ) ;   gridBagConstraints =  new   java . awt . GridBagConstraints  ( ) ;    gridBagConstraints . gridx = 0 ;    gridBagConstraints . gridy = 1 ;    gridBagConstraints . fill =    java . awt . GridBagConstraints . HORIZONTAL ;    gridBagConstraints . anchor =    java . awt . GridBagConstraints . NORTH ;    gridBagConstraints . weightx = 1.0 ;   mainPanel . add  ( tranformerToolbar , gridBagConstraints ) ;   attributePanel . setOpaque  ( true ) ;   attributePanel . setLayout  (  new   java . awt . GridBagLayout  ( ) ) ;   gridBagConstraints =  new   java . awt . GridBagConstraints  ( ) ;    gridBagConstraints . gridx = 0 ;    gridBagConstraints . gridy = 0 ;    gridBagConstraints . fill =    java . awt . GridBagConstraints . HORIZONTAL ;    gridBagConstraints . weightx = 1.0 ;    gridBagConstraints . insets =  new   java . awt . Insets  ( 4 , 4 , 4 , 4 ) ;   attributePanel . add  ( attibuteBox , gridBagConstraints ) ;   gridBagConstraints =  new   java . awt . GridBagConstraints  ( ) ;    gridBagConstraints . gridx = 0 ;    gridBagConstraints . gridy = 2 ;    gridBagConstraints . fill =    java . awt . GridBagConstraints . HORIZONTAL ;    gridBagConstraints . anchor =    java . awt . GridBagConstraints . NORTH ;    gridBagConstraints . weightx = 1.0 ;   mainPanel . add  ( attributePanel , gridBagConstraints ) ;   centerPanel . setOpaque  ( true ) ;   centerPanel . setLayout  (  new   java . awt . BorderLayout  ( ) ) ;   gridBagConstraints =  new   java . awt . GridBagConstraints  ( ) ;    gridBagConstraints . gridx = 0 ;    gridBagConstraints . gridy = 3 ;    gridBagConstraints . fill =    java . awt . GridBagConstraints . BOTH ;    gridBagConstraints . weightx = 1.0 ;    gridBagConstraints . weighty = 1.0 ;   mainPanel . add  ( centerPanel , gridBagConstraints ) ;   controlToolbar . setFloatable  ( false ) ;   controlToolbar . setRollover  ( true ) ;   controlToolbar . setMargin  (  new   java . awt . Insets  ( 0 , 4 , 0 , 0 ) ) ;   controlToolbar . setOpaque  ( true ) ;   rankingLocalScaleButton . setIcon  (  ImageUtilities . loadImageIcon  ( "org/gephi/desktop/appearance/resources/funnel.png" , false ) ) ;   rankingLocalScaleButton . setToolTipText  (     org . openide . util . NbBundle . getMessage  (  AppearanceTopComponent . class , "AppearanceTopComponent.localScaleButton.toolTipText" ) ) ;   rankingLocalScaleButton . setFocusable  ( false ) ;   rankingLocalScaleButton . setSelectedIcon  (  new   javax . swing . ImageIcon  (  UIUtils . generateSelectedDarkImage  (  (   ImageUtilities . loadImageIcon  ( "org/gephi/desktop/appearance/resources/funnel.png" , false ) . getImage  ( ) ) ) ) ) ;   controlToolbar . add  ( rankingLocalScaleButton ) ;   partitionLocalScaleButton . setIcon  (  ImageUtilities . loadImageIcon  ( "org/gephi/desktop/appearance/resources/funnel.png" , false ) ) ;   partitionLocalScaleButton . setToolTipText  (     org . openide . util . NbBundle . getMessage  (  AppearanceTopComponent . class , "AppearanceTopComponent.partitionLocalScaleButton.toolTipText" ) ) ;   partitionLocalScaleButton . setFocusable  ( false ) ;   partitionLocalScaleButton . setSelectedIcon  (  new   javax . swing . ImageIcon  (  UIUtils . generateSelectedDarkImage  (  (   ImageUtilities . loadImageIcon  ( "org/gephi/desktop/appearance/resources/funnel.png" , false ) . getImage  ( ) ) ) ) ) ;   controlToolbar . add  ( partitionLocalScaleButton ) ;   transformNullValuesButton . setIcon  (  ImageUtilities . loadImageIcon  ( "org/gephi/desktop/appearance/resources/transformNull.png" , false ) ) ;   transformNullValuesButton . setToolTipText  (     org . openide . util . NbBundle . getMessage  (  AppearanceTopComponent . class , "AppearanceTopComponent.transformNullValues.toolTipText" ) ) ;   transformNullValuesButton . setFocusable  ( false ) ;   transformNullValuesButton . setSelectedIcon  (  new   javax . swing . ImageIcon  (  UIUtils . generateSelectedDarkImage  (  (   ImageUtilities . loadImageIcon  ( "org/gephi/desktop/appearance/resources/transformNull.png" , false ) . getImage  ( ) ) ) ) ) ;   controlToolbar . add  ( transformNullValuesButton ) ;      org . openide . awt . Mnemonics . setLocalizedText  ( splineButton ,     org . openide . util . NbBundle . getMessage  (  AppearanceTopComponent . class , "AppearanceTopComponent.splineButton.text" ) ) ;   splineButton . setToolTipText  (     org . openide . util . NbBundle . getMessage  (  AppearanceTopComponent . class , "AppearanceTopComponent.splineButton.toolTipText" ) ) ;   splineButton . setFocusPainted  ( false ) ;   splineButton . setFocusable  ( false ) ;   splineButton . setHorizontalAlignment  (    javax . swing . SwingConstants . LEFT ) ;   splineButton . setHorizontalTextPosition  (    javax . swing . SwingConstants . CENTER ) ;   controlToolbar . add  ( splineButton ) ;   gridBagConstraints =  new   java . awt . GridBagConstraints  ( ) ;    gridBagConstraints . gridx = 0 ;    gridBagConstraints . gridy = 4 ;    gridBagConstraints . fill =    java . awt . GridBagConstraints . HORIZONTAL ;    gridBagConstraints . anchor =    java . awt . GridBagConstraints . LAST_LINE_END ;    gridBagConstraints . weightx = 1.0 ;    gridBagConstraints . insets =  new   java . awt . Insets  ( 0 , 0 , 0 , 3 ) ;   mainPanel . add  ( controlToolbar , gridBagConstraints ) ;   controlPanel . setOpaque  ( true ) ;   controlPanel . setLayout  (  new   java . awt . GridBagLayout  ( ) ) ;   applyButton . setIcon  (  ImageUtilities . loadImageIcon  ( "org/gephi/desktop/appearance/resources/apply.gif" , false ) ) ;      org . openide . awt . Mnemonics . setLocalizedText  ( applyButton ,     org . openide . util . NbBundle . getMessage  (  AppearanceTopComponent . class , "AppearanceTopComponent.applyButton.text" ) ) ;   applyButton . setToolTipText  (     org . openide . util . NbBundle . getMessage  (  AppearanceTopComponent . class , "AppearanceTopComponent.applyButton.toolTipText" ) ) ;   applyButton . setMargin  (  new   java . awt . Insets  ( 0 , 14 , 0 , 14 ) ) ;   gridBagConstraints =  new   java . awt . GridBagConstraints  ( ) ;    gridBagConstraints . gridx = 3 ;    gridBagConstraints . gridy = 0 ;    gridBagConstraints . anchor =    java . awt . GridBagConstraints . SOUTHEAST ;    gridBagConstraints . insets =  new   java . awt . Insets  ( 0 , 18 , 3 , 5 ) ;   controlPanel . add  ( applyButton , gridBagConstraints ) ;   stopAutoApplyButton . setIcon  (  ImageUtilities . loadImageIcon  ( "org/gephi/desktop/appearance/resources/stop.png" , false ) ) ;   stopAutoApplyButton . setSelected  ( true ) ;      org . openide . awt . Mnemonics . setLocalizedText  ( stopAutoApplyButton ,     org . openide . util . NbBundle . getMessage  (  AppearanceTopComponent . class , "AppearanceTopComponent.stopAutoApplyButton.text" ) ) ;   stopAutoApplyButton . setToolTipText  (     org . openide . util . NbBundle . getMessage  (  AppearanceTopComponent . class , "AppearanceTopComponent.stopAutoApplyButton.toolTipText" ) ) ;   stopAutoApplyButton . setFocusable  ( false ) ;   stopAutoApplyButton . setHorizontalTextPosition  (    javax . swing . SwingConstants . RIGHT ) ;   stopAutoApplyButton . setMargin  (  new   java . awt . Insets  ( 0 , 7 , 0 , 7 ) ) ;   stopAutoApplyButton . setVerticalTextPosition  (    javax . swing . SwingConstants . BOTTOM ) ;   gridBagConstraints =  new   java . awt . GridBagConstraints  ( ) ;    gridBagConstraints . gridx = 2 ;    gridBagConstraints . gridy = 0 ;    gridBagConstraints . anchor =    java . awt . GridBagConstraints . SOUTHEAST ;    gridBagConstraints . insets =  new   java . awt . Insets  ( 0 , 3 , 3 , 5 ) ;   controlPanel . add  ( stopAutoApplyButton , gridBagConstraints ) ;   autoApplyToolbar . setFloatable  ( false ) ;   autoApplyToolbar . setRollover  ( true ) ;   autoApplyToolbar . setOpaque  ( true ) ;   enableAutoButton . setIcon  (  ImageUtilities . loadImageIcon  ( "org/gephi/desktop/appearance/resources/chain.png" , false ) ) ;   enableAutoButton . setToolTipText  (     org . openide . util . NbBundle . getMessage  (  AppearanceTopComponent . class , "AppearanceTopComponent.enableAutoButton.toolTipText" ) ) ;   enableAutoButton . setFocusable  ( false ) ;   enableAutoButton . setHorizontalTextPosition  (    javax . swing . SwingConstants . CENTER ) ;   enableAutoButton . setVerticalTextPosition  (    javax . swing . SwingConstants . BOTTOM ) ;   autoApplyToolbar . add  (  Box . createHorizontalGlue  ( ) ) ;   autoApplyToolbar . add  ( enableAutoButton ) ;   gridBagConstraints =  new   java . awt . GridBagConstraints  ( ) ;    gridBagConstraints . gridx = 1 ;    gridBagConstraints . gridy = 0 ;    gridBagConstraints . fill =    java . awt . GridBagConstraints . BOTH ;    gridBagConstraints . weightx = 1.0 ;   controlPanel . add  ( autoApplyToolbar , gridBagConstraints ) ;   autoApplyButton . setIcon  (  ImageUtilities . loadImageIcon  ( "org/gephi/desktop/appearance/resources/apply.gif" , false ) ) ;      org . openide . awt . Mnemonics . setLocalizedText  ( autoApplyButton ,     org . openide . util . NbBundle . getMessage  (  AppearanceTopComponent . class , "AppearanceTopComponent.autoApplyButton.text" ) ) ;   autoApplyButton . setToolTipText  (     org . openide . util . NbBundle . getMessage  (  AppearanceTopComponent . class , "AppearanceTopComponent.autoApplyButton.toolTipText" ) ) ;   autoApplyButton . setFocusable  ( false ) ;   autoApplyButton . setHorizontalTextPosition  (    javax . swing . SwingConstants . RIGHT ) ;   autoApplyButton . setMargin  (  new   java . awt . Insets  ( 0 , 7 , 0 , 7 ) ) ;   autoApplyButton . setVerticalTextPosition  (    javax . swing . SwingConstants . BOTTOM ) ;   gridBagConstraints =  new   java . awt . GridBagConstraints  ( ) ;    gridBagConstraints . gridx = 2 ;    gridBagConstraints . gridy = 0 ;    gridBagConstraints . anchor =    java . awt . GridBagConstraints . SOUTHEAST ;    gridBagConstraints . insets =  new   java . awt . Insets  ( 0 , 3 , 3 , 5 ) ;   controlPanel . add  ( autoApplyButton , gridBagConstraints ) ;   gridBagConstraints =  new   java . awt . GridBagConstraints  ( ) ;    gridBagConstraints . gridx = 0 ;    gridBagConstraints . gridy = 5 ;    gridBagConstraints . fill =    java . awt . GridBagConstraints . HORIZONTAL ;    gridBagConstraints . weightx = 1.0 ;   mainPanel . add  ( controlPanel , gridBagConstraints ) ;   add  ( mainPanel ,    java . awt . BorderLayout . CENTER ) ; }  void writeProperties  (    java . util . Properties p )  {   p . setProperty  ( "version" , "1.0" ) ; }  void readProperties  (    java . util . Properties p )  {  String  version =  p . getProperty  ( "version" ) ; } }