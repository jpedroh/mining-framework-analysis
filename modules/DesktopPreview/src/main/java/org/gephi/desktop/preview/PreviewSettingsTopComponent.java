  package    org . gephi . desktop . preview ;   import   java . awt . BorderLayout ;  import    java . awt . event . ActionEvent ;  import    java . awt . event . ActionListener ;  import    java . awt . event . ItemEvent ;  import    java . awt . event . ItemListener ;  import   java . beans . PropertyChangeEvent ;  import   java . beans . PropertyChangeListener ;  import   java . text . NumberFormat ;  import   javax . swing . DefaultComboBoxModel ;  import   javax . swing . JPanel ;  import   javax . swing . JTabbedPane ;  import   javax . swing . UIManager ;  import    javax . swing . event . ChangeEvent ;  import    javax . swing . event . ChangeListener ;  import       org . gephi . desktop . io . export . api . VectorialFileExporterUI ;  import      org . gephi . desktop . preview . api . PreviewUIController ;  import      org . gephi . desktop . preview . api . PreviewUIModel ;  import     org . gephi . preview . api . PreviewController ;  import     org . gephi . preview . api . PreviewModel ;  import     org . gephi . preview . api . PreviewPreset ;  import     org . gephi . preview . spi . PreviewUI ;  import     org . gephi . ui . utils . UIUtils ;  import     org . netbeans . api . settings . ConvertAsProperties ;  import   org . openide . DialogDisplayer ;  import   org . openide . NotifyDescriptor ;  import    org . openide . awt . ActionID ;  import    org . openide . awt . ActionReference ;  import    org . openide . awt . StatusDisplayer ;  import     org . openide . explorer . propertysheet . PropertySheet ;  import    org . openide . nodes . Node ;  import    org . openide . util . ImageUtilities ;  import    org . openide . util . Lookup ;  import    org . openide . util . NbBundle ;  import    org . openide . windows . TopComponent ;    @ ConvertAsProperties  (  dtd = "-//org.gephi.desktop.preview//PreviewSettings//EN" ,  autostore = false )  @  TopComponent . Description  (  preferredID = "PreviewSettingsTopComponent" ,  iconBase = "org/gephi/desktop/preview/resources/settings.png" ,  persistenceType =  TopComponent . PERSISTENCE_NEVER )  @  TopComponent . Registration  (  mode = "layoutmode" ,  openAtStartup = true ,  roles =  { "preview" } )  @ ActionID  (  category = "Window" ,  id = "org.gephi.desktop.preview.PreviewSettingsTopComponent" )  @ ActionReference  (  path = "Menu/Window" ,  position = 1000 )  @  TopComponent . OpenActionRegistration  (  displayName = "#CTL_PreviewSettingsTopComponent" ,  preferredID = "PreviewSettingsTopComponent" ) public final class PreviewSettingsTopComponent  extends TopComponent  implements  PropertyChangeListener  {   private final String  NO_SELECTION = "---" ;   private final transient PropertySheet  propertySheet ;   private final transient RendererManager  rendererManager ;   private final transient JTabbedPane  tabbedPane ;   private  int  defaultPresetLimit ;   private   javax . swing . JLabel  box ;   private   javax . swing . JLabel  labelExport ;   private   javax . swing . JLabel  labelPreset ;   private   javax . swing . JLabel  labelRatio ;   private   javax . swing . JPanel  mainPanel ;   private   javax . swing . JComboBox  presetComboBox ;   private   javax . swing . JPanel  presetPanel ;   private   javax . swing . JToolBar  presetToolbar ;   private   javax . swing . JPanel  propertiesPanel ;   private   javax . swing . JLabel  ratioLabel ;   private   javax . swing . JSlider  ratioSlider ;   private   javax . swing . JButton  refreshButton ;   private   javax . swing . JButton  saveButton ;   private   javax . swing . JToolBar  southToolbar ;   private   javax . swing . JButton  svgExportButton ;   public PreviewSettingsTopComponent  ( )  {   initComponents  ( ) ;   setName  (  NbBundle . getMessage  (  PreviewSettingsTopComponent . class , "CTL_PreviewSettingsTopComponent" ) ) ;  if  (  UIUtils . isAquaLookAndFeel  ( ) )  {   mainPanel . setBackground  (  UIManager . getColor  ( "NbExplorerView.background" ) ) ; }   propertySheet =  new PropertySheet  ( ) ;   propertySheet . setNodes  (  new Node  [ ]  {  new PreviewNode  ( propertySheet ) } ) ;   propertySheet . setDescriptionAreaVisible  ( false ) ;   rendererManager =  new RendererManager  ( ) ;   tabbedPane =  new JTabbedPane  ( ) ;   tabbedPane . addTab  (  NbBundle . getMessage  (  PreviewSettingsTopComponent . class , "PreviewSettingsTopComponent.propertySheetTab" ) , propertySheet ) ;   tabbedPane . addTab  (  NbBundle . getMessage  (  PreviewSettingsTopComponent . class , "PreviewSettingsTopComponent.rendererManagerTab" ) , rendererManager ) ;   propertiesPanel . add  ( tabbedPane ,  BorderLayout . CENTER ) ;   tabbedPane . addChangeListener  (  new ChangeListener  ( )  {    @ Override public void stateChanged  (  ChangeEvent e )  {  if  (   tabbedPane . getSelectedComponent  ( ) == propertySheet )  {   propertySheet . setNodes  (  new Node  [ ]  {  new PreviewNode  ( propertySheet ) } ) ; } } } ) ;   ratioSlider . addChangeListener  (  new ChangeListener  ( )  {   final NumberFormat  formatter =  NumberFormat . getPercentInstance  ( ) ;    @ Override public void stateChanged  (  ChangeEvent e )  {   float  val =   ratioSlider . getValue  ( ) / 100f ;  if  (  val == 0f )  {   ratioLabel . setText  (  NbBundle . getMessage  (  PreviewSettingsTopComponent . class , "PreviewSettingsTopComponent.ratio.minimum" ) ) ; } else  {   ratioLabel . setText  (  formatter . format  ( val ) ) ; }  PreviewUIController  puic =   Lookup . getDefault  ( ) . lookup  (  PreviewUIController . class ) ;   puic . setVisibilityRatio  (  getVisibilityRatio  ( ) ) ; } } ) ;   presetComboBox . addItemListener  (  new ItemListener  ( )  {    @ Override public void itemStateChanged  (  ItemEvent e )  {  PreviewUIController  pc =   Lookup . getDefault  ( ) . lookup  (  PreviewUIController . class ) ;  PreviewUIModel  previewModel =  pc . getModel  ( ) ;  if  (   previewModel != null &&   presetComboBox . getSelectedItem  ( ) instanceof PreviewPreset )  {  if  (   previewModel . getCurrentPreset  ( ) !=  presetComboBox . getSelectedItem  ( ) )  {   pc . setCurrentPreset  (  ( PreviewPreset )  presetComboBox . getSelectedItem  ( ) ) ;   propertySheet . setNodes  (  new Node  [ ]  {  new PreviewNode  ( propertySheet ) } ) ; } } } } ) ;   svgExportButton . addActionListener  (  new ActionListener  ( )  {    @ Override public void actionPerformed  (  ActionEvent e )  {  VectorialFileExporterUI  ui =   Lookup . getDefault  ( ) . lookup  (  VectorialFileExporterUI . class ) ;   ui . action  ( ) ; } } ) ;   setup  ( null ) ;  PreviewUIController  controller =   Lookup . getDefault  ( ) . lookup  (  PreviewUIController . class ) ;   controller . addPropertyChangeListener  ( this ) ;  PreviewUIModel  m =  controller . getModel  ( ) ;  if  (  m != null )  {   setup  ( m ) ;   enableRefreshButton  ( ) ; } }    @ Override public void propertyChange  (  PropertyChangeEvent evt )  {  if  (   evt . getPropertyName  ( ) . equals  (  PreviewUIController . SELECT ) )  {  PreviewUIModel  model =  ( PreviewUIModel )  evt . getNewValue  ( ) ;   setup  ( model ) ;  if  (  model != null )  {   enableRefreshButton  ( ) ; } else  {   disableRefreshButton  ( ) ; } } else  if  (   evt . getPropertyName  ( ) . equals  (  PreviewUIController . REFRESHED ) )  { } else  if  (   evt . getPropertyName  ( ) . equals  (  PreviewUIController . REFRESHING ) )  {  boolean  refrehsing =  ( Boolean )  evt . getNewValue  ( ) ;  if  ( refrehsing )  {   disableRefreshButton  ( ) ; } else  {   enableRefreshButton  ( ) ; } } }   public void setup  (  PreviewUIModel previewModel )  {   propertySheet . setNodes  (  new Node  [ ]  {  new PreviewNode  ( propertySheet ) } ) ;  PreviewUIController  previewUIController =   Lookup . getDefault  ( ) . lookup  (  PreviewUIController . class ) ;  if  (  previewModel != null )  {   ratioSlider . setValue  (  (  int )  (   previewModel . getVisibilityRatio  ( ) * 100 ) ) ; }  if  (  previewModel == null )  {   saveButton . setEnabled  ( false ) ;   labelPreset . setEnabled  ( false ) ;   presetComboBox . setEnabled  ( false ) ;   presetComboBox . setModel  (  new   javax . swing . DefaultComboBoxModel  (  new String  [ ]  { "---" } ) ) ; } else  {   saveButton . setEnabled  ( true ) ;   labelPreset . setEnabled  ( true ) ;   presetComboBox . setEnabled  ( true ) ;  DefaultComboBoxModel  comboBoxModel =  new DefaultComboBoxModel  ( ) ;   defaultPresetLimit = 0 ;  for ( PreviewPreset preset :  previewUIController . getDefaultPresets  ( ) )  {   comboBoxModel . addElement  ( preset ) ;   defaultPresetLimit ++ ; }   PreviewPreset  [ ]  userPresets =  previewUIController . getUserPresets  ( ) ;  if  (   userPresets . length > 0 )  {   comboBoxModel . addElement  ( NO_SELECTION ) ;  for ( PreviewPreset preset : userPresets )  {   comboBoxModel . addElement  ( preset ) ; } }   comboBoxModel . setSelectedItem  (  previewModel . getCurrentPreset  ( ) ) ;   presetComboBox . setModel  ( comboBoxModel ) ; }   int  tabCount =  tabbedPane . getTabCount  ( ) ;  for (   int  i = 2 ;  i < tabCount ;  i ++ )  {   tabbedPane . removeTabAt  ( i ) ; }  for ( PreviewUI pui :   Lookup . getDefault  ( ) . lookupAll  (  PreviewUI . class ) )  {   pui . unsetup  ( ) ; }  if  (  previewModel != null )  {  PreviewController  previewController =   Lookup . getDefault  ( ) . lookup  (  PreviewController . class ) ;  PreviewModel  pModel =  previewController . getModel  ( ) ;  for ( PreviewUI pui :   Lookup . getDefault  ( ) . lookupAll  (  PreviewUI . class ) )  {   pui . setup  ( pModel ) ;  JPanel  pluginPanel =  pui . getPanel  ( ) ;  if  (  UIUtils . isAquaLookAndFeel  ( ) )  {   pluginPanel . setBackground  (  UIManager . getColor  ( "NbExplorerView.background" ) ) ; }  if  (   pui . getIcon  ( ) != null )  {   tabbedPane . addTab  (  pui . getPanelTitle  ( ) ,  pui . getIcon  ( ) , pluginPanel ) ; } else  {   tabbedPane . addTab  (  pui . getPanelTitle  ( ) , pluginPanel ) ; } } } }   public void unsetup  ( )  { }   public  float getVisibilityRatio  ( )  {   float  value =  ratioSlider . getValue  ( ) ;  if  (  value < 0 )  {   value = 0 ; } else  if  (  value > 100 )  {   value = 100 ; }  return  value / 100 ; }   public void enableRefreshButton  ( )  {   refreshButton . setEnabled  ( true ) ;   labelRatio . setEnabled  ( true ) ;   ratioLabel . setEnabled  ( true ) ;   ratioSlider . setEnabled  ( true ) ;   labelExport . setEnabled  ( true ) ;   svgExportButton . setEnabled  ( true ) ; }   public void disableRefreshButton  ( )  {   refreshButton . setEnabled  ( false ) ;   labelRatio . setEnabled  ( false ) ;   ratioLabel . setEnabled  ( false ) ;   ratioSlider . setEnabled  ( false ) ;   labelExport . setEnabled  ( false ) ;   svgExportButton . setEnabled  ( false ) ; }   private boolean isDefaultPreset  (  PreviewPreset preset )  {   int  i ;  for (  i = 0 ;  i <  presetComboBox . getItemCount  ( ) ;  i ++ )  {  if  (    presetComboBox . getModel  ( ) . getElementAt  ( i ) . equals  ( preset ) )  {  break ; } }  return  i < defaultPresetLimit ; }   private void initComponents  ( )  {    java . awt . GridBagConstraints  gridBagConstraints ;   mainPanel =  new   javax . swing . JPanel  ( ) ;   presetPanel =  new   javax . swing . JPanel  ( ) ;   presetComboBox =  new   javax . swing . JComboBox  ( ) ;   presetToolbar =  new   javax . swing . JToolBar  ( ) ;   box =  new   javax . swing . JLabel  ( ) ;   saveButton =  new   javax . swing . JButton  ( ) ;   labelPreset =  new   javax . swing . JLabel  ( ) ;   refreshButton =  new   javax . swing . JButton  ( ) ;   propertiesPanel =  new   javax . swing . JPanel  ( ) ;   labelRatio =  new   javax . swing . JLabel  ( ) ;   ratioLabel =  new   javax . swing . JLabel  ( ) ;   ratioSlider =  new   javax . swing . JSlider  ( ) ;   southToolbar =  new   javax . swing . JToolBar  ( ) ;   labelExport =  new   javax . swing . JLabel  ( ) ;   svgExportButton =  new   javax . swing . JButton  ( ) ;   setLayout  (  new   java . awt . BorderLayout  ( ) ) ;   mainPanel . setLayout  (  new   java . awt . GridBagLayout  ( ) ) ;   presetPanel . setOpaque  ( false ) ;   presetPanel . setLayout  (  new   java . awt . GridBagLayout  ( ) ) ;   presetComboBox . setModel  (  new   javax . swing . DefaultComboBoxModel  (  new String  [ ]  { "---" } ) ) ;   presetComboBox . setEnabled  ( false ) ;   gridBagConstraints =  new   java . awt . GridBagConstraints  ( ) ;    gridBagConstraints . gridx = 0 ;    gridBagConstraints . gridy = 1 ;    gridBagConstraints . gridwidth = 2 ;    gridBagConstraints . fill =    java . awt . GridBagConstraints . HORIZONTAL ;    gridBagConstraints . ipady = 5 ;    gridBagConstraints . weightx = 2.0 ;    gridBagConstraints . insets =  new   java . awt . Insets  ( 5 , 5 , 10 , 5 ) ;   presetPanel . add  ( presetComboBox , gridBagConstraints ) ;   presetToolbar . setBorder  ( null ) ;   presetToolbar . setFloatable  ( false ) ;   presetToolbar . setRollover  ( true ) ;   presetToolbar . setOpaque  ( false ) ;      org . openide . awt . Mnemonics . setLocalizedText  ( box ,     org . openide . util . NbBundle . getMessage  (  PreviewSettingsTopComponent . class , "PreviewSettingsTopComponent.box.text" ) ) ;   box . setMaximumSize  (  new   java . awt . Dimension  ( 32767 , 32767 ) ) ;   presetToolbar . add  ( box ) ;   saveButton . setIcon  (  ImageUtilities . loadImageIcon  ( "org/gephi/desktop/preview/resources/save.png" , false ) ) ;      org . openide . awt . Mnemonics . setLocalizedText  ( saveButton ,     org . openide . util . NbBundle . getMessage  (  PreviewSettingsTopComponent . class , "PreviewSettingsTopComponent.saveButton.text" ) ) ;   saveButton . setToolTipText  (     org . openide . util . NbBundle . getMessage  (  PreviewSettingsTopComponent . class , "PreviewSettingsTopComponent.saveButton.toolTipText" ) ) ;   saveButton . setEnabled  ( false ) ;   saveButton . setFocusable  ( false ) ;   saveButton . setHorizontalAlignment  (    javax . swing . SwingConstants . RIGHT ) ;   saveButton . addActionListener  (  new    java . awt . event . ActionListener  ( )  {    @ Override public void actionPerformed  (     java . awt . event . ActionEvent evt )  {   saveButtonActionPerformed  ( evt ) ; } } ) ;   presetToolbar . add  ( saveButton ) ;   gridBagConstraints =  new   java . awt . GridBagConstraints  ( ) ;    gridBagConstraints . gridx = 1 ;    gridBagConstraints . gridy = 0 ;    gridBagConstraints . fill =    java . awt . GridBagConstraints . HORIZONTAL ;    gridBagConstraints . insets =  new   java . awt . Insets  ( 3 , 5 , 0 , 5 ) ;   presetPanel . add  ( presetToolbar , gridBagConstraints ) ;   labelPreset . setIcon  (  ImageUtilities . loadImageIcon  ( "org/gephi/desktop/preview/resources/preset.png" , false ) ) ;      org . openide . awt . Mnemonics . setLocalizedText  ( labelPreset ,     org . openide . util . NbBundle . getMessage  (  PreviewSettingsTopComponent . class , "PreviewSettingsTopComponent.labelPreset.text" ) ) ;   labelPreset . setEnabled  ( false ) ;   labelPreset . setHorizontalTextPosition  (    javax . swing . SwingConstants . RIGHT ) ;   gridBagConstraints =  new   java . awt . GridBagConstraints  ( ) ;    gridBagConstraints . gridx = 0 ;    gridBagConstraints . gridy = 0 ;    gridBagConstraints . insets =  new   java . awt . Insets  ( 3 , 5 , 0 , 0 ) ;   presetPanel . add  ( labelPreset , gridBagConstraints ) ;   gridBagConstraints =  new   java . awt . GridBagConstraints  ( ) ;    gridBagConstraints . gridx = 0 ;    gridBagConstraints . gridy = 0 ;    gridBagConstraints . gridwidth = 3 ;    gridBagConstraints . fill =    java . awt . GridBagConstraints . HORIZONTAL ;   mainPanel . add  ( presetPanel , gridBagConstraints ) ;   refreshButton . setIcon  (  ImageUtilities . loadImageIcon  ( "org/gephi/desktop/preview/resources/refresh.png" , false ) ) ;      org . openide . awt . Mnemonics . setLocalizedText  ( refreshButton ,     org . openide . util . NbBundle . getMessage  (  PreviewSettingsTopComponent . class , "PreviewSettingsTopComponent.refreshButton.text" ) ) ;   refreshButton . setEnabled  ( false ) ;   refreshButton . setMargin  (  new   java . awt . Insets  ( 10 , 14 , 10 , 14 ) ) ;   refreshButton . addActionListener  (  new    java . awt . event . ActionListener  ( )  {    @ Override public void actionPerformed  (     java . awt . event . ActionEvent evt )  {   refreshButtonActionPerformed  ( evt ) ; } } ) ;   gridBagConstraints =  new   java . awt . GridBagConstraints  ( ) ;    gridBagConstraints . gridx = 2 ;    gridBagConstraints . gridy = 2 ;    gridBagConstraints . gridheight = 3 ;    gridBagConstraints . anchor =    java . awt . GridBagConstraints . EAST ;    gridBagConstraints . insets =  new   java . awt . Insets  ( 7 , 5 , 0 , 10 ) ;   mainPanel . add  ( refreshButton , gridBagConstraints ) ;   propertiesPanel . setOpaque  ( false ) ;   propertiesPanel . setLayout  (  new   java . awt . BorderLayout  ( ) ) ;   gridBagConstraints =  new   java . awt . GridBagConstraints  ( ) ;    gridBagConstraints . gridx = 0 ;    gridBagConstraints . gridy = 1 ;    gridBagConstraints . gridwidth = 3 ;    gridBagConstraints . fill =    java . awt . GridBagConstraints . BOTH ;    gridBagConstraints . weightx = 1.0 ;    gridBagConstraints . weighty = 1.0 ;   mainPanel . add  ( propertiesPanel , gridBagConstraints ) ;      org . openide . awt . Mnemonics . setLocalizedText  ( labelRatio ,     org . openide . util . NbBundle . getMessage  (  PreviewSettingsTopComponent . class , "PreviewSettingsTopComponent.labelRatio.text" ) ) ;   labelRatio . setEnabled  ( false ) ;   gridBagConstraints =  new   java . awt . GridBagConstraints  ( ) ;    gridBagConstraints . gridx = 0 ;    gridBagConstraints . gridy = 2 ;    gridBagConstraints . anchor =    java . awt . GridBagConstraints . WEST ;    gridBagConstraints . insets =  new   java . awt . Insets  ( 5 , 7 , 3 , 5 ) ;   mainPanel . add  ( labelRatio , gridBagConstraints ) ;      org . openide . awt . Mnemonics . setLocalizedText  ( ratioLabel ,     org . openide . util . NbBundle . getMessage  (  PreviewSettingsTopComponent . class , "PreviewSettingsTopComponent.ratioLabel.text" ) ) ;   ratioLabel . setEnabled  ( false ) ;   gridBagConstraints =  new   java . awt . GridBagConstraints  ( ) ;    gridBagConstraints . gridx = 1 ;    gridBagConstraints . gridy = 2 ;    gridBagConstraints . fill =    java . awt . GridBagConstraints . HORIZONTAL ;    gridBagConstraints . anchor =    java . awt . GridBagConstraints . WEST ;    gridBagConstraints . weightx = 1.0 ;    gridBagConstraints . insets =  new   java . awt . Insets  ( 5 , 0 , 3 , 0 ) ;   mainPanel . add  ( ratioLabel , gridBagConstraints ) ;   ratioSlider . setEnabled  ( false ) ;   ratioSlider . setPreferredSize  (  new   java . awt . Dimension  ( 120 , 23 ) ) ;   gridBagConstraints =  new   java . awt . GridBagConstraints  ( ) ;    gridBagConstraints . gridx = 0 ;    gridBagConstraints . gridy = 3 ;    gridBagConstraints . gridwidth = 2 ;    gridBagConstraints . fill =    java . awt . GridBagConstraints . HORIZONTAL ;    gridBagConstraints . anchor =    java . awt . GridBagConstraints . EAST ;    gridBagConstraints . insets =  new   java . awt . Insets  ( 0 , 3 , 5 , 20 ) ;   mainPanel . add  ( ratioSlider , gridBagConstraints ) ;   southToolbar . setFloatable  ( false ) ;   southToolbar . setRollover  ( true ) ;   southToolbar . setOpaque  ( false ) ;   labelExport . setFont  (  new   java . awt . Font  ( "Tahoma" , 0 , 10 ) ) ;      org . openide . awt . Mnemonics . setLocalizedText  ( labelExport ,     org . openide . util . NbBundle . getMessage  (  PreviewSettingsTopComponent . class , "PreviewSettingsTopComponent.labelExport.text" ) ) ;   labelExport . setEnabled  ( false ) ;   southToolbar . add  ( labelExport ) ;      org . openide . awt . Mnemonics . setLocalizedText  ( svgExportButton ,     org . openide . util . NbBundle . getMessage  (  PreviewSettingsTopComponent . class , "PreviewSettingsTopComponent.svgExportButton.text" ) ) ;   svgExportButton . setToolTipText  (     org . openide . util . NbBundle . getMessage  (  PreviewSettingsTopComponent . class , "PreviewSettingsTopComponent.svgExportButton.toolTipText" ) ) ;   svgExportButton . setEnabled  ( false ) ;   svgExportButton . setFocusable  ( false ) ;   svgExportButton . setHorizontalTextPosition  (    javax . swing . SwingConstants . CENTER ) ;   svgExportButton . setMargin  (  new   java . awt . Insets  ( 2 , 8 , 2 , 8 ) ) ;   svgExportButton . setVerticalTextPosition  (    javax . swing . SwingConstants . BOTTOM ) ;   southToolbar . add  ( svgExportButton ) ;   gridBagConstraints =  new   java . awt . GridBagConstraints  ( ) ;    gridBagConstraints . gridx = 0 ;    gridBagConstraints . gridy = 4 ;    gridBagConstraints . gridwidth = 3 ;    gridBagConstraints . fill =    java . awt . GridBagConstraints . HORIZONTAL ;    gridBagConstraints . weightx = 1.0 ;    gridBagConstraints . insets =  new   java . awt . Insets  ( 0 , 5 , 0 , 5 ) ;   mainPanel . add  ( southToolbar , gridBagConstraints ) ;   add  ( mainPanel ,    java . awt . BorderLayout . CENTER ) ; }   private void refreshButtonActionPerformed  (     java . awt . event . ActionEvent evt )  {     Lookup . getDefault  ( ) . lookup  (  PreviewUIController . class ) . refreshPreview  ( ) ; }   private void saveButtonActionPerformed  (     java . awt . event . ActionEvent evt )  {  PreviewUIController  previewController =   Lookup . getDefault  ( ) . lookup  (  PreviewUIController . class ) ;  PreviewPreset  preset =   previewController . getModel  ( ) . getCurrentPreset  ( ) ;  boolean  saved = false ;  if  (  isDefaultPreset  ( preset ) )  {   NotifyDescriptor . InputLine  question =  new  NotifyDescriptor . InputLine  (  NbBundle . getMessage  (  PreviewSettingsTopComponent . class , "PreviewSettingsTopComponent.savePreset.input" ) ,  NbBundle . getMessage  (  PreviewSettingsTopComponent . class , "PreviewSettingsTopComponent.savePreset.input.title" ) ) ;  if  (    DialogDisplayer . getDefault  ( ) . notify  ( question ) ==  NotifyDescriptor . OK_OPTION )  {  String  input =  question . getInputText  ( ) ;  if  (   input != null &&  !  input . isEmpty  ( ) )  {   previewController . savePreset  ( input ) ;   saved = true ;    StatusDisplayer . getDefault  ( ) . setStatusText  (  NbBundle . getMessage  (  PreviewSettingsTopComponent . class , "PreviewSettingsTopComponent.savePreset.status" , input ) ) ; } } } else  {   previewController . savePreset  (  preset . getName  ( ) ) ;   saved = true ;    StatusDisplayer . getDefault  ( ) . setStatusText  (  NbBundle . getMessage  (  PreviewSettingsTopComponent . class , "PreviewSettingsTopComponent.savePreset.status" ,  preset . getName  ( ) ) ) ; }  if  ( saved )  {  DefaultComboBoxModel  comboBoxModel =  new DefaultComboBoxModel  ( ) ;   defaultPresetLimit = 0 ;  for ( PreviewPreset p :  previewController . getDefaultPresets  ( ) )  {   comboBoxModel . addElement  ( p ) ;   defaultPresetLimit ++ ; }   PreviewPreset  [ ]  userPresets =  previewController . getUserPresets  ( ) ;  if  (   userPresets . length > 0 )  {   comboBoxModel . addElement  ( NO_SELECTION ) ;  for ( PreviewPreset p : userPresets )  {   comboBoxModel . addElement  ( p ) ; } }   comboBoxModel . setSelectedItem  (   previewController . getModel  ( ) . getCurrentPreset  ( ) ) ;   presetComboBox . setModel  ( comboBoxModel ) ; } }  void writeProperties  (    java . util . Properties p )  {   p . setProperty  ( "version" , "1.0" ) ; }  void readProperties  (    java . util . Properties p )  {  String  version =  p . getProperty  ( "version" ) ; } }