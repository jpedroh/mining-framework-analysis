  package    org . gephi . desktop . banner ;   import   java . awt . Cursor ;  import   java . awt . Dimension ;  import    java . awt . event . ActionEvent ;  import    java . awt . event . ActionListener ;  import   javax . swing . Icon ;  import   javax . swing . JToggleButton ;  import     org . gephi . perspective . api . PerspectiveController ;  import     org . gephi . perspective . spi . Perspective ;  import     org . gephi . ui . utils . UIUtils ;  import    org . openide . util . Exceptions ;  import    org . openide . util . ImageUtilities ;  import    org . openide . util . Lookup ;   public class BannerComponent  extends   javax . swing . JPanel  {   private final transient PerspectiveController  perspectiveController ;   private transient  JToggleButton  [ ]  buttons ;   private   javax . swing . JPanel  buttonsPanel ;   private   javax . swing . JPanel  groupsPanel ;   private   javax . swing . JPanel  mainPanel ;   private   javax . swing . ButtonGroup  perspectivesButtonGroup ;   private   javax . swing . JPanel  workspacePanel ;   public BannerComponent  ( )  {   initComponents  ( ) ;   perspectiveController =   Lookup . getDefault  ( ) . lookup  (  PerspectiveController . class ) ;   addGroupTabs  ( ) ;   setPreferredSize  (  new Dimension  ( 100 , 65 ) ) ; }   private void addGroupTabs  ( )  {   buttons =  new JToggleButton  [   perspectiveController . getPerspectives  ( ) . length ] ;   int  i = 0 ;  for (  final Perspective perspective :  perspectiveController . getPerspectives  ( ) )  {  JToggleButton  toggleButton =  new JToggleButton  (  perspective . getDisplayName  ( ) ,  perspective . getIcon  ( ) ) ;   toggleButton . setFocusPainted  ( false ) ;   toggleButton . setCursor  (  Cursor . getPredefinedCursor  (  Cursor . HAND_CURSOR ) ) ;   toggleButton . addActionListener  (  e ->  perspectiveController . selectPerspective  ( perspective ) ) ;   perspectivesButtonGroup . add  ( toggleButton ) ;   buttonsPanel . add  ( toggleButton ) ;    buttons [  i ++ ] = toggleButton ; }   perspectivesButtonGroup . setSelected  (   buttons [  getSelectedPerspectiveIndex  ( ) ] . getModel  ( ) , true ) ; }   public  int getSelectedPerspectiveIndex  ( )  {   int  i = 0 ;  for ( Perspective p :  perspectiveController . getPerspectives  ( ) )  {  if  (  p . equals  (  perspectiveController . getSelectedPerspective  ( ) ) )  {  return i ; }   i ++ ; }  return  - 1 ; }    @ SuppressWarnings  ( "unchecked" ) private void initComponents  ( )  {    java . awt . GridBagConstraints  gridBagConstraints ;   perspectivesButtonGroup =  new   javax . swing . ButtonGroup  ( ) ;   mainPanel =  new   javax . swing . JPanel  ( ) ;   groupsPanel =  new   javax . swing . JPanel  ( ) ;   buttonsPanel =  new   javax . swing . JPanel  ( ) ;   workspacePanel =  new      org . gephi . desktop . banner . workspace . WorkspacePanel  ( ) ;   setBackground  (  new   java . awt . Color  ( 255 , 255 , 255 ) ) ;   setLayout  (  new   java . awt . BorderLayout  ( ) ) ;   mainPanel . setBackground  (  new   java . awt . Color  ( 255 , 255 , 255 ) ) ;   mainPanel . setLayout  (  new   java . awt . GridBagLayout  ( ) ) ; 
<<<<<<<
  logoButton . setIcon  (  ImageUtilities . loadImageIcon  ( "org/gephi/desktop/banner/resources/logo_std.png" , false ) ) ;
=======
>>>>>>>
 
<<<<<<<
  logoButton . setPressedIcon  (  ImageUtilities . loadImageIcon  ( "org/gephi/desktop/banner/resources/logo_glow.png" , false ) ) ;
=======
>>>>>>>
 
<<<<<<<
  logoButton . setRolloverIcon  (  ImageUtilities . loadImageIcon  ( "org/gephi/desktop/banner/resources/logo_glow.png" , false ) ) ;
=======
>>>>>>>
   groupsPanel . setLayout  (  new   java . awt . GridBagLayout  ( ) ) ;   buttonsPanel . setCursor  (  new   java . awt . Cursor  (    java . awt . Cursor . DEFAULT_CURSOR ) ) ;   buttonsPanel . setOpaque  ( false ) ;   buttonsPanel . setPreferredSize  (  new   java . awt . Dimension  ( 10 , 50 ) ) ;   buttonsPanel . setLayout  (  new   java . awt . FlowLayout  (    java . awt . FlowLayout . LEFT , 3 , 3 ) ) ;   gridBagConstraints =  new   java . awt . GridBagConstraints  ( ) ;    gridBagConstraints . gridx = 0 ;    gridBagConstraints . gridy = 0 ;    gridBagConstraints . fill =    java . awt . GridBagConstraints . BOTH ;    gridBagConstraints . anchor =    java . awt . GridBagConstraints . FIRST_LINE_START ;    gridBagConstraints . weightx = 1.0 ;    gridBagConstraints . weighty = 1.0 ;   groupsPanel . add  ( buttonsPanel , gridBagConstraints ) ; 
<<<<<<<
  bannerBackground . setIcon  (  ImageUtilities . loadImageIcon  ( "org/gephi/desktop/banner/resources/bannerback.png" , false ) ) ;
=======
>>>>>>>
   gridBagConstraints =  new   java . awt . GridBagConstraints  ( ) ;    gridBagConstraints . gridx = 0 ;    gridBagConstraints . gridy = 0 ;    gridBagConstraints . fill =    java . awt . GridBagConstraints . BOTH ;    gridBagConstraints . anchor =    java . awt . GridBagConstraints . NORTHWEST ;    gridBagConstraints . weightx = 1.0 ;    gridBagConstraints . weighty = 1.0 ;   mainPanel . add  ( groupsPanel , gridBagConstraints ) ;   add  ( mainPanel ,    java . awt . BorderLayout . CENTER ) ;   add  ( workspacePanel ,    java . awt . BorderLayout . SOUTH ) ; } 
<<<<<<<
  private static class JPerspectiveButton  extends JToggleButton  {   public JPerspectiveButton  (  String text ,  Icon icon )  {   setText  ( text ) ;   setBorder  ( null ) ;   setBorderPainted  ( false ) ;   setContentAreaFilled  ( false ) ;   setFocusPainted  ( false ) ;   setCursor  (  Cursor . getPredefinedCursor  (  Cursor . HAND_CURSOR ) ) ;   setHorizontalTextPosition  (    javax . swing . SwingConstants . CENTER ) ;   setIcon  (  ImageUtilities . image2Icon  (  ImageUtilities . mergeImages  (  ImageUtilities . loadImage  ( "org/gephi/desktop/banner/perspective/resources/aqua-enabled.png" , false ) ,  ImageUtilities . icon2Image  ( icon ) , 6 , 3 ) ) ) ;   setRolloverIcon  (  ImageUtilities . image2Icon  (  ImageUtilities . mergeImages  (  ImageUtilities . loadImage  ( "org/gephi/desktop/banner/perspective/resources/aqua-mouseover.png" , false ) ,  ImageUtilities . icon2Image  ( icon ) , 6 , 3 ) ) ) ;   setSelectedIcon  (  ImageUtilities . image2Icon  (  ImageUtilities . mergeImages  (  ImageUtilities . loadImage  ( "org/gephi/desktop/banner/perspective/resources/aqua-selected.png" , false ) ,  ImageUtilities . icon2Image  ( icon ) , 6 , 3 ) ) ) ; } }
=======
>>>>>>>
 }