  package    de . deepamehta . core . impl ;   import    de . deepamehta . core . Association ;  import    de . deepamehta . core . AssociationDefinition ;  import    de . deepamehta . core . DeepaMehtaObject ;  import    de . deepamehta . core . RelatedTopic ;  import    de . deepamehta . core . Topic ;  import    de . deepamehta . core . Type ;  import     de . deepamehta . core . model . DeepaMehtaObjectModel ;  import     de . deepamehta . core . model . RelatedTopicModel ;  import     de . deepamehta . core . model . SimpleValue ;  import     de . deepamehta . core . model . TopicModel ;  import     de . deepamehta . core . service . ResultList ;  import     org . codehaus . jettison . json . JSONObject ;  import   java . util . List ;  import    java . util . logging . Logger ;  import     de . deepamehta . core . model . ChildTopicsModel ;   abstract class AttachedDeepaMehtaObject  implements  DeepaMehtaObject  {   private DeepaMehtaObjectModel  model ;   private AttachedChildTopics  childTopics ;   protected final EmbeddedService  dms ;   private Logger  logger =  Logger . getLogger  (   getClass  ( ) . getName  ( ) ) ;  AttachedDeepaMehtaObject  (  DeepaMehtaObjectModel model ,  EmbeddedService dms )  {    this . model = model ;    this . dms = dms ;    this . childTopics =  new AttachedChildTopics  (  model . getChildTopicsModel  ( ) , this , dms ) ; }    @ Override public  long getId  ( )  {  return  model . getId  ( ) ; }    @ Override public String getUri  ( )  {  return  model . getUri  ( ) ; }    @ Override public void setUri  (  String uri )  {   model . setUri  ( uri ) ;   storeUri  ( ) ; }    @ Override public String getTypeUri  ( )  {  return  model . getTypeUri  ( ) ; }    @ Override public void setTypeUri  (  String typeUri )  {   model . setTypeUri  ( typeUri ) ;   storeTypeUri  ( ) ; }    @ Override public SimpleValue getSimpleValue  ( )  {  return  model . getSimpleValue  ( ) ; }    @ Override public void setSimpleValue  (  String value )  {   setSimpleValue  (  new SimpleValue  ( value ) ) ; }    @ Override public void setSimpleValue  (   int value )  {   setSimpleValue  (  new SimpleValue  ( value ) ) ; }    @ Override public void setSimpleValue  (   long value )  {   setSimpleValue  (  new SimpleValue  ( value ) ) ; }    @ Override public void setSimpleValue  (  boolean value )  {   setSimpleValue  (  new SimpleValue  ( value ) ) ; }    @ Override public void setSimpleValue  (  SimpleValue value )  {    dms . valueStorage . setSimpleValue  (  getModel  ( ) , value ) ; }    @ Override public DeepaMehtaObject loadChildTopics  ( )  {    getChildTopics  ( ) . loadChildTopics  ( ) ;  return this ; }    @ Override public DeepaMehtaObject loadChildTopics  (  String childTypeUri )  {    getChildTopics  ( ) . loadChildTopics  ( childTypeUri ) ;  return this ; }    @ Override public DeepaMehtaObjectModel getModel  ( )  {  return model ; }    @ Override public void update  (  DeepaMehtaObjectModel newModel )  {   updateUri  (  newModel . getUri  ( ) ) ;   updateTypeUri  (  newModel . getTypeUri  ( ) ) ;   updateValue  ( newModel ) ; }    @ Override public void updateChildTopic  (  TopicModel newChildTopic ,  AssociationDefinition assocDef )  {    getChildTopics  ( ) . updateChildTopics  ( newChildTopic , null , assocDef ) ; }    @ Override public void updateChildTopics  (   List  < TopicModel > newChildTopics ,  AssociationDefinition assocDef )  {    getChildTopics  ( ) . updateChildTopics  ( null , newChildTopics , assocDef ) ; }    @ Override public void delete  ( )  {   ResultList  < RelatedTopic >  childTopics =  getRelatedTopics  ( "dm4.core.composition" , "dm4.core.parent" , "dm4.core.child" , null , 0 ) ;  for ( Topic childTopic : childTopics )  {   childTopic . delete  ( ) ; }  for ( Association assoc :  getAssociations  ( ) )  {   assoc . delete  ( ) ; } }    @ Override public RelatedTopic getRelatedTopic  (  String assocTypeUri ,  String myRoleTypeUri ,  String othersRoleTypeUri ,  String othersTopicTypeUri )  {  RelatedTopicModel  topic =  fetchRelatedTopic  ( assocTypeUri , myRoleTypeUri , othersRoleTypeUri , othersTopicTypeUri ) ;  return   topic != null ?  dms . instantiateRelatedTopic  ( topic , true ) : null ; }    @ Override public  ResultList  < RelatedTopic > getRelatedTopics  (  String assocTypeUri ,   int maxResultSize )  {  return  getRelatedTopics  ( assocTypeUri , null , null , null , maxResultSize ) ; }    @ Override public  ResultList  < RelatedTopic > getRelatedTopics  (  String assocTypeUri ,  String myRoleTypeUri ,  String othersRoleTypeUri ,  String othersTopicTypeUri ,   int maxResultSize )  {   ResultList  < RelatedTopicModel >  topics =  fetchRelatedTopics  ( assocTypeUri , myRoleTypeUri , othersRoleTypeUri , othersTopicTypeUri , maxResultSize ) ;  return  dms . instantiateRelatedTopics  ( topics ) ; }    @ Override public Object getProperty  (  String propUri )  {  return  dms . getProperty  (  getId  ( ) , propUri ) ; }    @ Override public boolean hasProperty  (  String propUri )  {  return  dms . hasProperty  (  getId  ( ) , propUri ) ; }    @ Override public Object getDatabaseVendorObject  ( )  {  return   dms . storageDecorator . getDatabaseVendorObject  (  getId  ( ) ) ; }    @ Override public JSONObject toJSON  ( )  {  return  model . toJSON  ( ) ; }    @ Override public boolean equals  (  Object o )  {  return    (  ( AttachedDeepaMehtaObject ) o ) . model . equals  ( model ) ; }    @ Override public  int hashCode  ( )  {  return  model . hashCode  ( ) ; }    @ Override public String toString  ( )  {  return  model . toString  ( ) ; }   abstract String className  ( ) ;   abstract void addUpdateDirective  ( ) ;   abstract void storeUri  ( ) ;   abstract void storeTypeUri  ( ) ;   abstract RelatedTopicModel fetchRelatedTopic  (  String assocTypeUri ,  String myRoleTypeUri ,  String othersRoleTypeUri ,  String othersTopicTypeUri ) ;   abstract  ResultList  < RelatedTopicModel > fetchRelatedTopics  (  String assocTypeUri ,  String myRoleTypeUri ,  String othersRoleTypeUri ,  String othersTopicTypeUri ,   int maxResultSize ) ;  Type getType  ( )  {  return   dms . valueStorage . getType  (  getModel  ( ) ) ; }   private void updateUri  (  String newUri )  {  if  (  newUri == null )  {  return ; }  String  uri =  getUri  ( ) ;  if  (  !  uri . equals  ( newUri ) )  {   logger . info  (         "### Changing URI of " +  className  ( ) + " " +  getId  ( ) + " from \"" + uri + "\" -> \"" + newUri + "\"" ) ;   setUri  ( newUri ) ; } }   private void updateTypeUri  (  String newTypeUri )  {  if  (  newTypeUri == null )  {  return ; }  String  typeUri =  getTypeUri  ( ) ;  if  (  !  typeUri . equals  ( newTypeUri ) )  {   logger . info  (         "### Changing type URI of " +  className  ( ) + " " +  getId  ( ) + " from \"" + typeUri + "\" -> \"" + newTypeUri + "\"" ) ;   setTypeUri  ( newTypeUri ) ; } }   private void updateValue  (  DeepaMehtaObjectModel newModel )  {  if  (    getType  ( ) . getDataTypeUri  ( ) . equals  ( "dm4.core.composite" ) )  {    getChildTopics  ( ) . update  (  newModel . getChildTopicsModel  ( ) ) ; } else  {   updateSimpleValue  (  newModel . getSimpleValue  ( ) ) ; } }   private void updateSimpleValue  (  SimpleValue newValue )  {  if  (  newValue == null )  {  return ; }  SimpleValue  value =  getSimpleValue  ( ) ;  if  (  !  value . equals  ( newValue ) )  {   logger . info  (         "### Changing simple value of " +  className  ( ) + " " +  getId  ( ) + " from \"" + value + "\" -> \"" + newValue + "\"" ) ;   setSimpleValue  ( newValue ) ; } }    @ Override public AttachedChildTopics getChildTopics  ( )  {  return childTopics ; }    @ Override public void setChildTopics  (  ChildTopicsModel childTopics )  {  try  {    getChildTopics  ( ) . update  ( childTopics ) ; }  catch (   Exception e )  {  throw  new RuntimeException  (   "Setting the child topics failed (" + childTopics + ")" , e ) ; } } }