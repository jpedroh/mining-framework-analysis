  package    de . deepamehta . core . impl ;   import    de . deepamehta . core . Association ;  import    de . deepamehta . core . AssociationDefinition ;  import    de . deepamehta . core . AssociationType ;  import    de . deepamehta . core . RelatedAssociation ;  import    de . deepamehta . core . RelatedTopic ;  import    de . deepamehta . core . Topic ;  import    de . deepamehta . core . TopicType ;  import    de . deepamehta . core . Type ;  import     de . deepamehta . core . model . AssociationModel ;  import     de . deepamehta . core . model . AssociationRoleModel ;  import     de . deepamehta . core . model . AssociationTypeModel ;  import     de . deepamehta . core . model . DeepaMehtaObjectModel ;  import     de . deepamehta . core . model . RelatedAssociationModel ;  import     de . deepamehta . core . model . RelatedTopicModel ;  import     de . deepamehta . core . model . RoleModel ;  import     de . deepamehta . core . model . SimpleValue ;  import     de . deepamehta . core . model . TopicModel ;  import     de . deepamehta . core . model . TopicRoleModel ;  import     de . deepamehta . core . model . TopicTypeModel ;  import     de . deepamehta . core . service . DeepaMehtaEvent ;  import     de . deepamehta . core . service . DeepaMehtaService ;  import     de . deepamehta . core . service . Plugin ;  import     de . deepamehta . core . service . PluginInfo ;  import     de . deepamehta . core . service . ResultList ;  import     de . deepamehta . core . service . TypeStorage ;  import      de . deepamehta . core . service . accesscontrol . AccessControl ;  import      de . deepamehta . core . service . accesscontrol . AccessControlException ;  import      de . deepamehta . core . storage . spi . DeepaMehtaTransaction ;  import    org . osgi . framework . BundleContext ;  import   java . util . ArrayList ;  import   java . util . List ;  import    java . util . logging . Logger ;   public class EmbeddedService  implements  DeepaMehtaService  {  StorageDecorator  storageDecorator ;  BundleContext  bundleContext ;  MigrationManager  migrationManager ;  PluginManager  pluginManager ;  EventManager  eventManager ;  TypeCache  typeCache ;  TypeStorageImpl  typeStorage ;  ValueStorage  valueStorage ;  AccessControl  accessControl ;   private Logger  logger =  Logger . getLogger  (   getClass  ( ) . getName  ( ) ) ;   public EmbeddedService  (  StorageDecorator storageDecorator ,  BundleContext bundleContext )  {    this . storageDecorator = storageDecorator ;    this . bundleContext = bundleContext ;    this . migrationManager =  new MigrationManager  ( this ) ;    this . pluginManager =  new PluginManager  ( this ) ;    this . eventManager =  new EventManager  ( this ) ;    this . typeCache =  new TypeCache  ( this ) ;    this . typeStorage =  new TypeStorageImpl  ( this ) ;    this . valueStorage =  new ValueStorage  ( this ) ;    this . accessControl =  new AccessControlImpl  ( this ) ;   bootstrapTypeCache  ( ) ;   setupDB  ( ) ; }    @ Override public Topic getTopic  (   long topicId )  {   fireEvent  (  CoreEvent . PRE_GET_TOPIC , topicId ) ;  try  {  return  instantiateTopic  (  storageDecorator . fetchTopic  ( topicId ) , false ) ; }  catch (   Exception e )  {  throw  new RuntimeException  (   "Fetching topic " + topicId + " failed" , e ) ; } }    @ Override public Topic getTopic  (  String key ,  SimpleValue value )  {  try  {  TopicModel  topic =  storageDecorator . fetchTopic  ( key , value ) ;  return   topic != null ?  instantiateTopic  ( topic , true ) : null ; }  catch (   Exception e )  {  throw  new RuntimeException  (     "Fetching topic failed (key=\"" + key + "\", value=\"" + value + "\")" , e ) ; } }    @ Override public  List  < Topic > getTopics  (  String key ,  SimpleValue value )  {  try  {  return  instantiateTopics  (  storageDecorator . fetchTopics  ( key , value ) ) ; }  catch (   Exception e )  {  throw  new RuntimeException  (     "Fetching topics failed (key=\"" + key + "\", value=\"" + value + "\")" , e ) ; } }    @ Override public  ResultList  < RelatedTopic > getTopics  (  String topicTypeUri ,   int maxResultSize )  {  try  {  return   getTopicType  ( topicTypeUri ) . getRelatedTopics  ( "dm4.core.instantiation" , "dm4.core.type" , "dm4.core.instance" , topicTypeUri , maxResultSize ) ; }  catch (   Exception e )  {  throw  new RuntimeException  (   "Fetching topics by type failed (topicTypeUri=\"" + topicTypeUri + "\")" , e ) ; } }    @ Override public  List  < Topic > searchTopics  (  String searchTerm ,  String fieldUri )  {  try  {  return  instantiateTopics  (  storageDecorator . queryTopics  ( searchTerm , fieldUri ) ) ; }  catch (   Exception e )  {  throw  new RuntimeException  (     "Searching topics failed (searchTerm=\"" + searchTerm + "\", fieldUri=\"" + fieldUri + "\")" , e ) ; } }    @ Override public  Iterable  < Topic > getAllTopics  ( )  {  return  new TopicIterable  ( this ) ; }    @ Override public Topic createTopic  (  TopicModel model )  {  return  createTopic  ( model , null ) ; }    @ Override public void updateTopic  (  TopicModel model )  {  try  {     getTopic  (  model . getId  ( ) ) . loadChildTopics  ( ) . update  ( model ) ; }  catch (   Exception e )  {  throw  new RuntimeException  (   "Updating topic failed (" + model + ")" , e ) ; } }    @ Override public void deleteTopic  (   long topicId )  {  try  {    getTopic  ( topicId ) . delete  ( ) ; }  catch (   Exception e )  {  throw  new RuntimeException  (   "Deleting topic " + topicId + " failed" , e ) ; } }    @ Override public Association getAssociation  (   long assocId )  {   logger . info  (  "assocId=" + assocId ) ;   fireEvent  (  CoreEvent . PRE_GET_ASSOCIATION , assocId ) ;  try  {  return  instantiateAssociation  (  storageDecorator . fetchAssociation  ( assocId ) , false ) ; }  catch (   Exception e )  {  throw  new RuntimeException  (   "Fetching association " + assocId + " failed" , e ) ; } }    @ Override public Association getAssociation  (  String assocTypeUri ,   long topic1Id ,   long topic2Id ,  String roleTypeUri1 ,  String roleTypeUri2 )  {  String  info =           "assocTypeUri=\"" + assocTypeUri + "\", topic1Id=" + topic1Id + ", topic2Id=" + topic2Id + ", roleTypeUri1=\"" + roleTypeUri1 + "\", roleTypeUri2=\"" + roleTypeUri2 + "\"" ;  try  {  AssociationModel  assoc =  storageDecorator . fetchAssociation  ( assocTypeUri , topic1Id , topic2Id , roleTypeUri1 , roleTypeUri2 ) ;  return   assoc != null ?  instantiateAssociation  ( assoc , true ) : null ; }  catch (   Exception e )  {  throw  new RuntimeException  (   "Fetching association failed (" + info + ")" , e ) ; } }    @ Override public Association getAssociationBetweenTopicAndAssociation  (  String assocTypeUri ,   long topicId ,   long assocId ,  String topicRoleTypeUri ,  String assocRoleTypeUri )  {  String  info =           "assocTypeUri=\"" + assocTypeUri + "\", topicId=" + topicId + ", assocId=" + assocId + ", topicRoleTypeUri=\"" + topicRoleTypeUri + "\", assocRoleTypeUri=\"" + assocRoleTypeUri + "\"" ;   logger . info  ( info ) ;  try  {  AssociationModel  assoc =  storageDecorator . fetchAssociationBetweenTopicAndAssociation  ( assocTypeUri , topicId , assocId , topicRoleTypeUri , assocRoleTypeUri ) ;  return   assoc != null ?  instantiateAssociation  ( assoc , true ) : null ; }  catch (   Exception e )  {  throw  new RuntimeException  (   "Fetching association failed (" + info + ")" , e ) ; } }    @ Override public  ResultList  < RelatedAssociation > getAssociations  (  String assocTypeUri )  {  try  {  return   getAssociationType  ( assocTypeUri ) . getRelatedAssociations  ( "dm4.core.instantiation" , "dm4.core.type" , "dm4.core.instance" , assocTypeUri ) ; }  catch (   Exception e )  {  throw  new RuntimeException  (   "Fetching associations by type failed (assocTypeUri=\"" + assocTypeUri + "\")" , e ) ; } }    @ Override public  List  < Association > getAssociations  (   long topic1Id ,   long topic2Id )  {  return  getAssociations  ( topic1Id , topic2Id , null ) ; }    @ Override public  List  < Association > getAssociations  (   long topic1Id ,   long topic2Id ,  String assocTypeUri )  {   logger . info  (       "topic1Id=" + topic1Id + ", topic2Id=" + topic2Id + ", assocTypeUri=\"" + assocTypeUri + "\"" ) ;  try  {  return  instantiateAssociations  (  storageDecorator . fetchAssociations  ( assocTypeUri , topic1Id , topic2Id , null , null ) ) ; }  catch (   Exception e )  {  throw  new RuntimeException  (       "Fetching associations between topics " + topic1Id + " and " + topic2Id + " failed (assocTypeUri=\"" + assocTypeUri + "\")" , e ) ; } }    @ Override public  Iterable  < Association > getAllAssociations  ( )  {  return  new AssociationIterable  ( this ) ; }    @ Override public   long  [ ] getPlayerIds  (   long assocId )  {  return  storageDecorator . fetchPlayerIds  ( assocId ) ; }    @ Override public Association createAssociation  (  AssociationModel model )  {  try  {   fireEvent  (  CoreEvent . PRE_CREATE_ASSOCIATION , model ) ;  Association  assoc =  associationFactory  ( model ) ;   fireEvent  (  CoreEvent . POST_CREATE_ASSOCIATION , assoc ) ;  return assoc ; }  catch (   Exception e )  {  throw  new RuntimeException  (   "Creating association failed (" + model + ")" , e ) ; } }    @ Override public void updateAssociation  (  AssociationModel model )  {  try  {     getAssociation  (  model . getId  ( ) ) . loadChildTopics  ( ) . update  ( model ) ; }  catch (   Exception e )  {  throw  new RuntimeException  (   "Updating association failed (" + model + ")" , e ) ; } }    @ Override public void deleteAssociation  (   long assocId )  {  try  {    getAssociation  ( assocId ) . delete  ( ) ; }  catch (   Exception e )  {  throw  new RuntimeException  (   "Deleting association " + assocId + " failed" , e ) ; } }    @ Override public  List  < String > getTopicTypeUris  ( )  {  try  {  Topic  metaType =  instantiateTopic  (  storageDecorator . fetchTopic  ( "uri" ,  new SimpleValue  ( "dm4.core.topic_type" ) ) , false ) ;   ResultList  < RelatedTopic >  topicTypes =  metaType . getRelatedTopics  ( "dm4.core.instantiation" , "dm4.core.type" , "dm4.core.instance" , "dm4.core.topic_type" , 0 ) ;   List  < String >  topicTypeUris =  new ArrayList  ( ) ;   topicTypeUris . add  ( "dm4.core.topic_type" ) ;   topicTypeUris . add  ( "dm4.core.assoc_type" ) ;   topicTypeUris . add  ( "dm4.core.meta_type" ) ;   topicTypeUris . add  ( "dm4.core.meta_meta_type" ) ;  for ( Topic topicType : topicTypes )  {   topicTypeUris . add  (  topicType . getUri  ( ) ) ; }  return topicTypeUris ; }  catch (   Exception e )  {  throw  new RuntimeException  ( "Fetching list of topic type URIs failed" , e ) ; } }    @ Override public TopicType getTopicType  (  String uri )  {  try  {  return  typeCache . getTopicType  ( uri ) ; }  catch (   Exception e )  {  throw  new RuntimeException  (   "Fetching topic type \"" + uri + "\" failed" , e ) ; } }    @ Override public  List  < TopicType > getAllTopicTypes  ( )  {  try  {   List  < TopicType >  topicTypes =  new ArrayList  ( ) ;  for ( String uri :  getTopicTypeUris  ( ) )  {  TopicType  topicType =  getTopicType  ( uri ) ;   topicTypes . add  ( topicType ) ; }  return topicTypes ; }  catch (   Exception e )  {  throw  new RuntimeException  ( "Fetching all topic types failed" , e ) ; } }    @ Override public TopicType createTopicType  (  TopicTypeModel model )  {  try  {  TopicType  topicType =  topicTypeFactory  ( model ) ;   fireEvent  (  CoreEvent . INTRODUCE_TOPIC_TYPE , topicType ) ;  return topicType ; }  catch (   Exception e )  {  throw  new RuntimeException  (     "Creating topic type \"" +  model . getUri  ( ) + "\" failed (" + model + ")" , e ) ; } }    @ Override public void updateTopicType  (  TopicTypeModel model )  {  try  {  String  topicTypeUri =   getTopic  (  model . getId  ( ) ) . getUri  ( ) ;    getTopicType  ( topicTypeUri ) . update  ( model ) ; }  catch (   Exception e )  {  throw  new RuntimeException  (   "Updating topic type failed (" + model + ")" , e ) ; } }    @ Override public void deleteTopicType  (  String topicTypeUri )  {  try  {    getTopicType  ( topicTypeUri ) . delete  ( ) ; }  catch (   Exception e )  {  throw  new RuntimeException  (   "Deleting topic type \"" + topicTypeUri + "\" failed" , e ) ; } }    @ Override public  List  < String > getAssociationTypeUris  ( )  {  try  {  Topic  metaType =  instantiateTopic  (  storageDecorator . fetchTopic  ( "uri" ,  new SimpleValue  ( "dm4.core.assoc_type" ) ) , false ) ;   ResultList  < RelatedTopic >  assocTypes =  metaType . getRelatedTopics  ( "dm4.core.instantiation" , "dm4.core.type" , "dm4.core.instance" , "dm4.core.assoc_type" , 0 ) ;   List  < String >  assocTypeUris =  new ArrayList  ( ) ;  for ( Topic assocType : assocTypes )  {   assocTypeUris . add  (  assocType . getUri  ( ) ) ; }  return assocTypeUris ; }  catch (   Exception e )  {  throw  new RuntimeException  ( "Fetching list of association type URIs failed" , e ) ; } }    @ Override public AssociationType getAssociationType  (  String uri )  {  try  {  return  typeCache . getAssociationType  ( uri ) ; }  catch (   Exception e )  {  throw  new RuntimeException  (   "Fetching association type \"" + uri + "\" failed" , e ) ; } }    @ Override public  List  < AssociationType > getAllAssociationTypes  ( )  {  try  {   List  < AssociationType >  assocTypes =  new ArrayList  ( ) ;  for ( String uri :  getAssociationTypeUris  ( ) )  {  AssociationType  assocType =  getAssociationType  ( uri ) ;   assocTypes . add  ( assocType ) ; }  return assocTypes ; }  catch (   Exception e )  {  throw  new RuntimeException  ( "Fetching all association types failed" , e ) ; } }    @ Override public AssociationType createAssociationType  (  AssociationTypeModel model )  {  try  {  AssociationType  assocType =  associationTypeFactory  ( model ) ;   fireEvent  (  CoreEvent . INTRODUCE_ASSOCIATION_TYPE , assocType ) ;  return assocType ; }  catch (   Exception e )  {  throw  new RuntimeException  (     "Creating association type \"" +  model . getUri  ( ) + "\" failed (" + model + ")" , e ) ; } }    @ Override public void updateAssociationType  (  AssociationTypeModel model )  {  try  {  String  assocTypeUri =   getTopic  (  model . getId  ( ) ) . getUri  ( ) ;    getAssociationType  ( assocTypeUri ) . update  ( model ) ; }  catch (   Exception e )  {  throw  new RuntimeException  (   "Updating association type failed (" + model + ")" , e ) ; } }    @ Override public void deleteAssociationType  (  String assocTypeUri )  {  try  {    getAssociationType  ( assocTypeUri ) . delete  ( ) ; }  catch (   Exception e )  {  throw  new RuntimeException  (   "Deleting association type \"" + assocTypeUri + "\" failed" , e ) ; } }    @ Override public Plugin getPlugin  (  String pluginUri )  {  return  pluginManager . getPlugin  ( pluginUri ) ; }    @ Override public  List  < PluginInfo > getPluginInfo  ( )  {  return  pluginManager . getPluginInfo  ( ) ; }    @ Override public void fireEvent  (  DeepaMehtaEvent event ,  Object ...  params )  {   eventManager . fireEvent  ( event , params ) ; }    @ Override public void deliverEvent  (  String pluginUri ,  DeepaMehtaEvent event ,  Object ...  params )  {   eventManager . deliverEvent  ( pluginUri , event , params ) ; }    @ Override public Object getProperty  (   long id ,  String propUri )  {  return  storageDecorator . fetchProperty  ( id , propUri ) ; }    @ Override public boolean hasProperty  (   long id ,  String propUri )  {  return  storageDecorator . hasProperty  ( id , propUri ) ; }    @ Override public  List  < Topic > getTopicsByProperty  (  String propUri ,  Object propValue )  {  return  instantiateTopics  (  storageDecorator . fetchTopicsByProperty  ( propUri , propValue ) ) ; }    @ Override public  List  < Topic > getTopicsByPropertyRange  (  String propUri ,  Number from ,  Number to )  {  return  instantiateTopics  (  storageDecorator . fetchTopicsByPropertyRange  ( propUri , from , to ) ) ; }    @ Override public  List  < Association > getAssociationsByProperty  (  String propUri ,  Object propValue )  {  return  instantiateAssociations  (  storageDecorator . fetchAssociationsByProperty  ( propUri , propValue ) ) ; }    @ Override public  List  < Association > getAssociationsByPropertyRange  (  String propUri ,  Number from ,  Number to )  {  return  instantiateAssociations  (  storageDecorator . fetchAssociationsByPropertyRange  ( propUri , from , to ) ) ; }    @ Override public DeepaMehtaTransaction beginTx  ( )  {  return  storageDecorator . beginTx  ( ) ; }    @ Override public TypeStorage getTypeStorage  ( )  {  return typeStorage ; }    @ Override public AccessControl getAccessControl  ( )  {  return accessControl ; }    @ Override public Object getDatabaseVendorObject  ( )  {  return  storageDecorator . getDatabaseVendorObject  ( ) ; }  void createTopicInstantiation  (   long topicId ,  String topicTypeUri )  {  try  {  AssociationModel  assoc =  new AssociationModel  ( "dm4.core.instantiation" ,  new TopicRoleModel  ( topicTypeUri , "dm4.core.type" ) ,  new TopicRoleModel  ( topicId , "dm4.core.instance" ) ) ;   storageDecorator . storeAssociation  ( assoc ) ;   storageDecorator . storeAssociationValue  (  assoc . getId  ( ) ,  assoc . getSimpleValue  ( ) ) ;   createAssociationInstantiation  (  assoc . getId  ( ) ,  assoc . getTypeUri  ( ) ) ; }  catch (   Exception e )  {  throw  new RuntimeException  (     "Associating topic " + topicId + " with topic type \"" + topicTypeUri + "\" failed" , e ) ; } }  void createAssociationInstantiation  (   long assocId ,  String assocTypeUri )  {  try  {  AssociationModel  assoc =  new AssociationModel  ( "dm4.core.instantiation" ,  new TopicRoleModel  ( assocTypeUri , "dm4.core.type" ) ,  new AssociationRoleModel  ( assocId , "dm4.core.instance" ) ) ;   storageDecorator . storeAssociation  ( assoc ) ;   storageDecorator . storeAssociationValue  (  assoc . getId  ( ) ,  assoc . getSimpleValue  ( ) ) ; }  catch (   Exception e )  {  throw  new RuntimeException  (     "Associating association " + assocId + " with association type \"" + assocTypeUri + "\" failed" , e ) ; } }  Association createAssociation  (  String typeUri ,  RoleModel roleModel1 ,  RoleModel roleModel2 )  {  return  createAssociation  (  new AssociationModel  ( typeUri , roleModel1 , roleModel2 ) ) ; }  Topic instantiateTopic  (  TopicModel model ,  boolean checkAccess )  {   checkAccess  ( model , checkAccess ) ;  return  new AttachedTopic  ( model , this ) ; }   private  List  < Topic > instantiateTopics  (   List  < TopicModel > models )  {   List  < Topic >  topics =  new ArrayList  ( ) ;  for ( TopicModel model : models )  {  try  {   topics . add  (  instantiateTopic  ( model , true ) ) ; }  catch (   AccessControlException e )  { } }  return topics ; }  RelatedTopic instantiateRelatedTopic  (  RelatedTopicModel model ,  boolean checkAccess )  {   checkAccess  ( model , checkAccess ) ;  return  new AttachedRelatedTopic  ( model , this ) ; }   ResultList  < RelatedTopic > instantiateRelatedTopics  (   ResultList  < RelatedTopicModel > models )  {   List  < RelatedTopic >  relTopics =  new ArrayList  ( ) ;  for ( RelatedTopicModel model : models )  {  try  {   relTopics . add  (  instantiateRelatedTopic  ( model , true ) ) ; }  catch (   AccessControlException e )  { } }  return  new  ResultList  < RelatedTopic >  (  models . getTotalCount  ( ) , relTopics ) ; }  Association instantiateAssociation  (  AssociationModel model ,  boolean checkAccess )  {   checkAccess  ( model , checkAccess ) ;  return  new AttachedAssociation  ( model , this ) ; }   List  < Association > instantiateAssociations  (   List  < AssociationModel > models )  {   List  < Association >  assocs =  new ArrayList  ( ) ;  for ( AssociationModel model : models )  {  try  {   assocs . add  (  instantiateAssociation  ( model , true ) ) ; }  catch (   AccessControlException e )  { } }  return assocs ; }  RelatedAssociation instantiateRelatedAssociation  (  RelatedAssociationModel model ,  boolean checkAccess )  {   checkAccess  ( model , checkAccess ) ;  return  new AttachedRelatedAssociation  ( model , this ) ; }   ResultList  < RelatedAssociation > instantiateRelatedAssociations  (   Iterable  < RelatedAssociationModel > models )  {   ResultList  < RelatedAssociation >  relAssocs =  new ResultList  ( ) ;  for ( RelatedAssociationModel model : models )  {  try  {   relAssocs . add  (  instantiateRelatedAssociation  ( model , true ) ) ; }  catch (   AccessControlException e )  { } }  return relAssocs ; }   private void checkAccess  (  TopicModel model ,  boolean checkAccess )  {  if  ( checkAccess )  {   fireEvent  (  CoreEvent . PRE_GET_TOPIC ,  model . getId  ( ) ) ; } }   private void checkAccess  (  AssociationModel model ,  boolean checkAccess )  {  if  ( checkAccess )  {   fireEvent  (  CoreEvent . PRE_GET_ASSOCIATION ,  model . getId  ( ) ) ; } }   private Association associationFactory  (  AssociationModel model )  {   storageDecorator . storeAssociation  ( model ) ;   valueStorage . storeValue  ( model ) ;   createAssociationInstantiation  (  model . getId  ( ) ,  model . getTypeUri  ( ) ) ;  return  new AttachedAssociation  ( model , this ) ; }   private TopicType topicTypeFactory  (  TopicTypeModel model )  {   topicFactory  ( model , URI_PREFIX_TOPIC_TYPE ) ;   typeStorage . storeType  ( model ) ;  TopicType  topicType =  new AttachedTopicType  ( model , this ) ;   typeCache . putTopicType  ( topicType ) ;  return topicType ; }   private AssociationType associationTypeFactory  (  AssociationTypeModel model )  {   topicFactory  ( model , URI_PREFIX_ASSOCIATION_TYPE ) ;   typeStorage . storeType  ( model ) ;  AssociationType  assocType =  new AttachedAssociationType  ( model , this ) ;   typeCache . putAssociationType  ( assocType ) ;  return assocType ; }   private void setupDB  ( )  {  DeepaMehtaTransaction  tx =  beginTx  ( ) ;  try  {   logger . info  ( "----- Setting up the database -----" ) ;  boolean  isCleanInstall =  storageDecorator . init  ( ) ;  if  ( isCleanInstall )  {   setupBootstrapContent  ( ) ; }   migrationManager . runCoreMigrations  ( isCleanInstall ) ;   tx . success  ( ) ;   tx . finish  ( ) ;   logger . info  ( "----- Setting up the database complete -----" ) ; }  catch (   Exception e )  {   logger . warning  ( "ROLLBACK!" ) ;   tx . finish  ( ) ;   storageDecorator . shutdown  ( ) ;  throw  new RuntimeException  ( "Setting up the database failed" , e ) ; } }   private void setupBootstrapContent  ( )  {  try  {  TopicModel  t =  new TopicModel  ( "dm4.core.topic_type" , "dm4.core.meta_type" ,  new SimpleValue  ( "Topic Type" ) ) ;  TopicModel  a =  new TopicModel  ( "dm4.core.assoc_type" , "dm4.core.meta_type" ,  new SimpleValue  ( "Association Type" ) ) ;   _createTopic  ( t ) ;   _createTopic  ( a ) ;  TopicModel  dataType =  new TopicTypeModel  ( "dm4.core.data_type" , "Data Type" , "dm4.core.text" ) ;  TopicModel  roleType =  new TopicTypeModel  ( "dm4.core.role_type" , "Role Type" , "dm4.core.text" ) ;   _createTopic  ( dataType ) ;   _createTopic  ( roleType ) ;  TopicModel  text =  new TopicModel  ( "dm4.core.text" , "dm4.core.data_type" ,  new SimpleValue  ( "Text" ) ) ;   _createTopic  ( text ) ;  TopicModel  deflt =  new TopicModel  ( "dm4.core.default" , "dm4.core.role_type" ,  new SimpleValue  ( "Default" ) ) ;  TopicModel  type =  new TopicModel  ( "dm4.core.type" , "dm4.core.role_type" ,  new SimpleValue  ( "Type" ) ) ;  TopicModel  inst =  new TopicModel  ( "dm4.core.instance" , "dm4.core.role_type" ,  new SimpleValue  ( "Instance" ) ) ;   _createTopic  ( deflt ) ;   _createTopic  ( type ) ;   _createTopic  ( inst ) ;  TopicModel  aggregation =  new AssociationTypeModel  ( "dm4.core.aggregation" , "Aggregation" , "dm4.core.text" ) ;   _createTopic  ( aggregation ) ;  TopicModel  instn =  new AssociationTypeModel  ( "dm4.core.instantiation" , "Instantiation" , "dm4.core.text" ) ;   _createTopic  ( instn ) ;   createTopicInstantiation  (  t . getId  ( ) ,  t . getTypeUri  ( ) ) ;   createTopicInstantiation  (  a . getId  ( ) ,  a . getTypeUri  ( ) ) ;   createTopicInstantiation  (  dataType . getId  ( ) ,  dataType . getTypeUri  ( ) ) ;   createTopicInstantiation  (  roleType . getId  ( ) ,  roleType . getTypeUri  ( ) ) ;   createTopicInstantiation  (  text . getId  ( ) ,  text . getTypeUri  ( ) ) ;   createTopicInstantiation  (  deflt . getId  ( ) ,  deflt . getTypeUri  ( ) ) ;   createTopicInstantiation  (  type . getId  ( ) ,  type . getTypeUri  ( ) ) ;   createTopicInstantiation  (  inst . getId  ( ) ,  inst . getTypeUri  ( ) ) ;   createTopicInstantiation  (  aggregation . getId  ( ) ,  aggregation . getTypeUri  ( ) ) ;   createTopicInstantiation  (  instn . getId  ( ) ,  instn . getTypeUri  ( ) ) ;   _associateDataType  ( "dm4.core.meta_type" , "dm4.core.text" ) ;   _associateDataType  ( "dm4.core.topic_type" , "dm4.core.text" ) ;   _associateDataType  ( "dm4.core.assoc_type" , "dm4.core.text" ) ;   _associateDataType  ( "dm4.core.data_type" , "dm4.core.text" ) ;   _associateDataType  ( "dm4.core.role_type" , "dm4.core.text" ) ;   _associateDataType  ( "dm4.core.aggregation" , "dm4.core.text" ) ;   _associateDataType  ( "dm4.core.instantiation" , "dm4.core.text" ) ; }  catch (   Exception e )  {  throw  new RuntimeException  ( "Setting up the bootstrap content failed" , e ) ; } }   private void _createTopic  (  TopicModel model )  {   storageDecorator . storeTopic  ( model ) ;   storageDecorator . storeTopicValue  (  model . getId  ( ) ,  model . getSimpleValue  ( ) ) ; }   private void _associateDataType  (  String typeUri ,  String dataTypeUri )  {  AssociationModel  assoc =  new AssociationModel  ( "dm4.core.aggregation" ,  new TopicRoleModel  ( typeUri , "dm4.core.type" ) ,  new TopicRoleModel  ( dataTypeUri , "dm4.core.default" ) ) ;   storageDecorator . storeAssociation  ( assoc ) ;   storageDecorator . storeAssociationValue  (  assoc . getId  ( ) ,  assoc . getSimpleValue  ( ) ) ; }   private void bootstrapTypeCache  ( )  {   typeCache . putTopicType  (  new AttachedTopicType  (  new TopicTypeModel  ( "dm4.core.meta_meta_type" , "dm4.core.meta_meta_meta_type" , "Meta Meta Type" , "dm4.core.text" ) , this ) ) ; }   private static final String  URI_PREFIX_TOPIC_TYPE = "domain.project.topic_type_" ;   private static final String  URI_PREFIX_ASSOCIATION_TYPE = "domain.project.assoc_type_" ;   private static final String  URI_PREFIX_ROLE_TYPE = "domain.project.role_type_" ;    @ Override public Topic createRoleType  (  TopicModel model )  {  String  typeUri =  model . getTypeUri  ( ) ;  if  (  typeUri == null )  {   model . setTypeUri  ( "dm4.core.role_type" ) ; } else  {  if  (  !  typeUri . equals  ( "dm4.core.role_type" ) )  {  throw  new IllegalArgumentException  (    "A role type is supposed to be of type \"dm4.core.role_type\" " + "(found: \"" + typeUri + "\")" ) ; } }  return  createTopic  ( model , URI_PREFIX_ROLE_TYPE ) ; }   private Topic createTopic  (  TopicModel model ,  String uriPrefix )  {  try  {   fireEvent  (  CoreEvent . PRE_CREATE_TOPIC , model ) ;  Topic  topic =  topicFactory  ( model , uriPrefix ) ;   fireEvent  (  CoreEvent . POST_CREATE_TOPIC , topic ) ;  return topic ; }  catch (   Exception e )  {  throw  new RuntimeException  (   "Creating topic failed (" + model + ")" , e ) ; } }   private Topic topicFactory  (  TopicModel model ,  String uriPrefix )  {   storageDecorator . storeTopic  ( model ) ;   valueStorage . storeValue  ( model ) ;   createTopicInstantiation  (  model . getId  ( ) ,  model . getTypeUri  ( ) ) ;  Topic  topic =  new AttachedTopic  ( model , this ) ;  if  (   uriPrefix != null &&   topic . getUri  ( ) . equals  ( "" ) )  {   topic . setUri  (  uriPrefix +  topic . getId  ( ) ) ; }  return topic ; } }