  package  ninja . servlet ;   import static    org . hamcrest . CoreMatchers . equalTo ;  import static    org . hamcrest . CoreMatchers . nullValue ;  import static    org . junit . Assert . assertEquals ;  import static    org . junit . Assert . assertFalse ;  import static    org . junit . Assert . assertNotNull ;  import static    org . junit . Assert . assertNull ;  import static    org . junit . Assert . assertThat ;  import static    org . junit . Assert . assertTrue ;  import static    org . mockito . Matchers . anyString ;  import static    org . mockito . Mockito . verify ;  import static    org . mockito . Mockito . when ;  import   java . util . Map ;  import   javax . servlet . ServletContext ;  import    javax . servlet . http . HttpServletRequest ;  import    javax . servlet . http . HttpServletResponse ;  import ninja .  * ;  import   ninja . bodyparser . BodyParserEngine ;  import   ninja . bodyparser . BodyParserEngineManager ;  import   ninja . session . FlashScope ;  import   ninja . session . Session ;  import   ninja . utils . NinjaConstant ;  import   ninja . utils . ResultHandler ;  import   ninja . validation . Validation ;  import   org . junit . Before ;  import   org . junit . Test ;  import    org . junit . runner . RunWith ;  import   org . mockito . ArgumentCaptor ;  import   org . mockito . Matchers ;  import   org . mockito . Mock ;  import    org . mockito . runners . MockitoJUnitRunner ;  import     com . google . common . collect . Maps ;  import   ninja . utils . NinjaProperties ;    @ RunWith  (  MockitoJUnitRunner . class ) public class ContextImplTest  {    @ Mock private Session  sessionCookie ;    @ Mock private FlashScope  flashCookie ;    @ Mock private BodyParserEngineManager  bodyParserEngineManager ;    @ Mock private ServletContext  servletContext ;    @ Mock private HttpServletRequest  httpServletRequest ;    @ Mock private HttpServletResponse  httpServletResponse ;    @ Mock private Route  route ;    @ Mock private ResultHandler  resultHandler ;    @ Mock private Validation  validation ;    @ Mock private BodyParserEngine  bodyParserEngine ;   private ContextImpl  context ;    @ Before public void setUp  ( )  {    when  (  httpServletRequest . getContextPath  ( ) ) . thenReturn  ( "" ) ;    when  (  httpServletRequest . getRequestURI  ( ) ) . thenReturn  ( "/" ) ;   context =  new ContextImpl  ( bodyParserEngineManager , flashCookie , ninjaProperties , resultHandler , sessionCookie , validation ) ; }    @ Test public void testGetRequestUri  ( )  {    when  (  httpServletRequest . getRequestURI  ( ) ) . thenReturn  ( "/index" ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertEquals  ( "/index" ,  context . getRequestUri  ( ) ) ; }    @ Test public void testGetHostname  ( )  {    when  (  httpServletRequest . getHeader  ( "host" ) ) . thenReturn  ( "test.com" ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertEquals  ( "test.com" ,  context . getHostname  ( ) ) ; } 
<<<<<<<
   @ Test public void testGetRemoteAddr  ( )  {    when  (  httpServletRequest . getRemoteAddr  ( ) ) . thenReturn  ( "mockedRemoteAddr" ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertEquals  ( "mockedRemoteAddr" ,  context . getRemoteAddr  ( ) ) ; }
=======
>>>>>>>
    @ Test public void testAddCookieViaResult  ( )  {  Cookie  cookie =    Cookie . builder  ( "cookie" , "yum" ) . setDomain  ( "domain" ) . build  ( ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;  Result  result =  Results . html  ( ) ;   result . addCookie  ( cookie ) ;   context . finalizeHeaders  ( result ) ;    ArgumentCaptor <    javax . servlet . http . Cookie >  cookieCaptor =  ArgumentCaptor . forClass  (     javax . servlet . http . Cookie . class ) ;    verify  ( httpServletResponse ) . addCookie  (  cookieCaptor . capture  ( ) ) ;     javax . servlet . http . Cookie  resultCookie =  cookieCaptor . getValue  ( ) ;   assertThat  (  resultCookie . getName  ( ) ,  equalTo  ( "cookie" ) ) ;   assertThat  (  resultCookie . getValue  ( ) ,  equalTo  ( "yum" ) ) ;   assertThat  (  resultCookie . getPath  ( ) ,  equalTo  ( "/" ) ) ;   assertThat  (  resultCookie . getSecure  ( ) ,  equalTo  ( false ) ) ;   assertThat  (  resultCookie . getMaxAge  ( ) ,  equalTo  (  - 1 ) ) ; }    @ Test public void getCookieTest  ( )  {     javax . servlet . http . Cookie  servletCookie1 =  new    javax . servlet . http . Cookie  ( "contextCookie1" , "theValue1" ) ;     javax . servlet . http . Cookie  servletCookie2 =  new    javax . servlet . http . Cookie  ( "contextCookie2" , "theValue2" ) ;      javax . servlet . http . Cookie  [ ]  servletCookies =  { servletCookie1 , servletCookie2 } ;    when  (  httpServletRequest . getCookies  ( ) ) . thenReturn  ( servletCookies ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   ninja . Cookie  doesNotExist =  context . getCookie  ( "doesNotExist" ) ;   assertNull  ( doesNotExist ) ;   ninja . Cookie  cookie1 =  context . getCookie  ( "contextCookie1" ) ;   assertEquals  (  cookie1 . getName  ( ) , "contextCookie1" ) ;   assertEquals  (  cookie1 . getValue  ( ) , "theValue1" ) ;   ninja . Cookie  cookie2 =  context . getCookie  ( "contextCookie2" ) ;   assertEquals  (  cookie2 . getName  ( ) , "contextCookie2" ) ;   assertEquals  (  cookie2 . getValue  ( ) , "theValue2" ) ; }    @ Test public void hasCookieTest  ( )  {     javax . servlet . http . Cookie  servletCookie1 =  new    javax . servlet . http . Cookie  ( "contextCookie1" , "theValue1" ) ;     javax . servlet . http . Cookie  servletCookie2 =  new    javax . servlet . http . Cookie  ( "contextCookie2" , "theValue2" ) ;      javax . servlet . http . Cookie  [ ]  servletCookies =  { servletCookie1 , servletCookie2 } ;    when  (  httpServletRequest . getCookies  ( ) ) . thenReturn  ( servletCookies ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertFalse  (  context . hasCookie  ( "doesNotExist" ) ) ;   assertTrue  (  context . hasCookie  ( "contextCookie1" ) ) ;   assertTrue  (  context . hasCookie  ( "contextCookie2" ) ) ; }    @ Test public void getCookiesTest  ( )  {     javax . servlet . http . Cookie  servletCookie1 =  new    javax . servlet . http . Cookie  ( "contextCookie1" , "theValue" ) ;     javax . servlet . http . Cookie  servletCookie2 =  new    javax . servlet . http . Cookie  ( "contextCookie2" , "theValue" ) ;      javax . servlet . http . Cookie  [ ]  servletCookiesEmpty =  { } ;      javax . servlet . http . Cookie  [ ]  servletCookies =  { servletCookie1 , servletCookie2 } ;    when  (  httpServletRequest . getCookies  ( ) ) . thenReturn  ( servletCookiesEmpty ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertEquals  ( 0 ,   context . getCookies  ( ) . size  ( ) ) ;    when  (  httpServletRequest . getCookies  ( ) ) . thenReturn  ( servletCookies ) ;   assertEquals  ( 2 ,   context . getCookies  ( ) . size  ( ) ) ; }    @ Test public void testGetPathParameter  ( )  {   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   Map  < String , String >  parameterMap =  Maps . newHashMap  ( ) ;   parameterMap . put  ( "parameter" , "parameter" ) ;    when  (  route . getPathParametersEncoded  (  Matchers . anyString  ( ) ) ) . thenReturn  ( parameterMap ) ;   context . setRoute  ( route ) ;   assertEquals  ( null ,  context . getPathParameter  ( "parameter_not_set" ) ) ;   assertEquals  ( "parameter" ,  context . getPathParameter  ( "parameter" ) ) ; }    @ Test public void testGetPathParameterDecodingWorks  ( )  {   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   Map  < String , String >  parameterMap =  Maps . newHashMap  ( ) ;   parameterMap . put  ( "parameter" , "blue%2Fred%3Fand+green%E2%82%AC%2f" ) ;    when  (  route . getPathParametersEncoded  (  Matchers . anyString  ( ) ) ) . thenReturn  ( parameterMap ) ;   context . setRoute  ( route ) ;   assertEquals  ( "blue/red?and+greenâ‚¬/" ,  context . getPathParameter  ( "parameter" ) ) ; }    @ Test public void testGetPathParameterAsInteger  ( )  {   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   Map  < String , String >  parameterMap =  Maps . newHashMap  ( ) ;   parameterMap . put  ( "parameter" , "parameter" ) ;    when  (  route . getPathParametersEncoded  (  Matchers . anyString  ( ) ) ) . thenReturn  ( parameterMap ) ;   context . setRoute  ( route ) ;   assertEquals  ( null ,  context . getPathParameterAsInteger  ( "parameter" ) ) ;   parameterMap . put  ( "parameter" , "1" ) ;   assertEquals  (  new Integer  ( 1 ) ,  context . getPathParameterAsInteger  ( "parameter" ) ) ; }    @ Test public void testGetParameter  ( )  {   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;    when  (  httpServletRequest . getParameter  ( "key" ) ) . thenReturn  ( "value" ) ;   assertEquals  ( null ,  context . getParameter  ( "key_not_there" ) ) ;   assertEquals  ( "defaultValue" ,  context . getParameter  ( "key_not_there" , "defaultValue" ) ) ;   assertEquals  ( "value" ,  context . getParameter  ( "key" ) ) ; }    @ Test public void testGetParameterAsInteger  ( )  {   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;    when  (  httpServletRequest . getParameter  ( "key" ) ) . thenReturn  ( "1" ) ;   assertEquals  ( null ,  context . getParameterAsInteger  ( "key_not_there" ) ) ;   assertEquals  (  new Integer  ( 100 ) ,  context . getParameterAsInteger  ( "key_not_there" , 100 ) ) ;   assertEquals  (  new Integer  ( 1 ) ,  context . getParameterAsInteger  ( "key" ) ) ; }    @ Test public void testGetParameterAs  ( )  {   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;    when  (  httpServletRequest . getParameter  ( "key1" ) ) . thenReturn  ( "100" ) ;    when  (  httpServletRequest . getParameter  ( "key2" ) ) . thenReturn  ( "true" ) ;    when  (  httpServletRequest . getParameter  ( "key3" ) ) . thenReturn  ( "10.1" ) ;    when  (  httpServletRequest . getParameter  ( "key4" ) ) . thenReturn  ( "x" ) ;   assertEquals  ( null ,  context . getParameterAs  ( "key" ,  Long . class ) ) ;   assertEquals  (  new Integer  ( 100 ) ,  context . getParameterAs  ( "key1" ,  Integer . class ) ) ;   assertEquals  (  new Long  ( 100 ) ,  context . getParameterAs  ( "key1" ,  Long . class ) ) ;   assertEquals  (  Boolean . TRUE ,  context . getParameterAs  ( "key2" ,  Boolean . class ) ) ;   assertEquals  (  new Float  ( 10.1 ) ,  context . getParameterAs  ( "key3" ,  Float . class ) ) ;   assertEquals  (  new Character  ( 'x' ) ,  context . getParameterAs  ( "key4" ,  Character . class ) ) ; }    @ Test public void testContentTypeGetsConvertedProperlyUponFinalize  ( )  {   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;  Result  result =  Results . json  ( ) ;   context . finalizeHeaders  ( result ) ;    verify  ( httpServletResponse ) . setCharacterEncoding  (  result . getCharset  ( ) ) ;    verify  ( httpServletResponse ) . setContentType  (  result . getContentType  ( ) ) ; }    @ Test public void testContentTypeWithNullEncodingGetsConvertedProperlyUponFinalize  ( )  {   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;  Result  result =  Results . json  ( ) ;   result . charset  ( null ) ;   context . finalizeHeaders  ( result ) ;    verify  ( httpServletResponse ) . setCharacterEncoding  (  NinjaConstant . UTF_8 ) ; }    @ Test public void testGetRequestPathWorksAsExpectedWithContext  ( )  {    when  (  httpServletRequest . getContextPath  ( ) ) . thenReturn  ( "/my/funky/prefix" ) ;    when  (  httpServletRequest . getRequestURI  ( ) ) . thenReturn  ( "/my/funky/prefix/myapp/is/here" ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertEquals  ( "/myapp/is/here" ,  context . getRequestPath  ( ) ) ; }    @ Test public void testGetRequestPathWorksAsExpectedWithOutContext  ( )  {    when  (  httpServletRequest . getContextPath  ( ) ) . thenReturn  ( "" ) ;    when  (  httpServletRequest . getRequestURI  ( ) ) . thenReturn  ( "/index" ) ;    when  (  httpServletRequest . getRequestURI  ( ) ) . thenReturn  ( "/myapp/is/here" ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertEquals  ( "/myapp/is/here" ,  context . getRequestPath  ( ) ) ; }    @ Test public void testGetRequestContentType  ( )  {  String  contentType = "text/html" ;    when  (  httpServletRequest . getContentType  ( ) ) . thenReturn  ( contentType ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertEquals  ( contentType ,  context . getRequestContentType  ( ) ) ;   contentType = null ;    when  (  httpServletRequest . getContentType  ( ) ) . thenReturn  ( contentType ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertNull  (  context . getRequestContentType  ( ) ) ;   contentType = "text/html; charset=UTF-8" ;    when  (  httpServletRequest . getContentType  ( ) ) . thenReturn  ( contentType ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertEquals  ( contentType ,  context . getRequestContentType  ( ) ) ; }    @ Test public void testGetAcceptContentType  ( )  {    when  (  httpServletRequest . getHeader  ( "accept" ) ) . thenReturn  ( null ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertEquals  (  Result . TEXT_HTML ,  context . getAcceptContentType  ( ) ) ;    when  (  httpServletRequest . getHeader  ( "accept" ) ) . thenReturn  ( "" ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertEquals  (  Result . TEXT_HTML ,  context . getAcceptContentType  ( ) ) ;    when  (  httpServletRequest . getHeader  ( "accept" ) ) . thenReturn  ( "totally_unknown" ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertEquals  (  Result . TEXT_HTML ,  context . getAcceptContentType  ( ) ) ;    when  (  httpServletRequest . getHeader  ( "accept" ) ) . thenReturn  ( "application/json" ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertEquals  (  Result . APPLICATON_JSON ,  context . getAcceptContentType  ( ) ) ;    when  (  httpServletRequest . getHeader  ( "accept" ) ) . thenReturn  ( "text/html, application/json" ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertEquals  (  Result . TEXT_HTML ,  context . getAcceptContentType  ( ) ) ;    when  (  httpServletRequest . getHeader  ( "accept" ) ) . thenReturn  ( "application/xhtml, application/json" ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertEquals  (  Result . TEXT_HTML ,  context . getAcceptContentType  ( ) ) ;    when  (  httpServletRequest . getHeader  ( "accept" ) ) . thenReturn  ( "text/plain" ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertEquals  (  Result . TEXT_PLAIN ,  context . getAcceptContentType  ( ) ) ;    when  (  httpServletRequest . getHeader  ( "accept" ) ) . thenReturn  ( "text/plain, application/json" ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertEquals  (  Result . APPLICATON_JSON ,  context . getAcceptContentType  ( ) ) ; }    @ Test public void testGetAcceptEncoding  ( )  {  String  encoding = "compress, gzip" ;    when  (  httpServletRequest . getHeader  ( "accept-encoding" ) ) . thenReturn  ( encoding ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertEquals  ( encoding ,  context . getAcceptEncoding  ( ) ) ;   encoding = null ;    when  (  httpServletRequest . getHeader  ( "accept-encoding" ) ) . thenReturn  ( encoding ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertNull  (  context . getAcceptEncoding  ( ) ) ;   encoding = "gzip;q=1.0, identity; q=0.5, *;q=0" ;    when  (  httpServletRequest . getHeader  ( "accept-encoding" ) ) . thenReturn  ( encoding ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertEquals  ( encoding ,  context . getAcceptEncoding  ( ) ) ; }    @ Test public void testGetAcceptLanguage  ( )  {  String  language = "de" ;    when  (  httpServletRequest . getHeader  ( "accept-language" ) ) . thenReturn  ( language ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertEquals  ( language ,  context . getAcceptLanguage  ( ) ) ;   language = null ;    when  (  httpServletRequest . getHeader  ( "accept-language" ) ) . thenReturn  ( language ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertNull  (  context . getAcceptLanguage  ( ) ) ;   language = "da, en-gb;q=0.8, en;q=0.7" ;    when  (  httpServletRequest . getHeader  ( "accept-language" ) ) . thenReturn  ( language ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertEquals  ( language ,  context . getAcceptLanguage  ( ) ) ; }    @ Test public void testGetAcceptCharset  ( )  {  String  charset = "UTF-8" ;    when  (  httpServletRequest . getHeader  ( "accept-charset" ) ) . thenReturn  ( charset ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertEquals  ( charset ,  context . getAcceptCharset  ( ) ) ;   charset = null ;    when  (  httpServletRequest . getHeader  ( "accept-charset" ) ) . thenReturn  ( charset ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertNull  (  context . getAcceptCharset  ( ) ) ;   charset = "iso-8859-5, unicode-1-1;q=0.8" ;    when  (  httpServletRequest . getHeader  ( "accept-charset" ) ) . thenReturn  ( charset ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertEquals  ( charset ,  context . getAcceptCharset  ( ) ) ; }    @ Test public void testParseBodyJsonWorks  ( )  {    when  (  httpServletRequest . getContentType  ( ) ) . thenReturn  ( "application/json; charset=utf-8" ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;    when  (  bodyParserEngineManager . getBodyParserEngineForContentType  ( "application/json" ) ) . thenReturn  ( bodyParserEngine ) ;    when  (  bodyParserEngine . invoke  ( context ,  Dummy . class ) ) . thenReturn  (  new Dummy  ( ) ) ;  Object  o =  context . parseBody  (  Dummy . class ) ;    verify  ( bodyParserEngineManager ) . getBodyParserEngineForContentType  ( "application/json" ) ;   assertTrue  (  o instanceof Dummy ) ; }    @ Test public void testParseBodyPostWorks  ( )  {    when  (  httpServletRequest . getContentType  ( ) ) . thenReturn  (  ContentTypes . APPLICATION_POST_FORM ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;    when  (  bodyParserEngineManager . getBodyParserEngineForContentType  (  ContentTypes . APPLICATION_POST_FORM ) ) . thenReturn  ( bodyParserEngine ) ;  Dummy  dummy =  new Dummy  ( ) ;    dummy . name = "post" ;    dummy . count = 245L ;    when  (  bodyParserEngine . invoke  ( context ,  Dummy . class ) ) . thenReturn  ( dummy ) ;  Dummy  o =  context . parseBody  (  Dummy . class ) ;    verify  ( bodyParserEngineManager ) . getBodyParserEngineForContentType  (  ContentTypes . APPLICATION_POST_FORM ) ;   assertTrue  (  o instanceof Dummy ) ;   assertTrue  (   o . name . equals  (  dummy . name ) ) ;   assertTrue  (   o . count . equals  (  dummy . count ) ) ; }    @ Test public void testIsJsonWorks  ( )  {    when  (  httpServletRequest . getContentType  ( ) ) . thenReturn  (  ContentTypes . APPLICATION_JSON ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertTrue  (  context . isRequestJson  ( ) ) ; }    @ Test public void testIsXmlWorks  ( )  {    when  (  httpServletRequest . getContentType  ( ) ) . thenReturn  (  ContentTypes . APPLICATION_XML ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   assertTrue  (  context . isRequestXml  ( ) ) ; }    @ Test public void testParseBodyXmlWorks  ( )  {    when  (  httpServletRequest . getContentType  ( ) ) . thenReturn  ( "application/xml" ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;    when  (  bodyParserEngineManager . getBodyParserEngineForContentType  ( "application/xml" ) ) . thenReturn  ( bodyParserEngine ) ;    when  (  bodyParserEngine . invoke  ( context ,  Dummy . class ) ) . thenReturn  (  new Dummy  ( ) ) ;  Object  o =  context . parseBody  (  Dummy . class ) ;    verify  ( bodyParserEngineManager ) . getBodyParserEngineForContentType  ( "application/xml" ) ;   assertTrue  (  o instanceof Dummy ) ; }    @ Test public void testParseBodyWithUnkownContentTypeWorks  ( )  {    when  (  httpServletRequest . getContentType  ( ) ) . thenReturn  ( null ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;  Object  o =  context . parseBody  (  Dummy . class ) ;   assertNull  ( o ) ; }    @ Test public void testParseBodyWithUnknownRequestContentTypeWorks  ( )  {    when  (  httpServletRequest . getContentType  ( ) ) . thenReturn  ( "application/UNKNOWN" ) ;   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;  Object  o =  context . parseBody  (  Dummy . class ) ;   assertNull  ( o ) ; }  class Dummy  {   public String  name ;   public Long  count ; }    @ Test public void testInitEnforcingOfCorrectEncoding  ( )  throws Exception  {   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;    verify  ( httpServletRequest ) . setCharacterEncoding  (  NinjaConstant . UTF_8 ) ; }    @ Test public void testGetReaderEnforcingOfCorrectEncoding  ( )  throws Exception  {   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   context . getReader  ( ) ;    verify  ( httpServletRequest ) . setCharacterEncoding  (  anyString  ( ) ) ; }    @ Test public void testGetInputStreamEnforcingOfCorrectEncoding  ( )  throws Exception  {   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;   context . getInputStream  ( ) ;    verify  ( httpServletRequest ) . setCharacterEncoding  (  anyString  ( ) ) ; }    @ Test public void testGetServletContext  ( )  {   context . init  ( servletContext , httpServletRequest , httpServletResponse ) ;  Object  o =  context . getServletContext  ( ) ;   assertNotNull  ( o ) ;   assertEquals  ( servletContext , o ) ; }    @ Mock private NinjaProperties  ninjaProperties ;    @ Test public void testGetRemoteAddrReturnsDefaultRemoteAddr  ( )  {    when  (  httpServletRequest . getRemoteAddr  ( ) ) . thenReturn  ( "mockedRemoteAddr" ) ;    when  (  httpServletRequest . getHeader  (  Context . X_FORWARD_HEADER ) ) . thenReturn  ( "x-forwarded-for-mockedRemoteAddr" ) ;   context . init  ( httpServletRequest , httpServletResponse ) ;   assertEquals  ( "mockedRemoteAddr" ,  context . getRemoteAddr  ( ) ) ; }    @ Test public void testGetRemoteAddrParsesXForwardedForIfSetInApplicationConf  ( )  {    when  (  httpServletRequest . getRemoteAddr  ( ) ) . thenReturn  ( "mockedRemoteAddr" ) ;    when  (  httpServletRequest . getHeader  (  Context . X_FORWARD_HEADER ) ) . thenReturn  ( "192.168.1.44" ) ;    when  (  ninjaProperties . getBooleanWithDefault  (  Context . NINJA_PROPERTIES_X_FORWARDED_FOR , false ) ) . thenReturn  (  Boolean . TRUE ) ;   context . init  ( httpServletRequest , httpServletResponse ) ;   assertEquals  ( "192.168.1.44" ,  context . getRemoteAddr  ( ) ) ; }    @ Test public void testGetRemoteAddrParsesXForwardedForIfMoreThanOneHostPresent  ( )  {    when  (  httpServletRequest . getRemoteAddr  ( ) ) . thenReturn  ( "mockedRemoteAddr" ) ;    when  (  httpServletRequest . getHeader  (  Context . X_FORWARD_HEADER ) ) . thenReturn  ( "192.168.1.1, 192.168.1.2, 192.168.1.3" ) ;    when  (  ninjaProperties . getBooleanWithDefault  (  Context . NINJA_PROPERTIES_X_FORWARDED_FOR , false ) ) . thenReturn  (  Boolean . TRUE ) ;   context . init  ( httpServletRequest , httpServletResponse ) ;   assertEquals  ( "192.168.1.1" ,  context . getRemoteAddr  ( ) ) ; }    @ Test public void testGetRemoteAddrUsesFallbackIfXForwardedForIsNotValidInetAddr  ( )  {    when  (  httpServletRequest . getRemoteAddr  ( ) ) . thenReturn  ( "mockedRemoteAddr" ) ;    when  (  httpServletRequest . getHeader  (  Context . X_FORWARD_HEADER ) ) . thenReturn  ( "I_AM_NOT_A_VALID_ADDRESS" ) ;    when  (  ninjaProperties . getBooleanWithDefault  (  Context . NINJA_PROPERTIES_X_FORWARDED_FOR , false ) ) . thenReturn  (  Boolean . TRUE ) ;   context . init  ( httpServletRequest , httpServletResponse ) ;   assertEquals  ( "mockedRemoteAddr" ,  context . getRemoteAddr  ( ) ) ; } }