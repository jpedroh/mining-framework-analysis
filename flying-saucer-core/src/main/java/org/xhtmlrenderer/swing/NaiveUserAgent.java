  package   org . xhtmlrenderer . swing ;   import   java . awt . Image ;  import    java . awt . image . BufferedImage ;  import   java . io . ByteArrayOutputStream ;  import   java . io . File ;  import   java . io . FileNotFoundException ;  import   java . io . IOException ;  import   java . io . InputStream ;  import   java . net . MalformedURLException ;  import   java . net . URI ;  import   java . net . URISyntaxException ;  import   java . net . URL ;  import   java . util . Iterator ;  import   java . util . LinkedHashMap ;  import    java . util . logging . Level ;  import   javax . imageio . ImageIO ;  import    org . xhtmlrenderer . event . DocumentListener ;  import    org . xhtmlrenderer . extend . UserAgentCallback ;  import    org . xhtmlrenderer . resource . CSSResource ;  import    org . xhtmlrenderer . resource . ImageResource ;  import    org . xhtmlrenderer . resource . XMLResource ;  import    org . xhtmlrenderer . util . ImageUtil ;  import    org . xhtmlrenderer . util . XRLog ;  import   java . net . HttpURLConnection ;  import   java . net . URLConnection ;  import    org . xhtmlrenderer . util . FontUtil ;   public class NaiveUserAgent  implements  UserAgentCallback , DocumentListener  {   private static final  int  DEFAULT_IMAGE_CACHE_SIZE = 16 ;   protected LinkedHashMap  _imageCache ;   private  int  _imageCacheCapacity ;   private String  _baseURL ;   public NaiveUserAgent  ( )  {  this  ( DEFAULT_IMAGE_CACHE_SIZE ) ; }   public NaiveUserAgent  (   final  int imgCacheSize )  {    this . _imageCacheCapacity = imgCacheSize ;    this . _imageCache =  new   java . util . LinkedHashMap  ( _imageCacheCapacity , 0.75f , true ) ; }   public void shrinkImageCache  ( )  {   int  ovr =   _imageCache . size  ( ) - _imageCacheCapacity ;  Iterator  it =   _imageCache . keySet  ( ) . iterator  ( ) ;  while  (   it . hasNext  ( ) &&   ovr -- > 0 )  {   it . next  ( ) ;   it . remove  ( ) ; } }   public void clearImageCache  ( )  {   _imageCache . clear  ( ) ; }   protected InputStream resolveAndOpenStream  (   final String uri )  {    java . io . InputStream  is = null ;  String  resolvedUri =  resolveURI  ( uri ) ;  try  {  if  (  FontUtil . isEmbeddedBase64Font  ( uri ) )  {   is =  FontUtil . getEmbeddedBase64Data  ( uri ) ; } else  {   is =  openStream  ( resolvedUri ) ; } }  catch (     java . net . MalformedURLException e )  {   XRLog . exception  (  "bad URL given: " + resolvedUri , e ) ; }  catch (     java . io . FileNotFoundException e )  {   XRLog . exception  (   "item at URI " + resolvedUri + " not found" ) ; }  catch (     java . io . IOException e )  {   XRLog . exception  (  "IO problem for " + resolvedUri , e ) ; }  return is ; }   public CSSResource getCSSResource  (  String uri )  {  return  new CSSResource  (  resolveAndOpenStream  ( uri ) ) ; }   public ImageResource getImageResource  (  String uri )  {  ImageResource  ir ;  if  (  ImageUtil . isEmbeddedBase64Image  ( uri ) )  {  BufferedImage  image =  ImageUtil . loadEmbeddedBase64Image  ( uri ) ;   ir =  createImageResource  ( null , image ) ; } else  {   uri =  resolveURI  ( uri ) ;   ir =  ( ImageResource )  _imageCache . get  ( uri ) ;  if  (  ir == null )  {  InputStream  is =  resolveAndOpenStream  ( uri ) ;  if  (  is != null )  {  try  {  BufferedImage  img =  ImageIO . read  ( is ) ;  if  (  img == null )  {  throw  new IOException  ( "ImageIO.read() returned null" ) ; }   ir =  createImageResource  ( uri , img ) ;   _imageCache . put  ( uri , ir ) ; }  catch (   FileNotFoundException e )  {   XRLog . exception  (   "Can't read image file; image at URI '" + uri + "' not found" ) ; }  catch (   IOException e )  {   XRLog . exception  (   "Can't read image file; unexpected problem for URI '" + uri + "'" , e ) ; }  finally  {  try  {   is . close  ( ) ; }  catch (   IOException e )  { } } } }  if  (  ir == null )  {   ir =  createImageResource  ( uri , null ) ; } }  return ir ; }   protected ImageResource createImageResource  (  String uri ,  Image img )  {  return  new ImageResource  ( uri ,  AWTFSImage . createImage  ( img ) ) ; }   public XMLResource getXMLResource  (  String uri )  {  InputStream  inputStream =  resolveAndOpenStream  ( uri ) ;  XMLResource  xmlResource ;  try  {   xmlResource =  XMLResource . load  ( inputStream ) ; }  finally  {  if  (  inputStream != null )  {  try  {   inputStream . close  ( ) ; }  catch (   IOException e )  { } } }  return xmlResource ; }   public   byte  [ ] getBinaryResource  (  String uri )  {  InputStream  is =  resolveAndOpenStream  ( uri ) ;  if  (  is == null )  return null ;  try  {  ByteArrayOutputStream  result =  new ByteArrayOutputStream  ( ) ;    byte  [ ]  buf =  new  byte  [ 10240 ] ;   int  i ;  while  (   (  i =  is . read  ( buf ) ) !=  - 1 )  {   result . write  ( buf , 0 , i ) ; }   is . close  ( ) ;   is = null ;  return  result . toByteArray  ( ) ; }  catch (   IOException e )  {  return null ; }  finally  {  if  (  is != null )  {  try  {   is . close  ( ) ; }  catch (   IOException e )  { } } } }   public boolean isVisited  (  String uri )  {  return false ; }   public void setBaseURL  (  String url )  {   _baseURL = url ; }   public String resolveURI  (  String uri )  {  if  (  uri == null )  return null ;  if  (  _baseURL == null )  {  try  {  URI  result =  new URI  ( uri ) ;  if  (  result . isAbsolute  ( ) )   setBaseURL  (  result . toString  ( ) ) ; }  catch (   URISyntaxException e )  {   XRLog . exception  (  "The default NaiveUserAgent could not use the URL as base url: " + uri , e ) ; }  if  (  _baseURL == null )  {  try  {   setBaseURL  (     new File  ( "." ) . toURI  ( ) . toURL  ( ) . toExternalForm  ( ) ) ; }  catch (   Exception e1 )  {   XRLog . exception  (  "The default NaiveUserAgent doesn't know how to resolve the base URL for " + uri ) ;  return null ; } } }  Throwable  t ;  try  {  URI  result =  new URI  ( uri ) ;  if  (  result . isAbsolute  ( ) )  {  return  result . toString  ( ) ; }   XRLog . load  (   uri + " is not a URL; may be relative. Testing using parent URL " + _baseURL ) ;  URI  baseURI =  new URI  ( _baseURL ) ;  if  (  !  baseURI . isOpaque  ( ) )  { 
<<<<<<<
  XRLog . load  (  Level . FINE ,   uri + " is not a URL; may be relative. Testing using parent URL " + _baseURL ) ;
=======
 return   baseURI . resolve  ( result ) . toString  ( ) ;
>>>>>>>
 }  try  {  return   new URL  (  new URL  ( _baseURL ) , uri ) . toExternalForm  ( ) ; }  catch (   MalformedURLException ex )  {   t = ex ; } }  catch (   URISyntaxException e )  {   t = e ; }   XRLog . exception  (    "The default NaiveUserAgent cannot resolve the URL " + uri + " with base URL " + _baseURL , t ) ;  return null ; }   public String getBaseURL  ( )  {  return _baseURL ; }   public void documentStarted  ( )  {   shrinkImageCache  ( ) ; }   public void documentLoaded  ( )  { }   public void onLayoutException  (  Throwable t )  { }   public void onRenderException  (  Throwable t )  { }   protected InputStream openStream  (  String uri )  throws MalformedURLException , IOException  {  return   openConnection  ( uri ) . getInputStream  ( ) ; }   protected URLConnection openConnection  (  String uri )  throws IOException  {  URLConnection  connection =   new URL  ( uri ) . openConnection  ( ) ;  if  (  connection instanceof HttpURLConnection )  {   connection =  onHttpConnection  (  ( HttpURLConnection ) connection ) ; }  return connection ; }   protected URLConnection onHttpConnection  (  HttpURLConnection origin )  throws MalformedURLException , IOException  {  URLConnection  connection = origin ;   int  status =  origin . getResponseCode  ( ) ;  if  (  needsRedirect  ( status ) )  {  String  newUrl =  origin . getHeaderField  ( "Location" ) ;  if  (  origin . getInstanceFollowRedirects  ( ) )  {   XRLog . load  (  "Connection is redirected to: " + newUrl ) ;   connection =   new URL  ( newUrl ) . openConnection  ( ) ; } else  {   XRLog . load  (  "Redirect is required but not allowed to: " + newUrl ) ; } }  return connection ; }   protected final boolean needsRedirect  (   int status )  {  return   status !=  HttpURLConnection . HTTP_OK &&  (    status ==  HttpURLConnection . HTTP_MOVED_TEMP ||  status ==  HttpURLConnection . HTTP_MOVED_PERM ||  status ==  HttpURLConnection . HTTP_SEE_OTHER ) ; } }